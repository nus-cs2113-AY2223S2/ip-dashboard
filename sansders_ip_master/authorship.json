[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"# duke.Duke project template","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sansders":2,"-":22}},{"path":"src/main/java/duke/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package duke;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"import error.*;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"import task.Deadline;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"import task.Event;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"import task.Task;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"import task.Todo;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"/*","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":" * This class contains the methods responsible for managing","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":" * the different types of inputs to Duke","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":" *","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":" **/","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":"public class CommandParser {","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":20,"author":{"gitId":"sansders"},"content":"    public ArrayList\u003cTask\u003e manageInput(String userInput, String command, ArrayList\u003cTask\u003e tasks)","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"sansders"},"content":"            throws DukeIllegalCharacterException, DukeTaskDoesNotExistException,","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"sansders"},"content":"            DukeAlreadyMarkedException, DukeIllegalSyntaxException,","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"sansders"},"content":"            DukeIllegalCommandException, IOException {","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"sansders"},"content":"        PrintOperations.horizontalLine();","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"sansders"},"content":"        if (userInput.contains(\"|\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"sansders"},"content":"            throw new DukeIllegalCharacterException();","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"sansders"},"content":"        String[] splitInput \u003d userInput.split(\"\\\\s+\");","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"sansders"},"content":"        String firstWordOfUserInput \u003d splitInput[0];","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"sansders"},"content":"        switch (firstWordOfUserInput) {","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"sansders"},"content":"        case \"list\":","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"sansders"},"content":"            PrintOperations.list(tasks);","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"sansders"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"sansders"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"sansders"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"sansders"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"sansders"},"content":"            handleMarkAndDelete(userInput, command, tasks);","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"sansders"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"sansders"},"content":"        default:","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"sansders"},"content":"            addNewTask(userInput, command, tasks);","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"sansders"},"content":"        // Save task ArrayList information into tasks.txt","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"sansders"},"content":"        FileOperations.saveArrayListToFile(tasks);","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"sansders"},"content":"        return tasks;","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"sansders"},"content":"    private void handleMarkAndDelete(String userInput, String command, ArrayList\u003cTask\u003e tasks)","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"sansders"},"content":"            throws DukeTaskDoesNotExistException, DukeAlreadyMarkedException {","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"sansders"},"content":"        int taskIndex \u003d Integer.parseInt(userInput.substring(userInput.length() - 1)) - 1;","lastModifiedDate":"2023-02-18"},{"lineNumber":57,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"sansders"},"content":"        // If task index does not exist, throw exception","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"sansders"},"content":"        if ((taskIndex + 1) \u003e tasks.size() || taskIndex \u003c 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"sansders"},"content":"            throw new DukeTaskDoesNotExistException();","lastModifiedDate":"2023-02-18"},{"lineNumber":61,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":62,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":63,"author":{"gitId":"sansders"},"content":"        // Mark as done","lastModifiedDate":"2023-02-18"},{"lineNumber":64,"author":{"gitId":"sansders"},"content":"        switch (command) {","lastModifiedDate":"2023-02-18"},{"lineNumber":65,"author":{"gitId":"sansders"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-18"},{"lineNumber":66,"author":{"gitId":"sansders"},"content":"            tasks.get(taskIndex).markAsDone();","lastModifiedDate":"2023-02-18"},{"lineNumber":67,"author":{"gitId":"sansders"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":68,"author":{"gitId":"sansders"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-18"},{"lineNumber":69,"author":{"gitId":"sansders"},"content":"            tasks.get(taskIndex).markAsNotDone();","lastModifiedDate":"2023-02-18"},{"lineNumber":70,"author":{"gitId":"sansders"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":71,"author":{"gitId":"sansders"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-18"},{"lineNumber":72,"author":{"gitId":"sansders"},"content":"            PrintOperations.taskRemoved(taskIndex, tasks);","lastModifiedDate":"2023-02-18"},{"lineNumber":73,"author":{"gitId":"sansders"},"content":"            tasks.remove(taskIndex);","lastModifiedDate":"2023-02-18"},{"lineNumber":74,"author":{"gitId":"sansders"},"content":"            PrintOperations.numberOfTasks(tasks);","lastModifiedDate":"2023-02-18"},{"lineNumber":75,"author":{"gitId":"sansders"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":76,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":77,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":78,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":79,"author":{"gitId":"sansders"},"content":"    private void addNewTask(String userInput, String command, ArrayList\u003cTask\u003e tasks)","lastModifiedDate":"2023-02-18"},{"lineNumber":80,"author":{"gitId":"sansders"},"content":"            throws DukeIllegalSyntaxException, DukeIllegalCommandException {","lastModifiedDate":"2023-02-18"},{"lineNumber":81,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":82,"author":{"gitId":"sansders"},"content":"        Task newTask;","lastModifiedDate":"2023-02-18"},{"lineNumber":83,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":84,"author":{"gitId":"sansders"},"content":"        // Depending on the type of command, the input gets parsed into the different handlers","lastModifiedDate":"2023-02-18"},{"lineNumber":85,"author":{"gitId":"sansders"},"content":"        switch (command) {","lastModifiedDate":"2023-02-18"},{"lineNumber":86,"author":{"gitId":"sansders"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-18"},{"lineNumber":87,"author":{"gitId":"sansders"},"content":"            String[] deadlineArgs \u003d Deadline.handler(userInput);","lastModifiedDate":"2023-02-18"},{"lineNumber":88,"author":{"gitId":"sansders"},"content":"            newTask \u003d new Deadline(deadlineArgs[0], deadlineArgs[1]);","lastModifiedDate":"2023-02-18"},{"lineNumber":89,"author":{"gitId":"sansders"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":90,"author":{"gitId":"sansders"},"content":"        case \"event\":","lastModifiedDate":"2023-02-18"},{"lineNumber":91,"author":{"gitId":"sansders"},"content":"            String[] eventArgs \u003d Event.handler(userInput);","lastModifiedDate":"2023-02-18"},{"lineNumber":92,"author":{"gitId":"sansders"},"content":"            newTask \u003d new Event(eventArgs[0], eventArgs[1], eventArgs[2]);","lastModifiedDate":"2023-02-18"},{"lineNumber":93,"author":{"gitId":"sansders"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":94,"author":{"gitId":"sansders"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-18"},{"lineNumber":95,"author":{"gitId":"sansders"},"content":"            String todoCommand \u003d Todo.handler(userInput);","lastModifiedDate":"2023-02-18"},{"lineNumber":96,"author":{"gitId":"sansders"},"content":"            newTask \u003d new Todo(todoCommand);","lastModifiedDate":"2023-02-18"},{"lineNumber":97,"author":{"gitId":"sansders"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":98,"author":{"gitId":"sansders"},"content":"        default:","lastModifiedDate":"2023-02-18"},{"lineNumber":99,"author":{"gitId":"sansders"},"content":"            throw new DukeIllegalCommandException();","lastModifiedDate":"2023-02-18"},{"lineNumber":100,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":101,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":102,"author":{"gitId":"sansders"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-02-18"},{"lineNumber":103,"author":{"gitId":"sansders"},"content":"        PrintOperations.addTask(newTask);","lastModifiedDate":"2023-02-18"},{"lineNumber":104,"author":{"gitId":"sansders"},"content":"        PrintOperations.numberOfTasks(tasks);","lastModifiedDate":"2023-02-18"},{"lineNumber":105,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":106,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":107,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"sansders":107}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"import task.Task;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"import error.DukeAlreadyMarkedException;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"import error.DukeIllegalCommandException;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"import error.DukeIllegalSyntaxException;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"import error.DukeTaskDoesNotExistException;","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"import error.DukeIllegalCharacterException;","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d FileOperations.loadArrayListFromFile();","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"    private static Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"sansders"},"content":"    private static void runProgram() {","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"sansders"},"content":"        String userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"sansders"},"content":"        // Loop for next tasks to add","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"sansders"},"content":"        while (!userInput.equals(\"bye\")) {","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"sansders"},"content":"            try {","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"sansders"},"content":"                CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"sansders"},"content":"                commandParser.manageInput(userInput, userInput.split(\" \")[0], tasks);","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"sansders"},"content":"            // This runs when the user enters an invalid command","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"sansders"},"content":"            catch (DukeIllegalCommandException exception) {","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"sansders"},"content":"                PrintOperations.illegalCommand();","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"sansders"},"content":"            // This runs when a user enters the wrong syntax for a command","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"sansders"},"content":"            catch (DukeIllegalSyntaxException exception) {","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"sansders"},"content":"                PrintOperations.illegalSyntax();","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"sansders"},"content":"            // This runs when a user tries to mark or unmark a task that already has that marking","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"sansders"},"content":"            catch (DukeAlreadyMarkedException exception) {","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"sansders"},"content":"                PrintOperations.alreadyMarked();","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"sansders"},"content":"            // This runs when a user tries to delete a non-existent task index number","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"sansders"},"content":"            catch (DukeTaskDoesNotExistException exception) {","lastModifiedDate":"2023-02-10"},{"lineNumber":49,"author":{"gitId":"sansders"},"content":"                PrintOperations.doesNotExist();","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"sansders"},"content":"            // This runs when a user enters `|` in their input","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"sansders"},"content":"            catch (DukeIllegalCharacterException exception) {","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"sansders"},"content":"                PrintOperations.illegalCharacter();","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"sansders"},"content":"            // This runs when there is an unexpected error with file reading/writing","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"sansders"},"content":"            catch (IOException exception) {","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"sansders"},"content":"                PrintOperations.io();","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":62,"author":{"gitId":"sansders"},"content":"            // Enter the next input and continue the loop","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"sansders"},"content":"            finally {","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"sansders"},"content":"                PrintOperations.horizontalLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"sansders"},"content":"                userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-02-10"},{"lineNumber":66,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"sansders"},"content":"    private static void exit() {","lastModifiedDate":"2023-02-18"},{"lineNumber":72,"author":{"gitId":"sansders"},"content":"        PrintOperations.bye();","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"sansders"},"content":"        System.exit(0);","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"sansders"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"sansders"},"content":"        // Start the program with a lovely greeting","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"sansders"},"content":"        PrintOperations.greet();","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"sansders"},"content":"        // Run the program","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"sansders"},"content":"        runProgram();","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"sansders"},"content":"        // Exit the program","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"sansders"},"content":"        exit();","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"sansders":87,"-":2}},{"path":"src/main/java/duke/FileOperations.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package duke;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"import task.Deadline;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"import task.Event;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"import task.Task;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"import task.Todo;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"import java.io.File;","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"/*","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":" * This class contains the methods responsible for reading from","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":" * and saving information about the tasks","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"sansders"},"content":" * Each element in the ArrayList will be saved as a line in a txt file","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"sansders"},"content":" *","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"sansders"},"content":" * Examples of lines in the txt file are as follows:","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"sansders"},"content":" * T|1|read book","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"sansders"},"content":" * D|0|return book|June 6th","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"sansders"},"content":" * E|0|project meeting|Aug 6th 2pm|4pm","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"sansders"},"content":" *","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"sansders"},"content":" **/","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"sansders"},"content":"public class FileOperations {","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"sansders"},"content":"    private static final String FILE_PATH \u003d \"./tasks.txt\";","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"sansders"},"content":"    protected static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"sansders"},"content":"    // Loads the information required for the ArrayList from the file","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"sansders"},"content":"    public static ArrayList\u003cTask\u003e loadArrayListFromFile() {","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"sansders"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"sansders"},"content":"            File inputFile \u003d new File(FILE_PATH);","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"sansders"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(inputFile));","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"sansders"},"content":"            String entry;","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"sansders"},"content":"            System.out.println(\"Save file found.\\nLoading save file...\");","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"sansders"},"content":"            while ((entry \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"sansders"},"content":"                tasks.add(extractTaskFromString(entry));","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"sansders"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"sansders"},"content":"            System.out.println(\"Save file does not exist.\\nCreating new save file...\");","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"sansders"},"content":"        return tasks;","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"sansders"},"content":"    // Saves the information from the ArrayList to the file","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"sansders"},"content":"    public static void saveArrayListToFile(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"sansders"},"content":"        FileWriter fileWriter \u003d new FileWriter(FILE_PATH, false);","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"sansders"},"content":"        fileWriter.write(formatArrayList(tasks));","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"sansders"},"content":"        fileWriter.close();","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"sansders"},"content":"    // Formats the ArrayList into the desired format in the txt file","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"sansders"},"content":"    protected static String formatArrayList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"sansders"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"sansders"},"content":"        for (Task t : tasks) {","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"sansders"},"content":"            if (t instanceof Todo) {","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"sansders"},"content":"                output.append(t.getTaskType() + \"|\" + (t.isDone() ? 1 : 0) + \"|\" + t.getDescription()","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"sansders"},"content":"                        + System.lineSeparator());","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"sansders"},"content":"            } else if (t instanceof Deadline) {","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"sansders"},"content":"                output.append(t.getTaskType() + \"|\" + (t.isDone() ? 1 : 0) + \"|\" + t.getDescription() + \"|\"","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"sansders"},"content":"                        + ((Deadline) t).getBy() + System.lineSeparator());","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"sansders"},"content":"            } else {","lastModifiedDate":"2023-02-11"},{"lineNumber":76,"author":{"gitId":"sansders"},"content":"                output.append(t.getTaskType() + \"|\" + (t.isDone() ? 1 : 0) + \"|\" + t.getDescription() + \"|\"","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"sansders"},"content":"                        + ((Event) t).getFrom() + \"|\" + ((Event) t).getTo() + System.lineSeparator());","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"sansders"},"content":"        return output.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":81,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"sansders"},"content":"    protected static Task extractTaskFromString(String entry) {","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"sansders"},"content":"        Task task;","lastModifiedDate":"2023-02-11"},{"lineNumber":86,"author":{"gitId":"sansders"},"content":"        String[] stringArrayOfEntry \u003d entry.split(\"\\\\|\");","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"sansders"},"content":"        // Check type of Task and create new Task based on the type","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"sansders"},"content":"        if (entry.startsWith(\"T\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"sansders"},"content":"            task \u003d new Todo(stringArrayOfEntry[2]);","lastModifiedDate":"2023-02-11"},{"lineNumber":91,"author":{"gitId":"sansders"},"content":"        } else if (entry.startsWith(\"D\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"sansders"},"content":"            task \u003d new Deadline(stringArrayOfEntry[2], stringArrayOfEntry[3]);","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"sansders"},"content":"        } else {","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"sansders"},"content":"            task \u003d new Event(stringArrayOfEntry[2], stringArrayOfEntry[3], stringArrayOfEntry[4]);","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":96,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"sansders"},"content":"        // Set done status of the Task","lastModifiedDate":"2023-02-11"},{"lineNumber":98,"author":{"gitId":"sansders"},"content":"        task.setDone(stringArrayOfEntry[1].equals(\"1\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":99,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":100,"author":{"gitId":"sansders"},"content":"        return task;","lastModifiedDate":"2023-02-11"},{"lineNumber":101,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":103,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"sansders":103}},{"path":"src/main/java/duke/PrintOperations.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package duke;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"import task.Task;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"/*","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":" * This class contains the methods responsible for printing all","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":" * the outputs of Duke.","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":" *","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":" **/","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"public class PrintOperations {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"    static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"    public static void horizontalLine() {","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"sansders"},"content":"    public static void greet() {","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"sansders"},"content":"        horizontalLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"sansders"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"sansders"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"sansders"},"content":"        horizontalLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"sansders"},"content":"    public static void bye() {","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"sansders"},"content":"        horizontalLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"sansders"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"sansders"},"content":"        horizontalLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"sansders"},"content":"    public static void addTask(Task task) {","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"sansders"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \\n\" + task);","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"sansders"},"content":"    public static void list(ArrayList\u003cTask\u003e listOfInputs) {","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"sansders"},"content":"        int counter \u003d 0;","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"sansders"},"content":"        if (listOfInputs.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"sansders"},"content":"            System.out.println(\"List empty!\");","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"sansders"},"content":"            return;","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"sansders"},"content":"        for (Task inputs : listOfInputs) {","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"sansders"},"content":"            System.out.println(counter + 1 + \".\" + inputs.toString());","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"sansders"},"content":"            counter++;","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"sansders"},"content":"    public static void numberOfTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"sansders"},"content":"        if (tasks.size() \u003d\u003d 1) {","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"sansders"},"content":"            System.out.println(\"Now you have 1 task in the list.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"sansders"},"content":"        } else {","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"sansders"},"content":"            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"sansders"},"content":"    public static void taskRemoved(int taskIndex, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"sansders"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"sansders"},"content":"        System.out.println(taskIndex + 1 + \".\" + tasks.get(taskIndex).toString());","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"sansders"},"content":"    public static void illegalCommand() {","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"sansders"},"content":"        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"sansders"},"content":"    public static void alreadyMarked() {","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"sansders"},"content":"        System.out.println(\"☹ OOPS!!! This task already has this marking :-(\");","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"sansders"},"content":"    public static void illegalCharacter() {","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"sansders"},"content":"        System.out.println(\"☹ OOPS!!! Please do not have \u0027|\u0027 in your input :-(\");","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":76,"author":{"gitId":"sansders"},"content":"    public static void illegalSyntax() {","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"sansders"},"content":"        System.out.println(\"☹ OOPS!!! I\u0027m sorry, You entered an incorrect syntax :-(\");","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"sansders"},"content":"    public static void doesNotExist() {","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"sansders"},"content":"        System.out.println(\"☹ OOPS!!! This task does not exist :-(\");","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"sansders"},"content":"    public static void io() {","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"sansders"},"content":"        System.out.println(\"☹ OOPS!!! Read/write file error :-(\");","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"sansders":87}},{"path":"src/main/java/error/DukeAlreadyMarkedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package error;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"public class DukeAlreadyMarkedException extends Exception{","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"sansders":4}},{"path":"src/main/java/error/DukeIllegalCharacterException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package error;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"/*","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":" * This exception is thrown if a user enters `|` in their input","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":" **/","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"public class DukeIllegalCharacterException extends Exception {","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"sansders":7}},{"path":"src/main/java/error/DukeIllegalCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package error;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"/*","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"* This exception is thrown if a user enters an illegal command","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"**/","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"public class DukeIllegalCommandException extends Exception {","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"sansders":8}},{"path":"src/main/java/error/DukeIllegalSyntaxException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package error;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"/*","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":" * This runs when a user tries to mark or unmark a task that already has that marking","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":" **/","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"public class DukeIllegalSyntaxException extends Exception{","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"sansders":8}},{"path":"src/main/java/error/DukeTaskDoesNotExistException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package error;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"/*","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":" * This runs when a user tries delete a non-existent Task index number","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":" **/","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"public class DukeTaskDoesNotExistException extends Exception {","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"sansders":7}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"import error.DukeIllegalSyntaxException;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"    private String by;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"        super(description, \u0027D\u0027);","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"    public String getBy() {","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":"        return by;","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"    // Returns a String array containing {taskName, deadline}","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"sansders"},"content":"    public static String[] handler(String userInput) throws DukeIllegalSyntaxException {","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"sansders"},"content":"        // Format of userInput: \u003ccommand\u003e \u003ctaskName\u003e /by \u003cdeadline\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"sansders"},"content":"        int numberOfWords \u003d userInput.split(\" \").length - 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"sansders"},"content":"        int endOfTaskNameIndex \u003d 0;","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"sansders"},"content":"        String[] userInputArray \u003d new String[numberOfWords];","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"sansders"},"content":"        String[] outputArray \u003d {\"\", \"\"};","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"sansders"},"content":"        userInput \u003d userInput.replaceFirst(\"deadline \", \"\");","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"sansders"},"content":"        // Checks if userInput contains \"\\by\"","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"sansders"},"content":"        if (!userInput.contains(\"/by\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"sansders"},"content":"            throw new DukeIllegalSyntaxException();","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"sansders"},"content":"        // Get index of \"/by\"","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"sansders"},"content":"        userInputArray \u003d userInput.split(\" \");","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"sansders"},"content":"        for (int i \u003d 0; i \u003c numberOfWords; i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"sansders"},"content":"            if (userInputArray[i].equals(\"/by\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"sansders"},"content":"                endOfTaskNameIndex \u003d i;","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"sansders"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"sansders"},"content":"        // Add the taskName into index 0 of outputArray","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"sansders"},"content":"        for (int i \u003d 0; i \u003c endOfTaskNameIndex; i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"sansders"},"content":"            outputArray[0] +\u003d userInputArray[i] + \" \";","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"sansders"},"content":"        outputArray[0] \u003d outputArray[0].trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"sansders"},"content":"        // Add the deadline into index 1 of outputArray","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"sansders"},"content":"        for (int i \u003d endOfTaskNameIndex + 1; i \u003c numberOfWords; i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"sansders"},"content":"            outputArray[1] +\u003d userInputArray[i] + \" \";","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"sansders"},"content":"        outputArray[1] \u003d outputArray[1].trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"sansders"},"content":"        // Return {taskName, deadline}","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"sansders"},"content":"        return outputArray;","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"sansders"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"sansders"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"sansders"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"sansders":65}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"import error.DukeIllegalSyntaxException;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"    private String from;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"    private String to;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"        super(description, \u0027E\u0027);","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"    public String getFrom() {","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":"        return from;","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"sansders"},"content":"    public String getTo() {","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"sansders"},"content":"        return to;","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"sansders"},"content":"    // Returns a String array containing {taskName, from, to}","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"sansders"},"content":"    public static String[] handler(String userInput) throws DukeIllegalSyntaxException {","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"sansders"},"content":"        // Format of userInput: \u003ccommand\u003e \u003ctaskName\u003e /from \u003cfrom\u003e /to \u003cto\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"sansders"},"content":"        int numberOfWords \u003d userInput.split(\" \").length - 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"sansders"},"content":"        int fromIndex \u003d 0;","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"sansders"},"content":"        int toIndex \u003d 0;","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"sansders"},"content":"        String[] userInputArray;","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"sansders"},"content":"        String[] outputArray \u003d {\"\", \"\", \"\"};","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"sansders"},"content":"        boolean isFromPassed \u003d false;","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"sansders"},"content":"        boolean isToPassed \u003d false;","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"sansders"},"content":"        // Checks if userInput contains \"\\from\" and \"\\to\"","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"sansders"},"content":"        if (!userInput.contains(\"/from\") || !userInput.contains(\"/to\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"sansders"},"content":"            throw new DukeIllegalSyntaxException();","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"sansders"},"content":"        // Remove `event` from","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"sansders"},"content":"        userInput \u003d userInput.replaceFirst(\"event \", \"\");","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"sansders"},"content":"        userInputArray \u003d userInput.split(\" \");","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"sansders"},"content":"        // Get indexes of `/from` and `/to` in userInput","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"sansders"},"content":"        for (int i \u003d 0; i \u003c numberOfWords; i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"sansders"},"content":"            if (userInputArray[i].equals(\"/from\") \u0026\u0026 !isFromPassed) {","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"sansders"},"content":"                fromIndex \u003d i;","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"sansders"},"content":"                isFromPassed \u003d true;","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"sansders"},"content":"            if (userInputArray[i].equals(\"/to\") \u0026\u0026 !isToPassed) {","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"sansders"},"content":"                toIndex \u003d i;","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"sansders"},"content":"                isToPassed \u003d true;","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"sansders"},"content":"        // Add the taskName into index 0 of outputArray","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"sansders"},"content":"        for (int i \u003d 0; i \u003c fromIndex; i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"sansders"},"content":"            outputArray[0] +\u003d userInputArray[i] + \" \";","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"sansders"},"content":"        outputArray[0] \u003d outputArray[0].trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"sansders"},"content":"        // Add the `from` field into index 1 of outputArray","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"sansders"},"content":"        for (int i \u003d fromIndex + 1; i \u003c toIndex; i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"sansders"},"content":"            outputArray[1] +\u003d userInputArray[i] + \" \";","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"sansders"},"content":"        outputArray[1] \u003d outputArray[1].trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"sansders"},"content":"        // Add the `to` field into index 2 of outputArray","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"sansders"},"content":"        for (int i \u003d toIndex + 1; i \u003c numberOfWords; i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"sansders"},"content":"            outputArray[2] +\u003d userInputArray[i] + \" \";","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"sansders"},"content":"        outputArray[2] \u003d outputArray[2].trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"sansders"},"content":"        return outputArray;","lastModifiedDate":"2023-02-15"},{"lineNumber":76,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"sansders"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"sansders"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"sansders"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"sansders":83}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"import error.DukeAlreadyMarkedException;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"public class Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"    private String description;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"    private boolean isDone;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"    private char taskType;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"    public Task(String description, char taskType) {","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":"        return this.description;","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"sansders"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"sansders"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"sansders"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"sansders"},"content":"        return isDone;","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"sansders"},"content":"    public char getTaskType() {","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"sansders"},"content":"        return taskType;","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"sansders"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"sansders"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"sansders"},"content":"    public void markAsDone() throws DukeAlreadyMarkedException {","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"sansders"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"sansders"},"content":"            throw new DukeAlreadyMarkedException();","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"sansders"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"sansders"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"sansders"},"content":"        System.out.println(this);","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"sansders"},"content":"    public void markAsNotDone() throws DukeAlreadyMarkedException {","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"sansders"},"content":"        if (!this.isDone) {","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"sansders"},"content":"            throw new DukeAlreadyMarkedException();","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"sansders"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"sansders"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"sansders"},"content":"        System.out.println(this);","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"sansders"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"sansders"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"sansders":57}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"        super(description, \u0027T\u0027);","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"    // Returns a String containing taskName","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"    public static String handler(String userInput) {","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"        // Format of userInput: \u003ccommand\u003e \u003ctask_name\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"        String taskName \u003d userInput.replaceFirst(\"todo \", \"\");","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"        return taskName;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"sansders"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"sansders":22}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sansders":1,"-":20}}]
