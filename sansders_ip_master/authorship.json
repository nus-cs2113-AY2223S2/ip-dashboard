[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"# duke.Duke project template","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sansders":2,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"import task.Task;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"import task.Deadline;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"import task.Event;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"import task.Todo;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"import error.DukeAlreadyMarkedException;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"import error.DukeIllegalCommandException;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"import error.DukeIllegalSyntaxException;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":"    static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":"    public static void greet() {","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"sansders"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"sansders"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"sansders"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"sansders"},"content":"    public static void runProgram() {","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"sansders"},"content":"        // Variables needed","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"sansders"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"sansders"},"content":"        String userInput;","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"sansders"},"content":"        String command;","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"sansders"},"content":"        Task[] tasks \u003d new Task[100];","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"sansders"},"content":"        int inputCounter \u003d 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"sansders"},"content":"        // Get first task","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"sansders"},"content":"        userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"sansders"},"content":"        command \u003d userInput.split(\" \")[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"sansders"},"content":"        // Loop for next tasks to add","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"sansders"},"content":"        while (!userInput.equals(\"bye\")) {","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"sansders"},"content":"            try {","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"sansders"},"content":"                System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"sansders"},"content":"                // Print list upon user request","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"sansders"},"content":"                if (userInput.equals(\"list\")) {","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"sansders"},"content":"                    printList(tasks, inputCounter);","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"sansders"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"sansders"},"content":"                // Mark as done","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"sansders"},"content":"                else if (userInput.startsWith(\"mark\")) {","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"sansders"},"content":"                    int taskIndex \u003d Integer.parseInt(userInput.substring(userInput.length() - 1));","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"sansders"},"content":"                    tasks[taskIndex - 1].markAsDone();","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"sansders"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"sansders"},"content":"                // Mark as undone","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"sansders"},"content":"                else if (userInput.startsWith(\"unmark\")) {","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"sansders"},"content":"                    int taskIndex \u003d Integer.parseInt(userInput.substring(userInput.length() - 1));","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"sansders"},"content":"                    tasks[taskIndex - 1].markAsNotDone();","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"sansders"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"sansders"},"content":"                // Add other tasks into list","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"sansders"},"content":"                else {","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"sansders"},"content":"                    Task newTask;","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"sansders"},"content":"                    // Depending on the type of command, the input gets parsed into the different handlers","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"sansders"},"content":"                    switch (command) {","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"sansders"},"content":"                    case \"deadline\":","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"sansders"},"content":"                        String[] deadlineArgs \u003d deadlineHandler(userInput);","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"sansders"},"content":"                        newTask \u003d new Deadline(deadlineArgs[0], deadlineArgs[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"sansders"},"content":"                        break;","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"sansders"},"content":"                    case \"event\":","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"sansders"},"content":"                        String[] eventArgs \u003d eventHandler(userInput);","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"sansders"},"content":"                        newTask \u003d new Event(eventArgs[0], eventArgs[1], eventArgs[2]);","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"sansders"},"content":"                        break;","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"sansders"},"content":"                    case \"todo\":","lastModifiedDate":"2023-02-05"},{"lineNumber":78,"author":{"gitId":"sansders"},"content":"                        String todoCommand \u003d todoHandler(userInput);","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"sansders"},"content":"                        newTask \u003d new Todo(todoCommand);","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"sansders"},"content":"                        break;","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"sansders"},"content":"                    default:","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"sansders"},"content":"                        throw new DukeIllegalCommandException();","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"sansders"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"sansders"},"content":"                    tasks[inputCounter] \u003d newTask;","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"sansders"},"content":"                    inputCounter++;","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"sansders"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task: \\n\" + newTask);","lastModifiedDate":"2023-02-05"},{"lineNumber":88,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"sansders"},"content":"                    if (inputCounter \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"sansders"},"content":"                        System.out.println(\"Now you have \" + inputCounter + \" task in the list.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"sansders"},"content":"                    } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"sansders"},"content":"                        System.out.println(\"Now you have \" + inputCounter + \" tasks in the list.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"sansders"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":95,"author":{"gitId":"sansders"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":96,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":97,"author":{"gitId":"sansders"},"content":"                // Print trailing horizontal line and take in next input","lastModifiedDate":"2023-01-21"},{"lineNumber":98,"author":{"gitId":"sansders"},"content":"                System.out.println(HORIZONTAL_LINE + \"\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":99,"author":{"gitId":"sansders"},"content":"                userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-01-21"},{"lineNumber":100,"author":{"gitId":"sansders"},"content":"                command \u003d userInput.split(\" \")[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":102,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":103,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":104,"author":{"gitId":"sansders"},"content":"            // This runs when the user enters an invalid command","lastModifiedDate":"2023-02-05"},{"lineNumber":105,"author":{"gitId":"sansders"},"content":"            catch (DukeIllegalCommandException exception) {","lastModifiedDate":"2023-02-05"},{"lineNumber":106,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":107,"author":{"gitId":"sansders"},"content":"                System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-02-05"},{"lineNumber":108,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":109,"author":{"gitId":"sansders"},"content":"                // Print trailing horizontal line and take in next input","lastModifiedDate":"2023-02-05"},{"lineNumber":110,"author":{"gitId":"sansders"},"content":"                System.out.println(HORIZONTAL_LINE + \"\\n\");","lastModifiedDate":"2023-02-05"},{"lineNumber":111,"author":{"gitId":"sansders"},"content":"                userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":112,"author":{"gitId":"sansders"},"content":"                command \u003d userInput.split(\" \")[0];","lastModifiedDate":"2023-02-05"},{"lineNumber":113,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":114,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":115,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":116,"author":{"gitId":"sansders"},"content":"            // This runs when a user enters the wrong syntax for a command","lastModifiedDate":"2023-02-05"},{"lineNumber":117,"author":{"gitId":"sansders"},"content":"            catch (DukeIllegalSyntaxException exception) {","lastModifiedDate":"2023-02-05"},{"lineNumber":118,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":119,"author":{"gitId":"sansders"},"content":"                System.out.println(\"☹ OOPS!!! I\u0027m sorry, You entered an incorrect syntax :-(\");","lastModifiedDate":"2023-02-05"},{"lineNumber":120,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":121,"author":{"gitId":"sansders"},"content":"                // Print trailing horizontal line and take in next input","lastModifiedDate":"2023-02-05"},{"lineNumber":122,"author":{"gitId":"sansders"},"content":"                System.out.println(HORIZONTAL_LINE + \"\\n\");","lastModifiedDate":"2023-02-05"},{"lineNumber":123,"author":{"gitId":"sansders"},"content":"                userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":124,"author":{"gitId":"sansders"},"content":"                command \u003d userInput.split(\" \")[0];","lastModifiedDate":"2023-02-05"},{"lineNumber":125,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":126,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":127,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":128,"author":{"gitId":"sansders"},"content":"            // This runs when a user tries to mark or unmark a task that already has that marking","lastModifiedDate":"2023-02-05"},{"lineNumber":129,"author":{"gitId":"sansders"},"content":"            catch (DukeAlreadyMarkedException exception) {","lastModifiedDate":"2023-02-05"},{"lineNumber":130,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":131,"author":{"gitId":"sansders"},"content":"                System.out.println(\"☹ OOPS!!! This task already has this marking :-(\");","lastModifiedDate":"2023-02-05"},{"lineNumber":132,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":133,"author":{"gitId":"sansders"},"content":"                // Print trailing horizontal line and take in next input","lastModifiedDate":"2023-02-05"},{"lineNumber":134,"author":{"gitId":"sansders"},"content":"                System.out.println(HORIZONTAL_LINE + \"\\n\");","lastModifiedDate":"2023-02-05"},{"lineNumber":135,"author":{"gitId":"sansders"},"content":"                userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":136,"author":{"gitId":"sansders"},"content":"                command \u003d userInput.split(\" \")[0];","lastModifiedDate":"2023-02-05"},{"lineNumber":137,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":138,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":139,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":140,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":141,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":142,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":143,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":144,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":145,"author":{"gitId":"sansders"},"content":"    public static void exit() {","lastModifiedDate":"2023-01-21"},{"lineNumber":146,"author":{"gitId":"sansders"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-01-21"},{"lineNumber":147,"author":{"gitId":"sansders"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":148,"author":{"gitId":"sansders"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-01-21"},{"lineNumber":149,"author":{"gitId":"sansders"},"content":"        System.exit(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":151,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":152,"author":{"gitId":"sansders"},"content":"    public static void printList(Task[] listOfInputs, int inputCounter) {","lastModifiedDate":"2023-01-21"},{"lineNumber":153,"author":{"gitId":"sansders"},"content":"        for (int i \u003d 0; i \u003c inputCounter; i++) {","lastModifiedDate":"2023-01-21"},{"lineNumber":154,"author":{"gitId":"sansders"},"content":"            System.out.println(i + 1 + \".\" + listOfInputs[i].toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":155,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":156,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":157,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":158,"author":{"gitId":"sansders"},"content":"    // Returns a String containing taskName","lastModifiedDate":"2023-02-05"},{"lineNumber":159,"author":{"gitId":"sansders"},"content":"    public static String todoHandler(String userInput) {","lastModifiedDate":"2023-02-01"},{"lineNumber":160,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":161,"author":{"gitId":"sansders"},"content":"        // Format of userInput: \u003ccommand\u003e \u003ctask_name\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":162,"author":{"gitId":"sansders"},"content":"        String taskName \u003d userInput.replaceFirst(\"todo \", \"\");","lastModifiedDate":"2023-02-05"},{"lineNumber":163,"author":{"gitId":"sansders"},"content":"        return taskName;","lastModifiedDate":"2023-02-01"},{"lineNumber":164,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":165,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":166,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":167,"author":{"gitId":"sansders"},"content":"    // Returns a String array containing {taskName, deadline}","lastModifiedDate":"2023-02-05"},{"lineNumber":168,"author":{"gitId":"sansders"},"content":"    public static String[] deadlineHandler(String userInput) throws DukeIllegalSyntaxException {","lastModifiedDate":"2023-02-05"},{"lineNumber":169,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":170,"author":{"gitId":"sansders"},"content":"        // Format of userInput: \u003ccommand\u003e \u003ctaskName\u003e /by \u003cdeadline\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":171,"author":{"gitId":"sansders"},"content":"        int numberOfWords \u003d userInput.split(\" \").length - 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":172,"author":{"gitId":"sansders"},"content":"        int endOfTaskNameIndex \u003d 0;","lastModifiedDate":"2023-02-05"},{"lineNumber":173,"author":{"gitId":"sansders"},"content":"        String[] userInputArray \u003d new String[numberOfWords];","lastModifiedDate":"2023-02-01"},{"lineNumber":174,"author":{"gitId":"sansders"},"content":"        String[] outputArray \u003d {\"\", \"\"};","lastModifiedDate":"2023-02-05"},{"lineNumber":175,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":176,"author":{"gitId":"sansders"},"content":"        userInput \u003d userInput.replaceFirst(\"deadline \", \"\");","lastModifiedDate":"2023-02-05"},{"lineNumber":177,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":178,"author":{"gitId":"sansders"},"content":"        // Checks if userInput contains \"\\by\"","lastModifiedDate":"2023-02-05"},{"lineNumber":179,"author":{"gitId":"sansders"},"content":"        if (!userInput.contains(\"/by\")) {","lastModifiedDate":"2023-02-05"},{"lineNumber":180,"author":{"gitId":"sansders"},"content":"            throw new DukeIllegalSyntaxException();","lastModifiedDate":"2023-02-05"},{"lineNumber":181,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":182,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":183,"author":{"gitId":"sansders"},"content":"        // Get index of \"/by\"","lastModifiedDate":"2023-02-05"},{"lineNumber":184,"author":{"gitId":"sansders"},"content":"        userInputArray \u003d userInput.split(\" \");","lastModifiedDate":"2023-02-05"},{"lineNumber":185,"author":{"gitId":"sansders"},"content":"        for (int i \u003d 0; i \u003c numberOfWords; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":186,"author":{"gitId":"sansders"},"content":"            if (userInputArray[i].equals(\"/by\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":187,"author":{"gitId":"sansders"},"content":"                endOfTaskNameIndex \u003d i;","lastModifiedDate":"2023-02-01"},{"lineNumber":188,"author":{"gitId":"sansders"},"content":"                break;","lastModifiedDate":"2023-02-05"},{"lineNumber":189,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":190,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":191,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":192,"author":{"gitId":"sansders"},"content":"        // Add the taskName into index 0 of outputArray","lastModifiedDate":"2023-02-05"},{"lineNumber":193,"author":{"gitId":"sansders"},"content":"        for (int i \u003d 0; i \u003c endOfTaskNameIndex; i++) {","lastModifiedDate":"2023-02-05"},{"lineNumber":194,"author":{"gitId":"sansders"},"content":"            outputArray[0] +\u003d userInputArray[i] + \" \";","lastModifiedDate":"2023-02-05"},{"lineNumber":195,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":196,"author":{"gitId":"sansders"},"content":"        outputArray[0] \u003d outputArray[0].trim();","lastModifiedDate":"2023-02-05"},{"lineNumber":197,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":198,"author":{"gitId":"sansders"},"content":"        // Add the deadline into index 1 of outputArray","lastModifiedDate":"2023-02-05"},{"lineNumber":199,"author":{"gitId":"sansders"},"content":"        for (int i \u003d endOfTaskNameIndex + 1; i \u003c numberOfWords; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":200,"author":{"gitId":"sansders"},"content":"            outputArray[1] +\u003d userInputArray[i] + \" \";","lastModifiedDate":"2023-02-05"},{"lineNumber":201,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":202,"author":{"gitId":"sansders"},"content":"        outputArray[1] \u003d outputArray[1].trim();","lastModifiedDate":"2023-02-05"},{"lineNumber":203,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":204,"author":{"gitId":"sansders"},"content":"        // Return {taskName, deadline}","lastModifiedDate":"2023-02-05"},{"lineNumber":205,"author":{"gitId":"sansders"},"content":"        return outputArray;","lastModifiedDate":"2023-02-03"},{"lineNumber":206,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":207,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":208,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":209,"author":{"gitId":"sansders"},"content":"    // Returns a String array containing {taskName, from, to}","lastModifiedDate":"2023-02-05"},{"lineNumber":210,"author":{"gitId":"sansders"},"content":"    public static String[] eventHandler(String userInput) throws DukeIllegalSyntaxException {","lastModifiedDate":"2023-02-05"},{"lineNumber":211,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":212,"author":{"gitId":"sansders"},"content":"        // Format of userInput: \u003ccommand\u003e \u003ctaskName\u003e /from \u003cfrom\u003e /to \u003cto\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":213,"author":{"gitId":"sansders"},"content":"        int numberOfWords \u003d userInput.split(\" \").length - 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":214,"author":{"gitId":"sansders"},"content":"        int fromIndex \u003d 0;","lastModifiedDate":"2023-02-05"},{"lineNumber":215,"author":{"gitId":"sansders"},"content":"        int toIndex \u003d 0;","lastModifiedDate":"2023-02-05"},{"lineNumber":216,"author":{"gitId":"sansders"},"content":"        String[] userInputArray;","lastModifiedDate":"2023-02-05"},{"lineNumber":217,"author":{"gitId":"sansders"},"content":"        String[] outputArray \u003d {\"\", \"\", \"\"};","lastModifiedDate":"2023-02-05"},{"lineNumber":218,"author":{"gitId":"sansders"},"content":"        boolean isFromPassed \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":219,"author":{"gitId":"sansders"},"content":"        boolean isToPassed \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":220,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":221,"author":{"gitId":"sansders"},"content":"        // Checks if userInput contains \"\\by\"","lastModifiedDate":"2023-02-05"},{"lineNumber":222,"author":{"gitId":"sansders"},"content":"        if (!userInput.contains(\"/from\") || !userInput.contains(\"/to\")) {","lastModifiedDate":"2023-02-05"},{"lineNumber":223,"author":{"gitId":"sansders"},"content":"            throw new DukeIllegalSyntaxException();","lastModifiedDate":"2023-02-05"},{"lineNumber":224,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":225,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":226,"author":{"gitId":"sansders"},"content":"        // Remove `event` from","lastModifiedDate":"2023-02-05"},{"lineNumber":227,"author":{"gitId":"sansders"},"content":"        userInput \u003d userInput.replaceFirst(\"event \", \"\");","lastModifiedDate":"2023-02-05"},{"lineNumber":228,"author":{"gitId":"sansders"},"content":"        userInputArray \u003d userInput.split(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":229,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":230,"author":{"gitId":"sansders"},"content":"        // Get indexes of `/from` and `/to` in userInput","lastModifiedDate":"2023-02-05"},{"lineNumber":231,"author":{"gitId":"sansders"},"content":"        for (int i \u003d 0; i \u003c numberOfWords; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":232,"author":{"gitId":"sansders"},"content":"            if (userInputArray[i].equals(\"/from\") \u0026\u0026 !isFromPassed) {","lastModifiedDate":"2023-02-05"},{"lineNumber":233,"author":{"gitId":"sansders"},"content":"                fromIndex \u003d i;","lastModifiedDate":"2023-02-05"},{"lineNumber":234,"author":{"gitId":"sansders"},"content":"                isFromPassed \u003d true;","lastModifiedDate":"2023-02-01"},{"lineNumber":235,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":236,"author":{"gitId":"sansders"},"content":"            if (userInputArray[i].equals(\"/to\") \u0026\u0026 !isToPassed) {","lastModifiedDate":"2023-02-05"},{"lineNumber":237,"author":{"gitId":"sansders"},"content":"                toIndex \u003d i;","lastModifiedDate":"2023-02-05"},{"lineNumber":238,"author":{"gitId":"sansders"},"content":"                isToPassed \u003d true;","lastModifiedDate":"2023-02-01"},{"lineNumber":239,"author":{"gitId":"sansders"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":240,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":241,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":242,"author":{"gitId":"sansders"},"content":"        // Add the taskName into index 0 of outputArray","lastModifiedDate":"2023-02-05"},{"lineNumber":243,"author":{"gitId":"sansders"},"content":"        for (int i \u003d 0; i \u003c fromIndex; i++) {","lastModifiedDate":"2023-02-05"},{"lineNumber":244,"author":{"gitId":"sansders"},"content":"            outputArray[0] +\u003d userInputArray[i] + \" \";","lastModifiedDate":"2023-02-05"},{"lineNumber":245,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":246,"author":{"gitId":"sansders"},"content":"        outputArray[0] \u003d outputArray[0].trim();","lastModifiedDate":"2023-02-05"},{"lineNumber":247,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":248,"author":{"gitId":"sansders"},"content":"        // Add the `from` field into index 1 of outputArray","lastModifiedDate":"2023-02-05"},{"lineNumber":249,"author":{"gitId":"sansders"},"content":"        for (int i \u003d fromIndex + 1; i \u003c toIndex; i++) {","lastModifiedDate":"2023-02-05"},{"lineNumber":250,"author":{"gitId":"sansders"},"content":"            outputArray[1] +\u003d userInputArray[i] + \" \";","lastModifiedDate":"2023-02-05"},{"lineNumber":251,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":252,"author":{"gitId":"sansders"},"content":"        outputArray[1] \u003d outputArray[1].trim();","lastModifiedDate":"2023-02-05"},{"lineNumber":253,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":254,"author":{"gitId":"sansders"},"content":"        // Add the `to` field into index 2 of outputArray","lastModifiedDate":"2023-02-05"},{"lineNumber":255,"author":{"gitId":"sansders"},"content":"        for (int i \u003d toIndex + 1; i \u003c numberOfWords; i++) {","lastModifiedDate":"2023-02-05"},{"lineNumber":256,"author":{"gitId":"sansders"},"content":"            outputArray[2] +\u003d userInputArray[i] + \" \";","lastModifiedDate":"2023-02-05"},{"lineNumber":257,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":258,"author":{"gitId":"sansders"},"content":"        outputArray[2] \u003d outputArray[2].trim();","lastModifiedDate":"2023-02-05"},{"lineNumber":259,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":260,"author":{"gitId":"sansders"},"content":"        return outputArray;","lastModifiedDate":"2023-02-03"},{"lineNumber":261,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":262,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":263,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":264,"author":{"gitId":"sansders"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-03"},{"lineNumber":265,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":266,"author":{"gitId":"sansders"},"content":"        // Start the program with a lovely greeting","lastModifiedDate":"2023-02-03"},{"lineNumber":267,"author":{"gitId":"sansders"},"content":"        greet();","lastModifiedDate":"2023-02-03"},{"lineNumber":268,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":269,"author":{"gitId":"sansders"},"content":"        // Run the program","lastModifiedDate":"2023-02-03"},{"lineNumber":270,"author":{"gitId":"sansders"},"content":"        runProgram();","lastModifiedDate":"2023-02-03"},{"lineNumber":271,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":272,"author":{"gitId":"sansders"},"content":"        // Exit the program","lastModifiedDate":"2023-02-03"},{"lineNumber":273,"author":{"gitId":"sansders"},"content":"        exit();","lastModifiedDate":"2023-02-03"},{"lineNumber":274,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":275,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":276,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"sansders":274,"-":3}},{"path":"src/main/java/error/DukeAlreadyMarkedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package error;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"public class DukeAlreadyMarkedException extends Exception{","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"sansders":4}},{"path":"src/main/java/error/DukeIllegalCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package error;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"/*","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"* This exception is thrown if a user enters an illegal command","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"**/","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"public class DukeIllegalCommandException extends Exception {","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"sansders":8}},{"path":"src/main/java/error/DukeIllegalSyntaxException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package error;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"/*","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":" * This runs when a user tries to mark or unmark a task that already has that marking","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":" **/","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"public class DukeIllegalSyntaxException extends Exception{","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"sansders":8}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"    protected String by;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"sansders":16}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"    protected String from;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"    protected String to;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"sansders":17}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"import error.DukeAlreadyMarkedException;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"public class Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"    protected String description;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"sansders"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"sansders"},"content":"        return this.description;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"sansders"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"sansders"},"content":"    public void markAsDone() throws DukeAlreadyMarkedException {","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"sansders"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"sansders"},"content":"            throw new DukeAlreadyMarkedException();","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"sansders"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"sansders"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"sansders"},"content":"        System.out.println(this);","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"sansders"},"content":"    public void markAsNotDone() throws DukeAlreadyMarkedException {","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"sansders"},"content":"        if (!this.isDone) {","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"sansders"},"content":"            throw new DukeAlreadyMarkedException();","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"sansders"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"sansders"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"sansders"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"sansders"},"content":"        System.out.println(this);","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"sansders"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"sansders"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"sansders":43}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sansders"},"content":"package task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"sansders"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"sansders"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"sansders"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"sansders"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"sansders"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"sansders"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"sansders"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"sansders"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"sansders"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"sansders":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"sansders"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sansders":1,"-":20}}]
