[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"# Duke project","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"This is a basic task manager which uses the command line interface","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"## Features","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"1. Supports three different types of tasks: `Todo`, `Deadline` and `Event`","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"2. Supports marking tasks as completed or not completed","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"3. Displays stored tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"4. Reminds user about upcoming deadlines","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"5. Supports searching for previously added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"- For usage, do refer to the [user guide](https://mingen82.github.io/ip/)","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"2. Open the project into Intellij as follows:","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"   2. Select the project directory, and click `OK`.","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"   3. If there are any further prompts, accept the defaults.","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"3. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"4. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"   ------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"   Hello! I\u0027m Duke. Hope you are having a wonderful day","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"   What can I do for you?","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"   ------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"MingEn82":21,"-":11}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"1. Supports three different types of tasks: `Todo`, `Deadline` and `Event`","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"2. Supports marking tasks as completed or not completed","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"3. Displays stored tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"4. Reminds user about upcoming deadlines","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"5. Supports searching for previously added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"## Symbols used","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"- T: `Todo`","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"- D: `Deadline`","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"- E: `Event`","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"- \\[ \\]: Task not yet completed","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"- \\[X\\]: Task is completed","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"## Todo","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"Adds a task without deadlines","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"### Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"### `todo`","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"`todo [task-description]`","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"Got it. I have added this task to the list!","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"    [T][ ] [task-description]","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"Now you have [n] tasks in the list.","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"## Deadline","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"Adds a task with a deadline","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"### Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"### `deadline`","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"Example of usage: ","lastModifiedDate":"2023-02-19"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"`deadline [task-description] /by [date]`","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"Expected outcome:","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"Got it. I have added this task to the list!","lastModifiedDate":"2023-02-19"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"    [D][ ] [task-description] (by: [date])        ","lastModifiedDate":"2023-02-19"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"Now you have [n] tasks in the list.","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":61,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":63,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"MingEn82"},"content":"### Date Format","lastModifiedDate":"2023-02-19"},{"lineNumber":65,"author":{"gitId":"MingEn82"},"content":"- Date Format: \"yyyy-M-d\" or \"yyyy-M-d HH:mm\"","lastModifiedDate":"2023-02-19"},{"lineNumber":66,"author":{"gitId":"MingEn82"},"content":"   - If no time is specified, Duke sets time to 23:59","lastModifiedDate":"2023-02-19"},{"lineNumber":67,"author":{"gitId":"MingEn82"},"content":"- Deadline cannot be set in the past, else task will not be added","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"MingEn82"},"content":"## Event","lastModifiedDate":"2023-02-19"},{"lineNumber":70,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":71,"author":{"gitId":"MingEn82"},"content":"Adds a task with a start and end date","lastModifiedDate":"2023-02-19"},{"lineNumber":72,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":73,"author":{"gitId":"MingEn82"},"content":"### Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":74,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":75,"author":{"gitId":"MingEn82"},"content":"### `event`","lastModifiedDate":"2023-02-19"},{"lineNumber":76,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":77,"author":{"gitId":"MingEn82"},"content":"Example of usage: ","lastModifiedDate":"2023-02-19"},{"lineNumber":78,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":79,"author":{"gitId":"MingEn82"},"content":"`event [task-description] /from [start-date] /to [end-date]`","lastModifiedDate":"2023-02-19"},{"lineNumber":80,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":81,"author":{"gitId":"MingEn82"},"content":"Expected outcome:","lastModifiedDate":"2023-02-19"},{"lineNumber":82,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":83,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":84,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":85,"author":{"gitId":"MingEn82"},"content":"Got it. I have added this task to the list!","lastModifiedDate":"2023-02-19"},{"lineNumber":86,"author":{"gitId":"MingEn82"},"content":"    [E][ ] [task-description] ([start-date] - [end-date])        ","lastModifiedDate":"2023-02-19"},{"lineNumber":87,"author":{"gitId":"MingEn82"},"content":"Now you have [n] tasks in the list.","lastModifiedDate":"2023-02-19"},{"lineNumber":88,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":89,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":90,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":91,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":92,"author":{"gitId":"MingEn82"},"content":"### Date Format","lastModifiedDate":"2023-02-19"},{"lineNumber":93,"author":{"gitId":"MingEn82"},"content":"- Date Format: \"yyyy-M-d\" or \"yyyy-M-d HH:mm\"","lastModifiedDate":"2023-02-19"},{"lineNumber":94,"author":{"gitId":"MingEn82"},"content":"   - If no time is specified, Duke sets time to 23:59","lastModifiedDate":"2023-02-19"},{"lineNumber":95,"author":{"gitId":"MingEn82"},"content":"- End Date cannot be set in the past, else task will not be added","lastModifiedDate":"2023-02-19"},{"lineNumber":96,"author":{"gitId":"MingEn82"},"content":"- Start Date cannot be after End Date, else task will not be added","lastModifiedDate":"2023-02-19"},{"lineNumber":97,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":98,"author":{"gitId":"MingEn82"},"content":"## List tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":99,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":100,"author":{"gitId":"MingEn82"},"content":"Displays all added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":101,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":102,"author":{"gitId":"MingEn82"},"content":"### Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":103,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":104,"author":{"gitId":"MingEn82"},"content":"### `list`","lastModifiedDate":"2023-02-19"},{"lineNumber":105,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":106,"author":{"gitId":"MingEn82"},"content":"Example of usage: ","lastModifiedDate":"2023-02-19"},{"lineNumber":107,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":108,"author":{"gitId":"MingEn82"},"content":"`list`","lastModifiedDate":"2023-02-19"},{"lineNumber":109,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":110,"author":{"gitId":"MingEn82"},"content":"Expected outcome:","lastModifiedDate":"2023-02-19"},{"lineNumber":111,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":112,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":113,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":114,"author":{"gitId":"MingEn82"},"content":"    Here are the tasks in your list:","lastModifiedDate":"2023-02-19"},{"lineNumber":115,"author":{"gitId":"MingEn82"},"content":"1.[T][ ] [todo-description]","lastModifiedDate":"2023-02-19"},{"lineNumber":116,"author":{"gitId":"MingEn82"},"content":"2.[D][ ] [deadline-description] (by: [date])","lastModifiedDate":"2023-02-19"},{"lineNumber":117,"author":{"gitId":"MingEn82"},"content":"3.[E][X] [event-description] ([start-date] - [end-date])","lastModifiedDate":"2023-02-19"},{"lineNumber":118,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":119,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":120,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":121,"author":{"gitId":"MingEn82"},"content":"## Search for tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":122,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":123,"author":{"gitId":"MingEn82"},"content":"Displays tasks that contains query in task description","lastModifiedDate":"2023-02-19"},{"lineNumber":124,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":125,"author":{"gitId":"MingEn82"},"content":"### Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":126,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":127,"author":{"gitId":"MingEn82"},"content":"### `find`","lastModifiedDate":"2023-02-19"},{"lineNumber":128,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":129,"author":{"gitId":"MingEn82"},"content":"Example of usage: ","lastModifiedDate":"2023-02-19"},{"lineNumber":130,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":131,"author":{"gitId":"MingEn82"},"content":"`find [query]`","lastModifiedDate":"2023-02-19"},{"lineNumber":132,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":133,"author":{"gitId":"MingEn82"},"content":"Expected outcome:","lastModifiedDate":"2023-02-19"},{"lineNumber":134,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":135,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":136,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":137,"author":{"gitId":"MingEn82"},"content":"Here are the tasks I found containing : [query]","lastModifiedDate":"2023-02-19"},{"lineNumber":138,"author":{"gitId":"MingEn82"},"content":"1.[T][ ] [todo-description]","lastModifiedDate":"2023-02-19"},{"lineNumber":139,"author":{"gitId":"MingEn82"},"content":"2.[D][ ] [deadline-description] (by: [date])","lastModifiedDate":"2023-02-19"},{"lineNumber":140,"author":{"gitId":"MingEn82"},"content":"3.[E][X] [event-description] ([start-date] - [end-date])","lastModifiedDate":"2023-02-19"},{"lineNumber":141,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":142,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":143,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":144,"author":{"gitId":"MingEn82"},"content":"## Upcoming","lastModifiedDate":"2023-02-19"},{"lineNumber":145,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":146,"author":{"gitId":"MingEn82"},"content":"Displays tasks with deadlines within 3 days","lastModifiedDate":"2023-02-19"},{"lineNumber":147,"author":{"gitId":"MingEn82"},"content":"- Will only return `deadline` and `event` tasks as `todo` tasks do not have a deadline","lastModifiedDate":"2023-02-19"},{"lineNumber":148,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":149,"author":{"gitId":"MingEn82"},"content":"### Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":150,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":151,"author":{"gitId":"MingEn82"},"content":"### `upcoming`","lastModifiedDate":"2023-02-19"},{"lineNumber":152,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":153,"author":{"gitId":"MingEn82"},"content":"Example of usage: ","lastModifiedDate":"2023-02-19"},{"lineNumber":154,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":155,"author":{"gitId":"MingEn82"},"content":"`upcoming`","lastModifiedDate":"2023-02-19"},{"lineNumber":156,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":157,"author":{"gitId":"MingEn82"},"content":"Expected outcome:","lastModifiedDate":"2023-02-19"},{"lineNumber":158,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":159,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":160,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":161,"author":{"gitId":"MingEn82"},"content":"Please be reminded that these tasks are due soon:","lastModifiedDate":"2023-02-19"},{"lineNumber":162,"author":{"gitId":"MingEn82"},"content":"1.[D][ ] [deadline-description] (by: [date])","lastModifiedDate":"2023-02-19"},{"lineNumber":163,"author":{"gitId":"MingEn82"},"content":"2.[E][X] [event-description] ([start-date] - [end-date])","lastModifiedDate":"2023-02-19"},{"lineNumber":164,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":165,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":166,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":167,"author":{"gitId":"MingEn82"},"content":"## Mark","lastModifiedDate":"2023-02-19"},{"lineNumber":168,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":169,"author":{"gitId":"MingEn82"},"content":"Marks task as completed using its index","lastModifiedDate":"2023-02-19"},{"lineNumber":170,"author":{"gitId":"MingEn82"},"content":"- Recommended to use [`list`](#list-tasks) before `mark` to get the task index","lastModifiedDate":"2023-02-19"},{"lineNumber":171,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":172,"author":{"gitId":"MingEn82"},"content":"### Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":173,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":174,"author":{"gitId":"MingEn82"},"content":"### `mark`","lastModifiedDate":"2023-02-19"},{"lineNumber":175,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":176,"author":{"gitId":"MingEn82"},"content":"Example of usage: ","lastModifiedDate":"2023-02-19"},{"lineNumber":177,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":178,"author":{"gitId":"MingEn82"},"content":"`mark [index]`","lastModifiedDate":"2023-02-19"},{"lineNumber":179,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":180,"author":{"gitId":"MingEn82"},"content":"Expected outcome:","lastModifiedDate":"2023-02-19"},{"lineNumber":181,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":182,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":183,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":184,"author":{"gitId":"MingEn82"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-02-19"},{"lineNumber":185,"author":{"gitId":"MingEn82"},"content":"    [E][X] [event-description] ([start-date] - [end-date])","lastModifiedDate":"2023-02-19"},{"lineNumber":186,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":187,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":188,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":189,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":190,"author":{"gitId":"MingEn82"},"content":"## Unmark","lastModifiedDate":"2023-02-19"},{"lineNumber":191,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":192,"author":{"gitId":"MingEn82"},"content":"Marks task as not completed using its index","lastModifiedDate":"2023-02-19"},{"lineNumber":193,"author":{"gitId":"MingEn82"},"content":"- Recommended to use [`list`](#list-tasks) before `unmark` to get the task index","lastModifiedDate":"2023-02-19"},{"lineNumber":194,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":195,"author":{"gitId":"MingEn82"},"content":"### Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":196,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":197,"author":{"gitId":"MingEn82"},"content":"### `unmark`","lastModifiedDate":"2023-02-19"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":199,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2023-02-19"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":201,"author":{"gitId":"MingEn82"},"content":"`unmark [index]`","lastModifiedDate":"2023-02-19"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":203,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2023-02-19"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":205,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":206,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":207,"author":{"gitId":"MingEn82"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-02-19"},{"lineNumber":208,"author":{"gitId":"MingEn82"},"content":"    [E][X] [event-description] ([start-date] - [end-date])","lastModifiedDate":"2023-02-19"},{"lineNumber":209,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":210,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":211,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":212,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":213,"author":{"gitId":"MingEn82"},"content":"## Delete","lastModifiedDate":"2023-02-19"},{"lineNumber":214,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":215,"author":{"gitId":"MingEn82"},"content":"Deletes task using its index","lastModifiedDate":"2023-02-19"},{"lineNumber":216,"author":{"gitId":"MingEn82"},"content":"- Recommended to use [`list`](#list-tasks) before `delete` to get the task index","lastModifiedDate":"2023-02-19"},{"lineNumber":217,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":218,"author":{"gitId":"MingEn82"},"content":"### Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":219,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":220,"author":{"gitId":"MingEn82"},"content":"### `delete`","lastModifiedDate":"2023-02-19"},{"lineNumber":221,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":222,"author":{"gitId":"MingEn82"},"content":"Example of usage: ","lastModifiedDate":"2023-02-19"},{"lineNumber":223,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":224,"author":{"gitId":"MingEn82"},"content":"`delete [index]`","lastModifiedDate":"2023-02-19"},{"lineNumber":225,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":226,"author":{"gitId":"MingEn82"},"content":"Expected outcome:","lastModifiedDate":"2023-02-19"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":228,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":229,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":230,"author":{"gitId":"MingEn82"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-02-19"},{"lineNumber":231,"author":{"gitId":"MingEn82"},"content":"    [E][X] [event-description] ([start-date] - [end-date])","lastModifiedDate":"2023-02-19"},{"lineNumber":232,"author":{"gitId":"MingEn82"},"content":"Now you have [n] tasks in the list.","lastModifiedDate":"2023-02-19"},{"lineNumber":233,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":234,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":235,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":236,"author":{"gitId":"MingEn82"},"content":"## Exits","lastModifiedDate":"2023-02-19"},{"lineNumber":237,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":238,"author":{"gitId":"MingEn82"},"content":"Exits program and saves all added tasks to database","lastModifiedDate":"2023-02-19"},{"lineNumber":239,"author":{"gitId":"MingEn82"},"content":"- Database is found at `data/duke.txt`","lastModifiedDate":"2023-02-19"},{"lineNumber":240,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":241,"author":{"gitId":"MingEn82"},"content":"### Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":242,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":243,"author":{"gitId":"MingEn82"},"content":"### `bye`","lastModifiedDate":"2023-02-19"},{"lineNumber":244,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":245,"author":{"gitId":"MingEn82"},"content":"Example of usage: ","lastModifiedDate":"2023-02-19"},{"lineNumber":246,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":247,"author":{"gitId":"MingEn82"},"content":"`bye`","lastModifiedDate":"2023-02-19"},{"lineNumber":248,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":249,"author":{"gitId":"MingEn82"},"content":"Expected outcome:","lastModifiedDate":"2023-02-19"},{"lineNumber":250,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":251,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":252,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":253,"author":{"gitId":"MingEn82"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2023-02-19"},{"lineNumber":254,"author":{"gitId":"MingEn82"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-02-19"},{"lineNumber":255,"author":{"gitId":"MingEn82"},"content":"```","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"MingEn82":229,"-":26}},{"path":"src/main/java/Command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import CommandUtils.InputParser;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Entities.Task;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"import FileUtils.Storage;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"import Output.UI;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":" * The AddCommand class parses command to create a new task and creates the task in the constructor","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":" * Updates storage when execute method is called","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"public abstract class AddCommand extends Command implements InputParser {","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    protected Task addedTask;","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * Constructor of AddCommand","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     * Calls parseInput method to create the task","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"     * @param command type of task","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     * @param input input of user","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"    public AddCommand(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"        parseInput(command, input);","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     * Adds new task to tasklist","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"     * Outputs task added message","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"     * Writes task to storage","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"        tasks.addTask(addedTask);","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"        ui.taskAddedMessage(addedTask, tasks.getTasksCount());","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"        storage.write(tasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"     * Helper function to parse input string","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"     * To be implemented by child classes","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"     * @param command type of task","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"     * @param input input of user","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"    public abstract void parseInput(String command, String input) throws DukeException;","lastModifiedDate":"2023-02-21"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":48}},{"path":"src/main/java/Command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Entities.Deadline;","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"import EntityUtils.DateParser;","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"import Exceptions.EmptyArgumentException;","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"import Exceptions.InsufficientArgumentsException;","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"import Exceptions.InvalidDateException;","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"import Exceptions.InvalidDateSequenceException;","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"import Exceptions.NoDescriptionException;","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"public class AddDeadlineCommand extends AddCommand {","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * Constructor of AddDeadlineCommand","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * Calls parseInput method to create the task","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     * @param command command string of todo. Default: \"deadline\"","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"     * @param input input of user","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"    public AddDeadlineCommand(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"        super(command, input);","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"     * Helper function to parse input string","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     * Creates a Deadline, Event or Todo task based on command string","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"     * @param command command string of todo. Default: \"deadline\"","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"     * @param input input of user","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"    public void parseInput(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"        String taskDescription, endDateString;","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"        int endDateIdx;","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"        LocalDateTime endDate;","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"        if (input.length() \u003d\u003d command.length()) {","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"            throw new NoDescriptionException(command);","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"        endDateIdx \u003d input.indexOf(\"/by \");","lastModifiedDate":"2023-02-21"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"        if (endDateIdx \u003d\u003d -1) {","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"            throw new InsufficientArgumentsException(command, \"deadline [task] /by [date]\");","lastModifiedDate":"2023-02-21"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"        taskDescription \u003d input.substring(command.length() + 1, endDateIdx - 1);","lastModifiedDate":"2023-02-21"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"        endDateString \u003d input.substring(endDateIdx + 4);","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"        if (taskDescription.length() \u003d\u003d 0 || endDateString.length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-21"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"            String emptyArgument;","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"            if (taskDescription.length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"                emptyArgument \u003d \"Task Name\";","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"            } else {","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"                emptyArgument \u003d \"Start Date\";","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"            throw new EmptyArgumentException(emptyArgument);","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":60,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":61,"author":{"gitId":"MingEn82"},"content":"        try {","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"MingEn82"},"content":"            endDate \u003d DateParser.stringToDate(endDateString);","lastModifiedDate":"2023-02-21"},{"lineNumber":63,"author":{"gitId":"MingEn82"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":64,"author":{"gitId":"MingEn82"},"content":"            throw new InvalidDateException(endDateString);","lastModifiedDate":"2023-02-21"},{"lineNumber":65,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"MingEn82"},"content":"        // throws exception if end date already passed","lastModifiedDate":"2023-02-21"},{"lineNumber":68,"author":{"gitId":"MingEn82"},"content":"        if (LocalDateTime.now().isAfter(endDate)) {","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"MingEn82"},"content":"            throw new InvalidDateSequenceException(LocalDateTime.now(), endDate);","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":72,"author":{"gitId":"MingEn82"},"content":"        this.addedTask \u003d new Deadline(taskDescription, false, endDate);","lastModifiedDate":"2023-02-21"},{"lineNumber":73,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":74,"author":{"gitId":"MingEn82"},"content":"    ","lastModifiedDate":"2023-02-21"},{"lineNumber":75,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-21"}],"authorContributionMap":{"MingEn82":75}},{"path":"src/main/java/Command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Entities.Event;","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"import EntityUtils.DateParser;","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"import Exceptions.EmptyArgumentException;","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"import Exceptions.InsufficientArgumentsException;","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"import Exceptions.InvalidDateException;","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"import Exceptions.InvalidDateSequenceException;","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"import Exceptions.NoDescriptionException;","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"public class AddEventCommand extends AddCommand {","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * Constructor of AddEventCommand","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * Calls parseInput method to create the task","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     * @param command command string of todo. Default: \"event\"","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"     * @param input input of user","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"    public AddEventCommand(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"        super(command, input);","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"     * Helper function to parse input string","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     * Creates a Deadline, Event or Todo task based on command string","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"     * @param command command string of todo. Default: \"event\"","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"     * @param input input of user","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"    public void parseInput(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"        String taskDescription, startDateString, endDateString;","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"        int startDateIdx, endDateIdx;","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"        LocalDateTime startDate, endDate;","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"        ","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"        if (input.length() \u003d\u003d command.length()) {","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"            throw new NoDescriptionException(command);","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"        startDateIdx \u003d input.indexOf(\"/from \");","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"        endDateIdx \u003d input.indexOf(\"/to \");","lastModifiedDate":"2023-02-21"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"        if (startDateIdx \u003d\u003d -1 || endDateIdx \u003d\u003d -1) {","lastModifiedDate":"2023-02-21"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"            throw new InsufficientArgumentsException(command, \"event [task] /from [startDate] /to [endDate]\");","lastModifiedDate":"2023-02-21"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"        taskDescription \u003d input.substring(command.length() + 1, startDateIdx - 1);","lastModifiedDate":"2023-02-21"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"        startDateString \u003d input.substring(startDateIdx + 6, endDateIdx - 1);","lastModifiedDate":"2023-02-21"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"        endDateString \u003d input.substring(endDateIdx + 4);","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"        if (taskDescription.length() \u003d\u003d 0 || startDateString.length() \u003d\u003d 0 || endDateString.length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"            String emptyArgument;","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"            if (taskDescription.length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"                emptyArgument \u003d \"Task Name\";","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"            } else if (startDateString.length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"                emptyArgument \u003d \"Start Date\";","lastModifiedDate":"2023-02-21"},{"lineNumber":60,"author":{"gitId":"MingEn82"},"content":"            } else {","lastModifiedDate":"2023-02-21"},{"lineNumber":61,"author":{"gitId":"MingEn82"},"content":"                emptyArgument \u003d \"End Date\";","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"MingEn82"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":63,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":64,"author":{"gitId":"MingEn82"},"content":"            throw new EmptyArgumentException(emptyArgument);","lastModifiedDate":"2023-02-21"},{"lineNumber":65,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"MingEn82"},"content":"        try {","lastModifiedDate":"2023-02-21"},{"lineNumber":68,"author":{"gitId":"MingEn82"},"content":"            startDate \u003d DateParser.stringToDate(startDateString);","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"MingEn82"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"MingEn82"},"content":"            throw new InvalidDateException(startDateString);","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":72,"author":{"gitId":"MingEn82"},"content":"        try {","lastModifiedDate":"2023-02-21"},{"lineNumber":73,"author":{"gitId":"MingEn82"},"content":"            endDate \u003d DateParser.stringToDate(endDateString);","lastModifiedDate":"2023-02-21"},{"lineNumber":74,"author":{"gitId":"MingEn82"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":75,"author":{"gitId":"MingEn82"},"content":"            throw new InvalidDateException(endDateString);","lastModifiedDate":"2023-02-21"},{"lineNumber":76,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":77,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":78,"author":{"gitId":"MingEn82"},"content":"        // throws exception if start date is after end date","lastModifiedDate":"2023-02-21"},{"lineNumber":79,"author":{"gitId":"MingEn82"},"content":"        if (startDate.isAfter(endDate)) {","lastModifiedDate":"2023-02-21"},{"lineNumber":80,"author":{"gitId":"MingEn82"},"content":"            throw new InvalidDateSequenceException(startDate, endDate);","lastModifiedDate":"2023-02-21"},{"lineNumber":81,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":82,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":83,"author":{"gitId":"MingEn82"},"content":"        // throws exception if end date already passed","lastModifiedDate":"2023-02-21"},{"lineNumber":84,"author":{"gitId":"MingEn82"},"content":"        if (LocalDateTime.now().isAfter(endDate)) {","lastModifiedDate":"2023-02-21"},{"lineNumber":85,"author":{"gitId":"MingEn82"},"content":"            throw new InvalidDateSequenceException(LocalDateTime.now(), endDate);","lastModifiedDate":"2023-02-21"},{"lineNumber":86,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":87,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":88,"author":{"gitId":"MingEn82"},"content":"        this.addedTask \u003d new Event(taskDescription, false, startDate, endDate);","lastModifiedDate":"2023-02-21"},{"lineNumber":89,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":90,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":91,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-21"}],"authorContributionMap":{"MingEn82":91}},{"path":"src/main/java/Command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import Entities.Todo;","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import Exceptions.NoDescriptionException;","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"public class AddTodoCommand extends AddCommand {","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"     * Constructor of AddTodoCommand","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"     * Calls parseInput method to create the task","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"     * @param command command string of todo. Default: \"todo\"","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"     * @param input input of user","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    public AddTodoCommand(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"        super(command, input);","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"    ","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     * Helper function to parse input string","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     * Creates Todo task based on command string","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"     * @param command command string of todo. Default: \"todo\"","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"     * @param input input of user","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"    public void parseInput(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"        String taskDescription;","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"        if (input.length() \u003d\u003d command.length()) {","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"            throw new NoDescriptionException(command);","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"        taskDescription \u003d input.substring(command.length() + 1);","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"        this.addedTask \u003d new Todo(taskDescription, false);","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"        ","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-21"}],"authorContributionMap":{"MingEn82":39}},{"path":"src/main/java/Command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import FileUtils.Storage;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Output.UI;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":" * Command is an abstract class that other commands are derived from","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"    private boolean isExit;","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"     * Constructor for Command Class","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * Sets isExit to false","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"    public Command() {","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"        setIsExit(false);","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"     * Gets the boolean value isExit","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"     * @return whether to exit Duke","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"        return this.isExit;","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"     * Sets the boolean value isExit","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"     * @param isExit new value for isExit","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"    public void setIsExit(boolean isExit) {","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"        this.isExit \u003d isExit;","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"     * Abstract Method to be implemented by the child classes","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"     * @param tasks Handles manipulation of task list","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"     * @param ui Responsible for printing status of Duke","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"     * @param storage Handles the storage of tasks into database","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"    public abstract void execute(TaskList tasks, UI ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":46}},{"path":"src/main/java/Command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import CommandUtils.InputParser;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Entities.Task;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"import Exceptions.NoDescriptionException;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"import Exceptions.NonPositiveNumberException;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"import FileUtils.Storage;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"import Output.UI;","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":" * Command to delete task from tasklist","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"public class DeleteCommand extends Command implements InputParser {","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    private int taskIndex;","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     * Constructor for DeleteCommand class","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"     * @param command delete command","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     * @param input user input","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"    public DeleteCommand(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"        parseInput(command, input);","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     * Executes the deletion of task from tasklist","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"     * @param tasks Handles removal of task from task list","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"     * @param ui Responsible for printing deletion status","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"     * @param storage Handles the removal of task from database","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"        Task removedTask \u003d tasks.deleteTask(taskIndex);","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"        ui.taskDeletedMessage(removedTask, tasks.getTasksCount());","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"        storage.write(tasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"     * Parses user input to get index of task to be deleted","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"     * @param command delete command","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"     * @param input user input","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"    public void parseInput(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"        if (input.length() \u003d\u003d command.length()) {","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"            throw new NoDescriptionException(command);","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"            this.taskIndex \u003d Integer.parseInt(input.substring(command.length() + 1)) - 1;","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"            throw new NonPositiveNumberException(e);","lastModifiedDate":"2023-02-18"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":59}},{"path":"src/main/java/Command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import FileUtils.Storage;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Output.UI;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":" * Command to exit program","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"     * Executes exit command","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"     * @param tasks Holds all currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * @param ui Responsible for printing goodbye message","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * @param storage Handles the storage of tasks into database","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"        ui.printGoodbye();","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"        storage.write(tasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"        setIsExit(true);","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":26}},{"path":"src/main/java/Command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import CommandUtils.InputParser;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import FileUtils.Storage;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"import Output.UI;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":" * Command to find all tasks with specified substring in task description","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"public class FindCommand extends Command implements InputParser {","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"    String taskSubstring;","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * Constructor for FindCommand class","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * @param input User Input","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    public FindCommand(String input) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"        parseInput(null, input);","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"     * Prints filtered tasks with substring in task description","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"        TaskList filteredTasks \u003d tasks.getFilteredTasks(taskSubstring);","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"        String header \u003d \"Here are the tasks I found containing : \" + taskSubstring;","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"        ui.printTasks(filteredTasks, header);","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"     * Parses the user input to get the task substring to filter task list","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"    public void parseInput(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"        this.taskSubstring \u003d input.split(\" \")[1];","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"    ","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"MingEn82":42}},{"path":"src/main/java/Command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import FileUtils.Storage;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Output.UI;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":" * Command to list all current tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"     * Executes printing of all current tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"     * @param tasks Holds currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"     * @param ui Responsible for printing all currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * @param storage","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"        ui.printTasks(tasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":23}},{"path":"src/main/java/Command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import CommandUtils.InputParser;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Exceptions.NoDescriptionException;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"import Exceptions.NonPositiveNumberException;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"import FileUtils.Storage;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"import Output.UI;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":" * Command to mark a task as completed","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"public class MarkCommand extends Command implements InputParser {","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    private int taskIndex;","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * Constructor for MarkCommand Class","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     * @param command mark command","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"     * @param input user input","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"    public MarkCommand(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"        parseInput(command, input);","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"     * Executes marking of task as completed","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     * @param tasks Holds all currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"     * @param ui Responsible for printing task as marked","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"     * @param storage Handles the storage of marked task into database","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"        ui.printMarkedTask(tasks.markTask(taskIndex));","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"     * Parses user input to get index of task to be marked as completed","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"     * @param command mark command","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"     * @param input user input","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"    public void parseInput(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"        if (input.length() \u003d\u003d command.length()) {","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"            throw new NoDescriptionException(command);","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"            this.taskIndex \u003d Integer.parseInt(input.substring(command.length() + 1)) - 1;","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"            throw new NonPositiveNumberException(e);","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":56}},{"path":"src/main/java/Command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import CommandUtils.InputParser;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Exceptions.NoDescriptionException;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"import Exceptions.NonPositiveNumberException;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"import FileUtils.Storage;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"import Output.UI;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":" * Command to mark a task as not completed","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"public class UnmarkCommand extends Command implements InputParser {","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    private int taskIndex;","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * Constructor for UnmarkCommand Class","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     * @param command unmark command","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"     * @param input user input","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"    public UnmarkCommand(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"        parseInput(command, input);","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"     * Executes marking of task as not completed","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     * @param tasks Holds all currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"     * @param ui Responsible for printing task as not marked","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"     * @param storage Handles the storage of marked task into database","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"        ui.printUnmarkedTask(tasks.unmarkTask(taskIndex));","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"     * Parses user input to get index of task to be marked as not completed","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"     * @param command unmark command","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"     * @param input user input","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"    public void parseInput(String command, String input) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"        if (input.length() \u003d\u003d command.length()) {","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"            throw new NoDescriptionException(command);","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"            this.taskIndex \u003d Integer.parseInt(input.substring(command.length() + 1)) - 1;","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"            throw new NonPositiveNumberException(e);","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":56}},{"path":"src/main/java/Command/UpcomingCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Command;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import FileUtils.Storage;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Output.UI;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":" * Command to show tasks with upcoming deadlines","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"public class UpcomingCommand extends Command {","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"     * Prints all upcoming tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"        TaskList upcomingTasks \u003d tasks.getUpcomingTasks();","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"        String header \u003d \"Please be reminded that these tasks are due soon:\";","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"        ui.printTasks(upcomingTasks, header);","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"MingEn82":21}},{"path":"src/main/java/CommandUtils/InputParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package CommandUtils;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":" * Interface to ensure that commands will parse user inputs","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"public interface InputParser {","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"    public void parseInput(String command, String input) throws DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"MingEn82":10}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"import Command.Command;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import EntityUtils.Parser;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import FileUtils.Storage;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import Output.UI;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-12"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":" * Chatbot made for CS2113 AY22/23 Sem 2","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":" * @author Koh Ming En","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":" * @since 2023-02-19","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"    private static final String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"    private UI ui;","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"     * Constructor for chatbot","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     * @param filePath path to database","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"        ui \u003d new UI();","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"            ui.printError(e.getMessage());","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"     * Starts the chatbot","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"    public void run() {","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"        ui.printIntroduction();","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"        while (!isExit) {","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"            try {","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"                ui.printLine();","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"                ui.printError(e.getMessage());","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"            } finally {","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"                ui.printLine();","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"                System.out.println();","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"        new Duke(FILE_PATH).run();","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"MingEn82":51,"-":8}},{"path":"src/main/java/Entities/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Entities;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import EntityUtils.DateParser;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":" * Task which has a do-by date","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"    protected LocalDateTime endDate;","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"     * Constructor for Deadline Class","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"     * @param taskDescription task details","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"     * @param isDone whether task is completed","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * @param endDate date by which task should be completed","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"    public Deadline(String taskDescription, boolean isDone, LocalDateTime endDate) {","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"        setEndDate(endDate);","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"     * Gets deadline of task","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"     * @return deadline of task","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"    public String getEndDate() {","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"        return DateParser.dateToString(endDate);","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"     * Sets deadline of task","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"     * @param endDate new deadline of task","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"    public void setEndDate(LocalDateTime endDate) {","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"     * Defines how Deadline should be printed","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"     * @return string format of Deadline","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getEndDate() + \")\";","lastModifiedDate":"2023-01-20"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MingEn82":48}},{"path":"src/main/java/Entities/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Entities;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import EntityUtils.DateParser;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":" * Task which has a start and end date","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"    protected LocalDateTime startDate;","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"    protected LocalDateTime endDate;","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"     * Constructor for Event Class","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"     * @param taskDescription task details","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * @param isDone whether task is completed","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * @param startDate date when event begins","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * @param endDate date when event ends","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    public Event(String taskDescription, boolean isDone, LocalDateTime startDate, LocalDateTime endDate) {","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"        setStartDate(startDate);","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"        setEndDate(endDate);","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"     * Gets start date of task","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"     * @return start date of task","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"    public String getStartDate() {","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"        return DateParser.dateToString(this.startDate);","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"     * Sets start date of task","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"     * @param startDate start date of task","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"    public void setStartDate(LocalDateTime startDate) {","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"     * Gets end date of task","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"     * @return end date of task","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"    public String getEndDate() {","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"        return DateParser.dateToString(this.endDate);","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"     * Sets end date of task","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"     * @param startDate end date of task","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"    public void setEndDate(LocalDateTime endDate) {","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-01-20"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"     * Defines how Event should be printed","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"MingEn82"},"content":"     * @return string format of Event","lastModifiedDate":"2023-02-19"},{"lineNumber":61,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":63,"author":{"gitId":"MingEn82"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":64,"author":{"gitId":"MingEn82"},"content":"        return \"[E]\" + super.toString() + \" (\" + getStartDate() + \" - \" + getEndDate() + \")\";","lastModifiedDate":"2023-02-19"},{"lineNumber":65,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":66,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":67,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MingEn82":67}},{"path":"src/main/java/Entities/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Entities;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":" * Basic Task","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Task {","lastModifiedDate":"2023-01-12"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"    protected String taskDescription;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-12"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"     * Constructor for Task Class","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"     * @param taskDescription","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"     * @param isDone","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    public Task(String taskDescription, boolean isDone) {","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"        setTaskDescription(taskDescription);","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"        setIsDone(isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-12"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     * Gets whether task is completed","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     * @return true if task is completed, false otherwise","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-12"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-12"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     * Sets task completion status","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"     * @param isDone new completion status of task","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"    public void setIsDone(boolean isDone) {","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-12"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"     * Updates task details","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"     * @param taskDescription new details of task","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"    public void setTaskDescription(String taskDescription) {","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-12"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"     * Gets the details of tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"     * @return details of tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"        return this.taskDescription;","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-12"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"     * Defines how Task should be printed","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"     * @return string format of Task","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"        return \"[\" + (this.isDone ? \"X\" : \" \") + \"] \" + this.getTaskDescription();","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-12"}],"authorContributionMap":{"MingEn82":47,"-":13}},{"path":"src/main/java/Entities/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Entities;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import EntityUtils.DateParser;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"import java.lang.IndexOutOfBoundsException;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":" * Class which holds the list of currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":" * Has Methods to modify and filter the tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"public class TaskList {","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"     * Empty Constructor for TaskList","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     * Initialises an empty ArrayList of Tasks ","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"     * Constructor for TaskList","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     * @param tasks Currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"        setTasks(tasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"     * Adds new task to task list","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"     * @param task new task","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"        tasks.add(task);","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"     * Deletes a task using its index","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"     * @param taskIndex index of task","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"     * @return deleted task","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"    public Task deleteTask(int taskIndex) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"        getTask(taskIndex);                 // Throws an exception if the taskIndex is not valid ","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"        return tasks.remove(taskIndex);","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"     * Marks task as completed","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"     * @param taskIndex index of task","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"     * @return completed task","lastModifiedDate":"2023-02-19"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"MingEn82"},"content":"    public Task markTask(int taskIndex) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"MingEn82"},"content":"        Task t \u003d getTask(taskIndex);","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"MingEn82"},"content":"        t.setIsDone(true);","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"MingEn82"},"content":"        return t;","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":67,"author":{"gitId":"MingEn82"},"content":"     * Marks task as not completed","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"MingEn82"},"content":"     * @param taskIndex index of task","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"MingEn82"},"content":"     * @return not completed task","lastModifiedDate":"2023-02-19"},{"lineNumber":70,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":71,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":72,"author":{"gitId":"MingEn82"},"content":"    public Task unmarkTask(int taskIndex) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"MingEn82"},"content":"        Task t \u003d getTask(taskIndex);","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"MingEn82"},"content":"        t.setIsDone(false);","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"MingEn82"},"content":"        return t;","lastModifiedDate":"2023-02-11"},{"lineNumber":76,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"MingEn82"},"content":"    ","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":79,"author":{"gitId":"MingEn82"},"content":"     * Gets all currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":80,"author":{"gitId":"MingEn82"},"content":"     * @return all tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":81,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":82,"author":{"gitId":"MingEn82"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"MingEn82"},"content":"        return this.tasks;","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":86,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":87,"author":{"gitId":"MingEn82"},"content":"     * Gets all tasks with specified substring in task description","lastModifiedDate":"2023-02-19"},{"lineNumber":88,"author":{"gitId":"MingEn82"},"content":"     * @param taskSubstring query param","lastModifiedDate":"2023-02-19"},{"lineNumber":89,"author":{"gitId":"MingEn82"},"content":"     * @return TaskList of filtered tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":90,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":91,"author":{"gitId":"MingEn82"},"content":"    public TaskList getFilteredTasks(String taskSubstring) {","lastModifiedDate":"2023-02-18"},{"lineNumber":92,"author":{"gitId":"MingEn82"},"content":"        TaskList filteredTasks \u003d new TaskList();","lastModifiedDate":"2023-02-18"},{"lineNumber":93,"author":{"gitId":"MingEn82"},"content":"        for (Task t : getTasks()) {","lastModifiedDate":"2023-02-18"},{"lineNumber":94,"author":{"gitId":"MingEn82"},"content":"            if (!t.getTaskDescription().toLowerCase().contains(taskSubstring.toLowerCase())) {","lastModifiedDate":"2023-02-18"},{"lineNumber":95,"author":{"gitId":"MingEn82"},"content":"                continue;","lastModifiedDate":"2023-02-18"},{"lineNumber":96,"author":{"gitId":"MingEn82"},"content":"            }","lastModifiedDate":"2023-02-18"},{"lineNumber":97,"author":{"gitId":"MingEn82"},"content":"            filteredTasks.addTask(t);","lastModifiedDate":"2023-02-18"},{"lineNumber":98,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":99,"author":{"gitId":"MingEn82"},"content":"        return filteredTasks;","lastModifiedDate":"2023-02-18"},{"lineNumber":100,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":101,"author":{"gitId":"MingEn82"},"content":"    ","lastModifiedDate":"2023-02-18"},{"lineNumber":102,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":103,"author":{"gitId":"MingEn82"},"content":"     * Gets all upcoming tasks with deadline within the next 3 days","lastModifiedDate":"2023-02-19"},{"lineNumber":104,"author":{"gitId":"MingEn82"},"content":"     * @return TaskList of upcoming tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":105,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":106,"author":{"gitId":"MingEn82"},"content":"    public TaskList getUpcomingTasks() {","lastModifiedDate":"2023-02-18"},{"lineNumber":107,"author":{"gitId":"MingEn82"},"content":"        TaskList upcomingTasks \u003d new TaskList();","lastModifiedDate":"2023-02-18"},{"lineNumber":108,"author":{"gitId":"MingEn82"},"content":"        LocalDateTime currentDate \u003d LocalDateTime.now();","lastModifiedDate":"2023-02-18"},{"lineNumber":109,"author":{"gitId":"MingEn82"},"content":"        LocalDateTime deadline;","lastModifiedDate":"2023-02-18"},{"lineNumber":110,"author":{"gitId":"MingEn82"},"content":"        for (Task t : getTasks()) {","lastModifiedDate":"2023-02-18"},{"lineNumber":111,"author":{"gitId":"MingEn82"},"content":"            if (t instanceof Deadline) {","lastModifiedDate":"2023-02-18"},{"lineNumber":112,"author":{"gitId":"MingEn82"},"content":"                deadline \u003d DateParser.stringToDate(((Deadline) t).getEndDate());","lastModifiedDate":"2023-02-18"},{"lineNumber":113,"author":{"gitId":"MingEn82"},"content":"            } else if (t instanceof Event) {","lastModifiedDate":"2023-02-18"},{"lineNumber":114,"author":{"gitId":"MingEn82"},"content":"                deadline \u003d DateParser.stringToDate(((Event) t).getEndDate());","lastModifiedDate":"2023-02-18"},{"lineNumber":115,"author":{"gitId":"MingEn82"},"content":"            } else {","lastModifiedDate":"2023-02-18"},{"lineNumber":116,"author":{"gitId":"MingEn82"},"content":"                continue;","lastModifiedDate":"2023-02-18"},{"lineNumber":117,"author":{"gitId":"MingEn82"},"content":"            }","lastModifiedDate":"2023-02-18"},{"lineNumber":118,"author":{"gitId":"MingEn82"},"content":"            ","lastModifiedDate":"2023-02-18"},{"lineNumber":119,"author":{"gitId":"MingEn82"},"content":"            // If deadline is not within 3 days from now","lastModifiedDate":"2023-02-18"},{"lineNumber":120,"author":{"gitId":"MingEn82"},"content":"            if ((deadline.isBefore(currentDate) || deadline.isAfter(currentDate.plus(3, ChronoUnit.DAYS)))) {","lastModifiedDate":"2023-02-18"},{"lineNumber":121,"author":{"gitId":"MingEn82"},"content":"                continue;","lastModifiedDate":"2023-02-18"},{"lineNumber":122,"author":{"gitId":"MingEn82"},"content":"            }","lastModifiedDate":"2023-02-18"},{"lineNumber":123,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":124,"author":{"gitId":"MingEn82"},"content":"            upcomingTasks.addTask(t);","lastModifiedDate":"2023-02-18"},{"lineNumber":125,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":126,"author":{"gitId":"MingEn82"},"content":"        return upcomingTasks;","lastModifiedDate":"2023-02-18"},{"lineNumber":127,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":128,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":129,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":130,"author":{"gitId":"MingEn82"},"content":"     * Sets currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":131,"author":{"gitId":"MingEn82"},"content":"     * @param tasks new list of tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":132,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":133,"author":{"gitId":"MingEn82"},"content":"    public void setTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-11"},{"lineNumber":134,"author":{"gitId":"MingEn82"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-02-11"},{"lineNumber":135,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":136,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":137,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":138,"author":{"gitId":"MingEn82"},"content":"     * Get number of currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":139,"author":{"gitId":"MingEn82"},"content":"     * @return number of added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":140,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":141,"author":{"gitId":"MingEn82"},"content":"    public int getTasksCount() {","lastModifiedDate":"2023-02-11"},{"lineNumber":142,"author":{"gitId":"MingEn82"},"content":"        return tasks.size();","lastModifiedDate":"2023-02-11"},{"lineNumber":143,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":144,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":145,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":146,"author":{"gitId":"MingEn82"},"content":"     * Returns a task based on its index in the list","lastModifiedDate":"2023-02-19"},{"lineNumber":147,"author":{"gitId":"MingEn82"},"content":"     * @param taskIndex","lastModifiedDate":"2023-02-19"},{"lineNumber":148,"author":{"gitId":"MingEn82"},"content":"     * @return Found Task","lastModifiedDate":"2023-02-19"},{"lineNumber":149,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":150,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":151,"author":{"gitId":"MingEn82"},"content":"    public Task getTask(int taskIndex) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":152,"author":{"gitId":"MingEn82"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":153,"author":{"gitId":"MingEn82"},"content":"            return getTasks().get(taskIndex);","lastModifiedDate":"2023-02-11"},{"lineNumber":154,"author":{"gitId":"MingEn82"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":155,"author":{"gitId":"MingEn82"},"content":"            throw new DukeException(\"Uh oh, the index you have inputted is out of range!\");","lastModifiedDate":"2023-02-11"},{"lineNumber":156,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":157,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":158,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":158}},{"path":"src/main/java/Entities/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Entities;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":" * Basic task","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"     * Constructor for Todo Class","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"     * @param taskDescription details of task","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"     * @param isDone true if task is completed, otherwise false","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"    public Todo(String taskDescription, boolean isDone) {","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * Defines how Todo should be printed","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * @return string format of Todo","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MingEn82":24}},{"path":"src/main/java/EntityUtils/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package EntityUtils;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":" * Helper Class that can convert between LocalDateTime and String","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"public class DateParser {","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"     * Converts string into a datetime representation","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"     * @param d string to be parsed","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * @return LocalDateTime instance","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * @throws DateTimeParseException","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"    public static LocalDateTime stringToDate(String d) throws DateTimeParseException {","lastModifiedDate":"2023-02-18"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"        DateTimeFormatter formatter;","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"        switch (d.length()) {","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"        // Date does not have an associated time","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"        case 8:","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"        case 9:","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"        case 10:","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"            formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-M-d\");","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"            return LocalDate.parse(d, formatter).atTime(23, 59);","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"        // Date has an associated time","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"        case 14:","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"        case 15:","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"        case 16:","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"            formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-M-d HH:mm\");","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"        // Time Format for reading and writing to database","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"        default:","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"            formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"        return LocalDateTime.parse(d, formatter);","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"     * Converts datetime representation to string","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"     * Format used is MMM dd yyyy HH:mm","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"     * @param date date to be parsed","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"     * @return","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"    public static String dateToString(LocalDateTime date) {","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"     * Converts date time represntation to string using custom formatter","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"     * @param date date to be parsed","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"     * @param format Format to parse the datetime represenation","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"     * @return String that corresponds the date instance provided","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"     * @throws IllegalArgumentException","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"    public static String dateToString(LocalDateTime date, String format) throws IllegalArgumentException {","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"        return date.format(DateTimeFormatter.ofPattern(format));","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":61,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"MingEn82":61}},{"path":"src/main/java/EntityUtils/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package EntityUtils;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import Command.Command;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import Command.AddDeadlineCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import Command.AddTodoCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Command.AddEventCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"import Command.DeleteCommand;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"import Command.ExitCommand;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"import Command.FindCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"import Command.ListCommand;","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"import Command.MarkCommand;","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"import Command.UnmarkCommand;","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"import Command.UpcomingCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"import Exceptions.UnknownInputException;","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":" * Class that handles parsing of user inputs","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"public class Parser {","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"     * Parses input and returns a command which matchs it","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"     * @param input user input","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"     * @return corresponding command","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"        String[] inputArray \u003d input.split(\" \");","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"        String command \u003d inputArray[0].toLowerCase();","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"        Command c \u003d null;","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"        switch (command) {","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"        // Exits Duke","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"        case \"bye\":","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"            c \u003d new ExitCommand();","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"        // Lists all added tasks","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"        case \"list\":","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"            c \u003d new ListCommand();","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"        ","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"        // Finds all tasks with specified substring in description","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"        case \"find\":","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"            c \u003d new FindCommand(input);","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"        // Lists upcoming tasks","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"        case \"upcoming\":","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"            c \u003d new UpcomingCommand();","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"        // Creates a new todo","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"            c \u003d new AddTodoCommand(command, input);","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"        // Creates a new deadline","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"MingEn82"},"content":"            c \u003d new AddDeadlineCommand(command, input);","lastModifiedDate":"2023-02-21"},{"lineNumber":61,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":63,"author":{"gitId":"MingEn82"},"content":"        // Creates a new event","lastModifiedDate":"2023-02-21"},{"lineNumber":64,"author":{"gitId":"MingEn82"},"content":"        case \"event\":","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"MingEn82"},"content":"            c \u003d new AddEventCommand(command, input);","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"MingEn82"},"content":"        // Marks a task as done using its index","lastModifiedDate":"2023-02-18"},{"lineNumber":69,"author":{"gitId":"MingEn82"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"MingEn82"},"content":"            c \u003d new MarkCommand(command, input);","lastModifiedDate":"2023-02-18"},{"lineNumber":71,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"MingEn82"},"content":"        // Mark a task as not done using its index","lastModifiedDate":"2023-02-18"},{"lineNumber":74,"author":{"gitId":"MingEn82"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"MingEn82"},"content":"            c \u003d new UnmarkCommand(command, input);","lastModifiedDate":"2023-02-18"},{"lineNumber":76,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"MingEn82"},"content":"        // Delete task using its index","lastModifiedDate":"2023-02-18"},{"lineNumber":79,"author":{"gitId":"MingEn82"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"MingEn82"},"content":"            c \u003d new DeleteCommand(command, input);","lastModifiedDate":"2023-02-18"},{"lineNumber":81,"author":{"gitId":"MingEn82"},"content":"            break;","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"MingEn82"},"content":"        // Throws exception if Duke is unable to understand user input","lastModifiedDate":"2023-02-19"},{"lineNumber":84,"author":{"gitId":"MingEn82"},"content":"        default:","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"MingEn82"},"content":"            throw new UnknownInputException();","lastModifiedDate":"2023-02-18"},{"lineNumber":86,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"MingEn82"},"content":"        return c;","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":89}},{"path":"src/main/java/Exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Exceptions;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":" * Base Exception Class with custom formatting of error message ","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing error messages","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"     * @param errorMessage error message","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"        super(\"\\t\"+errorMessage);","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing error origins","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * @param errorMessage error message","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * @param err Error","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    public DukeException(String errorMessage, Throwable err) {","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"        super(\"\\t\"+errorMessage, err);","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"MingEn82":23}},{"path":"src/main/java/Exceptions/EmptyArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Exceptions;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":" * Called when user input has command word but no arguments provided","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"public class EmptyArgumentException extends DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing missing argument error message","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"     * @param emptyArgument missing argument","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"    public EmptyArgumentException(String emptyArgument) {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"        super(\"Oops! \" + emptyArgument + \" cannot be empty!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing error origins","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * @param emptyArgument missing argument","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * @param err Error","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    public EmptyArgumentException(String emptyArgument,Throwable err) {","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"        super(\"Oops! \" + emptyArgument + \" cannot be empty!\", err);","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"MingEn82":23}},{"path":"src/main/java/Exceptions/InsufficientArgumentsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Exceptions;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":" * Called when user input has command word but insufficient arguments provided","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"public class InsufficientArgumentsException extends DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing missing argument error message","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"     * @param command command input","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"     * @param format proper format of command","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"    public InsufficientArgumentsException(String command, String format) {","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"        super(\"Oops! The format of \" + command + \" is: \" + format);","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing missing argument error origins","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     * @param command command input","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"     * @param format proper format of command","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"     * @param err Error","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"    public InsufficientArgumentsException(String command, String format, Throwable err) {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"        super(\"Oops! The format of \" + command + \" is: \" + format, err);","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"MingEn82":25}},{"path":"src/main/java/Exceptions/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Exceptions;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":" * Called when user inputted date is unable to be parsed successfully","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"public class InvalidDateException extends DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing invalid date error message","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"     * @param date Invalid date","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"    public InvalidDateException(String date) {","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"        super(\"Apologies, I do not understand this date: \" + ","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"                date + ","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"                \"!\\nPlease format your dates as yyyy-MM-dd [HH:mm]\"","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"        );","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"MingEn82":17}},{"path":"src/main/java/Exceptions/InvalidDateSequenceException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Exceptions;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import EntityUtils.DateParser;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":" * Called when start date is later than end date","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"public class InvalidDateSequenceException extends DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing error","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"     * @param startDate","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"     * @param endDate","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    public InvalidDateSequenceException(LocalDateTime startDate, LocalDateTime endDate) {","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"        super(\"Invalid end date: \" + DateParser.dateToString(endDate) + \"\\n\\t\" + ","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"                DateParser.dateToString(startDate) + \" cannot be after \" + DateParser.dateToString(endDate) + \"!\");","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"MingEn82":20}},{"path":"src/main/java/Exceptions/NoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Exceptions;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":" * Called when user did not provide any details for command","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"public class NoDescriptionException extends DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing missing details error message","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"     * @param command command that requires additional details","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"    public NoDescriptionException(String command) {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"        super(\"Oops! The description of \" + command + \" cannot be empty.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"MingEn82":14}},{"path":"src/main/java/Exceptions/NonPositiveNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Exceptions;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":" * Called when user provided a non positive number for task index","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"public class NonPositiveNumberException extends DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing non positive number error message","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"    public NonPositiveNumberException() {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"        super(\"Oops! Only positive integers can be used as the index!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing non positive number error origin","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * @param err Error","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"    public NonPositiveNumberException(Throwable err) {","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"        super(\"Oops! Only positive integers can be used as the index!\", err);","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"MingEn82":21}},{"path":"src/main/java/Exceptions/UnknownInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Exceptions;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":" * Called when Duke is unable to parse user input at all","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"public class UnknownInputException extends DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"     * Constructor for printing unknown input error message","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"    public UnknownInputException() {","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"        super(\"Apologies, I do not understand your request :-(\");","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"MingEn82":13}},{"path":"src/main/java/FileUtils/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package FileUtils;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import java.io.File;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"import Entities.Deadline;","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"import Entities.Event;","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"import Entities.Task;","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"import Entities.Todo;","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"import EntityUtils.DateParser;","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":" * Class that handles reading and writing tasks to database","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"public class Storage {","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"    private static final String readDelimiter \u003d \" \\\\| \";","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"    private static final String writeDelimiter \u003d \" | \";","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"    private File taskFile;","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     * Constructor for Storage Class","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"     * Initialises File instance","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"     * @param filePath path to the database","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"        this.taskFile \u003d new File(filePath);","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"     * Loads the database into an array","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"     * @return Array of Task (empty if file does not exist)","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"            Scanner s \u003d new Scanner(taskFile);","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"            Task currentTask;","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"            ArrayList\u003cTask\u003e savedTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"                currentTask \u003d parseLine(s.nextLine());","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"                if (currentTask !\u003d null) {","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"                    savedTasks.add(currentTask);","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"                }","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"            s.close();","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"            return savedTasks;","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"            throw new DukeException(\"File does not exist!\\nInitialising new Task List\\n\");","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":63,"author":{"gitId":"MingEn82"},"content":"     * Updates database with tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"MingEn82"},"content":"     * @param tasks currently added tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":65,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":66,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":67,"author":{"gitId":"MingEn82"},"content":"    public void write(TaskList tasks) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"MingEn82"},"content":"        FileWriter fw;","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"MingEn82"},"content":"        String taskString;","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"MingEn82"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"MingEn82"},"content":"            if (!taskFile.getParentFile().exists()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"MingEn82"},"content":"                taskFile.getParentFile().mkdirs();","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"MingEn82"},"content":"                taskFile.createNewFile();","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"MingEn82"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":76,"author":{"gitId":"MingEn82"},"content":"            fw \u003d new FileWriter(taskFile);","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"MingEn82"},"content":"    ","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"MingEn82"},"content":"            for (Task t : tasks.getTasks()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"MingEn82"},"content":"                taskString \u003d stringfyTask(t);","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"MingEn82"},"content":"                fw.write(taskString);","lastModifiedDate":"2023-02-11"},{"lineNumber":81,"author":{"gitId":"MingEn82"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"MingEn82"},"content":"            fw.close();","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"MingEn82"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"MingEn82"},"content":"            throw new DukeException(\"IO Exception occurred when writing to file\");","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":86,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":89,"author":{"gitId":"MingEn82"},"content":"     * Parses line in database and converts it to the corresponding task","lastModifiedDate":"2023-02-19"},{"lineNumber":90,"author":{"gitId":"MingEn82"},"content":"     * @param line line in database","lastModifiedDate":"2023-02-19"},{"lineNumber":91,"author":{"gitId":"MingEn82"},"content":"     * @return task instance","lastModifiedDate":"2023-02-19"},{"lineNumber":92,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":93,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":94,"author":{"gitId":"MingEn82"},"content":"    private static Task parseLine(String line) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"MingEn82"},"content":"        String[] taskInformation \u003d line.split(readDelimiter);","lastModifiedDate":"2023-02-11"},{"lineNumber":96,"author":{"gitId":"MingEn82"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"MingEn82"},"content":"        String taskType \u003d taskInformation[0];","lastModifiedDate":"2023-02-11"},{"lineNumber":98,"author":{"gitId":"MingEn82"},"content":"        boolean isDone \u003d taskInformation[1].equals(\"1\") ? true : false;","lastModifiedDate":"2023-02-11"},{"lineNumber":99,"author":{"gitId":"MingEn82"},"content":"        String taskDescription \u003d taskInformation[2];","lastModifiedDate":"2023-02-11"},{"lineNumber":100,"author":{"gitId":"MingEn82"},"content":"        LocalDateTime startDate, endDate;","lastModifiedDate":"2023-02-18"},{"lineNumber":101,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"MingEn82"},"content":"        if (taskType.equalsIgnoreCase(TaskTypes.TODO.toString())) {","lastModifiedDate":"2023-02-19"},{"lineNumber":103,"author":{"gitId":"MingEn82"},"content":"                task \u003d new Todo(taskDescription, isDone);","lastModifiedDate":"2023-02-11"},{"lineNumber":104,"author":{"gitId":"MingEn82"},"content":"        } else if (taskType.equalsIgnoreCase(TaskTypes.DEADLINE.toString())) {","lastModifiedDate":"2023-02-19"},{"lineNumber":105,"author":{"gitId":"MingEn82"},"content":"                endDate \u003d DateParser.stringToDate(taskInformation[3]);","lastModifiedDate":"2023-02-18"},{"lineNumber":106,"author":{"gitId":"MingEn82"},"content":"                task \u003d new Deadline(taskDescription, isDone, endDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"MingEn82"},"content":"        } else if (taskType.equalsIgnoreCase(TaskTypes.EVENT.toString())) {","lastModifiedDate":"2023-02-19"},{"lineNumber":108,"author":{"gitId":"MingEn82"},"content":"            startDate \u003d DateParser.stringToDate(taskInformation[3]);","lastModifiedDate":"2023-02-18"},{"lineNumber":109,"author":{"gitId":"MingEn82"},"content":"            endDate \u003d DateParser.stringToDate(taskInformation[4]);","lastModifiedDate":"2023-02-18"},{"lineNumber":110,"author":{"gitId":"MingEn82"},"content":"            task \u003d new Event(taskDescription, isDone, startDate, endDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"MingEn82"},"content":"        } else {","lastModifiedDate":"2023-02-19"},{"lineNumber":112,"author":{"gitId":"MingEn82"},"content":"            throw new DukeException(\"Error parsing file!\");","lastModifiedDate":"2023-02-11"},{"lineNumber":113,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":115,"author":{"gitId":"MingEn82"},"content":"        return task;","lastModifiedDate":"2023-02-11"},{"lineNumber":116,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":117,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":118,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":119,"author":{"gitId":"MingEn82"},"content":"     * Converts task to a string for storing into database","lastModifiedDate":"2023-02-19"},{"lineNumber":120,"author":{"gitId":"MingEn82"},"content":"     * @param t Task","lastModifiedDate":"2023-02-19"},{"lineNumber":121,"author":{"gitId":"MingEn82"},"content":"     * @return String representation of Task","lastModifiedDate":"2023-02-19"},{"lineNumber":122,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":123,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":124,"author":{"gitId":"MingEn82"},"content":"    private static String stringfyTask(Task t) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":125,"author":{"gitId":"MingEn82"},"content":"        String taskString;","lastModifiedDate":"2023-02-11"},{"lineNumber":126,"author":{"gitId":"MingEn82"},"content":"        String taskType, startDate, endDate;","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"MingEn82"},"content":"        String isDone \u003d t.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"MingEn82"},"content":"        String taskDescription \u003d t.getTaskDescription();","lastModifiedDate":"2023-02-11"},{"lineNumber":129,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":130,"author":{"gitId":"MingEn82"},"content":"        if (t instanceof Todo) {","lastModifiedDate":"2023-02-11"},{"lineNumber":131,"author":{"gitId":"MingEn82"},"content":"            taskType \u003d TaskTypes.TODO.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":132,"author":{"gitId":"MingEn82"},"content":"            taskString \u003d String.join(writeDelimiter, taskType, isDone, taskDescription);","lastModifiedDate":"2023-02-11"},{"lineNumber":133,"author":{"gitId":"MingEn82"},"content":"        } else if (t instanceof Deadline) {","lastModifiedDate":"2023-02-11"},{"lineNumber":134,"author":{"gitId":"MingEn82"},"content":"            Deadline deadline \u003d (Deadline) t;","lastModifiedDate":"2023-02-11"},{"lineNumber":135,"author":{"gitId":"MingEn82"},"content":"            taskType \u003d TaskTypes.DEADLINE.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":136,"author":{"gitId":"MingEn82"},"content":"            endDate \u003d deadline.getEndDate();","lastModifiedDate":"2023-02-11"},{"lineNumber":137,"author":{"gitId":"MingEn82"},"content":"            taskString \u003d String.join(writeDelimiter, taskType, isDone, taskDescription, endDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":138,"author":{"gitId":"MingEn82"},"content":"        } else if (t instanceof Event) {","lastModifiedDate":"2023-02-11"},{"lineNumber":139,"author":{"gitId":"MingEn82"},"content":"            Event event \u003d (Event) t;","lastModifiedDate":"2023-02-11"},{"lineNumber":140,"author":{"gitId":"MingEn82"},"content":"            taskType \u003d TaskTypes.EVENT.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":141,"author":{"gitId":"MingEn82"},"content":"            startDate \u003d event.getStartDate();","lastModifiedDate":"2023-02-11"},{"lineNumber":142,"author":{"gitId":"MingEn82"},"content":"            endDate \u003d event.getEndDate();","lastModifiedDate":"2023-02-11"},{"lineNumber":143,"author":{"gitId":"MingEn82"},"content":"            taskString \u003d String.join(writeDelimiter, taskType, isDone, taskDescription, startDate, endDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":144,"author":{"gitId":"MingEn82"},"content":"        } else {","lastModifiedDate":"2023-02-11"},{"lineNumber":145,"author":{"gitId":"MingEn82"},"content":"            throw new DukeException(\"Line is corrupted!\");","lastModifiedDate":"2023-02-11"},{"lineNumber":146,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":147,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":148,"author":{"gitId":"MingEn82"},"content":"        return taskString + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":149,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":150,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":150}},{"path":"src/main/java/FileUtils/TaskTypes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package FileUtils;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":" * Enum to store identifiers for the different types of task","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"public enum TaskTypes {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"    TODO(\"T\"), ","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"    DEADLINE(\"D\"), ","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"    EVENT(\"E\");","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":"    private String taskType;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"    private TaskTypes(String taskType) {","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    ","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"    public String toString(){","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"        return taskType;","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"MingEn82":20}},{"path":"src/main/java/Output/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"package Output;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"MingEn82"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"MingEn82"},"content":"import Entities.Task;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"MingEn82"},"content":"import Entities.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"MingEn82"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"MingEn82"},"content":" * Class responsible for outputting to CLI as interface between user and Duke","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"MingEn82"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"MingEn82"},"content":"public class UI {","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"MingEn82"},"content":"    public static Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"MingEn82"},"content":"     * Reads user input","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"MingEn82"},"content":"     * @return user input","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"MingEn82"},"content":"    public String readCommand() {","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"MingEn82"},"content":"        String command \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"MingEn82"},"content":"        while (command.length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"            command \u003d sc.nextLine();","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"MingEn82"},"content":"        return command;","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"MingEn82"},"content":"     * Prints Welcome message when Duke first starts","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"MingEn82"},"content":"    public void printIntroduction() {","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"MingEn82"},"content":"        printLine();","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"MingEn82"},"content":"        System.out.println(\"\\tHello! I\u0027m Duke. Hope you are having a wonderful day\");","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"MingEn82"},"content":"        System.out.println(\"\\tWhat can I do for you?\");","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"MingEn82"},"content":"        printLine();","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"MingEn82"},"content":"     * Prints Goodbye message when Duke exits","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"MingEn82"},"content":"    public void printGoodbye() {","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"MingEn82"},"content":"        System.out.println(\"\\tBye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"MingEn82"},"content":"     * Helper function to print divider","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"MingEn82"},"content":"    public void printLine() {","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"MingEn82"},"content":"        System.out.println(\"\\t------------------------------------------------------------\");","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"MingEn82"},"content":"     * Prints error message","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"MingEn82"},"content":"     * @param errorMessage error message","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"MingEn82"},"content":"    public void printError(String errorMessage) {","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"MingEn82"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"MingEn82"},"content":"     * Prints message when a new task is added to task list","lastModifiedDate":"2023-02-19"},{"lineNumber":61,"author":{"gitId":"MingEn82"},"content":"     * @param t new task","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"MingEn82"},"content":"     * @param numTasks new number of tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":63,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"MingEn82"},"content":"    public void taskAddedMessage(Task t, int numTasks) {","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"MingEn82"},"content":"        System.out.println(","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"MingEn82"},"content":"                \"\\tGot it. I have added this task to the list!\\n\" + ","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"MingEn82"},"content":"                \"\\t   \" + t.toString() + \"\\n\" + ","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"MingEn82"},"content":"                \"\\tNow you have \" + numTasks + ","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"MingEn82"},"content":"                \" task\" + (numTasks \u003d\u003d 1 ? \"\" : \"s\") + ","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"MingEn82"},"content":"                \" in the list.\\n\"","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"MingEn82"},"content":"        );","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":75,"author":{"gitId":"MingEn82"},"content":"     * Prints all tasks on task list","lastModifiedDate":"2023-02-19"},{"lineNumber":76,"author":{"gitId":"MingEn82"},"content":"     * @param tasks Task List","lastModifiedDate":"2023-02-19"},{"lineNumber":77,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":78,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":79,"author":{"gitId":"MingEn82"},"content":"    public void printTasks(TaskList tasks) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"MingEn82"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":81,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"MingEn82"},"content":"        if (tasks.getTasksCount() \u003d\u003d 0) {","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"MingEn82"},"content":"            output +\u003d \"\\t No tasks found!\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"MingEn82"},"content":"        } else {","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"MingEn82"},"content":"            output +\u003d \"\\t Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":86,"author":{"gitId":"MingEn82"},"content":"            for (int i \u003d 0; i \u003c tasks.getTasksCount(); i++) {","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"MingEn82"},"content":"                output +\u003d \"\\t\" + (i + 1) + \".\" + tasks.getTask(i).toString() + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"MingEn82"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":91,"author":{"gitId":"MingEn82"},"content":"        System.out.printf(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":95,"author":{"gitId":"MingEn82"},"content":"     * Prints all tasks with custom message","lastModifiedDate":"2023-02-19"},{"lineNumber":96,"author":{"gitId":"MingEn82"},"content":"     * @param tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":97,"author":{"gitId":"MingEn82"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-19"},{"lineNumber":98,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":99,"author":{"gitId":"MingEn82"},"content":"    public void printTasks(TaskList tasks, String header) throws DukeException {","lastModifiedDate":"2023-02-19"},{"lineNumber":100,"author":{"gitId":"MingEn82"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-02-18"},{"lineNumber":101,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":102,"author":{"gitId":"MingEn82"},"content":"        if (tasks.getTasksCount() \u003d\u003d 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":103,"author":{"gitId":"MingEn82"},"content":"            output +\u003d \"\\t No tasks found!\\n\";","lastModifiedDate":"2023-02-18"},{"lineNumber":104,"author":{"gitId":"MingEn82"},"content":"        } else {","lastModifiedDate":"2023-02-18"},{"lineNumber":105,"author":{"gitId":"MingEn82"},"content":"            output +\u003d \"\\t\" + header + \"\\n\";","lastModifiedDate":"2023-02-19"},{"lineNumber":106,"author":{"gitId":"MingEn82"},"content":"            for (int i \u003d 0; i \u003c tasks.getTasksCount(); i++) {","lastModifiedDate":"2023-02-18"},{"lineNumber":107,"author":{"gitId":"MingEn82"},"content":"                output +\u003d \"\\t\" + (i + 1) + \".\" + tasks.getTask(i).toString() + \"\\n\";","lastModifiedDate":"2023-02-18"},{"lineNumber":108,"author":{"gitId":"MingEn82"},"content":"            }","lastModifiedDate":"2023-02-18"},{"lineNumber":109,"author":{"gitId":"MingEn82"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":110,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":111,"author":{"gitId":"MingEn82"},"content":"        System.out.printf(output);","lastModifiedDate":"2023-02-18"},{"lineNumber":112,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":113,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":114,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":115,"author":{"gitId":"MingEn82"},"content":"     * Prints message when a task is deleted to task list","lastModifiedDate":"2023-02-19"},{"lineNumber":116,"author":{"gitId":"MingEn82"},"content":"     * @param t deleted task","lastModifiedDate":"2023-02-19"},{"lineNumber":117,"author":{"gitId":"MingEn82"},"content":"     * @param numTasks new number of tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":118,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":119,"author":{"gitId":"MingEn82"},"content":"    public void taskDeletedMessage(Task t, int numTasks) {","lastModifiedDate":"2023-02-11"},{"lineNumber":120,"author":{"gitId":"MingEn82"},"content":"        System.out.println(","lastModifiedDate":"2023-02-11"},{"lineNumber":121,"author":{"gitId":"MingEn82"},"content":"                \"\\tNoted. I\u0027ve removed this task:\\n\" + ","lastModifiedDate":"2023-02-11"},{"lineNumber":122,"author":{"gitId":"MingEn82"},"content":"                \"\\t   \" + t.toString() + \"\\n\" + ","lastModifiedDate":"2023-02-11"},{"lineNumber":123,"author":{"gitId":"MingEn82"},"content":"                \"\\tNow you have \" + numTasks + ","lastModifiedDate":"2023-02-11"},{"lineNumber":124,"author":{"gitId":"MingEn82"},"content":"                \" task\" + (numTasks \u003d\u003d 1 ? \"\" : \"s\") + ","lastModifiedDate":"2023-02-11"},{"lineNumber":125,"author":{"gitId":"MingEn82"},"content":"                \" in the list.\\n\"","lastModifiedDate":"2023-02-11"},{"lineNumber":126,"author":{"gitId":"MingEn82"},"content":"        );","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":129,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":130,"author":{"gitId":"MingEn82"},"content":"     * Prints message when a task is marked as completed","lastModifiedDate":"2023-02-19"},{"lineNumber":131,"author":{"gitId":"MingEn82"},"content":"     * @param t task that is marked as completed","lastModifiedDate":"2023-02-19"},{"lineNumber":132,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":133,"author":{"gitId":"MingEn82"},"content":"    public void printMarkedTask(Task t) {","lastModifiedDate":"2023-02-11"},{"lineNumber":134,"author":{"gitId":"MingEn82"},"content":"        System.out.println( ","lastModifiedDate":"2023-02-11"},{"lineNumber":135,"author":{"gitId":"MingEn82"},"content":"                \"\\tNice! I\u0027ve marked this task as done:\\n\" + ","lastModifiedDate":"2023-02-11"},{"lineNumber":136,"author":{"gitId":"MingEn82"},"content":"                \"\\t   \" + t.toString() + \"\\n\"","lastModifiedDate":"2023-02-11"},{"lineNumber":137,"author":{"gitId":"MingEn82"},"content":"        );","lastModifiedDate":"2023-02-11"},{"lineNumber":138,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":139,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":140,"author":{"gitId":"MingEn82"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":141,"author":{"gitId":"MingEn82"},"content":"     * Prints message when a task is marked as not completed","lastModifiedDate":"2023-02-19"},{"lineNumber":142,"author":{"gitId":"MingEn82"},"content":"     * @param t task that is marked as not completed","lastModifiedDate":"2023-02-19"},{"lineNumber":143,"author":{"gitId":"MingEn82"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":144,"author":{"gitId":"MingEn82"},"content":"    public void printUnmarkedTask(Task t) {","lastModifiedDate":"2023-02-11"},{"lineNumber":145,"author":{"gitId":"MingEn82"},"content":"        System.out.println( ","lastModifiedDate":"2023-02-11"},{"lineNumber":146,"author":{"gitId":"MingEn82"},"content":"                \"\\tOK, I\u0027ve marked this task as not done yet:\\n\" + ","lastModifiedDate":"2023-02-11"},{"lineNumber":147,"author":{"gitId":"MingEn82"},"content":"                \"\\t   \" + t.toString() + \"\\n\"","lastModifiedDate":"2023-02-11"},{"lineNumber":148,"author":{"gitId":"MingEn82"},"content":"        );","lastModifiedDate":"2023-02-11"},{"lineNumber":149,"author":{"gitId":"MingEn82"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":150,"author":{"gitId":"MingEn82"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"MingEn82":150}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"MingEn82"},"content":"todo test","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"MingEn82"},"content":"bye","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MingEn82":2}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"MingEn82"},"content":"del ACTUAL.TXT","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"MingEn82"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"MingEn82"},"content":"PAUSE","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MingEn82":3,"-":20}}]
