[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"# Bunny","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"It does something! It can also do nothing!","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"3. After that, locate the `src/main/java/com/ethanyidong/bunny/Bunny.java` file, right-click it, and choose `Run com.ethanyidong.bunny.Bunny.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"   ____________________________________________________________","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"\t Hello! I\u0027m Bunny.","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"\t What can I do for you?","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"\t____________________________________________________________","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"EthanYidong":7,"-":15}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"# Bunny User Guide","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"### Tracking Tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"Bunny can track a list of Todos, Deadlines, and Events for you. You can add and [delete](#delete---remove-task-from-the-list) tasks from a list.","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"[Todos](#todo---create-a-new-todo) are basic tasks with a name.","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"[Deadlines](#deadline---create-a-new-deadline) are tasks with a name and a due date.","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"[Events](#event---create-a-new-event) are tasks with a name as well as start and end dates.","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"### Marking","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"Bunny can mark any of your tasks as [done](#mark---set-task-as-done) or [not done](#unmark---set-task-as-not-done).","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"### List","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"Bunny can display a [list](#list---list-tasks) of all your tasks.","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"### Find","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"Bunny can display a [list](#find---list-tasks-with-a-specific-keyword) of your tasks whose names contain a certain keyword.","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"### Save File","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"Bunny will automatically save your existing tasks to a file in your home directory called `bunny.aof`.","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"The save data will automatically be loaded when you next start the application.","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"### Usage Specification Format","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"Positional arguments follow directly after the command name.","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"`[value]` means that a positional argument is expected.","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"Flag arguments follow after the positional argument, or directly after the command name if there is no positional argument.","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"They can be specified in any order.","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"The value of the argument is prefixed by a forward slash followed by the name of the argument.","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"EthanYidong"},"content":"`/name [value]` means that a flag argument with the name `name` is expected.","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"EthanYidong"},"content":"### Date Format","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"EthanYidong"},"content":"If the argument is prefixed with `DATE` (for example: `DATE_by`), then you may **optionally** specify the date in","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"EthanYidong"},"content":"`YYYY-MM-DD` format. Bunny will then output a human-readable date when displaying that task.","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"EthanYidong"},"content":"### Control","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"EthanYidong"},"content":"#### `bye` - Exit the app","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"EthanYidong"},"content":"Exits the app","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"EthanYidong"},"content":"Usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"EthanYidong"},"content":"`bye`","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"EthanYidong"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"EthanYidong"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"EthanYidong"},"content":"Example:","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"EthanYidong"},"content":"![Bye Example](./screenshots/bye.png)","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"EthanYidong"},"content":"### Creating Tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"EthanYidong"},"content":"#### `todo` - Create a new Todo","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"EthanYidong"},"content":"Creates a new Todo and adds it to your task list","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":71,"author":{"gitId":"EthanYidong"},"content":"Usage: ","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"EthanYidong"},"content":"`todo [name]`","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":76,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"EthanYidong"},"content":"I\u0027ve added ths task: [T][ ] ???","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"EthanYidong"},"content":"Now you have ??? tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"EthanYidong"},"content":"Example:","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"EthanYidong"},"content":"![Todo Example](./screenshots/todo.png)","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"EthanYidong"},"content":"#### `deadline` - Create a new Deadline","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"EthanYidong"},"content":"Creates a new Deadline and adds it to your task list","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"EthanYidong"},"content":"Usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"EthanYidong"},"content":"`deadline [name] /by [DATE_by]`","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":92,"author":{"gitId":"EthanYidong"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":93,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":94,"author":{"gitId":"EthanYidong"},"content":"I\u0027ve added ths task: [D][ ] ??? (by: ???)","lastModifiedDate":"2023-03-01"},{"lineNumber":95,"author":{"gitId":"EthanYidong"},"content":"Now you have ??? tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":96,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":97,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":98,"author":{"gitId":"EthanYidong"},"content":"Example:","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"EthanYidong"},"content":"![Deadline Example](./screenshots/deadline.png)","lastModifiedDate":"2023-03-01"},{"lineNumber":100,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":101,"author":{"gitId":"EthanYidong"},"content":"#### `event` - Create a new Event","lastModifiedDate":"2023-03-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":103,"author":{"gitId":"EthanYidong"},"content":"Creates a new Event and adds it to your task list","lastModifiedDate":"2023-03-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":105,"author":{"gitId":"EthanYidong"},"content":"Usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":106,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":107,"author":{"gitId":"EthanYidong"},"content":"`event [name] /from [DATE_from] /to [DATE_to]`","lastModifiedDate":"2023-03-01"},{"lineNumber":108,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":109,"author":{"gitId":"EthanYidong"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":111,"author":{"gitId":"EthanYidong"},"content":"I\u0027ve added ths task: [E][ ] ??? (from: ??? to: ???)","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"EthanYidong"},"content":"Now you have ??? tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":114,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"EthanYidong"},"content":"Example:","lastModifiedDate":"2023-03-01"},{"lineNumber":116,"author":{"gitId":"EthanYidong"},"content":"![Event Example](./screenshots/event.png)","lastModifiedDate":"2023-03-01"},{"lineNumber":117,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":118,"author":{"gitId":"EthanYidong"},"content":"### Displaying tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":119,"author":{"gitId":"EthanYidong"},"content":"#### `list` - List tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":120,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":121,"author":{"gitId":"EthanYidong"},"content":"List existing tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":122,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":123,"author":{"gitId":"EthanYidong"},"content":"Usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":124,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":125,"author":{"gitId":"EthanYidong"},"content":"`list`","lastModifiedDate":"2023-03-01"},{"lineNumber":126,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":127,"author":{"gitId":"EthanYidong"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":128,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":129,"author":{"gitId":"EthanYidong"},"content":"1. ???","lastModifiedDate":"2023-03-01"},{"lineNumber":130,"author":{"gitId":"EthanYidong"},"content":"2. ???","lastModifiedDate":"2023-03-01"},{"lineNumber":131,"author":{"gitId":"EthanYidong"},"content":"3. ???","lastModifiedDate":"2023-03-01"},{"lineNumber":132,"author":{"gitId":"EthanYidong"},"content":"...","lastModifiedDate":"2023-03-01"},{"lineNumber":133,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":134,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":135,"author":{"gitId":"EthanYidong"},"content":"Example:","lastModifiedDate":"2023-03-01"},{"lineNumber":136,"author":{"gitId":"EthanYidong"},"content":"![List Example](./screenshots/list.png)","lastModifiedDate":"2023-03-01"},{"lineNumber":137,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":138,"author":{"gitId":"EthanYidong"},"content":"#### `find` - List tasks with a specific keyword","lastModifiedDate":"2023-03-01"},{"lineNumber":139,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":140,"author":{"gitId":"EthanYidong"},"content":"Find existing tasks whose name contains a specific keyword (can be multiple words long)","lastModifiedDate":"2023-03-01"},{"lineNumber":141,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":142,"author":{"gitId":"EthanYidong"},"content":"Note: the keyword is case senstive","lastModifiedDate":"2023-03-01"},{"lineNumber":143,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":144,"author":{"gitId":"EthanYidong"},"content":"Usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":145,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":146,"author":{"gitId":"EthanYidong"},"content":"`find [keyword]`","lastModifiedDate":"2023-03-01"},{"lineNumber":147,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":148,"author":{"gitId":"EthanYidong"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":149,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":150,"author":{"gitId":"EthanYidong"},"content":"1. ???","lastModifiedDate":"2023-03-01"},{"lineNumber":151,"author":{"gitId":"EthanYidong"},"content":"2. ???","lastModifiedDate":"2023-03-01"},{"lineNumber":152,"author":{"gitId":"EthanYidong"},"content":"3. ???","lastModifiedDate":"2023-03-01"},{"lineNumber":153,"author":{"gitId":"EthanYidong"},"content":"...","lastModifiedDate":"2023-03-01"},{"lineNumber":154,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":155,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":156,"author":{"gitId":"EthanYidong"},"content":"Example:","lastModifiedDate":"2023-03-01"},{"lineNumber":157,"author":{"gitId":"EthanYidong"},"content":"![Find Example](./screenshots/find.png)","lastModifiedDate":"2023-03-01"},{"lineNumber":158,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":159,"author":{"gitId":"EthanYidong"},"content":"### Modifying tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":160,"author":{"gitId":"EthanYidong"},"content":"Note: the `task_index` argument used for these commands should be based on the order returned by the","lastModifiedDate":"2023-03-01"},{"lineNumber":161,"author":{"gitId":"EthanYidong"},"content":"`list` command, not the `find` command.","lastModifiedDate":"2023-03-01"},{"lineNumber":162,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":163,"author":{"gitId":"EthanYidong"},"content":"#### `mark` - Set task as done","lastModifiedDate":"2023-03-01"},{"lineNumber":164,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":165,"author":{"gitId":"EthanYidong"},"content":"Set a task as done based on the index in the task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":166,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":167,"author":{"gitId":"EthanYidong"},"content":"Usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":168,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":169,"author":{"gitId":"EthanYidong"},"content":"`mark [task_index]`","lastModifiedDate":"2023-03-01"},{"lineNumber":170,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":171,"author":{"gitId":"EthanYidong"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":172,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":173,"author":{"gitId":"EthanYidong"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-03-01"},{"lineNumber":174,"author":{"gitId":"EthanYidong"},"content":"???","lastModifiedDate":"2023-03-01"},{"lineNumber":175,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":176,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":177,"author":{"gitId":"EthanYidong"},"content":"Example:","lastModifiedDate":"2023-03-01"},{"lineNumber":178,"author":{"gitId":"EthanYidong"},"content":"![Mark Example](./screenshots/mark.png)","lastModifiedDate":"2023-03-01"},{"lineNumber":179,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":180,"author":{"gitId":"EthanYidong"},"content":"#### `unmark` - Set task as not done","lastModifiedDate":"2023-03-01"},{"lineNumber":181,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":182,"author":{"gitId":"EthanYidong"},"content":"Set a task as not done based on the index in the task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":183,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":184,"author":{"gitId":"EthanYidong"},"content":"Usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":185,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":186,"author":{"gitId":"EthanYidong"},"content":"`unmark [task_index]`","lastModifiedDate":"2023-03-01"},{"lineNumber":187,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":188,"author":{"gitId":"EthanYidong"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":189,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":190,"author":{"gitId":"EthanYidong"},"content":"Nice! I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-03-01"},{"lineNumber":191,"author":{"gitId":"EthanYidong"},"content":"???","lastModifiedDate":"2023-03-01"},{"lineNumber":192,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":193,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":194,"author":{"gitId":"EthanYidong"},"content":"Example:","lastModifiedDate":"2023-03-01"},{"lineNumber":195,"author":{"gitId":"EthanYidong"},"content":"![Unmark Example](./screenshots/unmark.png)","lastModifiedDate":"2023-03-01"},{"lineNumber":196,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":197,"author":{"gitId":"EthanYidong"},"content":"#### `delete` - Remove task from the list","lastModifiedDate":"2023-03-01"},{"lineNumber":198,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":199,"author":{"gitId":"EthanYidong"},"content":"Remove a task based on the index in the task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":200,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":201,"author":{"gitId":"EthanYidong"},"content":"Usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":202,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":203,"author":{"gitId":"EthanYidong"},"content":"`delete [task_index]`","lastModifiedDate":"2023-03-01"},{"lineNumber":204,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":205,"author":{"gitId":"EthanYidong"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":206,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":207,"author":{"gitId":"EthanYidong"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-03-01"},{"lineNumber":208,"author":{"gitId":"EthanYidong"},"content":"???","lastModifiedDate":"2023-03-01"},{"lineNumber":209,"author":{"gitId":"EthanYidong"},"content":"Now you have ??? tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":210,"author":{"gitId":"EthanYidong"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":211,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":212,"author":{"gitId":"EthanYidong"},"content":"Example:","lastModifiedDate":"2023-03-01"},{"lineNumber":213,"author":{"gitId":"EthanYidong"},"content":"![Delete Example](./screenshots/delete.png)","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"EthanYidong":195,"-":18}},{"path":"src/main/java/com/ethanyidong/bunny/Bunny.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"public class Bunny {","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"    public static final String DISABLE_SAVE \u003d \"nosave\";","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"        final boolean saveEnabled \u003d args.length \u003c 1 || !args[0].equals(DISABLE_SAVE);","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"        BunnySession bunny \u003d new BunnySession(saveEnabled);","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"        bunny.runBunny();","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"EthanYidong":12}},{"path":"src/main/java/com/ethanyidong/bunny/BunnySession.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.InvalidCommandException;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.cmd.ExecutableCommand;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.cmd.TokenizedCommand;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" * Handles control flow of the Bunny app.","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"public class BunnySession {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"    private final BunnyTaskList tasks;","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"    private final BunnyUI ui;","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"    private final BunnyStorage storage;","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"    private boolean isQuit;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    private boolean isSuppressed;","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"     * @param saveEnabled whether to load and save commands to a save file (disabled for testing purposes)","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"    public BunnySession(boolean saveEnabled) {","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"        this.tasks \u003d new BunnyTaskList();","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"        this.ui \u003d new BunnyUI();","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"        this.storage \u003d new BunnyStorage(saveEnabled);","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"        this.isQuit \u003d false;","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"        this.isSuppressed \u003d false;","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e the user has quit the session, \u003ccode\u003efalse\u003c/code\u003e otherwise","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"    public boolean isQuit() {","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"        return this.isQuit;","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"     * Quits the session if control is not currently suppressed","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"     * @see BunnySession#setIsSuppressed(boolean)","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"    public void quit() {","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"        this.isQuit \u003d !this.isSuppressed;","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"EthanYidong"},"content":"     * Suppresses or unsuppresses output and control","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"EthanYidong"},"content":"     * @param isSuppressed new suppression state","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"EthanYidong"},"content":"    public void setIsSuppressed(boolean isSuppressed) {","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"EthanYidong"},"content":"        this.isSuppressed \u003d isSuppressed;","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"EthanYidong"},"content":"        this.ui.setIsSuppressed(isSuppressed);","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"EthanYidong"},"content":"     * @return The reference to the list of tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"EthanYidong"},"content":"    public BunnyTaskList getTasks() {","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"EthanYidong"},"content":"        return this.tasks;","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"EthanYidong"},"content":"     * @return A reference to the user interaction handler","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"EthanYidong"},"content":"    public BunnyUI getUI() {","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"EthanYidong"},"content":"        return this.ui;","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"EthanYidong"},"content":"     * Parses raw input into a command executes the command on the current session","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"EthanYidong"},"content":"     * @param commandString the raw (unparsed) string of the command to run","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"EthanYidong"},"content":"    public void runCommandString(String commandString) {","lastModifiedDate":"2023-03-01"},{"lineNumber":75,"author":{"gitId":"EthanYidong"},"content":"        TokenizedCommand inputCommand \u003d new TokenizedCommand(commandString);","lastModifiedDate":"2023-03-01"},{"lineNumber":76,"author":{"gitId":"EthanYidong"},"content":"        ExecutableCommand executableCommand;","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"EthanYidong"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"EthanYidong"},"content":"            executableCommand \u003d ExecutableCommand.validateAndParse(this, inputCommand);","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"EthanYidong"},"content":"        } catch (InvalidCommandException ice) {","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"EthanYidong"},"content":"            this.ui.printMessage(ice.getFriendlyErrorMessage(this));","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"EthanYidong"},"content":"            return;","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"EthanYidong"},"content":"        executableCommand.execute(this);","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"EthanYidong"},"content":"     * Loads the existing save file if saving is enabled and it exists, then runs the REPL of the app.","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"EthanYidong"},"content":"     * All commands entered are saved to the file if saving is enabled","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"EthanYidong"},"content":"    public void runBunny() {","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"EthanYidong"},"content":"        this.storage.loadSave(this);","lastModifiedDate":"2023-03-01"},{"lineNumber":92,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"EthanYidong"},"content":"        this.ui.printMessage(this.ui.WELCOME_MESSAGE);","lastModifiedDate":"2023-03-01"},{"lineNumber":94,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":95,"author":{"gitId":"EthanYidong"},"content":"        this.storage.beginSave(this);","lastModifiedDate":"2023-03-01"},{"lineNumber":96,"author":{"gitId":"EthanYidong"},"content":"        while (!this.isQuit()) {","lastModifiedDate":"2023-03-01"},{"lineNumber":97,"author":{"gitId":"EthanYidong"},"content":"            String input \u003d this.ui.getNextCommandString();","lastModifiedDate":"2023-03-01"},{"lineNumber":98,"author":{"gitId":"EthanYidong"},"content":"            this.runCommandString(input);","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"EthanYidong"},"content":"            this.storage.save(this, input);","lastModifiedDate":"2023-03-01"},{"lineNumber":100,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":101,"author":{"gitId":"EthanYidong"},"content":"        this.ui.printMessage(this.ui.EXIT_MESSAGE);","lastModifiedDate":"2023-03-01"},{"lineNumber":102,"author":{"gitId":"EthanYidong"},"content":"        this.storage.endSave(this);","lastModifiedDate":"2023-03-01"},{"lineNumber":103,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":104,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"EthanYidong":104}},{"path":"src/main/java/com/ethanyidong/bunny/BunnyStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":" * Handles loading and saving from a save file","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"public class BunnyStorage {","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    private final static String SAVE_PATH_STRING \u003d \"bunny.aof\";","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"    private boolean saveEnabled;","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    private final Path savePath;","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"    private BufferedWriter saveWriter \u003d null;","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"     * @param saveEnabled whether saving is enabled.","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"     *                    If set to \u003ccode\u003efalse\u003c/code\u003e, other methods will do nothing.","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"    public BunnyStorage(boolean saveEnabled) {","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"        this.saveEnabled \u003d saveEnabled;","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"        this.savePath \u003d Paths.get(SAVE_PATH_STRING);","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"     * Loads previously entered commands from a save file","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny the session to load the save into","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"    public void loadSave(BunnySession bunny) {","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"        if (!saveEnabled) {","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"            return;","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"        boolean saveFileExists \u003d Files.exists(this.savePath);","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"        if (!saveFileExists) {","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"            return;","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"EthanYidong"},"content":"        bunny.setIsSuppressed(true);","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"EthanYidong"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"EthanYidong"},"content":"            BufferedReader reader \u003d Files.newBufferedReader(this.savePath, StandardCharsets.UTF_8);","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"EthanYidong"},"content":"            String saveFileLine \u003d reader.readLine();","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"EthanYidong"},"content":"            while (saveFileLine !\u003d null) {","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"EthanYidong"},"content":"                bunny.runCommandString(saveFileLine);","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"EthanYidong"},"content":"                saveFileLine \u003d reader.readLine();","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"EthanYidong"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"EthanYidong"},"content":"            reader.close();","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"EthanYidong"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"EthanYidong"},"content":"            System.out.println(bunny.getUI().LOAD_ERROR_MESSAGE);","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"EthanYidong"},"content":"        } finally {","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"EthanYidong"},"content":"            bunny.setIsSuppressed(false);","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"EthanYidong"},"content":"     * Disables this class from writing to the save file.","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"EthanYidong"},"content":"    public void disableSave() {","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"EthanYidong"},"content":"        this.saveEnabled \u003d false;","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"EthanYidong"},"content":"     * Opens the save file for writing. Must be called before calling \u003ccode\u003esave()\u003c/code\u003e.","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"EthanYidong"},"content":"     * @throws IOException if there is an error opening the file at savePath for writing","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"EthanYidong"},"content":"    public void beginSave(BunnySession bunny) {","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"EthanYidong"},"content":"        if (!saveEnabled) {","lastModifiedDate":"2023-03-01"},{"lineNumber":75,"author":{"gitId":"EthanYidong"},"content":"            return;","lastModifiedDate":"2023-03-01"},{"lineNumber":76,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"EthanYidong"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"EthanYidong"},"content":"            this.saveWriter \u003d Files.newBufferedWriter(","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"EthanYidong"},"content":"                    this.savePath,","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"EthanYidong"},"content":"                    StandardCharsets.UTF_8,","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"EthanYidong"},"content":"                    new StandardOpenOption[]{StandardOpenOption.APPEND, StandardOpenOption.CREATE});","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"EthanYidong"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"EthanYidong"},"content":"            this.saveEnabled \u003d false;","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"EthanYidong"},"content":"            System.out.println(bunny.getUI().SAVE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"EthanYidong"},"content":"     * Saves a command to the save file","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"EthanYidong"},"content":"     * @param saveData the command to save to the saveFile","lastModifiedDate":"2023-03-01"},{"lineNumber":92,"author":{"gitId":"EthanYidong"},"content":"     * @throws IOException if the save file is not opened using \u003ccode\u003ebeginSave()\u003c/code\u003e, or if other errors occured","lastModifiedDate":"2023-03-01"},{"lineNumber":93,"author":{"gitId":"EthanYidong"},"content":"     *                     while writing to the save file","lastModifiedDate":"2023-03-01"},{"lineNumber":94,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":95,"author":{"gitId":"EthanYidong"},"content":"    public void save(BunnySession bunny, String saveData) {","lastModifiedDate":"2023-03-01"},{"lineNumber":96,"author":{"gitId":"EthanYidong"},"content":"        if (!saveEnabled) {","lastModifiedDate":"2023-03-01"},{"lineNumber":97,"author":{"gitId":"EthanYidong"},"content":"            return;","lastModifiedDate":"2023-03-01"},{"lineNumber":98,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"EthanYidong"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":100,"author":{"gitId":"EthanYidong"},"content":"            this.saveWriter.write(saveData + \"\\n\");","lastModifiedDate":"2023-03-01"},{"lineNumber":101,"author":{"gitId":"EthanYidong"},"content":"            this.saveWriter.flush();","lastModifiedDate":"2023-03-01"},{"lineNumber":102,"author":{"gitId":"EthanYidong"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":103,"author":{"gitId":"EthanYidong"},"content":"            this.saveEnabled \u003d false;","lastModifiedDate":"2023-03-01"},{"lineNumber":104,"author":{"gitId":"EthanYidong"},"content":"            System.out.println(bunny.getUI().SAVE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-01"},{"lineNumber":105,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":106,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":107,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":108,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":109,"author":{"gitId":"EthanYidong"},"content":"     * Closes the save file","lastModifiedDate":"2023-03-01"},{"lineNumber":110,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":111,"author":{"gitId":"EthanYidong"},"content":"     * @throws IOException if errors occured while flushing the buffer to the save file","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"EthanYidong"},"content":"    public void endSave(BunnySession bunny) {","lastModifiedDate":"2023-03-01"},{"lineNumber":114,"author":{"gitId":"EthanYidong"},"content":"        if (!saveEnabled) {","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"EthanYidong"},"content":"            return;","lastModifiedDate":"2023-03-01"},{"lineNumber":116,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":117,"author":{"gitId":"EthanYidong"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":118,"author":{"gitId":"EthanYidong"},"content":"            this.saveWriter.close();","lastModifiedDate":"2023-03-01"},{"lineNumber":119,"author":{"gitId":"EthanYidong"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":120,"author":{"gitId":"EthanYidong"},"content":"            this.saveEnabled \u003d false;","lastModifiedDate":"2023-03-01"},{"lineNumber":121,"author":{"gitId":"EthanYidong"},"content":"            System.out.println(bunny.getUI().SAVE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-01"},{"lineNumber":122,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":123,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":124,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"EthanYidong":124}},{"path":"src/main/java/com/ethanyidong/bunny/BunnyTaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.task.Task;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" * Represents a list of \u003ccode\u003eTask\u003c/code\u003es","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"public class BunnyTaskList {","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     * Creates a new empty list of \u003ccode\u003eTask\u003c/code\u003es","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    public BunnyTaskList() {","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"     * Adds a task to the list","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"     * @param task the task to add to the list","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"     * @param index the index of the task to return","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"     * @return a task from the list at a specified index","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"     * Delete a task at a specified index","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"     * @param index the index of the task to delete","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"EthanYidong"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"EthanYidong"},"content":"     * @return the number of tasks currently in the list","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"EthanYidong"},"content":"    public int numTasks() {","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"EthanYidong"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"EthanYidong":52}},{"path":"src/main/java/com/ethanyidong/bunny/BunnyUI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" * Handles user interaction (input and output from the CLI)","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"public class BunnyUI {","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    public final static String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Bunny.\\nWhat can I do for you?\";","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"    public final static String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"    public final static String ADD_TASK_MESSAGE_FORMAT \u003d \"I\u0027ve added this task: %s\\nNow you have %s %s in the list.\";","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"    public final static String DELETE_TASK_MESSAGE_FORMAT \u003d","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"            \"Noted. I\u0027ve removed this task:\\n\\t%s\\nNow you have %s tasks in the list.\";","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"    public final static String LIST_ELEMENT_MESSAGE_FORMAT \u003d \"%s. %s\";","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    public final static String MARKED_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done\";","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"    public final static String UNMARKED_MESSAGE \u003d \"Nice! I\u0027ve marked this task as not done yet\";","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    public final static String MARK_MESSAGE_FORMAT \u003d \"%s:\\n\\t%s\";","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"    public final static String LOAD_ERROR_MESSAGE \u003d \"Error reading save file! Continuing...\";","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"    public final static String SAVE_ERROR_MESSAGE \u003d","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"            \"Error writing save file! Ensure you have permission to write ./bunny.aof. Disabling save...\";","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"    public final static String INVALID_COMMAND_ERROR_FORMAT \u003d \"Invalid command: %s %s\";","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"    public final static String POSITIONAL_ARGUMENT_ERROR \u003d \"positional argument\";","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"    public final static String FLAG_ARGUMENT_ERROR_FORMAT \u003d \"/%s argument\";","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"    public final static String TASK_INDEX_ARGUMENT_ERROR \u003d \"is not a valid task number\";","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"    public final static String MISSING_ARGUMENT_ERROR \u003d \"is missing\";","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"    public final static String EMPTY_ARGUMENT_ERROR \u003d \"is empty\";","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"    public final static String INTEGER_ARGUMENT_ERROR \u003d \"is not a number\";","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"    private final static String DIVIDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"    private final static String GLOBAL_INDENTATION \u003d \"\\t\";","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"    private final static String MESSAGE_INDENTATION \u003d \" \";","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"    private final Scanner in;","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"    private boolean isSuppressed;","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"    public BunnyUI() {","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"        this.in \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"EthanYidong"},"content":"     * Prints a message with separators and indentation.","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"EthanYidong"},"content":"     * The message may have multiple lines, and indentation will be handled accordingly.","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"EthanYidong"},"content":"     * Does nothing if suppressed.","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"EthanYidong"},"content":"     * @param message the message to print","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"EthanYidong"},"content":"     * @see BunnyUI#setIsSuppressed(boolean)","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"EthanYidong"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"EthanYidong"},"content":"        this.printMessage(Arrays.asList(message.split(\"\\n\")));","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"EthanYidong"},"content":"     * Prints a list of messages in the same section with separators and indentation.","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"EthanYidong"},"content":"     * Does nothing if suppressed.","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"EthanYidong"},"content":"     * @param messageLines a list of messages to print","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"EthanYidong"},"content":"     * @see BunnyUI#setIsSuppressed(boolean)","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"EthanYidong"},"content":"    public void printMessage(Iterable\u003cString\u003e messageLines) {","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"EthanYidong"},"content":"        if (this.isSuppressed) {","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"EthanYidong"},"content":"            return;","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"EthanYidong"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"EthanYidong"},"content":"        output +\u003d GLOBAL_INDENTATION + DIVIDER + \"\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"EthanYidong"},"content":"        for (String line : messageLines) {","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"EthanYidong"},"content":"            output +\u003d GLOBAL_INDENTATION + MESSAGE_INDENTATION + line + \"\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"EthanYidong"},"content":"        output +\u003d GLOBAL_INDENTATION + DIVIDER + \"\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"EthanYidong"},"content":"        System.out.print(output);","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":75,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":76,"author":{"gitId":"EthanYidong"},"content":"     * Blocks until the user enters a command.","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"EthanYidong"},"content":"     * @return the next command issued by the user","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"EthanYidong"},"content":"    public String getNextCommandString() {","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"EthanYidong"},"content":"        return in.nextLine();","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"EthanYidong"},"content":"     * Suppresses or unsuppresses output","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"EthanYidong"},"content":"     * @param isSuppressed new suppression state","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"EthanYidong"},"content":"    public void setIsSuppressed(boolean isSuppressed) {","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"EthanYidong"},"content":"        this.isSuppressed \u003d isSuppressed;","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":92,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"EthanYidong":92}},{"path":"src/main/java/com/ethanyidong/bunny/arg/ArgumentValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.arg;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":" * Represents a class which can determine the validity of an argument in context","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"public interface ArgumentValidator {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"     * Validates an argument","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny    the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     * @param argument the value of the argument to validate","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     * @throws InvalidArgumentException if the argument is invalid","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    void validateArgument(BunnySession bunny, String argument) throws InvalidArgumentException;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":17}},{"path":"src/main/java/com/ethanyidong/bunny/arg/CommandValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.arg;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.cmd.TokenizedCommand;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" * Represents a class which can determine the validity of a command in context","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"public interface CommandValidator {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny   the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     * @param command the tokenized command to validate","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     * @throws InvalidCommandException if the command is invalid","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"    void validateCommand(BunnySession bunny, TokenizedCommand command) throws InvalidCommandException;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":16}},{"path":"src/main/java/com/ethanyidong/bunny/arg/FlagArgumentCommandValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.arg;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.cmd.TokenizedCommand;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" * An implementation of \u003ccode\u003eCommandValidator\u003c/code\u003e which validates a flag argument","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"public class FlagArgumentCommandValidator implements CommandValidator {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    private final String flag;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"    private final ArgumentValidator argumentValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     * @param flag              the name of the flag argument to validate","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     * @param argumentValidator the validator to run on the flag argument","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"    public FlagArgumentCommandValidator(String flag, ArgumentValidator argumentValidator) {","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"        this.flag \u003d flag;","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"        this.argumentValidator \u003d argumentValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"     * Validates the specified flag argument using the provided argument validator","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny   the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"     * @param command the tokenized command to validate","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"     * @throws InvalidCommandException if the flag argument is invalid according to the argument validator","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"    public void validateCommand(BunnySession bunny, TokenizedCommand command) throws InvalidCommandException {","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"            this.argumentValidator.validateArgument(bunny, command.getFlagArgument(this.flag));","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"        } catch (InvalidArgumentException iae) {","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"            throw new InvalidCommandException(String.format(bunny.getUI().FLAG_ARGUMENT_ERROR_FORMAT, flag), iae);","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":36}},{"path":"src/main/java/com/ethanyidong/bunny/arg/IntegerArgumentValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.arg;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":" * Implementation of \u003ccode\u003eArgumentValidator\u003c/code\u003e which checks that an argument can be parsed as an integer","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"public class IntegerArgumentValidator implements ArgumentValidator {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny    the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"     * @param argument the value of the argument to validate","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     * @throws InvalidArgumentException if the passed argument cannot be parsed as an integer","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"    public void validateArgument(BunnySession bunny, String argument) throws InvalidArgumentException {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"        if (argument \u003d\u003d null) {","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"            throw new InvalidArgumentException(bunny.getUI().MISSING_ARGUMENT_ERROR);","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"            Integer.parseInt(argument);","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"            throw new InvalidArgumentException(bunny.getUI().INTEGER_ARGUMENT_ERROR);","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":25}},{"path":"src/main/java/com/ethanyidong/bunny/arg/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.arg;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":" * Represents a custom exception for when an invalid argument is detected","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"public class InvalidArgumentException extends Exception {","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"     * @param message the message to print when the error is displayed to the user","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    public InvalidArgumentException(String message) {","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"        super(message);","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":13}},{"path":"src/main/java/com/ethanyidong/bunny/arg/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.arg;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":" * Represents a custom exception for when an invalid command is detected","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" * May be caused by an \u003ccode\u003eInvalidArgumentException\u003c/code\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"     * @param message the message to print when displayed to the user","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     * @param cause   the \u003ccode\u003eInvalidArgumentException\u003c/code\u003e which caused this \u003ccode\u003eInvalidCommandException\u003c/code\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"    public InvalidCommandException(String message, InvalidArgumentException cause) {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"        super(message, cause);","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    public String getFriendlyErrorMessage(BunnySession bunny) {","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"        return String.format(String.format(bunny.getUI().INVALID_COMMAND_ERROR_FORMAT,","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"                this.getMessage(), this.getCause().getMessage()));","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":22}},{"path":"src/main/java/com/ethanyidong/bunny/arg/NotEmptyArgumentValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.arg;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":" * Implementation of \u003ccode\u003eArgumentValidator\u003c/code\u003e which checks that an argument exists and is not empty","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"public class NotEmptyArgumentValidator implements ArgumentValidator {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny    the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"     * @param argument the value of the argument to validate","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     * @throws InvalidArgumentException if the argument does not exist or is empty","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"    public void validateArgument(BunnySession bunny, String argument) throws InvalidArgumentException {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"        if (argument \u003d\u003d null) {","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"            throw new InvalidArgumentException(bunny.getUI().MISSING_ARGUMENT_ERROR);","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"        if (argument.isEmpty()) {","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"            throw new InvalidArgumentException(bunny.getUI().EMPTY_ARGUMENT_ERROR);","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":23}},{"path":"src/main/java/com/ethanyidong/bunny/arg/PositionalArgumentCommandValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.arg;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.cmd.TokenizedCommand;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" * An implementation of \u003ccode\u003eCommandValidator\u003c/code\u003e which validates the positional argument","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"public class PositionalArgumentCommandValidator implements CommandValidator {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    private final ArgumentValidator argumentValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     * @param argumentValidator the validator to run on the positional argument","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"    public PositionalArgumentCommandValidator(ArgumentValidator argumentValidator) {","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"        this.argumentValidator \u003d argumentValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"     * Validates the positional argument using the provided argument validator","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny   the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"     * @param command the tokenized command to validate","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"     * @throws InvalidCommandException if the positional argument is invalid according to the argument validator","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"    public void validateCommand(BunnySession bunny, TokenizedCommand command) throws InvalidCommandException {","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"            this.argumentValidator.validateArgument(bunny, command.getPositionalArgument());","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"        } catch (InvalidArgumentException iae) {","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"            throw new InvalidCommandException(bunny.getUI().POSITIONAL_ARGUMENT_ERROR, iae);","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":33}},{"path":"src/main/java/com/ethanyidong/bunny/arg/TaskIndexArgumentValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.arg;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":" * Implementation of \u003ccode\u003eArgumentValidator\u003c/code\u003e which checks that an argument can be parsed as an integer","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" * Further checks that the argument represents a valid index pointing to an existing task","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"public class TaskIndexArgumentValidator extends IntegerArgumentValidator {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny    the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     * @param argument the value of the argument to validate","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     * @throws InvalidArgumentException if the passed argument cannot be parsed as an integer,","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     *                                  or that integer is not a valid index pointing to a task","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    public void validateArgument(BunnySession bunny, String argument) throws InvalidArgumentException {","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"        super.validateArgument(bunny, argument);","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"        int integerArgument \u003d Integer.parseInt(argument);","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"        if (integerArgument \u003c\u003d 0 || integerArgument \u003e bunny.getTasks().numTasks()) {","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"            throw new InvalidArgumentException(bunny.getUI().TASK_INDEX_ARGUMENT_ERROR);","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":24}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.CommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.FlagArgumentCommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.NotEmptyArgumentValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.PositionalArgumentCommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.task.Deadline;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.task.Task;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":" * An implementation of \u003ccode\u003eExecutableCommand\u003c/code\u003e to represent the \u0027deadline\u0027 command","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"public class AddDeadlineCommand extends AddTaskCommand {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"    private String by;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"     * @return Validators checking that the name (positional argument) and /by (flag argument) are both not empty","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"    protected CommandValidator[] getValidators() {","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"        CommandValidator deadlineNameValidator \u003d","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"                new PositionalArgumentCommandValidator(new NotEmptyArgumentValidator());","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"        CommandValidator byValidator \u003d","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"                new FlagArgumentCommandValidator(\"by\", new NotEmptyArgumentValidator());","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"        return new CommandValidator[]{deadlineNameValidator, byValidator};","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"    protected void parseArguments(BunnySession bunny, TokenizedCommand command) {","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"        this.name \u003d command.getPositionalArgument();","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"        this.by \u003d command.getFlagArgument(\"by\");","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"    protected Task generateTask() {","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"        return new Deadline(this.name, this.by);","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":38}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.CommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.FlagArgumentCommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.NotEmptyArgumentValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.PositionalArgumentCommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.task.Event;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.task.Task;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":" * An implementation of \u003ccode\u003eExecutableCommand\u003c/code\u003e to represent the \u0027event\u0027 command","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"public class AddEventCommand extends AddTaskCommand {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"    private String from;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    private String to;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"     * @return Validators checking that the name (positional argument) and /from, /to (flag arguments) are not empty","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"    protected CommandValidator[] getValidators() {","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"        CommandValidator eventNameValidator \u003d","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"                new PositionalArgumentCommandValidator(new NotEmptyArgumentValidator());","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"        CommandValidator fromValidator \u003d","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"                new FlagArgumentCommandValidator(\"from\", new NotEmptyArgumentValidator());","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"        CommandValidator toValidator \u003d","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"                new FlagArgumentCommandValidator(\"to\", new NotEmptyArgumentValidator());","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"        return new CommandValidator[]{eventNameValidator, fromValidator, toValidator};","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"    protected void parseArguments(BunnySession bunny, TokenizedCommand command) {","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"        this.name \u003d command.getPositionalArgument();","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"        this.from \u003d command.getFlagArgument(\"from\");","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"        this.to \u003d command.getFlagArgument(\"to\");","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"    protected Task generateTask() {","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"        return new Event(this.name, this.from, this.to);","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":42}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.fmt.Formatter;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.task.Task;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" * An intermediate implementation of \u003ccode\u003eExecutableCommand\u003c/code\u003e which all commands","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":" * that create a new \u003ccode\u003eTask\u003c/code\u003e inherit from","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"public abstract class AddTaskCommand extends ExecutableCommand {","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"    protected String name;","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"    protected void parseArguments(BunnySession bunny, TokenizedCommand command) {","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"        this.name \u003d command.getPositionalArgument();","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"    private void addTask(BunnySession bunny, Task newTask) {","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"        bunny.getTasks().addTask(newTask);","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"        bunny.getUI().printMessage(String.format(bunny.getUI().ADD_TASK_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"                newTask,","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"                bunny.getTasks().numTasks(),","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"                Formatter.pluralize(\"task\", \"tasks\", bunny.getTasks().numTasks())));","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"    protected abstract Task generateTask();","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"     * Adds the \u003ccode\u003eTask\u003c/code\u003e represented by the command to the current task list","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"    public void execute(BunnySession bunny) {","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"        addTask(bunny, generateTask());","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":37}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.CommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.NotEmptyArgumentValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.PositionalArgumentCommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.task.Task;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.task.Todo;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":" * An implementation of \u003ccode\u003eExecutableCommand\u003c/code\u003e to represent the \u0027todo\u0027 command","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"public class AddTodoCommand extends AddTaskCommand {","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     * @return Validators checking that the name (positional argument) and /by (flag argument) are both not empty","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    protected CommandValidator[] getValidators() {","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"        CommandValidator todoNameValidator \u003d","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"                new PositionalArgumentCommandValidator(new NotEmptyArgumentValidator());","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"        return new CommandValidator[]{todoNameValidator};","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"    protected void parseArguments(BunnySession bunny, TokenizedCommand command) {","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"        this.name \u003d command.getPositionalArgument();","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"    protected Task generateTask() {","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"        return new Todo(this.name);","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":32}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":" * An implementation of \u003ccode\u003eExecutableCommand\u003c/code\u003e to represent the \u0027bye\u0027 command","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"public class ByeCommand extends ExecutableCommand {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"     * Quits the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"    public void execute(BunnySession bunny) {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"        bunny.quit();","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":17}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.CommandValidator;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.PositionalArgumentCommandValidator;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.TaskIndexArgumentValidator;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.task.Task;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":" * An implementation of \u003ccode\u003eExecutableCommand\u003c/code\u003e to represent the \u0027delete\u0027 command","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"public class DeleteTaskCommand extends ExecutableCommand {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"    private int taskIndex;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"     * @return Validators checking that the index (positional argument) is a valid task index","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"    protected CommandValidator[] getValidators() {","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"        CommandValidator markIndexValidator \u003d","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"                new PositionalArgumentCommandValidator(new TaskIndexArgumentValidator());","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"        return new CommandValidator[]{markIndexValidator};","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"    protected void parseArguments(BunnySession bunny, TokenizedCommand command) {","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"        this.taskIndex \u003d Integer.parseInt(command.getPositionalArgument()) - 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"     * Deletes a task from the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"    public void execute(BunnySession bunny) {","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"        Task deletedTask \u003d bunny.getTasks().getTask(this.taskIndex);","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"        bunny.getTasks().deleteTask(this.taskIndex);","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"        bunny.getUI().printMessage(String.format(bunny.getUI().DELETE_TASK_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"                deletedTask, bunny.getTasks().numTasks()));","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"EthanYidong":40}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/ExecutableCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.CommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.InvalidArgumentException;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.InvalidCommandException;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":" * Represents a command and its parameters.","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":" * Implementors \u003ccode\u003eExecutableCommand\u003c/code\u003e will be passed the \u003ccode\u003eBunnySession\u003c/code\u003e object to run on and mutate.","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"public abstract class ExecutableCommand {","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     * Maps the command name to a concrete \u003ccode\u003eExecutableCommand\u003c/code\u003e class","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"     * @param commandString the name of the command","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"     * @return a new instance of the \u003ccode\u003eExecutableCommand\u003c/code\u003e for that command name","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"    private static ExecutableCommand fromCommandString(String commandString) {","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"        switch (commandString) {","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"        case \"bye\":","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"            return new ByeCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"        case \"list\":","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"            return new ListCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"        case \"find\":","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"            return new FindCommand();","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"            return new MarkCommand(true);","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"            return new MarkCommand(false);","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"            return new AddTodoCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"            return new AddDeadlineCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"        case \"event\":","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"            return new AddEventCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"            return new DeleteTaskCommand();","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"        default:","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"            return null;","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"EthanYidong"},"content":"     * Parses a \u003ccode\u003eTokenizedCommand\u003c/code\u003e into the correct \u003ccode\u003eExecutableCommand\u003c/code\u003e.","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"EthanYidong"},"content":"     * Uses the specific implementation of \u003ccode\u003eExecutableCommand\u003c/code\u003e\u0027s","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"EthanYidong"},"content":"     * \u003ccode\u003evalidateCommand\u003c/code\u003e and \u003ccode\u003eparseArguments\u003c/code\u003e methods","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"EthanYidong"},"content":"     * to validate the input and parse the arguments.","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny   the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"EthanYidong"},"content":"     * @param command the \u003ccode\u003eTokenizedCommand\u003c/code\u003e representation of the input","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"EthanYidong"},"content":"     * @return a new \u003ccode\u003eExecutableCommand\u003c/code\u003e which has been parsed from the passed \u003ccode\u003ecommand\u003c/code\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"EthanYidong"},"content":"     * @throws InvalidCommandException if the passed \u003ccode\u003ecommand\u003c/code\u003e does not represent a valid command.","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"EthanYidong"},"content":"    public static ExecutableCommand validateAndParse(BunnySession bunny, TokenizedCommand command)","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"EthanYidong"},"content":"            throws InvalidCommandException {","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"EthanYidong"},"content":"        ExecutableCommand newExecutableCommand \u003d ExecutableCommand.fromCommandString(command.getCommand());","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"EthanYidong"},"content":"        if (newExecutableCommand \u003d\u003d null) {","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"EthanYidong"},"content":"            throw new InvalidCommandException(\"command\", new InvalidArgumentException(\"is unrecognized\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"EthanYidong"},"content":"        newExecutableCommand.validateCommand(bunny, command);","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"EthanYidong"},"content":"        newExecutableCommand.parseArguments(bunny, command);","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"EthanYidong"},"content":"        return newExecutableCommand;","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"EthanYidong"},"content":"     * Provides a list of command validators.","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"EthanYidong"},"content":"     * Implementors of \u003ccode\u003eExecutableCommand\u003c/code\u003e with arguments to be validated should override this method","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"EthanYidong"},"content":"     * @return a list of command validators to be run by \u003ccode\u003evalidateCommand()\u003c/code\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"EthanYidong"},"content":"    protected CommandValidator[] getValidators() {","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"EthanYidong"},"content":"        return new CommandValidator[]{};","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"EthanYidong"},"content":"     * Parses input from the \u003ccode\u003ecommand\u003c/code\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"EthanYidong"},"content":"     * and stores the arguments it into the current \u003ccode\u003eExecutableCommand\u003c/code\u003e\u0027s properties","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny   the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"EthanYidong"},"content":"     * @param command the \u003ccode\u003eTokenizedCommand\u003c/code\u003e to parse","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"EthanYidong"},"content":"    protected void parseArguments(BunnySession bunny, TokenizedCommand command) {","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"EthanYidong"},"content":"     * Validates the \u003ccode\u003ecommand\u003c/code\u003e using validators provided by \u003ccode\u003evalidators()\u003c/code\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny   the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":92,"author":{"gitId":"EthanYidong"},"content":"     * @param command the \u003ccode\u003eTokenizedCommand\u003c/code\u003e to validate","lastModifiedDate":"2023-03-01"},{"lineNumber":93,"author":{"gitId":"EthanYidong"},"content":"     * @throws InvalidCommandException if the passed \u003ccode\u003ecommand\u003c/code\u003e does not represent a valid command","lastModifiedDate":"2023-03-01"},{"lineNumber":94,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":95,"author":{"gitId":"EthanYidong"},"content":"    private void validateCommand(BunnySession bunny, TokenizedCommand command)","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"EthanYidong"},"content":"            throws InvalidCommandException {","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"EthanYidong"},"content":"        for (CommandValidator validator : this.getValidators()) {","lastModifiedDate":"2023-03-01"},{"lineNumber":98,"author":{"gitId":"EthanYidong"},"content":"            validator.validateCommand(bunny, command);","lastModifiedDate":"2023-02-02"},{"lineNumber":99,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":101,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":102,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":103,"author":{"gitId":"EthanYidong"},"content":"     * Executes the \u003ccode\u003eExecutableCommand\u003c/code\u003e on the passed Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":104,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":105,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":106,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":107,"author":{"gitId":"EthanYidong"},"content":"    public abstract void execute(BunnySession bunny);","lastModifiedDate":"2023-02-02"},{"lineNumber":108,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"},{"lineNumber":109,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"EthanYidong":109}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.CommandValidator;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.NotEmptyArgumentValidator;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.PositionalArgumentCommandValidator;","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":" * An implementation of \u003ccode\u003eExecutableCommand\u003c/code\u003e to represent the \u0027find\u0027 command","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"public class FindCommand extends ExecutableCommand {","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"    private String keyword;","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"     * @return Validators checking that the keywords (positional argument) is not empty","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"    protected CommandValidator[] getValidators() {","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"        CommandValidator todoNameValidator \u003d","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"                new PositionalArgumentCommandValidator(new NotEmptyArgumentValidator());","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"        return new CommandValidator[]{todoNameValidator};","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"    protected void parseArguments(BunnySession bunny, TokenizedCommand command) {","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"        this.keyword \u003d command.getPositionalArgument();","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"     * Lists the tasks in the current Bunny session containing the specified keyword","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"    public void execute(BunnySession bunny) {","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"        if (bunny.getTasks().numTasks() \u003d\u003d 0) {","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"            bunny.getUI().printMessage(\"Your TODO list is empty!\");","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"            return;","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"        ArrayList\u003cString\u003e messageLines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"        int taskLineNum \u003d 1;","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"EthanYidong"},"content":"        for (int i \u003d 0; i \u003c bunny.getTasks().numTasks(); i++) {","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"EthanYidong"},"content":"            if (!bunny.getTasks().getTask(i).getName().contains(keyword)) {","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"EthanYidong"},"content":"                continue;","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"EthanYidong"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"EthanYidong"},"content":"            messageLines.add(String.format(bunny.getUI().LIST_ELEMENT_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"EthanYidong"},"content":"                    taskLineNum, bunny.getTasks().getTask(i)));","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"EthanYidong"},"content":"            taskLineNum++;","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"EthanYidong"},"content":"        bunny.getUI().printMessage(messageLines);","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"EthanYidong":54}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" * An implementation of \u003ccode\u003eExecutableCommand\u003c/code\u003e to represent the \u0027list\u0027 command","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"public class ListCommand extends ExecutableCommand {","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     * Lists the tasks in the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"    public void execute(BunnySession bunny) {","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"        if (bunny.getTasks().numTasks() \u003d\u003d 0) {","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"            bunny.getUI().printMessage(\"Your TODO list is empty!\");","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"            return;","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"        ArrayList\u003cString\u003e messageLines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"        for (int i \u003d 0; i \u003c bunny.getTasks().numTasks(); i++) {","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"            messageLines.add(String.format(bunny.getUI().LIST_ELEMENT_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"                    i + 1, bunny.getTasks().getTask(i)));","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"        bunny.getUI().printMessage(messageLines);","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":29}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.BunnySession;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.CommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.PositionalArgumentCommandValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.arg.TaskIndexArgumentValidator;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":" * An implementation of \u003ccode\u003eExecutableCommand\u003c/code\u003e to represent the \u0027mark\u0027 and \u0027unmark\u0027 commands","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"public class MarkCommand extends ExecutableCommand {","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"    private final boolean isDone;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"    private int taskIndex;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"     * @param isDone whether the command should mark the task as done or not done","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    public MarkCommand(boolean isDone) {","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"     * @return Validators checking that the index (positional argument) is a valid task index","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"    protected CommandValidator[] getValidators() {","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"        CommandValidator markIndexValidator \u003d","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"                new PositionalArgumentCommandValidator(new TaskIndexArgumentValidator());","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"        return new CommandValidator[]{markIndexValidator};","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"    protected void parseArguments(BunnySession bunny, TokenizedCommand command) {","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"        this.taskIndex \u003d Integer.parseInt(command.getPositionalArgument()) - 1;","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"    private String markedMessage(BunnySession bunny) {","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"            return bunny.getUI().MARKED_MESSAGE;","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"        } else {","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"            return bunny.getUI().UNMARKED_MESSAGE;","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"EthanYidong"},"content":"     * Marks the specified task as done or not done","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"EthanYidong"},"content":"     * @param bunny the current Bunny session","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"EthanYidong"},"content":"    public void execute(BunnySession bunny) {","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"EthanYidong"},"content":"        bunny.getTasks().getTask(this.taskIndex).setIsDone(this.isDone);","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"EthanYidong"},"content":"        bunny.getUI().printMessage(String.format(bunny.getUI().MARK_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"EthanYidong"},"content":"                this.markedMessage(bunny), bunny.getTasks().getTask(this.taskIndex)));","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":55}},{"path":"src/main/java/com/ethanyidong/bunny/cmd/TokenizedCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.cmd;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":" * Represents an input String split into specific command tokens","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" * Provides the command name, the positional argument (if any), and the flag arguments (if any)","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"public class TokenizedCommand {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    private final String command;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"    private String positionalArgument;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"    private HashMap\u003cString, String\u003e flagArguments;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     * Parses a String command into its tokens (name, positional argument, flag arguments)","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"     * @param command the String representation of the command to parse","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"    public TokenizedCommand(String command) {","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"        String[] commandAndArguments \u003d command.split(\" \", 2);","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"        this.command \u003d extractCommand(commandAndArguments[0]);","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"        String arguments;","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"        if (commandAndArguments.length \u003d\u003d 2) {","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"            arguments \u003d commandAndArguments[1];","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"        } else {","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"            return;","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"        String[] positionalAndFlagArguments \u003d arguments.split(\"/\");","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"        this.positionalArgument \u003d extractPositionalArgument(positionalAndFlagArguments);","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"        this.flagArguments \u003d extractFlagArguments(positionalAndFlagArguments);","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"    private static String extractCommand(String command) {","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"        return command;","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"    private static String extractPositionalArgument(String[] positionalAndFlagArgument) {","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"        if (positionalAndFlagArgument.length \u003d\u003d 0) {","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"            return null;","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"EthanYidong"},"content":"        return positionalAndFlagArgument[0].trim();","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"EthanYidong"},"content":"    private static HashMap\u003cString, String\u003e extractFlagArguments(String[] positionalAndFlagArguments) {","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"EthanYidong"},"content":"        HashMap\u003cString, String\u003e flagArguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"EthanYidong"},"content":"        for (int i \u003d 1; i \u003c positionalAndFlagArguments.length; i++) {","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"EthanYidong"},"content":"            String[] flagAndFlagArgument \u003d positionalAndFlagArguments[i].split(\" \", 2);","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"EthanYidong"},"content":"            if (flagAndFlagArgument.length \u003d\u003d 2) {","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"EthanYidong"},"content":"                flagArguments.put(flagAndFlagArgument[0], flagAndFlagArgument[1].trim());","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"EthanYidong"},"content":"            } else {","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"EthanYidong"},"content":"                flagArguments.put(flagAndFlagArgument[0], \"\");","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"EthanYidong"},"content":"            }","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"EthanYidong"},"content":"        return flagArguments;","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"EthanYidong"},"content":"     * @return the command name of the parsed command","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"EthanYidong"},"content":"    public String getCommand() {","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"EthanYidong"},"content":"        return command;","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"EthanYidong"},"content":"     * @return the positional argument of the parsed command","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"EthanYidong"},"content":"    public String getPositionalArgument() {","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"EthanYidong"},"content":"        return positionalArgument;","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"EthanYidong"},"content":"     * @param flag the name of the flag to return the corresponding value for","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"EthanYidong"},"content":"     * @return the flag argument value of the passed flag","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"EthanYidong"},"content":"    public String getFlagArgument(String flag) {","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"EthanYidong"},"content":"        return this.flagArguments.get(flag);","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":83}},{"path":"src/main/java/com/ethanyidong/bunny/date/FlexibleDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.date;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"public class FlexibleDate {","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"    private String dateString;","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    private LocalDate concreteDate;","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"    public FlexibleDate(String dateString) {","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"        this.dateString \u003d dateString;","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"            this.concreteDate \u003d LocalDate.parse(dateString);","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"            this.concreteDate \u003d null;","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"    public boolean isConcrete() {","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"        return this.concreteDate !\u003d null;","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"    public String toString() {","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"        if (this.isConcrete()) {","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"            return this.concreteDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG));","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"        } else {","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"            return this.dateString;","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"EthanYidong":33}},{"path":"src/main/java/com/ethanyidong/bunny/fmt/Formatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.fmt;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":" * Helper class to perform various String formatting functions for output","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"public class Formatter {","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"     * @param singularForm the singular form of the word","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"     * @param pluralForm   the plural form of the word","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"     * @param count        the count of the object in question","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"     * @return \u003ccode\u003esingularForm\u003c/code\u003e if the count is equal to 1, or \u003ccode\u003epluralForm\u003c/code\u003e otherwise","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"    public static String pluralize(String singularForm, String pluralForm, int count) {","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"        if (count \u003d\u003d 1) {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"            return singularForm;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"        return pluralForm;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":19}},{"path":"src/main/java/com/ethanyidong/bunny/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.task;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.date.FlexibleDate;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":" * Represents an implementation of \u003ccode\u003eTask\u003c/code\u003e with a due date","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"    private FlexibleDate by;","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     * Creates a new deadline with a name and due date","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     * The new deadline will be not done by default.","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     * @param name the name of the deadline to create","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"     * @param by   the due date of the deadline","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    public Deadline(String name, String by) {","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"        super(name);","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"        this.by \u003d new FlexibleDate(by);","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"    protected String label() {","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"        return \"D\";","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"    public String toString() {","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"        return super.toString() + \" (by: \" + this.by + \")\";","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":31}},{"path":"src/main/java/com/ethanyidong/bunny/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.task;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"import com.ethanyidong.bunny.date.FlexibleDate;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":" * Represents an implementation of \u003ccode\u003eTask\u003c/code\u003e with a start and end time.","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"    private FlexibleDate from;","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    private FlexibleDate to;","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     * Creates a new event with a name, start, and end time.","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     * The new event will be not done by default.","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"     * @param name the name of the event to create","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"     * @param from the start time of the event","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"     * @param to   the end time of the event","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"    public Event(String name, String from, String to) {","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"        super(name);","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"        this.from \u003d new FlexibleDate(from);","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"        this.to \u003d new FlexibleDate(to);","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"    protected String label() {","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"        return \"E\";","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"    public String toString() {","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"        return super.toString() + \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":34}},{"path":"src/main/java/com/ethanyidong/bunny/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.task;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":" * Represents a task in the Bunny task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":" * All tasks minimally have a name and a doneness state.","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":" * Inheritors may implement specific features such as deadlines.","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"    private String name;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"    private boolean isDone;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"     * Create a task with a name.","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"     * The new task will be not done by default.","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"     * @param name the name of the task to create","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"    public Task(String name) {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"     * @return the name of the task","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"    public String getName() {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"        return name;","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"     * Flags the task as done or not done","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"EthanYidong"},"content":"     * @param isDone the new doneness state of the task","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"EthanYidong"},"content":"    public void setIsDone(boolean isDone) {","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"EthanYidong"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"EthanYidong"},"content":"     * @return a label which will be displayed in the \u003ccode\u003etoString()\u003c/code\u003e representation of the \u003ccode\u003eTask\u003c/code\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"EthanYidong"},"content":"    protected abstract String label();","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"EthanYidong"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"EthanYidong"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"EthanYidong"},"content":"        char marker \u003d \u0027 \u0027;","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"EthanYidong"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"EthanYidong"},"content":"            marker \u003d \u0027X\u0027;","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"EthanYidong"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"EthanYidong"},"content":"        return \"[\" + this.label() + \"][\" + marker + \"] \" + this.getName();","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"EthanYidong":52}},{"path":"src/main/java/com/ethanyidong/bunny/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"package com.ethanyidong.bunny.task;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":" * Represents a minimal implementation of a \u003ccode\u003eTask\u003c/code\u003e with only a name and doneness state.","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"     * Create a todo with a name.","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"     * The new todo will be not done by default.","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"     * @param name the name of the todo to create","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"    public Todo(String name) {","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"        super(name);","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"    protected String label() {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"        return \"T\";","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"EthanYidong":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"EthanYidong"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"EthanYidong"},"content":"todo a b c d","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"EthanYidong"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"EthanYidong"},"content":"deadline e f g /by h i","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"EthanYidong"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"EthanYidong"},"content":"event j k /from l m /to n o p","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"EthanYidong"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"EthanYidong"},"content":"mark 1","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"EthanYidong"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"unmark 1","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"EthanYidong"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"EthanYidong"},"content":"mark 2","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"EthanYidong"},"content":"mark 3","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"EthanYidong"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EthanYidong"},"content":"unmark 3","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"mark 4","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"mark hello","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EthanYidong"},"content":"invalid","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EthanYidong"},"content":"deadline without by","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EthanYidong"},"content":"deadline with empty /by","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EthanYidong"},"content":"event without to /from today","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"todo","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"EthanYidong"},"content":"delete 1","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"EthanYidong"},"content":"list","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"EthanYidong"},"content":"deadline q /by 2023-03-01","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"EthanYidong"},"content":"event r /from 2023-03-01 /to 2023-03-02","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"EthanYidong"},"content":"list","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"EthanYidong"},"content":"find a","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"EthanYidong"},"content":"find e","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"EthanYidong"},"content":"bye","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"EthanYidong":31}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"EthanYidong"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\com\\ethanyidong\\bunny\\**\\*.java ..\\bin ..\\src\\main\\java\\com\\ethanyidong\\bunny\\*.java","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"EthanYidong"},"content":"REM run the program, feed executable from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EthanYidong"},"content":"java -classpath ..\\bin com.ethanyidong.bunny.Bunny \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"EthanYidong":3,"-":18}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"EthanYidong"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/com/ethanyidong/bunny/**/*.java ../src/main/java/com/ethanyidong/bunny/*.java","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"EthanYidong"},"content":"java -classpath ../bin com.ethanyidong.bunny.Bunny nosave \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"EthanYidong":2,"-":36}}]
