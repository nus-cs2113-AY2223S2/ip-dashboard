[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"# Duke User Guide","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"thant"},"content":"This is a basic user guide for usage of the task tracker Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"thant"},"content":"## Installation","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"thant"},"content":"Prerequisites: JDK 11,","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"thant"},"content":"1. Download the jar file for Duke under \u0027Releases\u0027","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"thant"},"content":"2. Extract it to an empty folder","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"thant"},"content":"3. Run the jar file and enjoy using Duke!","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"thant"},"content":"## Methods","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"thant"},"content":"Duke has access to the following commands:","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"thant"},"content":"1. `todo` : Adds a todo object to Duke using the format `todo \u003cTask Name\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"thant"},"content":"2. `deadline`: Adds a deadline object to Duke using the format `deadline \u003cTask Name\u003e by \u003cDeadline Date\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"thant"},"content":"3. `event`: Adds an event object to Duke using the format `event \u003cTask Name\u003e from \u003cStart Time\u003e to \u003cEnd Time\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"thant"},"content":"4. `list`: Displays all tasks that have been stored in Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"thant"},"content":"5. `mark` / `unmark`: Updates a task\u0027s completion status using the format `unmark`/`mark \u003cIndex Number\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"thant"},"content":"6. `find`: Outputs all tasks that contain a given parameter using the format `find \u003cSearch Parameter\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"thant"},"content":"7. `bye`: Exits Duke.","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"thant":19,"-":4}},{"path":"data/taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"false | dhomework      by      today","lastModifiedDate":"2023-02-16"},{"lineNumber":2,"author":{"gitId":"thant"},"content":"true | thomework","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"thant"},"content":"false | tcompile","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"thant":3}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"thant"},"content":" * Represents a task that the user has inputted. A \u003ccode\u003eDeadline\u003c/code\u003e object contains a","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"thant"},"content":" * basic \u003ccode\u003edescription\u003c/code\u003e and \u003ccode\u003eisDone\u003c/code\u003e to indicate completion.","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"thant"},"content":" * It also contains a \u003ccode\u003eby\u003c/code\u003e variable to store the due date of its given task.","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"thant"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"thant"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"thant"},"content":"    protected String by;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"thant"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"thant"},"content":"        super(description);","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"thant"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"thant"},"content":"        initialize();","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"thant"},"content":"     * Returns the contents of task in an appropriate string format for printing.","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"thant"},"content":"     * @return Formatted string output.","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"thant"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"thant"},"content":"    public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"thant"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"thant"},"content":"     * Handles prior stored data in a given text file upon initialization of Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"thant"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"thant"},"content":"        TaskArray.count++;","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"thant"},"content":"        System.out.println(UI.LINE +","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"thant"},"content":"                \"     Got it. I\u0027ve added this task:\\n\" + this +","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"thant"},"content":"                \"\\n     Now you have \" + TaskArray.count + \" tasks in the list.\\n\" +","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"thant"},"content":"                UI.LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"thant"},"content":"     * Returns the contents of task in an appropriate string format for adding to text file.","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"thant"},"content":"     * @return Formatted string output.","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"thant"},"content":"    public String toFile() {","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"thant"},"content":"        return this.isDone + \" | \" +\"d\"+ this.description + \" by \" + this.by + \"\\n\";","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":41,"author":{"gitId":"thant"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"thant":41}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"thant"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"thant"},"content":" * Represents a task tracker named Duke. A \u003ccode\u003eDuke\u003c/code\u003e object uses","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"thant"},"content":" * methods from various methods to execute given commands smoothly.","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"thant"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"thant"},"content":"    public static boolean continueRunning \u003d true;","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"thant"},"content":"     * Loads in data from a pre-existing data file. If none is present, proceeds to create a new empty data file.","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"thant"},"content":"     * @param filePath Location in which the data file can be found.","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"thant"},"content":"    public Duke(String filePath){","lastModifiedDate":"2023-02-16"},{"lineNumber":16,"author":{"gitId":"thant"},"content":"        Storage storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"thant"},"content":"        storage.load();","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"thant"},"content":"        new Duke (\"./data/taskList.txt\").run();","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":22,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":23,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"thant"},"content":"     * Central loop that ensures that Duke remains running until user inputs the \u003ccode\u003ebye\u003c/code\u003e command.","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"thant"},"content":"    public static void run() {","lastModifiedDate":"2023-02-16"},{"lineNumber":27,"author":{"gitId":"thant"},"content":"        UI.greet();","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"thant"},"content":"        while (continueRunning) {","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"thant"},"content":"            Scanner newScanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"thant"},"content":"            String userInput \u003d newScanner.nextLine();","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"thant"},"content":"            String[] userInputSplit \u003d userInput.split(\" \", 2);","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"thant"},"content":"            Parser controller \u003d new Parser(userInputSplit);","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"thant"},"content":"            controller.processInput();","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"thant":34,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"thant"},"content":" * Represents a task that the user has inputted. A \u003ccode\u003eEvent\u003c/code\u003e object contains a","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"thant"},"content":" * basic \u003ccode\u003edescription\u003c/code\u003e and \u003ccode\u003eisDone\u003c/code\u003e to indicate completion.","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"thant"},"content":" * It also contains a \u003ccode\u003efrom\u003c/code\u003e variable to store the start date of its given task,","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"thant"},"content":" * as well as a \u003ccode\u003eto\u003c/code\u003e variable to store the end date of its given task.","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"thant"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"thant"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"thant"},"content":"    protected String from;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"thant"},"content":"    protected String to;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"thant"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"thant"},"content":"        super(description);","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"thant"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"thant"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"thant"},"content":"        initialize();","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"thant"},"content":"     * Returns the contents of task in an appropriate string format for printing.","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"thant"},"content":"     * @return Formatted string output.","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"thant"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"thant"},"content":"    public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"thant"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"thant"},"content":"     * Handles prior stored data in a given text file upon initialization of Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"thant"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"thant"},"content":"        TaskArray.count++;","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"thant"},"content":"        System.out.println(UI.LINE +","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"thant"},"content":"                \"     Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"thant"},"content":"                \"        \" + this +","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"thant"},"content":"                \"\\n     Now you have \" + TaskArray.count + \" tasks in the list.\\n\" +","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"thant"},"content":"                UI.LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"thant"},"content":"     * Returns the contents of task in an appropriate string format for adding to text file.","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"thant"},"content":"     * @return Formatted string output.","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"thant"},"content":"    public String toFile() {","lastModifiedDate":"2023-02-16"},{"lineNumber":43,"author":{"gitId":"thant"},"content":"        return this.isDone + \" | \" +\"e\"+ this.description + \" from \" + this.from + \" to \" + this.to + \"\\n\";","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"thant"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"thant":45}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"thant"},"content":" * Represents a Parser to process user\u0027s input and execute appropriately. A \u003ccode\u003eParser\u003c/code\u003e object extracts","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"thant"},"content":" * the start of a given input into a \u003ccode\u003ecommand\u003c/code\u003e variable, to identify the action which the user intends to do.","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"thant"},"content":" * The remainder of the input is stored into a \u003ccode\u003ecommandParameters\u003c/code\u003e variable for usage in the action that follows.","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"thant"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"thant"},"content":"public class Parser {","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"thant"},"content":"    protected String command;","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"thant"},"content":"    protected String commandParameters;","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"thant"},"content":"    public Parser(String[] userInputSplit){","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"thant"},"content":"        this.command \u003d userInputSplit[0].toLowerCase();","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"thant"},"content":"        if (userInputSplit.length \u003e 1) {","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"thant"},"content":"            this.commandParameters \u003d userInputSplit[1];","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"thant"},"content":"     * Processes the input from user and runs the appropriate command respectively.","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"thant"},"content":"     * If any modification to the TaskArray is expected, will also run the \u003ccode\u003eupdateFile\u003c/code\u003e command","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"thant"},"content":"     * such that the text file is continually kept up to date.","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"thant"},"content":"    public void processInput(){","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"thant"},"content":"        switch(this.command){","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"thant"},"content":"            case (\"bye\"):","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"thant"},"content":"                UI.bye();","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"thant"},"content":"            case (\"todo\"):","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"thant"},"content":"                    TaskArray.createToDo(commandParameters);","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"thant"},"content":"                    Storage.updateFile();","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"thant"},"content":"                    break;","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"thant"},"content":"            case (\"deadline\"):","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"thant"},"content":"                TaskArray.createDeadline(commandParameters);","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"thant"},"content":"                Storage.updateFile();","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"thant"},"content":"            case (\"event\"):","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"thant"},"content":"                TaskArray.createEvent(commandParameters);","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"thant"},"content":"                Storage.updateFile();","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"thant"},"content":"            case (\"list\"):","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"thant"},"content":"                TaskArray.print();","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"thant"},"content":"            case(\"mark\"):","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"thant"},"content":"                TaskArray.mark(commandParameters);","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"thant"},"content":"                Storage.updateFile();","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"thant"},"content":"            case (\"unmark\"):","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"thant"},"content":"                TaskArray.unmark(commandParameters);","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"thant"},"content":"                Storage.updateFile();","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"thant"},"content":"            case (\"delete\"):","lastModifiedDate":"2023-02-14"},{"lineNumber":52,"author":{"gitId":"thant"},"content":"                TaskArray.delete(commandParameters);","lastModifiedDate":"2023-02-14"},{"lineNumber":53,"author":{"gitId":"thant"},"content":"                Storage.updateFile();","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"thant"},"content":"            case (\"find\"):","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"thant"},"content":"                TaskArray.find(commandParameters);","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"thant"},"content":"            default:","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"thant"},"content":"                System.out.println(UI.LINE + \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" + UI.LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"thant"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"thant":63}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"import java.io.File;","lastModifiedDate":"2023-02-16"},{"lineNumber":2,"author":{"gitId":"thant"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"thant"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"thant"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"thant"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"thant"},"content":" * Represents a file writer and reader for Duke. A \u003ccode\u003eStorage\u003c/code\u003e object has the capacity to load pre-existing","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"thant"},"content":" * data upon Duke\u0027s start up, and continually update the data file upon any changes.","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"thant"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"thant"},"content":"public class Storage {","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"thant"},"content":"    protected static String filePath;","lastModifiedDate":"2023-02-16"},{"lineNumber":13,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":14,"author":{"gitId":"thant"},"content":"    public Storage(String filePath){","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"thant"},"content":"        Storage.filePath \u003d filePath;","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":17,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"thant"},"content":"     * Converts data in a text file into \u003ccode\u003eTask\u003c/code\u003e for storage within the \u003ccode\u003eTaskArray\u003c/code\u003e of Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"thant"},"content":"     * If no text file is located, creates a blank file to begin from.","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"thant"},"content":"    public void load() {","lastModifiedDate":"2023-02-16"},{"lineNumber":23,"author":{"gitId":"thant"},"content":"        File loadData \u003d new File(filePath);","lastModifiedDate":"2023-02-16"},{"lineNumber":24,"author":{"gitId":"thant"},"content":"        try {","lastModifiedDate":"2023-02-16"},{"lineNumber":25,"author":{"gitId":"thant"},"content":"            Scanner newScanner \u003d new Scanner(loadData);","lastModifiedDate":"2023-02-16"},{"lineNumber":26,"author":{"gitId":"thant"},"content":"            while (newScanner.hasNext()) {","lastModifiedDate":"2023-02-16"},{"lineNumber":27,"author":{"gitId":"thant"},"content":"                processLine(newScanner.nextLine());","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"thant"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":29,"author":{"gitId":"thant"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"thant"},"content":"            createFile();","lastModifiedDate":"2023-02-16"},{"lineNumber":31,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":33,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":34,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"thant"},"content":"     * Takes in a formatted string from a text file and creates the appropriate object for storage in \u003ccode\u003estoredTasks\u003c/code\u003e array.","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"thant"},"content":"     * @param line A line of data stored within a text file which has been read from.","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"thant"},"content":"    public void processLine(String line) {","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"thant"},"content":"        String[] newLine \u003d line.split(\" | \", 2);","lastModifiedDate":"2023-02-16"},{"lineNumber":41,"author":{"gitId":"thant"},"content":"        switch (newLine[1].substring(2,3)) {","lastModifiedDate":"2023-02-16"},{"lineNumber":42,"author":{"gitId":"thant"},"content":"            case \"t\":","lastModifiedDate":"2023-02-16"},{"lineNumber":43,"author":{"gitId":"thant"},"content":"                TaskArray.createToDo(newLine[1].substring(3));","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"thant"},"content":"            case \"d\":","lastModifiedDate":"2023-02-16"},{"lineNumber":46,"author":{"gitId":"thant"},"content":"                TaskArray.createDeadline(newLine[1].substring(3));","lastModifiedDate":"2023-02-16"},{"lineNumber":47,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-16"},{"lineNumber":48,"author":{"gitId":"thant"},"content":"            case \"e\":","lastModifiedDate":"2023-02-16"},{"lineNumber":49,"author":{"gitId":"thant"},"content":"                TaskArray.createEvent(newLine[1].substring(3));","lastModifiedDate":"2023-02-16"},{"lineNumber":50,"author":{"gitId":"thant"},"content":"                break;","lastModifiedDate":"2023-02-16"},{"lineNumber":51,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":52,"author":{"gitId":"thant"},"content":"        if (newLine[0].equals(\"true\")) {","lastModifiedDate":"2023-02-16"},{"lineNumber":53,"author":{"gitId":"thant"},"content":"            TaskArray.storedTasks[TaskArray.getCount()-1].markAsDone();","lastModifiedDate":"2023-02-16"},{"lineNumber":54,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":55,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":56,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":57,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"thant"},"content":"     * Creates a blank text file that will be updated as Duke\u0027s data evolves.","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"thant"},"content":"    public static void createFile() {","lastModifiedDate":"2023-02-16"},{"lineNumber":62,"author":{"gitId":"thant"},"content":"        try {","lastModifiedDate":"2023-02-16"},{"lineNumber":63,"author":{"gitId":"thant"},"content":"            File newFile \u003d new File(filePath);","lastModifiedDate":"2023-02-16"},{"lineNumber":64,"author":{"gitId":"thant"},"content":"            newFile.getParentFile().mkdirs();","lastModifiedDate":"2023-02-16"},{"lineNumber":65,"author":{"gitId":"thant"},"content":"            newFile.createNewFile();","lastModifiedDate":"2023-02-16"},{"lineNumber":66,"author":{"gitId":"thant"},"content":"        } catch (java.io.IOException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":67,"author":{"gitId":"thant"},"content":"            System.out.println(\"Unknown error occurred. File was not created.\");","lastModifiedDate":"2023-02-16"},{"lineNumber":68,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":69,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":70,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":71,"author":{"gitId":"thant"},"content":"    /*","lastModifiedDate":"2023-02-28"},{"lineNumber":72,"author":{"gitId":"thant"},"content":"    public static void addToFile(Task task){","lastModifiedDate":"2023-02-16"},{"lineNumber":73,"author":{"gitId":"thant"},"content":"        try {","lastModifiedDate":"2023-02-16"},{"lineNumber":74,"author":{"gitId":"thant"},"content":"            FileWriter file \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-02-16"},{"lineNumber":75,"author":{"gitId":"thant"},"content":"            file.write(task.toFile());","lastModifiedDate":"2023-02-16"},{"lineNumber":76,"author":{"gitId":"thant"},"content":"            file.close();","lastModifiedDate":"2023-02-16"},{"lineNumber":77,"author":{"gitId":"thant"},"content":"        }catch (java.io.IOException e){","lastModifiedDate":"2023-02-16"},{"lineNumber":78,"author":{"gitId":"thant"},"content":"            System.out.println(\"Unknown error occurred. Task-file was not updated.\");","lastModifiedDate":"2023-02-16"},{"lineNumber":79,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":80,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":81,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":82,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":83,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":84,"author":{"gitId":"thant"},"content":"     * Updates a given text file to reflect changes that user has made within Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":85,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":86,"author":{"gitId":"thant"},"content":"    public static void updateFile(){","lastModifiedDate":"2023-02-16"},{"lineNumber":87,"author":{"gitId":"thant"},"content":"        try {","lastModifiedDate":"2023-02-16"},{"lineNumber":88,"author":{"gitId":"thant"},"content":"            FileWriter file \u003d new FileWriter(filePath);","lastModifiedDate":"2023-02-16"},{"lineNumber":89,"author":{"gitId":"thant"},"content":"            for (int i \u003d 0; i \u003c TaskArray.getCount(); i++) {","lastModifiedDate":"2023-02-16"},{"lineNumber":90,"author":{"gitId":"thant"},"content":"                file.write(TaskArray.storedTasks[i].toFile());","lastModifiedDate":"2023-02-16"},{"lineNumber":91,"author":{"gitId":"thant"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":92,"author":{"gitId":"thant"},"content":"            file.close();","lastModifiedDate":"2023-02-16"},{"lineNumber":93,"author":{"gitId":"thant"},"content":"        } catch (java.io.IOException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":94,"author":{"gitId":"thant"},"content":"            System.out.println(\"Unable to write to file...\");","lastModifiedDate":"2023-02-16"},{"lineNumber":95,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":96,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":97,"author":{"gitId":"thant"},"content":"}","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"thant":97}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"thant"},"content":" * Represents a task that the user has inputted. A \u003ccode\u003eTask\u003c/code\u003e object contains a","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"thant"},"content":" * basic \u003ccode\u003edescription\u003c/code\u003e and \u003ccode\u003eisDone\u003c/code\u003e to indicate completion.","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"thant"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"thant"},"content":"public class Task extends TaskArray{","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"thant"},"content":"    protected String description;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"thant"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"thant"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"thant"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"thant"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"thant"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"thant"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"thant"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"thant"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"thant"},"content":"    public void unmarkTask() {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"thant"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"thant"},"content":"     * Returns the contents of task in an appropriate string format for printing.","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"thant"},"content":"     * @return Formatted string output.","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"thant"},"content":"    public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"thant"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"thant"},"content":"     * Returns the contents of task in an appropriate string format for adding to text file.","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"thant"},"content":"     * @return Formatted string output.","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"thant"},"content":"    public String toFile() {","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"thant"},"content":"        return this.isDone + \" | \" + this.description + \"\\n\";","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"thant"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"thant":40}},{"path":"src/main/java/TaskArray.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"thant"},"content":" * Represents an array of \u003ccode\u003eTask\u003c/code\u003e objects and serves as the database for Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"thant"},"content":" * Contains a \u003ccode\u003estoredTasks\u003c/code\u003e array of 100 \u003ccode\u003eTask\u003c/code\u003e objects.","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"thant"},"content":" * Initializes a \u003ccode\u003ecount\u003c/code\u003e variable for index navigation of the aforementioned array.","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"thant"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"thant"},"content":"public class TaskArray {","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"thant"},"content":"    static Task[] storedTasks \u003d new Task[100];","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"thant"},"content":"    static int count;","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"thant"},"content":"    public TaskArray(){","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"thant"},"content":"     *Creates a \u003ccode\u003eTodo\u003c/code\u003e to store within the \u003ccode\u003estoredTasks\u003c/code\u003e array.","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"thant"},"content":"     *If the input contains no parameters for the \u003ccode\u003eTodo\u003c/code\u003e to be created,","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"thant"},"content":"     * outputs a messagee.","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"thant"},"content":"     * @param userInput Parameters which the user has entered into Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"thant"},"content":"    public static void createToDo(String userInput){","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"thant"},"content":"        if (userInput \u003d\u003d null){","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"thant"},"content":"            System.out.println(UI.LINE + \"☹ OOPS!!! The description of a todo cannot be empty.\\n\" + UI.LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"thant"},"content":"        }else {","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"thant"},"content":"            storedTasks[count] \u003d new Todo(userInput);","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"thant"},"content":"     *Creates a \u003ccode\u003eDeadline\u003c/code\u003e to store within the \u003ccode\u003estoredTasks\u003c/code\u003e array.","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"thant"},"content":"     *If the input does not follow a stipulated format, displays an error message.","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"thant"},"content":"     * @param userInput Parameters which the user has entered into Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"thant"},"content":"    public static void createDeadline(String userInput){","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"thant"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"thant"},"content":"            String[] parameters \u003d userInput.split(\"by\", 2);","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"thant"},"content":"            storedTasks[count] \u003d new Deadline(parameters[0], parameters[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"thant"},"content":"        }catch (NullPointerException | ArrayIndexOutOfBoundsException e){","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"thant"},"content":"            System.out.println(UI.LINE + \"Please follow the format:[deadline \u003cTask Name\u003e by \u003cDeadline Date\u003e]\\n\" + UI.LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"thant"},"content":"    public static int getCount(){","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"thant"},"content":"        return count;","lastModifiedDate":"2023-02-16"},{"lineNumber":46,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":47,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"thant"},"content":"     *Navigates through the \u003ccode\u003estoredTasks\u003c/code\u003e array to delete a \u003ccode\u003eTask\u003c/code\u003e at a given index.","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"thant"},"content":"     * @param userInput Index from which task to be deleted.","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"thant"},"content":"    public static void delete(String userInput) {","lastModifiedDate":"2023-02-16"},{"lineNumber":53,"author":{"gitId":"thant"},"content":"        String index \u003d userInput.trim();","lastModifiedDate":"2023-02-16"},{"lineNumber":54,"author":{"gitId":"thant"},"content":"        int indexInt \u003d Integer.parseInt(index) - 1;","lastModifiedDate":"2023-02-16"},{"lineNumber":55,"author":{"gitId":"thant"},"content":"        try {","lastModifiedDate":"2023-02-16"},{"lineNumber":56,"author":{"gitId":"thant"},"content":"            count--;","lastModifiedDate":"2023-02-16"},{"lineNumber":57,"author":{"gitId":"thant"},"content":"            System.out.println(UI.LINE + \"Noted. I\u0027ve removed this task:\\n\" + storedTasks[indexInt].toString());","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"thant"},"content":"            System.out.println(\"Now you have \" + count + \" tasks in the list.\\n\" + UI.LINE);","lastModifiedDate":"2023-02-16"},{"lineNumber":59,"author":{"gitId":"thant"},"content":"            Task[] temp \u003d new Task[100];","lastModifiedDate":"2023-02-16"},{"lineNumber":60,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":61,"author":{"gitId":"thant"},"content":"            for (int i \u003d 0, k \u003d 0; i \u003c storedTasks.length; i++) {","lastModifiedDate":"2023-02-16"},{"lineNumber":62,"author":{"gitId":"thant"},"content":"                if (i \u003d\u003d indexInt) {","lastModifiedDate":"2023-02-16"},{"lineNumber":63,"author":{"gitId":"thant"},"content":"                    continue;","lastModifiedDate":"2023-02-16"},{"lineNumber":64,"author":{"gitId":"thant"},"content":"                }","lastModifiedDate":"2023-02-16"},{"lineNumber":65,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":66,"author":{"gitId":"thant"},"content":"                temp[k++] \u003d storedTasks[i];","lastModifiedDate":"2023-02-16"},{"lineNumber":67,"author":{"gitId":"thant"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":68,"author":{"gitId":"thant"},"content":"            storedTasks \u003d temp;","lastModifiedDate":"2023-02-16"},{"lineNumber":69,"author":{"gitId":"thant"},"content":"        }catch (NullPointerException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":70,"author":{"gitId":"thant"},"content":"            System.out.println(UI.LINE + \"Task doesn\u0027t exist!\\n\" + UI.LINE);","lastModifiedDate":"2023-02-16"},{"lineNumber":71,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":72,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":73,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"thant"},"content":"     *Creates an \u003ccode\u003eEvent\u003c/code\u003e to store within the \u003ccode\u003estoredTasks\u003c/code\u003e array.","lastModifiedDate":"2023-02-28"},{"lineNumber":75,"author":{"gitId":"thant"},"content":"     *If the input does not follow a stipulated format, displays an error message.","lastModifiedDate":"2023-02-28"},{"lineNumber":76,"author":{"gitId":"thant"},"content":"     * @param userInput Parameters which the user has entered into Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":77,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":78,"author":{"gitId":"thant"},"content":"    public static void createEvent(String userInput){","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"thant"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":80,"author":{"gitId":"thant"},"content":"            String[] temp \u003d userInput.split(\" from \", 2);","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"thant"},"content":"            String[] parameters \u003d temp[1].split(\" to \", 2);","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"thant"},"content":"            storedTasks[count] \u003d new Event(temp[0], parameters[0], parameters[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"thant"},"content":"        }catch (NullPointerException | ArrayIndexOutOfBoundsException e){","lastModifiedDate":"2023-02-08"},{"lineNumber":84,"author":{"gitId":"thant"},"content":"            System.out.println(UI.LINE + \"Please follow the format:[event \u003cTask Name\u003e from \u003cStart Time\u003e to \u003cEnd Time\u003e]\\n\" + UI.LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":85,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":86,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":88,"author":{"gitId":"thant"},"content":"     *Navigates through the \u003ccode\u003estoredTasks\u003c/code\u003e array to print out each \u003ccode\u003eTask\u003c/code\u003e in an appropriate format.","lastModifiedDate":"2023-02-28"},{"lineNumber":89,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":90,"author":{"gitId":"thant"},"content":"    public static void print(){","lastModifiedDate":"2023-02-03"},{"lineNumber":91,"author":{"gitId":"thant"},"content":"        System.out.println(UI.LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":92,"author":{"gitId":"thant"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2023-02-03"},{"lineNumber":93,"author":{"gitId":"thant"},"content":"            System.out.println(i + 1 + \".\" + storedTasks[i].toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":94,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":95,"author":{"gitId":"thant"},"content":"        System.out.println(UI.LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":96,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":98,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":99,"author":{"gitId":"thant"},"content":"     *Navigates through the \u003ccode\u003estoredTasks\u003c/code\u003e array to indicate a \u003ccode\u003eTask\u003c/code\u003e has been completed.","lastModifiedDate":"2023-02-28"},{"lineNumber":100,"author":{"gitId":"thant"},"content":"     * @param userInput Index of the task in which user wishes to mark.","lastModifiedDate":"2023-02-28"},{"lineNumber":101,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":102,"author":{"gitId":"thant"},"content":"    public static void mark(String userInput){","lastModifiedDate":"2023-02-03"},{"lineNumber":103,"author":{"gitId":"thant"},"content":"        try {","lastModifiedDate":"2023-02-28"},{"lineNumber":104,"author":{"gitId":"thant"},"content":"            String index \u003d userInput.trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":105,"author":{"gitId":"thant"},"content":"            int indexInt \u003d Integer.parseInt(index) - 1;","lastModifiedDate":"2023-02-03"},{"lineNumber":106,"author":{"gitId":"thant"},"content":"            storedTasks[indexInt].markAsDone();","lastModifiedDate":"2023-02-03"},{"lineNumber":107,"author":{"gitId":"thant"},"content":"            System.out.println(UI.LINE + \"     Nice! I\u0027ve marked this task as done:\\n [X] \" + storedTasks[indexInt].description + \"\\n \" + UI.LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":108,"author":{"gitId":"thant"},"content":"        }catch (NullPointerException e){","lastModifiedDate":"2023-02-28"},{"lineNumber":109,"author":{"gitId":"thant"},"content":"            System.out.println(\"No such task found!\");","lastModifiedDate":"2023-02-28"},{"lineNumber":110,"author":{"gitId":"thant"},"content":"        }catch (NumberFormatException | ArrayIndexOutOfBoundsException e){","lastModifiedDate":"2023-02-28"},{"lineNumber":111,"author":{"gitId":"thant"},"content":"            System.out.println(\"Please input a number ranging from 1 to 100!\");","lastModifiedDate":"2023-02-28"},{"lineNumber":112,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":113,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":114,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":115,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":116,"author":{"gitId":"thant"},"content":"     *Navigates through the \u003ccode\u003estoredTasks\u003c/code\u003e array to indicate a \u003ccode\u003eTask\u003c/code\u003e has not been completed.","lastModifiedDate":"2023-02-28"},{"lineNumber":117,"author":{"gitId":"thant"},"content":"     *@param userInput Index of the task in which user wishes to unmark.","lastModifiedDate":"2023-02-28"},{"lineNumber":118,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":119,"author":{"gitId":"thant"},"content":"    public static void unmark(String userInput){","lastModifiedDate":"2023-02-03"},{"lineNumber":120,"author":{"gitId":"thant"},"content":"        try {","lastModifiedDate":"2023-02-28"},{"lineNumber":121,"author":{"gitId":"thant"},"content":"            String index \u003d userInput.trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":122,"author":{"gitId":"thant"},"content":"            int indexInt \u003d Integer.parseInt(index) - 1;","lastModifiedDate":"2023-02-03"},{"lineNumber":123,"author":{"gitId":"thant"},"content":"            storedTasks[indexInt].unmarkTask();","lastModifiedDate":"2023-02-03"},{"lineNumber":124,"author":{"gitId":"thant"},"content":"            System.out.println(UI.LINE + \"     OK, I\u0027ve marked this task as not done yet:\\n [ ] \" + storedTasks[indexInt].description + \"\\n \" + UI.LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":125,"author":{"gitId":"thant"},"content":"        }catch (NullPointerException e){","lastModifiedDate":"2023-02-28"},{"lineNumber":126,"author":{"gitId":"thant"},"content":"            System.out.println(\"No such task found!\");","lastModifiedDate":"2023-02-28"},{"lineNumber":127,"author":{"gitId":"thant"},"content":"        }catch (NumberFormatException | ArrayIndexOutOfBoundsException e){","lastModifiedDate":"2023-02-28"},{"lineNumber":128,"author":{"gitId":"thant"},"content":"            System.out.println(\"Please input a number ranging from 1 to 100!\");","lastModifiedDate":"2023-02-28"},{"lineNumber":129,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":130,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":131,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":132,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":133,"author":{"gitId":"thant"},"content":"     *Navigates through the \u003ccode\u003estoredTasks\u003c/code\u003e array to locate all \u003ccode\u003eTask\u003c/code\u003e objects that contain the given input.","lastModifiedDate":"2023-02-28"},{"lineNumber":134,"author":{"gitId":"thant"},"content":"     * These are then printed out in an appropriate format.","lastModifiedDate":"2023-02-28"},{"lineNumber":135,"author":{"gitId":"thant"},"content":"     *@param userInput Parameters that user wishes to locate tasks for in the \u003ccode\u003estoredTasks\u003c/code\u003e array.","lastModifiedDate":"2023-02-28"},{"lineNumber":136,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":137,"author":{"gitId":"thant"},"content":"    public static void find(String userInput) {","lastModifiedDate":"2023-02-28"},{"lineNumber":138,"author":{"gitId":"thant"},"content":"        Task[] outputHolder \u003d new Task[100];","lastModifiedDate":"2023-02-28"},{"lineNumber":139,"author":{"gitId":"thant"},"content":"        int tempCount \u003d 0;","lastModifiedDate":"2023-02-28"},{"lineNumber":140,"author":{"gitId":"thant"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2023-02-28"},{"lineNumber":141,"author":{"gitId":"thant"},"content":"            if (storedTasks[i].description.contains(userInput)) {","lastModifiedDate":"2023-02-28"},{"lineNumber":142,"author":{"gitId":"thant"},"content":"                outputHolder[tempCount] \u003d storedTasks[i];","lastModifiedDate":"2023-02-28"},{"lineNumber":143,"author":{"gitId":"thant"},"content":"                tempCount++;","lastModifiedDate":"2023-02-28"},{"lineNumber":144,"author":{"gitId":"thant"},"content":"            }","lastModifiedDate":"2023-02-28"},{"lineNumber":145,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":146,"author":{"gitId":"thant"},"content":"        System.out.println(UI.LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":147,"author":{"gitId":"thant"},"content":"        if (tempCount \u003e 0) {","lastModifiedDate":"2023-02-28"},{"lineNumber":148,"author":{"gitId":"thant"},"content":"            System.out.println(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-02-28"},{"lineNumber":149,"author":{"gitId":"thant"},"content":"            for (int i \u003d 0; i \u003c tempCount; i++) {","lastModifiedDate":"2023-02-28"},{"lineNumber":150,"author":{"gitId":"thant"},"content":"                System.out.println(i + 1 + \".\" + outputHolder[i].toString());","lastModifiedDate":"2023-02-28"},{"lineNumber":151,"author":{"gitId":"thant"},"content":"            }","lastModifiedDate":"2023-02-28"},{"lineNumber":152,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":153,"author":{"gitId":"thant"},"content":"        else{","lastModifiedDate":"2023-02-28"},{"lineNumber":154,"author":{"gitId":"thant"},"content":"            System.out.println(\"No tasks in your list that match!\\n\");","lastModifiedDate":"2023-02-28"},{"lineNumber":155,"author":{"gitId":"thant"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":156,"author":{"gitId":"thant"},"content":"        System.out.println(UI.LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":157,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":158,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":159,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":160,"author":{"gitId":"thant"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"thant":160}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"thant"},"content":" * Represents a todo that the user has inputted. A \u003ccode\u003eTodo\u003c/code\u003e object contains a","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"thant"},"content":" * basic \u003ccode\u003edescription\u003c/code\u003e and \u003ccode\u003eisDone\u003c/code\u003e to indicate completion.","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"thant"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"thant"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"thant"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"thant"},"content":"        super(description);","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"thant"},"content":"        initialize();","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"thant"},"content":"     * Returns the contents of task in an appropriate string format for printing.","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"thant"},"content":"     * @return Formatted string output.","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"thant"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"thant"},"content":"    public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"thant"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"thant"},"content":"     * Handles prior stored data in a given text file upon initialization of Duke.","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"thant"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"thant"},"content":"        TaskArray.count++;","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"thant"},"content":"        System.out.println(UI.LINE +","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"thant"},"content":"                \"     Got it. I\u0027ve added this task:\\n\" + toString() +","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"thant"},"content":"                \"\\n     Now you have \" + TaskArray.count + \" tasks in the list.\\n\" +","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"thant"},"content":"                UI.LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"thant"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"thant"},"content":"     * Returns the contents of task in an appropriate string format for adding to textfile.","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"thant"},"content":"     * @return Formatted string output.","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"thant"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"thant"},"content":"    public String toFile() {","lastModifiedDate":"2023-02-16"},{"lineNumber":36,"author":{"gitId":"thant"},"content":"        return this.isDone + \" | \" +\"t\"+ this.description + \"\\n\";","lastModifiedDate":"2023-02-16"},{"lineNumber":37,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"thant"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"thant":38}},{"path":"src/main/java/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thant"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"thant"},"content":" * Represents UI elements a Duke User will see.","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"thant"},"content":" * It also contains a \u003ccode\u003egreet\u003c/code\u003e and \u003ccode\u003ebye\u003c/code\u003e function that are executed","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"thant"},"content":" * upon start up and shut down.","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"thant"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"thant"},"content":"public class UI {","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"thant"},"content":"    static String LINE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"thant"},"content":"    public UI() {","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"thant"},"content":"    public static void greet(){","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"thant"},"content":"        System.out.println(LINE +\" Hello! I\u0027m Duke\\n\" + \" What can I do for you?\\n\" +LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"thant"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"thant"},"content":"    public static void bye(){","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"thant"},"content":"        System.out.println(LINE + \" Bye. Hope to see you again soon!\\n\" + LINE);","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"thant"},"content":"        Duke.continueRunning \u003d false;","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"thant"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"thant"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"thant":20}}]
