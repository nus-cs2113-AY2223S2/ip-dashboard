[{"path":"src/main/java/Bro.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"import bro.exceptions.invalidInputFormat;","lastModifiedDate":"2023-02-06"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"import bro.exceptions.invalidTaskIndexException;","lastModifiedDate":"2023-02-06"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Task;","lastModifiedDate":"2023-02-06"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"import bro.tasks.ToDo;","lastModifiedDate":"2023-02-06"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Deadline;","lastModifiedDate":"2023-02-06"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Event;","lastModifiedDate":"2023-02-06"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"public class Bro {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"    public static final String HORIZONTAL_LINE \u003d \"\\n───────────────────────────────────────────────────────────────\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"    public static final String GREETING \u003d \" Sup bro. I\u0027m Bro.\\n\" + \" What do you want?\";","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"    public static final String TASK_DOES_NOT_EXIST \u003d \" Bro that task number does not exist...\";","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"        System.out.println(HORIZONTAL_LINE + GREETING + HORIZONTAL_LINE);","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"        // User Input","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"        String line;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"        StringBuilder reply \u003d new StringBuilder();  // Use StringBuilder as we concatenate Strings in a loop later on","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();  // Dynamic array to store text entered by user","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"        boolean haveInput \u003d true;","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"        while (haveInput) {","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"            line \u003d in.nextLine();","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"            String[] arrayOfInputs \u003d line.split(\" \");","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"            switch (arrayOfInputs[0]) {","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"            case \"bye\":","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"                reply \u003d new StringBuilder(\" Bye bye bro.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"kairuler"},"content":"                haveInput \u003d false;","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"kairuler"},"content":"            case \"list\":","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"kairuler"},"content":"                reply \u003d new StringBuilder(\" Your tasks:\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"kairuler"},"content":"                for (int i \u003d 0; i \u003c tasks.size(); ++i) {","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"kairuler"},"content":"                    Task currentTask \u003d tasks.get(i);","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"kairuler"},"content":"                    String mark \u003d currentTask.mark();","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"kairuler"},"content":"                    reply.append(\" \").append(i + 1).append(\".[\").append(currentTask.getType()).append(\"]\").append(\"[\")","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"kairuler"},"content":"                            .append(mark).append(\"] \").append(currentTask).append(\"\\n\");","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"kairuler"},"content":"                }","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"kairuler"},"content":"            case \"mark\": // Fallthrough","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"kairuler"},"content":"            case \"unmark\":","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"kairuler"},"content":"                boolean markAsComplete \u003d arrayOfInputs[0].equals(\"mark\");   // this boolean decides if the following `markComplete()` marks the task as Completed or Uncompleted","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"kairuler"},"content":"                try {","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"kairuler"},"content":"                    reply \u003d markComplete(markAsComplete, tasks, arrayOfInputs);","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"kairuler"},"content":"                } catch (invalidInputFormat e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"kairuler"},"content":"                    reply \u003d new StringBuilder(e.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"kairuler"},"content":"                } catch (invalidTaskIndexException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"kairuler"},"content":"                    reply \u003d new StringBuilder(TASK_DOES_NOT_EXIST);","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"kairuler"},"content":"                }","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"kairuler"},"content":"            case \"todo\":","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"kairuler"},"content":"                try {","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"kairuler"},"content":"                    reply \u003d createToDo(tasks, arrayOfInputs);","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"kairuler"},"content":"                } catch (invalidInputFormat e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"kairuler"},"content":"                    reply \u003d new StringBuilder(e.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"kairuler"},"content":"                }","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"kairuler"},"content":"            case \"deadline\":","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"kairuler"},"content":"                try {","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"kairuler"},"content":"                    reply \u003d createDeadline(tasks, arrayOfInputs);","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"kairuler"},"content":"                } catch (invalidInputFormat e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"kairuler"},"content":"                    reply \u003d new StringBuilder(e.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"kairuler"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"kairuler"},"content":"            case \"event\":","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"kairuler"},"content":"                StringBuilder eventName \u003d new StringBuilder();","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"kairuler"},"content":"                StringBuilder startTime \u003d new StringBuilder();","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"kairuler"},"content":"                StringBuilder endTime \u003d new StringBuilder();","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"kairuler"},"content":"                int indexOfStartTime \u003d Arrays.asList(arrayOfInputs).indexOf(\"/from\");","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"kairuler"},"content":"                int indexOfEndTime \u003d Arrays.asList(arrayOfInputs).indexOf(\"/to\");","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"kairuler"},"content":"                for (int i \u003d 1; i \u003c indexOfStartTime; ++i) {","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"kairuler"},"content":"                    eventName.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"kairuler"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"kairuler"},"content":"                for (int i \u003d indexOfStartTime + 1; i \u003c indexOfEndTime; ++i) {","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"kairuler"},"content":"                    startTime.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"kairuler"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"kairuler"},"content":"                for (int i \u003d indexOfEndTime + 1; i \u003c arrayOfInputs.length; ++i) {","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"kairuler"},"content":"                    endTime.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"kairuler"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"kairuler"},"content":"                Task event \u003d new Event(eventName.toString().trim(), startTime.toString().trim(), endTime.toString().trim());","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"kairuler"},"content":"                tasks.add(event);","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"kairuler"},"content":"                reply \u003d new StringBuilder(\" added: \" + event);","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"kairuler"},"content":"            default:","lastModifiedDate":"2023-02-05"},{"lineNumber":86,"author":{"gitId":"kairuler"},"content":"                reply \u003d new StringBuilder(\" Not a valid command bro...\");","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"kairuler"},"content":"            System.out.println(HORIZONTAL_LINE + reply + HORIZONTAL_LINE);  // Output reply","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":90,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"kairuler"},"content":"    /**","lastModifiedDate":"2023-02-06"},{"lineNumber":93,"author":{"gitId":"kairuler"},"content":"     * Validate the input format, creates a Todo object and returns Bro\u0027s reply.","lastModifiedDate":"2023-02-06"},{"lineNumber":94,"author":{"gitId":"kairuler"},"content":"     *","lastModifiedDate":"2023-02-06"},{"lineNumber":95,"author":{"gitId":"kairuler"},"content":"     * @param tasks List of all tasks","lastModifiedDate":"2023-02-06"},{"lineNumber":96,"author":{"gitId":"kairuler"},"content":"     * @param arrayOfInputs Array of input words","lastModifiedDate":"2023-02-06"},{"lineNumber":97,"author":{"gitId":"kairuler"},"content":"     * @return Bro\u0027s reply","lastModifiedDate":"2023-02-06"},{"lineNumber":98,"author":{"gitId":"kairuler"},"content":"     * @throws invalidInputFormat","lastModifiedDate":"2023-02-06"},{"lineNumber":99,"author":{"gitId":"kairuler"},"content":"     */","lastModifiedDate":"2023-02-06"},{"lineNumber":100,"author":{"gitId":"kairuler"},"content":"    private static StringBuilder createToDo(ArrayList\u003cTask\u003e tasks, String[] arrayOfInputs) throws invalidInputFormat {","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"kairuler"},"content":"        StringBuilder todoName \u003d new StringBuilder();","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"kairuler"},"content":"        if (arrayOfInputs.length \u003c 2) {","lastModifiedDate":"2023-02-05"},{"lineNumber":103,"author":{"gitId":"kairuler"},"content":"            throw new invalidInputFormat(\"t\");","lastModifiedDate":"2023-02-05"},{"lineNumber":104,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":105,"author":{"gitId":"kairuler"},"content":"        for (int i \u003d 1; i \u003c arrayOfInputs.length; ++i) {","lastModifiedDate":"2023-02-05"},{"lineNumber":106,"author":{"gitId":"kairuler"},"content":"            todoName.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-02-05"},{"lineNumber":107,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":108,"author":{"gitId":"kairuler"},"content":"        Task todo \u003d new ToDo(todoName.toString().trim());","lastModifiedDate":"2023-02-05"},{"lineNumber":109,"author":{"gitId":"kairuler"},"content":"        tasks.add(todo);","lastModifiedDate":"2023-02-05"},{"lineNumber":110,"author":{"gitId":"kairuler"},"content":"        return new StringBuilder(\" added: \" + todo);","lastModifiedDate":"2023-02-05"},{"lineNumber":111,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":112,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":113,"author":{"gitId":"kairuler"},"content":"    /**","lastModifiedDate":"2023-02-06"},{"lineNumber":114,"author":{"gitId":"kairuler"},"content":"     * Validate the input format, creates a Deadline object and returns Bro\u0027s reply.","lastModifiedDate":"2023-02-06"},{"lineNumber":115,"author":{"gitId":"kairuler"},"content":"     *","lastModifiedDate":"2023-02-06"},{"lineNumber":116,"author":{"gitId":"kairuler"},"content":"     * @param tasks List of all tasks","lastModifiedDate":"2023-02-06"},{"lineNumber":117,"author":{"gitId":"kairuler"},"content":"     * @param arrayOfInputs Array of input words","lastModifiedDate":"2023-02-06"},{"lineNumber":118,"author":{"gitId":"kairuler"},"content":"     * @return Bro\u0027s reply","lastModifiedDate":"2023-02-06"},{"lineNumber":119,"author":{"gitId":"kairuler"},"content":"     * @throws invalidInputFormat","lastModifiedDate":"2023-02-06"},{"lineNumber":120,"author":{"gitId":"kairuler"},"content":"     */","lastModifiedDate":"2023-02-06"},{"lineNumber":121,"author":{"gitId":"kairuler"},"content":"    private static StringBuilder createDeadline(ArrayList\u003cTask\u003e tasks, String[] arrayOfInputs) throws invalidInputFormat {","lastModifiedDate":"2023-02-05"},{"lineNumber":122,"author":{"gitId":"kairuler"},"content":"        int indexOfDeadline \u003d Arrays.asList(arrayOfInputs).indexOf(\"/by\");","lastModifiedDate":"2023-02-05"},{"lineNumber":123,"author":{"gitId":"kairuler"},"content":"        if (indexOfDeadline \u003d\u003d -1 || indexOfDeadline \u003d\u003d arrayOfInputs.length - 1) { // user did not input \"/by\" or did not input a deadline time","lastModifiedDate":"2023-02-05"},{"lineNumber":124,"author":{"gitId":"kairuler"},"content":"            throw new invalidInputFormat(\"d\");","lastModifiedDate":"2023-02-05"},{"lineNumber":125,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":126,"author":{"gitId":"kairuler"},"content":"        // Separate arrayOfInputs into `deadlineName` and `by` to construct deadline object","lastModifiedDate":"2023-02-05"},{"lineNumber":127,"author":{"gitId":"kairuler"},"content":"        StringBuilder deadlineName \u003d new StringBuilder();","lastModifiedDate":"2023-02-05"},{"lineNumber":128,"author":{"gitId":"kairuler"},"content":"        StringBuilder by \u003d new StringBuilder();","lastModifiedDate":"2023-02-05"},{"lineNumber":129,"author":{"gitId":"kairuler"},"content":"        for (int i \u003d 1; i \u003c indexOfDeadline; ++i) {","lastModifiedDate":"2023-02-05"},{"lineNumber":130,"author":{"gitId":"kairuler"},"content":"            deadlineName.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-02-05"},{"lineNumber":131,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":132,"author":{"gitId":"kairuler"},"content":"        for (int i \u003d indexOfDeadline + 1; i \u003c arrayOfInputs.length; ++i) {","lastModifiedDate":"2023-02-05"},{"lineNumber":133,"author":{"gitId":"kairuler"},"content":"            by.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-02-05"},{"lineNumber":134,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":135,"author":{"gitId":"kairuler"},"content":"        Task deadline \u003d new Deadline(deadlineName.toString().trim(), by.toString().trim());","lastModifiedDate":"2023-02-05"},{"lineNumber":136,"author":{"gitId":"kairuler"},"content":"        tasks.add(deadline);","lastModifiedDate":"2023-02-05"},{"lineNumber":137,"author":{"gitId":"kairuler"},"content":"        return new StringBuilder(\" added: \" + deadline);","lastModifiedDate":"2023-02-05"},{"lineNumber":138,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":139,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":140,"author":{"gitId":"kairuler"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":141,"author":{"gitId":"kairuler"},"content":"     * Validate the input format and task index, sets the task completion status and returns Bro\u0027s reply according to said completion status.","lastModifiedDate":"2023-02-05"},{"lineNumber":142,"author":{"gitId":"kairuler"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":143,"author":{"gitId":"kairuler"},"content":"     * @param markAsComplete boolean that decides if this method marks the input task as Completed or Uncompleted","lastModifiedDate":"2023-02-05"},{"lineNumber":144,"author":{"gitId":"kairuler"},"content":"     * @param tasks List of all tasks","lastModifiedDate":"2023-02-05"},{"lineNumber":145,"author":{"gitId":"kairuler"},"content":"     * @param arrayOfInputs Array of input words","lastModifiedDate":"2023-02-05"},{"lineNumber":146,"author":{"gitId":"kairuler"},"content":"     * @return Bro\u0027s reply","lastModifiedDate":"2023-02-05"},{"lineNumber":147,"author":{"gitId":"kairuler"},"content":"     * @throws invalidTaskIndexException","lastModifiedDate":"2023-02-05"},{"lineNumber":148,"author":{"gitId":"kairuler"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":149,"author":{"gitId":"kairuler"},"content":"    private static StringBuilder markComplete(boolean markAsComplete, ArrayList\u003cTask\u003e tasks, String[] arrayOfInputs) throws invalidInputFormat, invalidTaskIndexException {","lastModifiedDate":"2023-02-05"},{"lineNumber":150,"author":{"gitId":"kairuler"},"content":"        // Validate if input format is valid","lastModifiedDate":"2023-02-05"},{"lineNumber":151,"author":{"gitId":"kairuler"},"content":"        int taskIndex;","lastModifiedDate":"2023-02-05"},{"lineNumber":152,"author":{"gitId":"kairuler"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":153,"author":{"gitId":"kairuler"},"content":"            taskIndex \u003d Integer.parseInt(arrayOfInputs[1]) - 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":154,"author":{"gitId":"kairuler"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":155,"author":{"gitId":"kairuler"},"content":"            throw new invalidInputFormat(\"m\");","lastModifiedDate":"2023-02-05"},{"lineNumber":156,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":157,"author":{"gitId":"kairuler"},"content":"        // Validate if input Task index is valid","lastModifiedDate":"2023-02-05"},{"lineNumber":158,"author":{"gitId":"kairuler"},"content":"        if (taskIndex + 1 \u003e tasks.size() || taskIndex \u003c 0) {","lastModifiedDate":"2023-02-05"},{"lineNumber":159,"author":{"gitId":"kairuler"},"content":"            throw new invalidTaskIndexException();","lastModifiedDate":"2023-02-05"},{"lineNumber":160,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":161,"author":{"gitId":"kairuler"},"content":"        else if (markAsComplete){   // mark as Completed","lastModifiedDate":"2023-02-05"},{"lineNumber":162,"author":{"gitId":"kairuler"},"content":"            tasks.get(taskIndex).setCompleted();","lastModifiedDate":"2023-02-05"},{"lineNumber":163,"author":{"gitId":"kairuler"},"content":"            return new StringBuilder(\" Marked \" + tasks.get(taskIndex) + \" as done.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":164,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":165,"author":{"gitId":"kairuler"},"content":"        else {                      // mark as Uncompleted","lastModifiedDate":"2023-02-05"},{"lineNumber":166,"author":{"gitId":"kairuler"},"content":"            tasks.get(taskIndex).setUncompleted();","lastModifiedDate":"2023-02-05"},{"lineNumber":167,"author":{"gitId":"kairuler"},"content":"            return new StringBuilder(\" Marked \" + tasks.get(taskIndex) + \" as not done.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":168,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"kairuler":167,"-":3}},{"path":"src/main/java/bro/exceptions/invalidInputFormat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.exceptions;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class invalidInputFormat extends Exception {","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    private String type;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"    public invalidInputFormat(String type) {","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"    public String toString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"        if (type.equals(\"m\")){","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"            return \" Bro please follow this format:\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"                    \" \\\"mark/unmark {index of task according to list}\\\"\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"                    \" e.g. Finish homework /by Monday 2pm\";","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"        } else if (type.equals(\"t\")) {","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"            return \" Bro please follow this format:\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"                    \" \\\"todo {Name of Todo}\\\"\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"                    \" e.g. todo Maths homework\";","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"        } else if (type.equals(\"d\")) {","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"            return \" Bro please follow this format:\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"                    \" \\\"deadline {Name of Deadline} /by {Deadline}\\\"\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"                    \" e.g. mark 3\";","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"        return \"\";","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"kairuler":25}},{"path":"src/main/java/bro/exceptions/invalidTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.exceptions;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class invalidTaskIndexException extends Exception{","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"kairuler":4}},{"path":"src/main/java/bro/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    private String deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"    public Deadline(String name, String deadline) {","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"        super(name);","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"        this.setType(\"D\");","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"        return super.toString() + \" (by: \" + deadline + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"kairuler":14}},{"path":"src/main/java/bro/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class Event extends Task{","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    private String startTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"    private String endTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"    public Event(String name, String startTime, String endTime) {","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"        super(name);","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"        this.setType(\"E\");","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"        return super.toString() + \" (from: \" + startTime + \" to: \" + endTime + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"kairuler":16}},{"path":"src/main/java/bro/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    private String name;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"    private boolean completed;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"    private String type;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"        this.type \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"        this.completed \u003d false;","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"    public String getName() {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"        return name;","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"    public void setName(String name) {","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"        return completed;","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"    public void setCompleted() {","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"        this.completed \u003d true;","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"    public void setUncompleted() {","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"        this.completed \u003d false;","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"    public String getType() {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"        return type;","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"kairuler"},"content":"    public void setType(String type) {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"kairuler"},"content":"    public String mark() {      // Method to return completion mark \"✔\"","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"kairuler"},"content":"        if (this.completed) {","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"kairuler"},"content":"            return \"✔\";","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"kairuler"},"content":"        else {","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"kairuler"},"content":"            return \" \";","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"kairuler"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"kairuler"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"kairuler"},"content":"        return name;","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"kairuler":45}},{"path":"src/main/java/bro/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class ToDo extends Task{","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"        super(name);","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"        this.setType(\"T\");","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"kairuler":8}}]
