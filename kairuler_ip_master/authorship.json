[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"# _**Bro**_ User Guide","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"- ### Adding a task: `todo`, `deadline`, `event`","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"    Add a ToDo, Deadline or Event task. The task will be saved upon ending the chat with Bro.","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"    Example of usage: ","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"    `todo Math Homework`","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"    `deadline Read Book /by Monday 8pm`","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"    `event Concert /from 6pm /to 7pm`","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"    Expected outcome:","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"    ```","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"     added: Math Homework","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"     added: Read Book (by: Monday 8pm)","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"     added: Concert (from: 6pm to: 7pm)","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"    ```","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"- ### List all tasks: `list`","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"kairuler"},"content":"    List all tasks that have been saved, as well as tasks that have just been added.","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"kairuler"},"content":"    `list`","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":41,"author":{"gitId":"kairuler"},"content":"    ```","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"kairuler"},"content":"     Your tasks:","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"kairuler"},"content":"     1.[T][ ] Math Homework","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"kairuler"},"content":"     2.[D][ ] Read Book (by: Monday 8pm)","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"kairuler"},"content":"     3.[E][ ] Concert (from: 6pm to: 7pm)","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"kairuler"},"content":"    ```","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"kairuler"},"content":"- ### Mark a task as complete / incomplete: `mark`, `unmark`","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"kairuler"},"content":"    Mark an incomplete task as complete, or mark a complete task as incomplete. Nothing happens if an incomplete task is marked as incomplete or if a complete task is marked as complete. Throws an error if the index is out of bounds.","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"kairuler"},"content":"    Example of usage:","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"kairuler"},"content":"    ","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"kairuler"},"content":"    `mark 2`","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"kairuler"},"content":"    Expected outcome:","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"kairuler"},"content":"    ```","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"kairuler"},"content":"     Marked Read Book (by: Monday 8pm) as done.","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"kairuler"},"content":"    list","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"kairuler"},"content":"    ────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":67,"author":{"gitId":"kairuler"},"content":"     Your tasks:","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"kairuler"},"content":"     1.[T][ ] Math Homework","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"kairuler"},"content":"     2.[D][✔] Read Book (by: Monday 8pm)","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"kairuler"},"content":"     3.[E][ ] Concert (from: 6pm to: 7pm)","lastModifiedDate":"2023-03-03"},{"lineNumber":71,"author":{"gitId":"kairuler"},"content":"    ─────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"kairuler"},"content":"    ```","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"kairuler"},"content":"- ### Delete a task: `delete`","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"kairuler"},"content":"    Delete a task from the saved tasks list by inputting the index of the task. Throws an error if the index is out of bounds.","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"kairuler"},"content":"    Example of usage: ","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"kairuler"},"content":"    `delete 2`","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"kairuler"},"content":"    Expected outcome:","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"kairuler"},"content":"    ```","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"kairuler"},"content":"    ───────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"kairuler"},"content":"     Ok bro I remove this task:","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"kairuler"},"content":"        [D][✔] Read Book (by: Monday 8pm)","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"kairuler"},"content":"     Now you have 2 tasks in the list.","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"kairuler"},"content":"    ───────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"kairuler"},"content":"    ```","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"kairuler"},"content":"- ### Find a task: `find`","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":94,"author":{"gitId":"kairuler"},"content":"    Delete a task from the saved tasks list. Throws an error if the index is out of bounds.","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":96,"author":{"gitId":"kairuler"},"content":"    Example of usage: ","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":98,"author":{"gitId":"kairuler"},"content":"    `find math`","lastModifiedDate":"2023-03-03"},{"lineNumber":99,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":100,"author":{"gitId":"kairuler"},"content":"    Expected outcome:","lastModifiedDate":"2023-03-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2021-07-17"},{"lineNumber":103,"author":{"gitId":"kairuler"},"content":"    ────────────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":104,"author":{"gitId":"kairuler"},"content":"    Here are the matching tasks in your list:","lastModifiedDate":"2023-03-03"},{"lineNumber":105,"author":{"gitId":"kairuler"},"content":"    1.[T][ ] Math Homework","lastModifiedDate":"2023-03-03"},{"lineNumber":106,"author":{"gitId":"kairuler"},"content":"    ────────────────────────────────────────────","lastModifiedDate":"2023-03-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"kairuler":86,"-":21}},{"path":"src/main/java/Bro.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"import java.io.File;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"import bro.Parser;","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"import bro.Storage;","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"import bro.TaskList;","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"import bro.Ui;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"import static bro.Messages.FILE_NOT_FOUND;","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"import static bro.Ui.printGreeting;","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"import static bro.Ui.printReply;","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"public class Bro {","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"        TaskList tasks;","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"        try {","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"            tasks \u003d Storage.load(new TaskList());","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"        } catch (FileNotFoundException e) {     // create a new file to save the list of tasks","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"            printReply(FILE_NOT_FOUND);","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"            File f \u003d new File(\"tasks.txt\");","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"            if (f.createNewFile()) {                  // throws IOException","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"                printReply(\" New File \\\"tasks.txt\\\" created at: \" + f.getAbsolutePath());","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"            tasks \u003d Storage.load(new TaskList());","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"        printGreeting();","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"        Parser p \u003d new Parser();","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"kairuler"},"content":"        while (p.haveInput()) {","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"            String[] arrayOfInputs \u003d ui.getUserCommand();","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"kairuler"},"content":"            p.parseInput(tasks, arrayOfInputs);","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"kairuler":34,"-":1}},{"path":"src/main/java/bro/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class Messages {","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    public static final String HORIZONTAL_LINE \u003d \"\\n─────────────────────────────────────────────────────────────────────────────────────────────\\n\";","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"    public static final String GREETING \u003d \" Sup bro. I\u0027m Bro.\\n\" + \" What do you want?\";","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"    public static final String FAREWELL \u003d \" Bye bye bro.\";","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"    public static final String INVALID_COMMAND \u003d \" Not a valid command bro...\";","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"    public static final String TASK_DOES_NOT_EXIST \u003d \" Bro that task number does not exist...\";","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"    public static final String FILE_NOT_FOUND \u003d \"File not found\";","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"    public static final String IO_ERROR \u003d \"Error in reading/writing saved tasks file\";","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"kairuler":11}},{"path":"src/main/java/bro/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"import bro.exceptions.invalidInputFormat;","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"import bro.exceptions.invalidTaskIndexException;","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"import static bro.Ui.printException;","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"import static bro.Ui.printReply;","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"import static bro.Ui.printTaskList;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"import static bro.Messages.FAREWELL;","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"import static bro.Messages.TASK_DOES_NOT_EXIST;","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"import static bro.Messages.INVALID_COMMAND;","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"public class Parser {","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"    private boolean haveInput;","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"    public Parser() {","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"        this.haveInput \u003d true;","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"    public boolean haveInput() {","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"        return haveInput;","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"    public void parseInput(TaskList taskList, String[] arrayOfInputs) {","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"        switch (arrayOfInputs[0]) {","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"        case \"bye\":","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"            printReply(FAREWELL);","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"            haveInput \u003d false;","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"        case \"list\":","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"kairuler"},"content":"            printTaskList(taskList);","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"kairuler"},"content":"        case \"mark\": // Fallthrough","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"kairuler"},"content":"        case \"unmark\":","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"kairuler"},"content":"            boolean markAsComplete \u003d arrayOfInputs[0].equals(\"mark\");   // this boolean decides if the following `markComplete()` marks the task as Completed or Uncompleted","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"kairuler"},"content":"            try {","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"kairuler"},"content":"                taskList.markComplete(markAsComplete, taskList, arrayOfInputs);","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"kairuler"},"content":"            } catch (invalidInputFormat e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"kairuler"},"content":"                printException(e);","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"kairuler"},"content":"            } catch (invalidTaskIndexException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"kairuler"},"content":"                printException(TASK_DOES_NOT_EXIST);","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"kairuler"},"content":"            Storage.save(taskList);","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"kairuler"},"content":"        case \"todo\":","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"kairuler"},"content":"            try {","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"kairuler"},"content":"                taskList.createToDo(taskList, arrayOfInputs);","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"kairuler"},"content":"            } catch (invalidInputFormat e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"kairuler"},"content":"                printException(e);","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"kairuler"},"content":"            Storage.save(taskList);","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"kairuler"},"content":"        case \"deadline\":","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"kairuler"},"content":"            try {","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"kairuler"},"content":"                taskList.createDeadline(taskList, arrayOfInputs);","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"kairuler"},"content":"            } catch (invalidInputFormat e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"kairuler"},"content":"                printException(e);","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"kairuler"},"content":"            Storage.save(taskList);","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"kairuler"},"content":"        case \"event\":","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"kairuler"},"content":"            try {","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"kairuler"},"content":"                taskList.createEvent(taskList, arrayOfInputs);","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"kairuler"},"content":"            } catch (invalidInputFormat e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"kairuler"},"content":"                printException(e);","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"kairuler"},"content":"            Storage.save(taskList);","lastModifiedDate":"2023-03-03"},{"lineNumber":67,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"kairuler"},"content":"        case \"delete\":","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"kairuler"},"content":"            try {","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"kairuler"},"content":"                taskList.deleteTask(taskList, arrayOfInputs);","lastModifiedDate":"2023-03-03"},{"lineNumber":71,"author":{"gitId":"kairuler"},"content":"            } catch (invalidInputFormat e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"kairuler"},"content":"                printException(e);","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"kairuler"},"content":"            } catch (invalidTaskIndexException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"kairuler"},"content":"                printException(TASK_DOES_NOT_EXIST);","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"kairuler"},"content":"            Storage.save(taskList);","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"kairuler"},"content":"        case \"find\":","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"kairuler"},"content":"            try {","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"kairuler"},"content":"                taskList.find(taskList, arrayOfInputs);","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"kairuler"},"content":"            } catch (invalidInputFormat e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"kairuler"},"content":"                printException(e);","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"kairuler"},"content":"        default:","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"kairuler"},"content":"            printReply(INVALID_COMMAND);","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"kairuler":89}},{"path":"src/main/java/bro/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Task;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Deadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Event;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"import bro.tasks.ToDo;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"import static bro.Messages.IO_ERROR;","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"import java.io.File;","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"public class Storage {","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"    private final static String PATH_NAME \u003d \"tasks.txt\";","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"     * Loads an Instance of TaskList with all tasks saved in the storage file.","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"     * @param taskListObject Instance of empty TaskList","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"     * @return Instance of TaskList with all tasks loaded","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"     * @throws FileNotFoundException Missing storage file","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"    public static TaskList load(TaskList taskListObject) throws FileNotFoundException {","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"        Scanner scanner \u003d new Scanner(new File(PATH_NAME));","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"            String[] line \u003d scanner.nextLine().split(\"\\\\|\");","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"kairuler"},"content":"            for (int i \u003d 0; i \u003c line.length; i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"                line[i] \u003d line[i].trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"kairuler"},"content":"            String type \u003d line[0];","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"kairuler"},"content":"            switch (type) {","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"kairuler"},"content":"            case \"T\":","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"kairuler"},"content":"                taskListObject.add(new ToDo(line[2], Boolean.parseBoolean(line[1])));","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"kairuler"},"content":"            case \"D\":","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"kairuler"},"content":"                taskListObject.add(new Deadline(line[2], Boolean.parseBoolean(line[1]), line[3]));","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"kairuler"},"content":"            case \"E\":","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"kairuler"},"content":"                taskListObject.add(new Event(line[2], Boolean.parseBoolean(line[1]), line[3], line[4]));","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"kairuler"},"content":"            default:","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"kairuler"},"content":"                throw new IllegalArgumentException(); // throw an unchecked exception","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"kairuler"},"content":"        return taskListObject;","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"kairuler"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"kairuler"},"content":"     * Updates all tasks in the storage file.","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"kairuler"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"kairuler"},"content":"     * @param taskListObject Instance of TaskList that contains all tasks","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"kairuler"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"kairuler"},"content":"    public static void save(TaskList taskListObject) {","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"kairuler"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"kairuler"},"content":"            ArrayList\u003cTask\u003e taskList \u003d taskListObject.getTaskList();","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"kairuler"},"content":"            updateTasks(taskList);","lastModifiedDate":"2023-02-17"},{"lineNumber":60,"author":{"gitId":"kairuler"},"content":"        } catch (IOException e){","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"kairuler"},"content":"            System.out.println(IO_ERROR);","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"kairuler"},"content":"    private static void updateTasks(ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"kairuler"},"content":"        FileWriter fileWriter \u003d new FileWriter(PATH_NAME);","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"kairuler"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"kairuler"},"content":"        for (Task currentTask : taskList) {","lastModifiedDate":"2023-02-17"},{"lineNumber":68,"author":{"gitId":"kairuler"},"content":"            String type \u003d currentTask.getType();","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"kairuler"},"content":"            String isCompleted \u003d currentTask.isCompleted() ? \"true\" : \"false\";","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"kairuler"},"content":"            String name \u003d currentTask.getName();","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"kairuler"},"content":"            String line;","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"kairuler"},"content":"            switch (type) {","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"kairuler"},"content":"            case \"T\":","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"kairuler"},"content":"                line \u003d String.format(\"%s | %s | %s\", type, isCompleted, name);","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"kairuler"},"content":"                output.append(line).append(System.lineSeparator());","lastModifiedDate":"2023-02-15"},{"lineNumber":76,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"kairuler"},"content":"            case \"D\":","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"kairuler"},"content":"                Deadline currentDeadline \u003d (Deadline) currentTask; // casting to use subclass methods","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"kairuler"},"content":"                line \u003d String.format(\"%s | %s | %s | %s\", type, isCompleted, name, currentDeadline.getDeadline());","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"kairuler"},"content":"                output.append(line).append(System.lineSeparator());","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"kairuler"},"content":"            case \"E\":","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"kairuler"},"content":"                Event currentEvent \u003d (Event) currentTask;","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"kairuler"},"content":"                line \u003d String.format(\"%s | %s | %s | %s | %s\", type, isCompleted, name, currentEvent.getStartTime(), currentEvent.getEndTime());","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"kairuler"},"content":"                output.append(line).append(System.lineSeparator());","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"kairuler"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"kairuler"},"content":"            default:","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"kairuler"},"content":"                throw new IOException();","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"kairuler"},"content":"        fileWriter.write(String.valueOf(output));","lastModifiedDate":"2023-02-15"},{"lineNumber":92,"author":{"gitId":"kairuler"},"content":"        fileWriter.close();","lastModifiedDate":"2023-02-15"},{"lineNumber":93,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":94,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"kairuler":94}},{"path":"src/main/java/bro/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"import bro.exceptions.invalidInputFormat;","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"import bro.exceptions.invalidTaskIndexException;","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Task;","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Deadline;","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Event;","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"import bro.tasks.ToDo;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Type;","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"import static bro.Ui.printReply;","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"import java.lang.String;","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"public class TaskList {","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"    public TaskList() {","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"        return taskList;","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"        taskList.add(task);","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"     * Creates a ToDo Task and adds it to the list of tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"kairuler"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"     * @param taskListObject Instance of TaskList that contains all tasks","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"kairuler"},"content":"     * @param arrayOfInputs Array of Strings containing the user input","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"kairuler"},"content":"     * @throws invalidInputFormat If index of task is not provided, throw an exception","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"kairuler"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"kairuler"},"content":"    public void createToDo(TaskList taskListObject, String[] arrayOfInputs) throws invalidInputFormat {","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"kairuler"},"content":"        ArrayList\u003cTask\u003e taskList \u003d taskListObject.getTaskList();","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"kairuler"},"content":"        StringBuilder todoName \u003d new StringBuilder();","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"kairuler"},"content":"        if (arrayOfInputs.length \u003c 2) {","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"kairuler"},"content":"            throw new invalidInputFormat(Type.TODO);","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"kairuler"},"content":"        for (int i \u003d 1; i \u003c arrayOfInputs.length; ++i) {","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"kairuler"},"content":"            todoName.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"kairuler"},"content":"        Task todo \u003d new ToDo(todoName.toString().trim());","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"kairuler"},"content":"        taskList.add(todo);","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"kairuler"},"content":"        printReply(\" added: \" + todo);","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"kairuler"},"content":"    public void createDeadline(TaskList taskListObject, String[] arrayOfInputs) throws invalidInputFormat {","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"kairuler"},"content":"        ArrayList\u003cTask\u003e taskList \u003d taskListObject.getTaskList();","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"kairuler"},"content":"        int indexOfDeadline \u003d Arrays.asList(arrayOfInputs).indexOf(\"/by\");","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"kairuler"},"content":"        if (indexOfDeadline \u003d\u003d -1 || indexOfDeadline \u003d\u003d arrayOfInputs.length - 1) { // user did not input \"/by\" or did not input a deadline time","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"kairuler"},"content":"            throw new invalidInputFormat(Type.DEADLINE);","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"kairuler"},"content":"        // Separate arrayOfInputs into `deadlineName` and `by` to construct deadline object","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"kairuler"},"content":"        StringBuilder deadlineName \u003d new StringBuilder();","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"kairuler"},"content":"        StringBuilder by \u003d new StringBuilder();","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"kairuler"},"content":"        for (int i \u003d 1; i \u003c indexOfDeadline; ++i) {","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"kairuler"},"content":"            deadlineName.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"kairuler"},"content":"        for (int i \u003d indexOfDeadline + 1; i \u003c arrayOfInputs.length; ++i) {","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"kairuler"},"content":"            by.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"kairuler"},"content":"        Task deadline \u003d new Deadline(deadlineName.toString().trim(), by.toString().trim());","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"kairuler"},"content":"        taskList.add(deadline);","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"kairuler"},"content":"        printReply(\" added: \" + deadline);","lastModifiedDate":"2023-03-03"},{"lineNumber":67,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"kairuler"},"content":"    public void createEvent(TaskList taskListObject, String[] arrayOfInputs) throws invalidInputFormat {","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"kairuler"},"content":"        ArrayList\u003cTask\u003e taskList \u003d taskListObject.getTaskList();","lastModifiedDate":"2023-03-03"},{"lineNumber":71,"author":{"gitId":"kairuler"},"content":"        int indexOfStartTime \u003d Arrays.asList(arrayOfInputs).indexOf(\"/from\");","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"kairuler"},"content":"        int indexOfEndTime \u003d Arrays.asList(arrayOfInputs).indexOf(\"/to\");","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"kairuler"},"content":"        if (indexOfStartTime \u003d\u003d -1 || indexOfEndTime \u003d\u003d -1 || indexOfEndTime \u003d\u003d arrayOfInputs.length - 1) { // user did not input \"/from\" or \"/to\" or did not input an end time","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"kairuler"},"content":"            throw new invalidInputFormat(Type.DEADLINE);","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"kairuler"},"content":"        StringBuilder eventName \u003d new StringBuilder();","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"kairuler"},"content":"        StringBuilder startTime \u003d new StringBuilder();","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"kairuler"},"content":"        StringBuilder endTime \u003d new StringBuilder();","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"kairuler"},"content":"        for (int i \u003d 1; i \u003c indexOfStartTime; ++i) {","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"kairuler"},"content":"            eventName.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"kairuler"},"content":"        for (int i \u003d indexOfStartTime + 1; i \u003c indexOfEndTime; ++i) {","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"kairuler"},"content":"            startTime.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"kairuler"},"content":"        for (int i \u003d indexOfEndTime + 1; i \u003c arrayOfInputs.length; ++i) {","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"kairuler"},"content":"            endTime.append(\" \").append(arrayOfInputs[i]);","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"kairuler"},"content":"        Task event \u003d new Event(eventName.toString().trim(), startTime.toString().trim(), endTime.toString().trim());","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"kairuler"},"content":"        taskList.add(event);","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"kairuler"},"content":"        printReply(\" added: \" + event);","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"kairuler"},"content":"    private int checkAndGetValidTaskIndex(Type queryType, int sizeOfTaskList, String[] arrayOfInputs) throws invalidInputFormat, invalidTaskIndexException {","lastModifiedDate":"2023-03-03"},{"lineNumber":94,"author":{"gitId":"kairuler"},"content":"        int taskIndex;","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"kairuler"},"content":"        // Validate if input format is valid","lastModifiedDate":"2023-03-03"},{"lineNumber":96,"author":{"gitId":"kairuler"},"content":"        try {","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"kairuler"},"content":"            taskIndex \u003d Integer.parseInt(arrayOfInputs[1]) - 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":98,"author":{"gitId":"kairuler"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":99,"author":{"gitId":"kairuler"},"content":"            throw new invalidInputFormat(queryType);","lastModifiedDate":"2023-03-03"},{"lineNumber":100,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":101,"author":{"gitId":"kairuler"},"content":"        // Validate if input Task index is valid","lastModifiedDate":"2023-03-03"},{"lineNumber":102,"author":{"gitId":"kairuler"},"content":"        if (taskIndex + 1 \u003e sizeOfTaskList || taskIndex \u003c 0) {","lastModifiedDate":"2023-03-03"},{"lineNumber":103,"author":{"gitId":"kairuler"},"content":"            throw new invalidTaskIndexException();","lastModifiedDate":"2023-03-03"},{"lineNumber":104,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":105,"author":{"gitId":"kairuler"},"content":"        return taskIndex;","lastModifiedDate":"2023-03-03"},{"lineNumber":106,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":107,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":108,"author":{"gitId":"kairuler"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":109,"author":{"gitId":"kairuler"},"content":"     * Marks a task in the list of all tasks as complete or incomplete.","lastModifiedDate":"2023-03-03"},{"lineNumber":110,"author":{"gitId":"kairuler"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":111,"author":{"gitId":"kairuler"},"content":"     * @param markAsComplete If true, the task is marked as complete. If False, the method is marked as not complete.","lastModifiedDate":"2023-03-03"},{"lineNumber":112,"author":{"gitId":"kairuler"},"content":"     * @param taskListObject Instance of TaskList that contains all tasks","lastModifiedDate":"2023-03-03"},{"lineNumber":113,"author":{"gitId":"kairuler"},"content":"     * @param arrayOfInputs Array of Strings containing the user input","lastModifiedDate":"2023-03-03"},{"lineNumber":114,"author":{"gitId":"kairuler"},"content":"     * @throws invalidInputFormat If index of task given is not a number, throw an exception.","lastModifiedDate":"2023-03-03"},{"lineNumber":115,"author":{"gitId":"kairuler"},"content":"     * @throws invalidTaskIndexException If index of task given is out of bounds of the list of all tasks, throw an exception.","lastModifiedDate":"2023-03-03"},{"lineNumber":116,"author":{"gitId":"kairuler"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":117,"author":{"gitId":"kairuler"},"content":"    public void markComplete(boolean markAsComplete, TaskList taskListObject, String[] arrayOfInputs) throws invalidInputFormat, invalidTaskIndexException {","lastModifiedDate":"2023-03-03"},{"lineNumber":118,"author":{"gitId":"kairuler"},"content":"        ArrayList\u003cTask\u003e taskList \u003d taskListObject.getTaskList();","lastModifiedDate":"2023-03-03"},{"lineNumber":119,"author":{"gitId":"kairuler"},"content":"        int taskIndex \u003d checkAndGetValidTaskIndex(Type.MARK, taskList.size(), arrayOfInputs);","lastModifiedDate":"2023-03-03"},{"lineNumber":120,"author":{"gitId":"kairuler"},"content":"        if (markAsComplete){   // mark as Completed","lastModifiedDate":"2023-03-03"},{"lineNumber":121,"author":{"gitId":"kairuler"},"content":"            taskList.get(taskIndex).setCompleted();","lastModifiedDate":"2023-03-03"},{"lineNumber":122,"author":{"gitId":"kairuler"},"content":"            printReply(\" Marked \" + taskList.get(taskIndex) + \" as done.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":123,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":124,"author":{"gitId":"kairuler"},"content":"        else {                      // mark as Uncompleted","lastModifiedDate":"2023-03-03"},{"lineNumber":125,"author":{"gitId":"kairuler"},"content":"            taskList.get(taskIndex).setUncompleted();","lastModifiedDate":"2023-03-03"},{"lineNumber":126,"author":{"gitId":"kairuler"},"content":"            printReply(\" Marked \" + taskList.get(taskIndex) + \" as not done.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":127,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":128,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":129,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":130,"author":{"gitId":"kairuler"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":131,"author":{"gitId":"kairuler"},"content":"     * Deletes a task from the list of all tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":132,"author":{"gitId":"kairuler"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":133,"author":{"gitId":"kairuler"},"content":"     * @param taskListObject Instance of TaskList that contains all tasks","lastModifiedDate":"2023-03-03"},{"lineNumber":134,"author":{"gitId":"kairuler"},"content":"     * @param arrayOfInputs Array of Strings containing the user input","lastModifiedDate":"2023-03-03"},{"lineNumber":135,"author":{"gitId":"kairuler"},"content":"     * @throws invalidInputFormat If index of task given is not a number, throw an exception.","lastModifiedDate":"2023-03-03"},{"lineNumber":136,"author":{"gitId":"kairuler"},"content":"     * @throws invalidTaskIndexException If index of task given is out of bounds of the list of all tasks, throw an exception.","lastModifiedDate":"2023-03-03"},{"lineNumber":137,"author":{"gitId":"kairuler"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":138,"author":{"gitId":"kairuler"},"content":"    public void deleteTask(TaskList taskListObject, String[] arrayOfInputs) throws invalidInputFormat, invalidTaskIndexException {","lastModifiedDate":"2023-03-03"},{"lineNumber":139,"author":{"gitId":"kairuler"},"content":"        ArrayList\u003cTask\u003e taskList \u003d taskListObject.getTaskList();","lastModifiedDate":"2023-03-03"},{"lineNumber":140,"author":{"gitId":"kairuler"},"content":"        int taskIndex \u003d checkAndGetValidTaskIndex(Type.DELETE, taskList.size(), arrayOfInputs);","lastModifiedDate":"2023-03-03"},{"lineNumber":141,"author":{"gitId":"kairuler"},"content":"        Task currentTask \u003d taskList.get(taskIndex);","lastModifiedDate":"2023-03-03"},{"lineNumber":142,"author":{"gitId":"kairuler"},"content":"        taskList.remove(taskIndex);","lastModifiedDate":"2023-03-03"},{"lineNumber":143,"author":{"gitId":"kairuler"},"content":"        printReply(\" Ok bro I remove this task:\\n\" + \"   [\" + currentTask.getType() + \"][\" + currentTask.mark() + \"] \" + currentTask +","lastModifiedDate":"2023-03-03"},{"lineNumber":144,"author":{"gitId":"kairuler"},"content":"                \"\\n Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":145,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":146,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":147,"author":{"gitId":"kairuler"},"content":"    public void find(TaskList taskListObject, String[] arrayOfInputs) throws invalidInputFormat {","lastModifiedDate":"2023-03-03"},{"lineNumber":148,"author":{"gitId":"kairuler"},"content":"        ArrayList\u003cTask\u003e taskList \u003d taskListObject.getTaskList();","lastModifiedDate":"2023-03-03"},{"lineNumber":149,"author":{"gitId":"kairuler"},"content":"        if (arrayOfInputs.length \u003c\u003d 1) {","lastModifiedDate":"2023-03-03"},{"lineNumber":150,"author":{"gitId":"kairuler"},"content":"            throw new invalidInputFormat(Type.FIND);","lastModifiedDate":"2023-03-03"},{"lineNumber":151,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":152,"author":{"gitId":"kairuler"},"content":"        String toFind \u003d arrayOfInputs[1].toLowerCase();","lastModifiedDate":"2023-03-03"},{"lineNumber":153,"author":{"gitId":"kairuler"},"content":"        StringBuilder reply \u003d new StringBuilder(\" Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-03-03"},{"lineNumber":154,"author":{"gitId":"kairuler"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-03-03"},{"lineNumber":155,"author":{"gitId":"kairuler"},"content":"        for (Task currentTask : taskList) {","lastModifiedDate":"2023-03-03"},{"lineNumber":156,"author":{"gitId":"kairuler"},"content":"            if (currentTask.toString().toLowerCase().contains(toFind)) {","lastModifiedDate":"2023-03-03"},{"lineNumber":157,"author":{"gitId":"kairuler"},"content":"                String mark \u003d currentTask.mark();","lastModifiedDate":"2023-03-03"},{"lineNumber":158,"author":{"gitId":"kairuler"},"content":"                reply.append(\" \").append(++count).append(\".[\").append(currentTask.getType()).append(\"][\").append(mark).append(\"] \").append(currentTask).append(\"\\n\");","lastModifiedDate":"2023-03-03"},{"lineNumber":159,"author":{"gitId":"kairuler"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":160,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":161,"author":{"gitId":"kairuler"},"content":"        printReply(reply.toString());","lastModifiedDate":"2023-03-03"},{"lineNumber":162,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":163,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"kairuler":163}},{"path":"src/main/java/bro/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Task;","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"import static bro.Messages.HORIZONTAL_LINE;","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"import static bro.Messages.GREETING;","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"public class Ui {","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"    private final Scanner in;","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"    public Ui() {","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"        this.in \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"     * Returns the input in the form of an array of Strings","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"     **/","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"    public String[] getUserCommand() {","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"        return in.nextLine().split(\" \");","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"    public static void printGreeting() {","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"        System.out.println(HORIZONTAL_LINE + GREETING + HORIZONTAL_LINE);","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"    public static void printReply(String reply) {","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"        System.out.println(HORIZONTAL_LINE + reply + HORIZONTAL_LINE);","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"kairuler"},"content":"    public static void printException(Exception e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"kairuler"},"content":"        System.out.println(HORIZONTAL_LINE + e.toString() + HORIZONTAL_LINE);","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"kairuler"},"content":"    public static void printException(String message) {","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"kairuler"},"content":"        System.out.println(HORIZONTAL_LINE + message + HORIZONTAL_LINE);","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"kairuler"},"content":"    public static void printTaskList(TaskList taskListObject) {","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"kairuler"},"content":"        ArrayList\u003cTask\u003e taskList \u003d taskListObject.getTaskList();","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"kairuler"},"content":"        StringBuilder reply \u003d new StringBuilder(\" Your tasks:\\n\");","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"kairuler"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); ++i) {","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"kairuler"},"content":"            Task currentTask \u003d taskList.get(i);","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"kairuler"},"content":"            String mark \u003d currentTask.mark();","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"kairuler"},"content":"            reply.append(\" \").append(i + 1).append(\".[\").append(currentTask.getType()).append(\"][\").append(mark).append(\"] \").append(currentTask).append(\"\\n\");","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"kairuler"},"content":"        printReply(reply.toString());","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"kairuler":49}},{"path":"src/main/java/bro/exceptions/invalidInputFormat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.exceptions;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"import bro.tasks.Type;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"public class invalidInputFormat extends Exception {","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"    private Type queryType;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"    public invalidInputFormat(Type queryType) {","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"        this.queryType \u003d queryType;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"    public String toString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"        String result \u003d \"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"        switch (queryType) {","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"        case MARK:","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"            result \u003d \" Bro please follow this format:\\n\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"                    \" \\\"mark/unmark {index of task according to list}\\\"\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"                    \" e.g. Finish homework /by Monday 2pm\";","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"        case TODO:","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"            result \u003d \" Bro please follow this format:\\n\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"                    \" \\\"todo {Name of Todo}\\\"\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"                    \" e.g. todo Maths homework\";","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"        case DEADLINE:","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"            result \u003d \" Bro please follow this format:\\n\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"                    \" \\\"deadline {Name of Deadline} /by {Deadline}\\\"\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"                    \" e.g. mark 3\";","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"        case EVENT:","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"kairuler"},"content":"            result \u003d \" Bro please follow this format:\\n\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"                    \" \\\"event {Name of Event} /from {Start Date/Time} /to {End Date/Time}\\\"\\n\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"kairuler"},"content":"                    \" e.g. event project meeting /from Mon 2pm /to 4pm\";","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"kairuler"},"content":"        case DELETE:","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"kairuler"},"content":"            result \u003d \" Bro please follow this format:\\n\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"kairuler"},"content":"                    \" \\\"delete {Index of Task in the list}\\\"\\n\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"kairuler"},"content":"                    \" e.g. delete 2\";","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"kairuler"},"content":"        case FIND:","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"kairuler"},"content":"            result \u003d \" Bro please follow this format:\\n\" +","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"kairuler"},"content":"                    \" \\\"find {single keyword to search [Case insensitive]}\\\"\\n\" +","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"kairuler"},"content":"                    \" e.g. find book\";","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"kairuler"},"content":"        default:","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"kairuler"},"content":"            break;","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"kairuler"},"content":"        return result;","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"kairuler":49}},{"path":"src/main/java/bro/exceptions/invalidTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.exceptions;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class invalidTaskIndexException extends Exception{","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"kairuler":4}},{"path":"src/main/java/bro/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    private String deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"    public String getDeadline() {","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"        return deadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"    public Deadline(String name, String deadline) {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"        super(name);","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"        this.setType(\"D\");","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"    public Deadline(String name, boolean completed, String deadline) {","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"        super(name, completed);","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"        this.setType(\"D\");","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"        return super.toString() + \" (by: \" + deadline + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"kairuler":24}},{"path":"src/main/java/bro/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class Event extends Task{","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    private String startTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"    private String endTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"    public String getStartTime() {","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"        return startTime;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"    public String getEndTime() {","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"        return endTime;","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"    public Event(String name, String startTime, String endTime) {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"        super(name);","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"        this.setType(\"E\");","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"    public Event(String name, boolean completed, String startTime, String endTime) {","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"        super(name, completed);","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"        this.setType(\"E\");","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"        return super.toString() + \" (from: \" + startTime + \" to: \" + endTime + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"kairuler":31}},{"path":"src/main/java/bro/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    private String name;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"    private boolean completed;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"    private String type;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"        this.type \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"        this.completed \u003d false;","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"    public Task(String name, boolean completed) {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"kairuler"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"kairuler"},"content":"        this.type \u003d null;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"kairuler"},"content":"        this.completed \u003d completed;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"kairuler"},"content":"    public String getName() {","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"kairuler"},"content":"        return name;","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"kairuler"},"content":"    public void setName(String name) {","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"kairuler"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"kairuler"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"kairuler"},"content":"        return completed;","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"kairuler"},"content":"    public void setCompleted() {","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"kairuler"},"content":"        this.completed \u003d true;","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"kairuler"},"content":"    public void setUncompleted() {","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"kairuler"},"content":"        this.completed \u003d false;","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"kairuler"},"content":"    public String getType() {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"kairuler"},"content":"        return type;","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"kairuler"},"content":"    public void setType(String type) {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"kairuler"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"kairuler"},"content":"    public String mark() {      // Method to return completion mark \"✔\"","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"kairuler"},"content":"        if (this.completed) {","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"kairuler"},"content":"            return \"✔\";","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"kairuler"},"content":"        else {","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"kairuler"},"content":"            return \" \";","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"kairuler"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"kairuler"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"kairuler"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"kairuler"},"content":"        return name;","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"kairuler":50}},{"path":"src/main/java/bro/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public class ToDo extends Task{","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"        super(name);","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"        this.setType(\"T\");","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"    public ToDo(String name, boolean completed) {","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"        super(name, completed);","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"        this.setType(\"T\");","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"kairuler"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"kairuler":12}},{"path":"src/main/java/bro/tasks/Type.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kairuler"},"content":"package bro.tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"kairuler"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"kairuler"},"content":"public enum Type {","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"kairuler"},"content":"    MARK,","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"kairuler"},"content":"    TODO,","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"kairuler"},"content":"    DEADLINE,","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"kairuler"},"content":"    EVENT,","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"kairuler"},"content":"    DELETE,","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"kairuler"},"content":"    FIND","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"kairuler"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"kairuler":10}}]
