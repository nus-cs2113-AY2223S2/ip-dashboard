[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"# duke.Duke project template","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"mitchmalvin1":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"Duke acts as a productivity task manager tool that keeps track of your tasks through the CLI. It comes with meaningful features such as data persistence through auto-saving and auto-loading of data.","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"However, please note that Duke is only suitable for single-user usage as it does not have any online database feature.","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"### Adding different types of tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"User is able to enter 3 types of tasks : ","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"- ***todo*** : comprising a description string","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"- ***deadline*** : comprising a description string, and a deadline time.","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"- ***event*** : comprising a description string, a starting and ending time.","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"### Modifying and listing existing tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"User can list all the existing tasks that they currently have so that they can decide whether they need to add, mark, unmark or delete any of the task.","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"Afterwards, user can then edit existing tasks in 3 ways :","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"- ***mark*** : marks the task as done","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"- ***unmark*** : undo the mark on the task (not done)","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"- ***delete*** : removes the corresponding task from the task list","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"### Data-persistence (auto-save)","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"Upon loading of the program, it will check for any existing file ```./data/duke.txt```.  If it exists, it will load the data from the file.","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"After every adding or modifying of the task, the new task will be automatically saved to the ```./data/duke.txt```. If the file or the directory does not exist, it will create the directory and the file. Afterwards, it will save the updated list of tasks onto the file.","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"### Initialization","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"Upon loading the program, if the ```./data/duke.txt``` does not exist in user\u0027s local machine, it will be created :","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"```agsl","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"Directory does not exist, creating a directory called data...","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"Directory data has been successfully created","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"File does not exist, creating a new file ./data/duke.txt","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"File duke.txt has been successfully created","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"``` ","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"Afterwards, the user will be greeted with :","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"mitchmalvin1"},"content":"         Hello I\u0027m Duke, your personal chatbot.","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"mitchmalvin1"},"content":"         Is there anything I can do for you","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":44,"author":{"gitId":"mitchmalvin1"},"content":"### `todo` - adds a \"todo\" Task","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"mitchmalvin1"},"content":"This command will add a \"todo\" Task to the current list and save it to ```./data/duke.txt```","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"mitchmalvin1"},"content":"***Example of usage***: ","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"mitchmalvin1"},"content":"```todo study for midterms```","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"mitchmalvin1"},"content":"***Expected outcome***:","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"mitchmalvin1"},"content":"````","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"mitchmalvin1"},"content":"         Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"mitchmalvin1"},"content":"          [T][ ] study for midterms","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"mitchmalvin1"},"content":"         Now you have 1 task(s) in your list.","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"mitchmalvin1"},"content":"````","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"mitchmalvin1"},"content":"This shows that the ***todo*** Task has been added.","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":63,"author":{"gitId":"mitchmalvin1"},"content":"***Exception***  :","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"mitchmalvin1"},"content":"Exception Occured: exception.IncompleteInputException: Please specify the description to the task that you wish to add","lastModifiedDate":"2023-02-26"},{"lineNumber":67,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":68,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":69,"author":{"gitId":"mitchmalvin1"},"content":" This exception handling will be displayed in case user did not specify any description.","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":71,"author":{"gitId":"mitchmalvin1"},"content":"### `deadline` - adds a \"deadline\" Task","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"mitchmalvin1"},"content":"This command will add a \"deadline\" Task to the current list and save it to ```./data/duke.txt```.","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"mitchmalvin1"},"content":"User needs to specify the description, and the deadline in the ****/by YYYY-MM-DD HH:mm**** format.","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":77,"author":{"gitId":"mitchmalvin1"},"content":"***Example of usage***:","lastModifiedDate":"2023-02-26"},{"lineNumber":78,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":79,"author":{"gitId":"mitchmalvin1"},"content":"```deadline submit CS2113 iP /by 2023-03-03 23:59```","lastModifiedDate":"2023-02-26"},{"lineNumber":80,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"mitchmalvin1"},"content":"***Expected outcome***:","lastModifiedDate":"2023-02-26"},{"lineNumber":82,"author":{"gitId":"mitchmalvin1"},"content":"````","lastModifiedDate":"2023-02-26"},{"lineNumber":83,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":84,"author":{"gitId":"mitchmalvin1"},"content":"         Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-26"},{"lineNumber":85,"author":{"gitId":"mitchmalvin1"},"content":"          [D][ ] submit CS2113 iP (by: Mar 03 2023 23:59)","lastModifiedDate":"2023-02-26"},{"lineNumber":86,"author":{"gitId":"mitchmalvin1"},"content":"         Now you have 2 task(s) in your list.","lastModifiedDate":"2023-02-26"},{"lineNumber":87,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":88,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"mitchmalvin1"},"content":"````","lastModifiedDate":"2023-02-26"},{"lineNumber":90,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"mitchmalvin1"},"content":"This shows that the ***deadline*** Task has been added.","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"mitchmalvin1"},"content":"***Exceptions***  :","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"mitchmalvin1"},"content":"Exception Occured: exception.IncompleteInputException: Please specify the description to the task that you wish to add","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":98,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"mitchmalvin1"},"content":"This exception handling will be displayed in case user did not specify any description.","lastModifiedDate":"2023-02-26"},{"lineNumber":100,"author":{"gitId":"mitchmalvin1"},"content":" ```","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"mitchmalvin1"},"content":"          __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"mitchmalvin1"},"content":"Exception Occured: exception.IncompleteInputException: Please specify your deadline string /by YYYY-MM-DD HH:MM","lastModifiedDate":"2023-02-26"},{"lineNumber":103,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":104,"author":{"gitId":"mitchmalvin1"},"content":" ```","lastModifiedDate":"2023-02-26"},{"lineNumber":105,"author":{"gitId":"mitchmalvin1"},"content":"This exception will be displayed if the user does not enter the deadline in the correct   ****/by YYYY-MM-DD HH:mm**** format","lastModifiedDate":"2023-02-26"},{"lineNumber":106,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":107,"author":{"gitId":"mitchmalvin1"},"content":"### `event` - adds a \"event\" Task","lastModifiedDate":"2023-02-26"},{"lineNumber":108,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":109,"author":{"gitId":"mitchmalvin1"},"content":"This command will add a \"event\" Task to the current list and save it to ```./data/duke.txt```.","lastModifiedDate":"2023-02-26"},{"lineNumber":110,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":111,"author":{"gitId":"mitchmalvin1"},"content":"User needs to specify the description, and the starting and ending time in the ****/from YYYY-MM-DD HH:mm /to YYYY-MM-DD HH:mm**** format.","lastModifiedDate":"2023-02-26"},{"lineNumber":112,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":113,"author":{"gitId":"mitchmalvin1"},"content":"***Example of usage***:","lastModifiedDate":"2023-02-26"},{"lineNumber":114,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":115,"author":{"gitId":"mitchmalvin1"},"content":"```event NUS recess week /from 2023-02-20 00:00 /to 2023-02-24 23:59```","lastModifiedDate":"2023-02-26"},{"lineNumber":116,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":117,"author":{"gitId":"mitchmalvin1"},"content":"***Expected outcome***:","lastModifiedDate":"2023-02-26"},{"lineNumber":118,"author":{"gitId":"mitchmalvin1"},"content":"````","lastModifiedDate":"2023-02-26"},{"lineNumber":119,"author":{"gitId":"mitchmalvin1"},"content":"          __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":120,"author":{"gitId":"mitchmalvin1"},"content":"         Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-26"},{"lineNumber":121,"author":{"gitId":"mitchmalvin1"},"content":"          [E][ ] NUS recess week (from: Feb 20 2023 00:00 to: Feb 24 2023 23:59)","lastModifiedDate":"2023-02-26"},{"lineNumber":122,"author":{"gitId":"mitchmalvin1"},"content":"         Now you have 6 task(s) in your list.","lastModifiedDate":"2023-02-26"},{"lineNumber":123,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":124,"author":{"gitId":"mitchmalvin1"},"content":"````","lastModifiedDate":"2023-02-26"},{"lineNumber":125,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":126,"author":{"gitId":"mitchmalvin1"},"content":"This shows that the ***event*** Task has been added.","lastModifiedDate":"2023-02-26"},{"lineNumber":127,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":128,"author":{"gitId":"mitchmalvin1"},"content":"***Exceptions***  :","lastModifiedDate":"2023-02-26"},{"lineNumber":129,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":130,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":131,"author":{"gitId":"mitchmalvin1"},"content":"Exception Occured: exception.IncompleteInputException: Please specify the description to the task that you wish to add","lastModifiedDate":"2023-02-26"},{"lineNumber":132,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":133,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":134,"author":{"gitId":"mitchmalvin1"},"content":"This exception handling will be displayed in case user did not specify any description.","lastModifiedDate":"2023-02-26"},{"lineNumber":135,"author":{"gitId":"mitchmalvin1"},"content":" ```","lastModifiedDate":"2023-02-26"},{"lineNumber":136,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":137,"author":{"gitId":"mitchmalvin1"},"content":"Exception Occured: exception.IncompleteInputException: Please specify the starting and ending time of your event","lastModifiedDate":"2023-02-26"},{"lineNumber":138,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":139,"author":{"gitId":"mitchmalvin1"},"content":" ```","lastModifiedDate":"2023-02-26"},{"lineNumber":140,"author":{"gitId":"mitchmalvin1"},"content":"This exception will be displayed if the user does not enter the starting and ending time in the correct   ****/by YYYY-MM-DD HH:mm**** format","lastModifiedDate":"2023-02-26"},{"lineNumber":141,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":142,"author":{"gitId":"mitchmalvin1"},"content":"### `find` - find the tasks that contain specific keyword","lastModifiedDate":"2023-02-26"},{"lineNumber":143,"author":{"gitId":"mitchmalvin1"},"content":"Displays all the tasks that match the specified keyword. Note that the keyword is ***case-sensitive***.","lastModifiedDate":"2023-02-26"},{"lineNumber":144,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":145,"author":{"gitId":"mitchmalvin1"},"content":"***Example of usage*** :","lastModifiedDate":"2023-02-26"},{"lineNumber":146,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":147,"author":{"gitId":"mitchmalvin1"},"content":"```find midterms```","lastModifiedDate":"2023-02-26"},{"lineNumber":148,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":149,"author":{"gitId":"mitchmalvin1"},"content":"***Expected outcome*** :","lastModifiedDate":"2023-02-26"},{"lineNumber":150,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":151,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":152,"author":{"gitId":"mitchmalvin1"},"content":"         Here are the matching tasks for your list: ","lastModifiedDate":"2023-02-26"},{"lineNumber":153,"author":{"gitId":"mitchmalvin1"},"content":"         1.[T][ ] study for midterms","lastModifiedDate":"2023-02-26"},{"lineNumber":154,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":155,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":157,"author":{"gitId":"mitchmalvin1"},"content":"***or***","lastModifiedDate":"2023-02-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":159,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":160,"author":{"gitId":"mitchmalvin1"},"content":"         There is no task matching your description","lastModifiedDate":"2023-02-26"},{"lineNumber":161,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":163,"author":{"gitId":"mitchmalvin1"},"content":"if nothing matches the specified keyword.","lastModifiedDate":"2023-02-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":165,"author":{"gitId":"mitchmalvin1"},"content":"### `list` - lists all existing tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":166,"author":{"gitId":"mitchmalvin1"},"content":"Displays all the existing tasks to the CLI","lastModifiedDate":"2023-02-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":168,"author":{"gitId":"mitchmalvin1"},"content":"***Example of usage*** : ","lastModifiedDate":"2023-02-26"},{"lineNumber":169,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":170,"author":{"gitId":"mitchmalvin1"},"content":"```list```","lastModifiedDate":"2023-02-26"},{"lineNumber":171,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":172,"author":{"gitId":"mitchmalvin1"},"content":"***Expected outcome*** :","lastModifiedDate":"2023-02-26"},{"lineNumber":173,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":174,"author":{"gitId":"mitchmalvin1"},"content":"        __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":175,"author":{"gitId":"mitchmalvin1"},"content":"         Here are the tasks for your list: ","lastModifiedDate":"2023-02-26"},{"lineNumber":176,"author":{"gitId":"mitchmalvin1"},"content":"         1.[T][ ] study for midterms","lastModifiedDate":"2023-02-26"},{"lineNumber":177,"author":{"gitId":"mitchmalvin1"},"content":"         2.[D][ ] submit CS2113 iP (by: Mar 03 2023 23:59)","lastModifiedDate":"2023-02-26"},{"lineNumber":178,"author":{"gitId":"mitchmalvin1"},"content":"         3.[E][ ] NUS recess week (from: Feb 20 2023 00:00 to: Feb 24 2023 23:59)","lastModifiedDate":"2023-02-26"},{"lineNumber":179,"author":{"gitId":"mitchmalvin1"},"content":"        __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":180,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":181,"author":{"gitId":"mitchmalvin1"},"content":"***or***","lastModifiedDate":"2023-02-26"},{"lineNumber":182,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":183,"author":{"gitId":"mitchmalvin1"},"content":"        __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":184,"author":{"gitId":"mitchmalvin1"},"content":"        Seems like you do not have any task at the moment...","lastModifiedDate":"2023-02-26"},{"lineNumber":185,"author":{"gitId":"mitchmalvin1"},"content":"        __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":186,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":187,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":188,"author":{"gitId":"mitchmalvin1"},"content":"if the user does not have any task to display.","lastModifiedDate":"2023-02-26"},{"lineNumber":189,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":190,"author":{"gitId":"mitchmalvin1"},"content":"### `mark` - marks the task as done","lastModifiedDate":"2023-02-26"},{"lineNumber":191,"author":{"gitId":"mitchmalvin1"},"content":"Marks the task based on the specified taskId ***(1-based)*** and displays it.","lastModifiedDate":"2023-02-26"},{"lineNumber":192,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":193,"author":{"gitId":"mitchmalvin1"},"content":"***Example of usage*** :","lastModifiedDate":"2023-02-26"},{"lineNumber":194,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":195,"author":{"gitId":"mitchmalvin1"},"content":"```mark 1```","lastModifiedDate":"2023-02-26"},{"lineNumber":196,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":197,"author":{"gitId":"mitchmalvin1"},"content":"***Expected outcome***","lastModifiedDate":"2023-02-26"},{"lineNumber":198,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":199,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":200,"author":{"gitId":"mitchmalvin1"},"content":"         Nice, I have marked this task as done: ","lastModifiedDate":"2023-02-26"},{"lineNumber":201,"author":{"gitId":"mitchmalvin1"},"content":"         [T][X] study for midterms","lastModifiedDate":"2023-02-26"},{"lineNumber":202,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":203,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":204,"author":{"gitId":"mitchmalvin1"},"content":"***Exception*** ","lastModifiedDate":"2023-02-26"},{"lineNumber":205,"author":{"gitId":"mitchmalvin1"},"content":"```agsl","lastModifiedDate":"2023-02-26"},{"lineNumber":206,"author":{"gitId":"mitchmalvin1"},"content":"Please specify the correct task to mark","lastModifiedDate":"2023-02-26"},{"lineNumber":207,"author":{"gitId":"mitchmalvin1"},"content":"Exception occured : exception.InvalidIndexException: Please ensure you enter the correct task number","lastModifiedDate":"2023-02-26"},{"lineNumber":208,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":209,"author":{"gitId":"mitchmalvin1"},"content":"If the taskId specified is invalid.","lastModifiedDate":"2023-02-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":211,"author":{"gitId":"mitchmalvin1"},"content":"### `unmark` - unmarks the task (not done)","lastModifiedDate":"2023-02-26"},{"lineNumber":212,"author":{"gitId":"mitchmalvin1"},"content":"Unmarks the task based on the specified taskId ***(1-based)*** and displays it.","lastModifiedDate":"2023-02-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":214,"author":{"gitId":"mitchmalvin1"},"content":"***Example of usage*** :","lastModifiedDate":"2023-02-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":216,"author":{"gitId":"mitchmalvin1"},"content":"```unmark 1```","lastModifiedDate":"2023-02-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":218,"author":{"gitId":"mitchmalvin1"},"content":"***Expected outcome***","lastModifiedDate":"2023-02-26"},{"lineNumber":219,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":220,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":221,"author":{"gitId":"mitchmalvin1"},"content":"         Ouch, I have unmarked this task: ","lastModifiedDate":"2023-02-26"},{"lineNumber":222,"author":{"gitId":"mitchmalvin1"},"content":"         [T][ ] study for midterms","lastModifiedDate":"2023-02-26"},{"lineNumber":223,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":224,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":225,"author":{"gitId":"mitchmalvin1"},"content":"***Exception***","lastModifiedDate":"2023-02-26"},{"lineNumber":226,"author":{"gitId":"mitchmalvin1"},"content":"```agsl","lastModifiedDate":"2023-02-26"},{"lineNumber":227,"author":{"gitId":"mitchmalvin1"},"content":"Please specify the correct task to unmark","lastModifiedDate":"2023-02-26"},{"lineNumber":228,"author":{"gitId":"mitchmalvin1"},"content":"Exception occured : exception.InvalidIndexException: Please ensure you enter the correct task number","lastModifiedDate":"2023-02-26"},{"lineNumber":229,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":230,"author":{"gitId":"mitchmalvin1"},"content":"If the taskId specified is invalid.","lastModifiedDate":"2023-02-26"},{"lineNumber":231,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":232,"author":{"gitId":"mitchmalvin1"},"content":"### `delete` - removes the task ","lastModifiedDate":"2023-02-26"},{"lineNumber":233,"author":{"gitId":"mitchmalvin1"},"content":"Removes the task based on the specified taskId ***(1-based)*** and displays it.","lastModifiedDate":"2023-02-26"},{"lineNumber":234,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":235,"author":{"gitId":"mitchmalvin1"},"content":"***Example of usage*** :","lastModifiedDate":"2023-02-26"},{"lineNumber":236,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":237,"author":{"gitId":"mitchmalvin1"},"content":"```delete 1```","lastModifiedDate":"2023-02-26"},{"lineNumber":238,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":239,"author":{"gitId":"mitchmalvin1"},"content":"***Expected outcome***","lastModifiedDate":"2023-02-26"},{"lineNumber":240,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":241,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":242,"author":{"gitId":"mitchmalvin1"},"content":"         Noted. I\u0027ve removed this task: ","lastModifiedDate":"2023-02-26"},{"lineNumber":243,"author":{"gitId":"mitchmalvin1"},"content":"         [T][ ] study for midterms","lastModifiedDate":"2023-02-26"},{"lineNumber":244,"author":{"gitId":"mitchmalvin1"},"content":"         Now you have 2 task(s) in your list","lastModifiedDate":"2023-02-26"},{"lineNumber":245,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":246,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":247,"author":{"gitId":"mitchmalvin1"},"content":"***Exception***","lastModifiedDate":"2023-02-26"},{"lineNumber":248,"author":{"gitId":"mitchmalvin1"},"content":"```agsl","lastModifiedDate":"2023-02-26"},{"lineNumber":249,"author":{"gitId":"mitchmalvin1"},"content":"Please specify the correct task to unmark","lastModifiedDate":"2023-02-26"},{"lineNumber":250,"author":{"gitId":"mitchmalvin1"},"content":"Exception occured : exception.InvalidIndexException: Please ensure you enter the correct task number","lastModifiedDate":"2023-02-26"},{"lineNumber":251,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":252,"author":{"gitId":"mitchmalvin1"},"content":"If the taskId specified is invalid.","lastModifiedDate":"2023-02-26"},{"lineNumber":253,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":254,"author":{"gitId":"mitchmalvin1"},"content":"### `bye` - exits Duke","lastModifiedDate":"2023-02-26"},{"lineNumber":255,"author":{"gitId":"mitchmalvin1"},"content":"Exits the program (data has been saved).","lastModifiedDate":"2023-02-26"},{"lineNumber":256,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":257,"author":{"gitId":"mitchmalvin1"},"content":"***Example of usage*** :","lastModifiedDate":"2023-02-26"},{"lineNumber":258,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":259,"author":{"gitId":"mitchmalvin1"},"content":"```bye```","lastModifiedDate":"2023-02-26"},{"lineNumber":260,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":261,"author":{"gitId":"mitchmalvin1"},"content":"***Expected outcome*** :","lastModifiedDate":"2023-02-26"},{"lineNumber":262,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":263,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":264,"author":{"gitId":"mitchmalvin1"},"content":"         Bye! Do let me know if you need any further assistance","lastModifiedDate":"2023-02-26"},{"lineNumber":265,"author":{"gitId":"mitchmalvin1"},"content":"         __________________________________________________","lastModifiedDate":"2023-02-26"},{"lineNumber":266,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":267,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":268,"author":{"gitId":"mitchmalvin1"},"content":"### Format of ```./data/duke.txt``` :","lastModifiedDate":"2023-02-26"},{"lineNumber":269,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":270,"author":{"gitId":"mitchmalvin1"},"content":"[D][ ] submit CS2113 iP (by: 2023-03-03 23:59)","lastModifiedDate":"2023-02-26"},{"lineNumber":271,"author":{"gitId":"mitchmalvin1"},"content":"[E][ ] NUS recess week (from: 2023-02-20 00:00 to: 2023-02-24 23:59)","lastModifiedDate":"2023-02-26"},{"lineNumber":272,"author":{"gitId":"mitchmalvin1"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":273,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"-":26,"mitchmalvin1":247}},{"path":"src/main/java/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import task.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"import ui.UI;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"public class AddTaskCommand extends SaveCommand {","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"    private final Task task;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"    public AddTaskCommand(Task task) {","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"     * Add the {@link task.Task} into the {@link task.TaskList}, prints and saves it","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The {@link task.TaskList} that is responsible for modifying the ArrayList\u003cTask\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"     * @param storage The {@link storage.TaskStorage} that is responsible for saving and loading tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"     * @param ui The {@link ui.UI} that is respoonsible for printing the output to the terminal","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"    public void execute(TaskList tasks, TaskStorage storage, UI ui) {","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"        tasks.addTask(task);","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"        ui.printAddTaskSuccess(task, tasks.getTasksCount());","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"        super.execute(tasks, storage,ui); //save task","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":26}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import task.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"import ui.UI;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"    public abstract void execute (TaskList tasks, TaskStorage storage, UI ui);","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":12}},{"path":"src/main/java/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import ui.UI;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"public class ExitCommand extends Command{","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints the goodbye line","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The {@link task.TaskList} that is responsible for modifying the ArrayList\u003cTask\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"     * @param storage The {@link storage.TaskStorage} that is responsible for saving and loading tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"     * @param ui The {@link ui.UI} that is respoonsible for printing the output to the terminal","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"    public void execute(TaskList tasks, TaskStorage storage, UI ui) {","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"        ui.printBye();","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":18}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import exception.InvalidIndexException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import task.Task;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"import ui.UI;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"public class FindCommand extends Command{","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"    private String findDesc;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"    public FindCommand(String findDesc) {","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"        this.findDesc \u003d findDesc;","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"     * Finds the {@link task.Task} in the {@link task.TaskList} and prints it","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The {@link task.TaskList} that is responsible for modifying the ArrayList\u003cTask\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"     * @param storage The {@link storage.TaskStorage} that is responsible for saving and loading tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"     * @param ui The {@link ui.UI} that is respoonsible for printing the output to the terminal","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"    public void execute(TaskList tasks, TaskStorage storage, UI ui) {","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"        for (Task t: tasks.getTasks()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"            if (t.getDescription().contains(findDesc)) {","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"                foundTasks.add(t);","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"        ui.printFoundTasks(foundTasks);","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"mitchmalvin1":36}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import ui.UI;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"public class ListCommand extends Command{","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints the ArrayList\u003cTask\u003ein the {@link task.TaskList}","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The {@link task.TaskList} that is responsible for modifying the ArrayList\u003cTask\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"     * @param storage The {@link storage.TaskStorage} that is responsible for saving and loading tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"     * @param ui The {@link ui.UI} that is respoonsible for printing the output to the terminal","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"    public void execute(TaskList tasks, TaskStorage storage, UI ui) {","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"        ui.printList(tasks.getTasks());","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":18}},{"path":"src/main/java/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import exception.InvalidIndexException;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"import ui.UI;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"import task.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"public class MarkCommand extends SaveCommand  {","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"    private final int taskIdx;","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"    public MarkCommand(int taskIdx) {","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"        this.taskIdx \u003d taskIdx;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"     * Mark the {@link task.Task} in the {@link task.TaskList}, prints and saves it","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The {@link task.TaskList} that is responsible for modifying the ArrayList\u003cTask\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"     * @param storage The {@link storage.TaskStorage} that is responsible for saving and loading tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"     * @param ui The {@link ui.UI} that is respoonsible for printing the output to the terminal","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"    public void execute(TaskList tasks, TaskStorage storage, UI ui) {","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"            Task taskToMark \u003d tasks.getTask(taskIdx);","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"            taskToMark.markAsDone();","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"            ui.printMarkSuccess(taskToMark);","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"            super.execute(tasks,storage,ui);","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"        } catch (InvalidIndexException ex) {","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"Please specify the correct task to mark\");","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"Exception occured : \" + ex);","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":34}},{"path":"src/main/java/command/RemoveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import exception.InvalidIndexException;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import task.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"import ui.UI;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"public class RemoveCommand extends SaveCommand{","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"    private final int taskIdx;","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"    public RemoveCommand(int taskIdx) {","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"        this.taskIdx \u003d taskIdx;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"     * Delete the {@link task.Task} in the {@link task.TaskList}, prints and saves it","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The {@link task.TaskList} that is responsible for modifying the ArrayList\u003cTask\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"     * @param storage The {@link storage.TaskStorage} that is responsible for saving and loading tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"     * @param ui The {@link ui.UI} that is respoonsible for printing the output to the terminal","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"    public void execute(TaskList tasks, TaskStorage storage, UI ui) {","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"            Task removedTask \u003d tasks.removeTask(taskIdx);","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"            ui.printRemoveTaskSuccess(removedTask,tasks.getTasksCount());","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"            super.execute(tasks, storage, ui);","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"        } catch (InvalidIndexException ex) {","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"Exception occured : \" + ex);","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"Please specify the correct task to remove\");","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":33}},{"path":"src/main/java/command/SaveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"import ui.UI;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"public class SaveCommand extends Command{","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"     * Saves the ArrayList\u003cTask\u003e in the {@link TaskList} and prints it","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The {@link task.TaskList} that is responsible for modifying the ArrayList\u003cTask\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"     * @param storage The {@link storage.TaskStorage} that is responsible for saving and loading tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"     * @param ui The {@link ui.UI} that is respoonsible for printing the output to the terminal","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"    public void execute(TaskList tasks, TaskStorage storage, UI ui) {","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"            storage.saveTasks(tasks.getTasks());","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"        } catch(java.io.IOException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"            ui.printSavingError(e);","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":24}},{"path":"src/main/java/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import exception.InvalidIndexException;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import task.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"import ui.UI;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"public class UnmarkCommand extends SaveCommand {","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"    private final int taskIdx;","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"    public UnmarkCommand(int taskIdx) {","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"        this.taskIdx \u003d taskIdx;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"     * Unmark the {@link task.Task} in the {@link task.TaskList}, prints and saves it","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The {@link task.TaskList} that is responsible for modifying the ArrayList\u003cTask\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"     * @param storage The {@link storage.TaskStorage} that is responsible for saving and loading tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"     * @param ui The {@link ui.UI} that is respoonsible for printing the output to the terminal","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"    public void execute(TaskList tasks, TaskStorage storage, UI ui) {","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"            Task taskToUnmark \u003d tasks.getTask(taskIdx);","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"            taskToUnmark.markAsUndone();","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"            ui.printUnmarkSuccess(taskToUnmark);","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"            super.execute(tasks,storage,ui);","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"        } catch (InvalidIndexException ex) {","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"Exception occured : \" + ex);","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"Please specify the correct task to unmark\");","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":35}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package duke;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import command.Command;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import parser.Parser;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"import ui.UI;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"import exception.IncompleteInputException;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"import exception.InvalidInputException;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"public class Duke {","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"    private final TaskStorage storage;","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"    private final UI ui;","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"    private final Parser parser;","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"     * Initializes the ui,parser and storage object to be used later and load the existing task in filePath.","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"     * All exceptions have been handled in this function and will be printed out accordingly","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"     * @param filePath The path of the file to load from (if any).","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"    public Duke (String filePath) {","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"        TaskList tempTasks \u003d new TaskList();","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"        ui \u003d new UI();","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"        storage \u003d new TaskStorage(filePath);","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"            tempTasks \u003d new TaskList(storage.loadTasks());","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"        } catch (IncompleteInputException ex) {","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"            ui.printError(ex);","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"            ui.printError(ex);","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"mitchmalvin1"},"content":"        } catch (java.io.IOException ex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"mitchmalvin1"},"content":"            ui.printError(ex);","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"mitchmalvin1"},"content":"        tasks \u003d tempTasks;","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"mitchmalvin1"},"content":"     * Runs the parser whenever the user has not exited the program, parse the input and execute the appropriate commands","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"mitchmalvin1"},"content":"     * using the tasks storage and ui which have been initialized in {@link #Duke} and finally print out the errors if any.","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"mitchmalvin1"},"content":"    public void run() {","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"mitchmalvin1"},"content":"        ui.printGreeting();","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"mitchmalvin1"},"content":"        while(parser.isExecuting()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"mitchmalvin1"},"content":"            String fullCommand \u003d ui.getCommand();","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"mitchmalvin1"},"content":"            try {","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"mitchmalvin1"},"content":"                Command cmd \u003d parser.parse(fullCommand);","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"mitchmalvin1"},"content":"                cmd.execute(tasks, storage, ui);","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"mitchmalvin1"},"content":"            } catch (IncompleteInputException ex) {","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"mitchmalvin1"},"content":"                ui.printError(ex);","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"mitchmalvin1"},"content":"            } catch(InvalidInputException ex) {","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"mitchmalvin1"},"content":"                ui.printError(ex);","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"mitchmalvin1"},"content":"            } catch (NumberFormatException ex) {","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"mitchmalvin1"},"content":"                ui.printError(ex);","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"mitchmalvin1"},"content":"            } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"mitchmalvin1"},"content":"                System.out.println(\"Exception occurred : \" +ex);","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"mitchmalvin1"},"content":"                System.out.println(\"Please enter the  time in YYYY-MM-DD HH:mm format\");","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"mitchmalvin1"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"mitchmalvin1"},"content":"        new Duke (\"data/duke.txt\").run();","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"mitchmalvin1":71}},{"path":"src/main/java/exception/IncompleteInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package exception;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"public class IncompleteInputException extends Exception {","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"    public IncompleteInputException (String desc) {","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"        super(desc);","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":7}},{"path":"src/main/java/exception/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package exception;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"public class InvalidIndexException extends Exception{","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"    public InvalidIndexException(String desc) {","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"        super(desc);","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":7}},{"path":"src/main/java/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package exception;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"public class InvalidInputException extends Exception{","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"    public InvalidInputException (String desc) {","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"        super(desc);","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":7}},{"path":"src/main/java/parser/Input.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package parser;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":" * Represents an enumeration for the CONSTANT valid String that the user can input.","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"public enum Input {","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"    LIST(\"list\"),","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"    FIND(\"find\"),","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"    BYE(\"bye\"),","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"    MARK(\"mark\"),","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"    UNMARK(\"unmark\"),","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"    DELETE(\"delete\");","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"    public final String input;","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"    Input(String input) {","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":21}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package parser;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import command.*;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import exception.InvalidInputException;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import task.Deadline;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"import exception.IncompleteInputException;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"import task.Event;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"import task.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":" * Represents a Parser class that is used to process all the input from the User into the appropriate","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":" * classes {@link Command} or {@link Task}","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"public class Parser {","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"    private boolean isExecuting;","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"    public Parser() {","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"        isExecuting \u003d true;","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"    public boolean isExecuting() {","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"        return this.isExecuting;","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"     * Process the input line String that is in the duke.txt file into a {@link Task}","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"     * This handler function will be called by {@link storage.TaskStorage#loadTasks}","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"     * @param input The input line that is stored in the txt file on the local machine","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The appropriate {@link Task} complete with its description and state (marked or unmarked)","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws IncompleteInputException If user specifies incomplete input tied to the command type. For example, \"todo\" input should always be accompanied by a description string.","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws DateTimeParseException If the Time specified for {@link Deadline} and {@link Event} does not follow the YYYY-MM-DD HH:mm format","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"    public static Task processSavedInput (String input) throws IncompleteInputException, DateTimeParseException {","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"        String taskType \u003d \"\", commandInfo \u003d \"\";","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"mitchmalvin1"},"content":"        switch (input.charAt(1)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"mitchmalvin1"},"content":"            case \u0027T\u0027 :","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"mitchmalvin1"},"content":"                taskType \u003d Input.TODO.input;","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"mitchmalvin1"},"content":"                commandInfo \u003d input.substring(7);","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"mitchmalvin1"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"mitchmalvin1"},"content":"            case \u0027D\u0027 :","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"mitchmalvin1"},"content":"                taskType \u003d Input.DEADLINE.input;","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"mitchmalvin1"},"content":"                commandInfo \u003d input.substring(7).replace(\"(by:\",\"/by\").replace(\")\",\"\");","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"mitchmalvin1"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"mitchmalvin1"},"content":"            case \u0027E\u0027 :","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"mitchmalvin1"},"content":"                taskType \u003d Input.EVENT.input;","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"mitchmalvin1"},"content":"                commandInfo \u003d input.substring(7).replace(\"(from:\",\"/from\").replace(\"to:\",\"/to\").replace(\")\",\"\");","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"mitchmalvin1"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"mitchmalvin1"},"content":"        Task taskToAdd \u003d handleAddTask(taskType,commandInfo);","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"mitchmalvin1"},"content":"        if (input.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"mitchmalvin1"},"content":"            taskToAdd.markAsDone();","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"mitchmalvin1"},"content":"        return taskToAdd;","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"mitchmalvin1"},"content":"     * Handler function that wraps the taskType and commandInfo into its respective class {@link Task}, {@link Deadline}, or {@link Event}.","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"mitchmalvin1"},"content":"     * This handler function will be called by method {@link #parse} and {@link #processSavedInput}","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"mitchmalvin1"},"content":"     * @param taskType  The type of the task to be added, which can only be \"todo\",\"deadline\", or \"event\".","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"mitchmalvin1"},"content":"     * @param commandInfo The description string for {@link Task}, {@link Deadline}, or {@link Event}","lastModifiedDate":"2023-02-26"},{"lineNumber":63,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The corresponding {@link Task} depending on the taskType.","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws IncompleteInputException If user specifies incomplete input tied to the command type. For example, \"todo\" input should always be accompanied by a description string.","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws DateTimeParseException If the Time specified for {@link Deadline} and {@link Event} does not follow the YYYY-MM-DD HH:mm format","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":67,"author":{"gitId":"mitchmalvin1"},"content":"    public static Task handleAddTask(String taskType, String commandInfo) throws IncompleteInputException, DateTimeParseException {","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"mitchmalvin1"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"mitchmalvin1"},"content":"        if (taskType.equals(Input.TODO.input)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"mitchmalvin1"},"content":"            newTask \u003d new Task(commandInfo);","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"mitchmalvin1"},"content":"        else if (taskType.equals(Input.DEADLINE.input)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"mitchmalvin1"},"content":"            String[] infoArr \u003d commandInfo.split(\"/by\");","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"mitchmalvin1"},"content":"            if (infoArr.length !\u003d 2 ) {","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"mitchmalvin1"},"content":"                throw new IncompleteInputException (\"Please specify your deadline string /by YYYY-MM-DD HH:MM\");","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"mitchmalvin1"},"content":"            //infoArr contains descStr and deadlineStr respectively","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"mitchmalvin1"},"content":"            newTask \u003d new Deadline(infoArr[0].trim(), infoArr[1].trim());","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"mitchmalvin1"},"content":"        else if (taskType.equals(Input.EVENT.input)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"mitchmalvin1"},"content":"            String[] infoArr \u003d commandInfo.split(\"/from|/to\");","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"mitchmalvin1"},"content":"            if (infoArr.length !\u003d3 ) {","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"mitchmalvin1"},"content":"                throw new IncompleteInputException (\"Please specify the starting and ending time of your event\");","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"mitchmalvin1"},"content":"            //infoArr contains descStr, fromStr, and toStr respectively","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"mitchmalvin1"},"content":"            newTask \u003d new Event(infoArr[0].trim(), infoArr[1].trim(), infoArr[2].trim());","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"mitchmalvin1"},"content":"        return newTask;","lastModifiedDate":"2023-02-25"},{"lineNumber":90,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":91,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":92,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"mitchmalvin1"},"content":"     * Handler function that converts the commandType and index to edit into {@link MarkCommand}, {@link UnmarkCommand}, or {@link RemoveCommand}.","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"mitchmalvin1"},"content":"     * This handler function will be called by method {@link #parse} whenever the command type is either \"mark\",\"unmark\" or \"delete\"","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"mitchmalvin1"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"mitchmalvin1"},"content":"     * @param commandType The command type specified by the user (\"mark\",\"unmark\",\"delete\").","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"mitchmalvin1"},"content":"     * @param idxToEdit The 0-based index of the task that the user wishes to mark, unmark or delete.","lastModifiedDate":"2023-02-26"},{"lineNumber":98,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The appropriate {@link Command} depending on the commandType.","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws NumberFormatException If the idxToEdit cannot be parsed into an Integer.","lastModifiedDate":"2023-02-26"},{"lineNumber":100,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"mitchmalvin1"},"content":"    public Command handleEditTask(String commandType, String idxToEdit) throws NumberFormatException {","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"mitchmalvin1"},"content":"        if (commandType.equals(Input.MARK.input)) {","lastModifiedDate":"2023-02-26"},{"lineNumber":103,"author":{"gitId":"mitchmalvin1"},"content":"            int indexToMark \u003d Integer.parseInt(idxToEdit) - 1; //turn it into 0-based","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"mitchmalvin1"},"content":"            return new MarkCommand(indexToMark);","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"mitchmalvin1"},"content":"        } else if (commandType.equals(Input.UNMARK.input)) {","lastModifiedDate":"2023-02-26"},{"lineNumber":106,"author":{"gitId":"mitchmalvin1"},"content":"            int indexToUnmark \u003d Integer.parseInt(idxToEdit) - 1;","lastModifiedDate":"2023-02-25"},{"lineNumber":107,"author":{"gitId":"mitchmalvin1"},"content":"            return new UnmarkCommand(indexToUnmark);","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"mitchmalvin1"},"content":"        } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"mitchmalvin1"},"content":"            int indexToRemove \u003d Integer.parseInt(idxToEdit)-1;","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"mitchmalvin1"},"content":"            return new RemoveCommand(indexToRemove);","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":113,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":115,"author":{"gitId":"mitchmalvin1"},"content":"     * Parses user input into respective {@link Command} depending on the command type and description.","lastModifiedDate":"2023-02-26"},{"lineNumber":116,"author":{"gitId":"mitchmalvin1"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":117,"author":{"gitId":"mitchmalvin1"},"content":"     * @param inputLine The complete user input from the CLI.","lastModifiedDate":"2023-02-26"},{"lineNumber":118,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The appropriate {@link Command} that is associated with the inputLine.","lastModifiedDate":"2023-02-26"},{"lineNumber":119,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws IncompleteInputException If user specifies incomplete input tied to the command type. For example, \"todo\" input should always be accompanied by a description string.","lastModifiedDate":"2023-02-26"},{"lineNumber":120,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws InvalidInputException If user types in input other than \"list\",\"bye\",\"mark\",\"unmark\", \"find\",\"todo\",\"deadline\",\"event\".","lastModifiedDate":"2023-02-26"},{"lineNumber":121,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws NumberFormatException If the input following \"mark\",\"unmark\",\"delete\" cannot be parsed into an Integer.","lastModifiedDate":"2023-02-26"},{"lineNumber":122,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws DateTimeParseException If the Time specified for {@link Deadline} and {@link Event} does not follow the YYYY-MM-DD HH:mm format","lastModifiedDate":"2023-02-26"},{"lineNumber":123,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":124,"author":{"gitId":"mitchmalvin1"},"content":"    public Command parse (String inputLine) throws IncompleteInputException, InvalidInputException ,NumberFormatException, DateTimeParseException {","lastModifiedDate":"2023-02-26"},{"lineNumber":125,"author":{"gitId":"mitchmalvin1"},"content":"        //splits input based on one or more whitespaces into two words","lastModifiedDate":"2023-02-25"},{"lineNumber":126,"author":{"gitId":"mitchmalvin1"},"content":"        String[] inputWords \u003d inputLine.split(\"\\\\s+\", 2);","lastModifiedDate":"2023-02-25"},{"lineNumber":127,"author":{"gitId":"mitchmalvin1"},"content":"        String command \u003d inputWords[0];","lastModifiedDate":"2023-02-25"},{"lineNumber":128,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":129,"author":{"gitId":"mitchmalvin1"},"content":"        if (command.equals(Input.BYE.input)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"mitchmalvin1"},"content":"            isExecuting \u003d false;","lastModifiedDate":"2023-02-25"},{"lineNumber":131,"author":{"gitId":"mitchmalvin1"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-02-25"},{"lineNumber":132,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":133,"author":{"gitId":"mitchmalvin1"},"content":"        else if (command.equals(Input.LIST.input)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":134,"author":{"gitId":"mitchmalvin1"},"content":"            return new ListCommand();","lastModifiedDate":"2023-02-25"},{"lineNumber":135,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":136,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":137,"author":{"gitId":"mitchmalvin1"},"content":"        else if(command.equals(Input.FIND.input)){","lastModifiedDate":"2023-02-26"},{"lineNumber":138,"author":{"gitId":"mitchmalvin1"},"content":"            if (inputWords.length \u003c 2) {","lastModifiedDate":"2023-02-26"},{"lineNumber":139,"author":{"gitId":"mitchmalvin1"},"content":"                throw new IncompleteInputException (\"Please specify which task you wish to edit\");","lastModifiedDate":"2023-02-26"},{"lineNumber":140,"author":{"gitId":"mitchmalvin1"},"content":"            } else {","lastModifiedDate":"2023-02-26"},{"lineNumber":141,"author":{"gitId":"mitchmalvin1"},"content":"                return new FindCommand(inputWords[1]);","lastModifiedDate":"2023-02-26"},{"lineNumber":142,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":143,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":144,"author":{"gitId":"mitchmalvin1"},"content":"        else if (command.matches(Input.MARK.input + \"|\" + Input.UNMARK.input + \"|\" + Input.DELETE.input)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":145,"author":{"gitId":"mitchmalvin1"},"content":"            //inputWords[1] is string that no longer contains the command string","lastModifiedDate":"2023-02-25"},{"lineNumber":146,"author":{"gitId":"mitchmalvin1"},"content":"            if (inputWords.length \u003c 2) {","lastModifiedDate":"2023-02-25"},{"lineNumber":147,"author":{"gitId":"mitchmalvin1"},"content":"                throw new IncompleteInputException (\"Please specify which task you wish to edit\");","lastModifiedDate":"2023-02-25"},{"lineNumber":148,"author":{"gitId":"mitchmalvin1"},"content":"            } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":149,"author":{"gitId":"mitchmalvin1"},"content":"                return handleEditTask(command, inputWords[1]);","lastModifiedDate":"2023-02-25"},{"lineNumber":150,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":151,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":152,"author":{"gitId":"mitchmalvin1"},"content":"        //check if command string matches either of todo,deadline,event","lastModifiedDate":"2023-02-25"},{"lineNumber":153,"author":{"gitId":"mitchmalvin1"},"content":"        else if (command.matches(Input.TODO.input + \"|\" + Input.DEADLINE.input + \"|\" + Input.EVENT.input)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":154,"author":{"gitId":"mitchmalvin1"},"content":"            if (inputWords.length \u003c 2) {","lastModifiedDate":"2023-02-25"},{"lineNumber":155,"author":{"gitId":"mitchmalvin1"},"content":"                throw new IncompleteInputException (\"Please specify the description to the task that you wish to add\");","lastModifiedDate":"2023-02-25"},{"lineNumber":156,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":157,"author":{"gitId":"mitchmalvin1"},"content":"            Task taskToAdd \u003d handleAddTask(command, inputWords[1]);","lastModifiedDate":"2023-02-25"},{"lineNumber":158,"author":{"gitId":"mitchmalvin1"},"content":"            return new AddTaskCommand(taskToAdd);","lastModifiedDate":"2023-02-25"},{"lineNumber":159,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":160,"author":{"gitId":"mitchmalvin1"},"content":"        else {","lastModifiedDate":"2023-02-25"},{"lineNumber":161,"author":{"gitId":"mitchmalvin1"},"content":"            throw new InvalidInputException (\"fsgfsuygu I don\u0027t know what that means :(\");","lastModifiedDate":"2023-02-25"},{"lineNumber":162,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":163,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":164,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"},{"lineNumber":165,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":165}},{"path":"src/main/java/storage/TaskStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package storage;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import parser.Parser;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import task.Deadline;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import task.Event;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"import task.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"import exception.IncompleteInputException;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"import java.io.File;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":" * Represents a Storage class that is used to save and load ArrayList\u003cTask\u003e to and from the","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":" * ./data/duke.txt file.","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"public class TaskStorage {","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"    private final String filePath;","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"    public TaskStorage(String filePath)  {","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"     * Save the given ArrayList\u003cTask\u003e into lines of String in the ./data/duke.txt file","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"     * If the directory and file does not exist, it will create the data/duke.txt in the current working directory","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"     * This method is called by {@link command.SaveCommand#execute}","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The entire ArrayList\u003cTask\u003e to be saved into the ./data/duke.txt file","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws java.io.IOException If an I/O error occurred either in the writing to the file.","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"mitchmalvin1"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws java.io.IOException {","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"mitchmalvin1"},"content":"        File f \u003d new File(\"data/duke.txt\");","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"mitchmalvin1"},"content":"        FileWriter fw \u003d new FileWriter(\"data/duke.txt\");","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"mitchmalvin1"},"content":"        for (Task t: tasks) {","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"mitchmalvin1"},"content":"            fw.write(t.toSaveString() + System.lineSeparator());","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"mitchmalvin1"},"content":"        fw.close();","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"mitchmalvin1"},"content":"     * Loads the content from the ./data/duke.txt file and process into ArrayList\u003cTask\u003e if it exists","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"mitchmalvin1"},"content":"     * @return ArrayList\u003cTask\u003e containing the task in the .txt file","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws IncompleteInputException If the data stored in the .txt file has incomplete information","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws DateTimeParseException If the Time specified for {@link Deadline} and {@link Event} does not follow the YYYY-MM-DD HH:mm format","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws java.io.IOException If an I/O error occurred in the creation or reading of the file","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"mitchmalvin1"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws IncompleteInputException, DateTimeParseException, java.io.IOException {","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"mitchmalvin1"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"mitchmalvin1"},"content":"        File f \u003d new File(\"data/duke.txt\");","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"mitchmalvin1"},"content":"        File dir \u003d new File(\"data\");","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"mitchmalvin1"},"content":"        if (!dir.exists()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"Directory does not exist, creating a directory called data...\");","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"mitchmalvin1"},"content":"            boolean success \u003d dir.mkdir();","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"mitchmalvin1"},"content":"            if (success) {","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"mitchmalvin1"},"content":"                System.out.println(\"Directory data has been successfully created\");","lastModifiedDate":"2023-02-26"},{"lineNumber":63,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"mitchmalvin1"},"content":"        if (!f.exists()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"File does not exist, creating a new file ./data/duke.txt...\");","lastModifiedDate":"2023-02-26"},{"lineNumber":67,"author":{"gitId":"mitchmalvin1"},"content":"            boolean success \u003d f.createNewFile();","lastModifiedDate":"2023-02-26"},{"lineNumber":68,"author":{"gitId":"mitchmalvin1"},"content":"            if (success) {","lastModifiedDate":"2023-02-26"},{"lineNumber":69,"author":{"gitId":"mitchmalvin1"},"content":"                System.out.println(\"File duke.txt has been successfully created\");","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"mitchmalvin1"},"content":"        } else {","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"mitchmalvin1"},"content":"            try {","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"mitchmalvin1"},"content":"                Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"mitchmalvin1"},"content":"                while (s.hasNext()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"mitchmalvin1"},"content":"                    String inputStr \u003d s.nextLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"mitchmalvin1"},"content":"                    Task taskToAdd \u003d Parser.processSavedInput(inputStr);","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"mitchmalvin1"},"content":"                    tasks.add(taskToAdd);","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"mitchmalvin1"},"content":"                }","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"mitchmalvin1"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"mitchmalvin1"},"content":"                System.out.println(\"Exception : Failed to read existing file \" + e);","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"mitchmalvin1"},"content":"        return tasks;","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":85}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package task;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":" * Represents a Deadline class that inherits from {@link Task} with additional {@link #dueBy} field","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"    public LocalDateTime dueBy;","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"    public static DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"    public static DateTimeFormatter printFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"    public Deadline(String description, String dueBy) throws DateTimeParseException {","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"        super(description);","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"        this.dueBy \u003d LocalDateTime.parse(dueBy, inputFormatter);","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"     * toString method to be called when Deadline is to be printed","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The string to be printed","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"    public String toString() {","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"        String newString \u003d super.toString().replaceFirst(\"T\", \"D\");","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"        return newString + \" (by: \" + dueBy.format(printFormatter) + \")\";","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"     * This method produces the same String as {@link  #toString} except for the format of the time.","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"     * The format of the time in the String here is yyyy-MM-dd HH:mm. This is also the format of the String","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"     * that will be saved to the ./data/duke.txt file","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The String in the correct format to be saved into the .txt file","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"mitchmalvin1"},"content":"    public String toSaveString() {","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"mitchmalvin1"},"content":"        String newString \u003d super.toString().replaceFirst(\"T\", \"D\");","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"mitchmalvin1"},"content":"        return newString + \" (by: \" + dueBy.format(inputFormatter) + \")\";","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":41}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package task;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":" * Represents a Deadline class that inherits from {@link Task} with additional {@link #from} and {@link #to} field.","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"    public LocalDateTime from;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"    public LocalDateTime to;","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"    public static DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"    public static DateTimeFormatter printFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"    public Event (String description, String from, String to) throws DateTimeParseException {","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"        super(description);","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"        this.from \u003d LocalDateTime.parse(from, inputFormatter);","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"        this.to \u003d LocalDateTime.parse(to,inputFormatter);","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"     * toString method to be called when Deadline is to be printed.","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The string to be printed.","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"    //@Override","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"        String newString \u003d super.toString().replaceFirst(\"T\",\"E\");","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"        return newString + \" (from: \" + from.format(printFormatter) + \" to: \" + to.format(printFormatter) + \")\";","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"     * This method produces the same String as {@link  #toString} except for the format of the time.","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"     * The format of the time in the String here is yyyy-MM-dd HH:mm. This is also the format of the String","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"     * that will be saved to the ./data/duke.txt file.","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"mitchmalvin1"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The String in the correct format to be saved into the .txt file.","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"mitchmalvin1"},"content":"    public String toSaveString() {","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"mitchmalvin1"},"content":"        String newString \u003d super.toString().replaceFirst(\"T\", \"E\");","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"mitchmalvin1"},"content":"        return newString + \" (from: \" + from.format(inputFormatter) + \" to: \" + to.format(inputFormatter) + \")\";","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"mitchmalvin1":44}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package task;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":" * Represents a class to hold the basic information about the Task such as the {@link #description}.","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"public class Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"    protected String description;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"    public String getDescription() {","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"        return this.description;","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"        return \"[T][\" + this.getStatusIcon()+ \"] \" + description;","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"mitchmalvin1"},"content":"    public String toSaveString() {","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"mitchmalvin1"},"content":"        return toString();","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"mitchmalvin1":39}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package task;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"import exception.InvalidIndexException;","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":" * Represents a TaskList class that is mainly responsible for the operation of the ArrayList\u003cTask\u003e,","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":" * which includes adding,removing, and getting.","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"public class TaskList {","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"     * @return All the existing task in the format of ArrayList\u003cTask\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"        return tasks;","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"     * @param taskIdx The index of the task to be returned (0-based)","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The task of the index specified","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws InvalidIndexException If the user enters an invalid index (less than 0 or out-of-bounds)","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"    public Task getTask(int taskIdx) throws InvalidIndexException {","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"        if (taskIdx \u003e\u003d tasks.size() || taskIdx \u003c 0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"            throw new InvalidIndexException(\"Please ensure you enter the correct task number\");","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"mitchmalvin1"},"content":"        return tasks.get(taskIdx);","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The total number of tasks in the ArrayList\u003cTask\u003e currently.","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"mitchmalvin1"},"content":"    public int getTasksCount() {","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"mitchmalvin1"},"content":"        return tasks.size();","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"mitchmalvin1"},"content":"     * Adds a task to the ArrayList\u003cTask\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"mitchmalvin1"},"content":"     * @param taskToAdd The {@link task.Task} to be added","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"mitchmalvin1"},"content":"    public void addTask (Task taskToAdd) {","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"mitchmalvin1"},"content":"        tasks.add(taskToAdd);","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"mitchmalvin1"},"content":"     * @param taskIdx The index of the task to be removed (0-based)","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The task that has been removed","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"mitchmalvin1"},"content":"     * @throws InvalidIndexException","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"mitchmalvin1"},"content":"    public Task removeTask(int taskIdx) throws InvalidIndexException {","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"mitchmalvin1"},"content":"        if (taskIdx \u003e\u003d tasks.size() || taskIdx \u003c 0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"mitchmalvin1"},"content":"            throw new InvalidIndexException(\"Please ensure you enter the correct task number\");","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"mitchmalvin1"},"content":"        return tasks.remove(taskIdx);","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":68}},{"path":"src/main/java/ui/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"package ui;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"mitchmalvin1"},"content":"import exception.IncompleteInputException;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"mitchmalvin1"},"content":"import task.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"mitchmalvin1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"mitchmalvin1"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"mitchmalvin1"},"content":"public class UI {","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"mitchmalvin1"},"content":"    private static final int LINE_LENGTH \u003d 50;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"mitchmalvin1"},"content":"    private  final Scanner scanner;","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"mitchmalvin1"},"content":"    public UI() {","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"mitchmalvin1"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"     * Gets the user command from the terminal","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"mitchmalvin1"},"content":"     * @return The complete input line","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"mitchmalvin1"},"content":"    public String getCommand() {","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"mitchmalvin1"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints a line with a length of LINE_LENGTH","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"mitchmalvin1"},"content":"    public void printLine() {","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t \" + \"_\".repeat(LINE_LENGTH));","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints the greeting at the start of the program","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"mitchmalvin1"},"content":"    public void printGreeting() {","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t Hello I\u0027m Duke, your personal chatbot.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t Is there anything I can do for you\");","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints the task that has been successfully added and the current total number of tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"mitchmalvin1"},"content":"     * @param task The task that has been added","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"mitchmalvin1"},"content":"     * @param taskCount The total number of tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"mitchmalvin1"},"content":"    public void printAddTaskSuccess(Task task, int taskCount) {","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t  \" + task);","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t Now you have \" + taskCount + \" task(s) in your list.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints the task that has been successfully removed and the current total number of tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"mitchmalvin1"},"content":"     * @param task The task that has been removed","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"mitchmalvin1"},"content":"     * @param taskCount The total number of tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"mitchmalvin1"},"content":"    public void printRemoveTaskSuccess(Task task, int taskCount) {","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t Noted. I\u0027ve removed this task: \");","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t \" + task);","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t Now you have \" + taskCount + \" task(s) in your list\");","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":69,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints all the tasks that is being specified","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The tasks to be printed","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"mitchmalvin1"},"content":"    public void printList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"mitchmalvin1"},"content":"        if (tasks.size() \u003d\u003d0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"\\t Seems like you do not have any task at the moment...\");","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"mitchmalvin1"},"content":"        } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"\\t Here are the tasks for your list: \");","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"mitchmalvin1"},"content":"            int i \u003d1;","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"mitchmalvin1"},"content":"            for (Task t: tasks) {","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"mitchmalvin1"},"content":"                System.out.println(\"\\t \" + i++ + \".\" + t.toString());","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":87,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints all the found tasks specified","lastModifiedDate":"2023-02-26"},{"lineNumber":88,"author":{"gitId":"mitchmalvin1"},"content":"     * @param tasks The found tasks to be printed","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":90,"author":{"gitId":"mitchmalvin1"},"content":"    public void printFoundTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"mitchmalvin1"},"content":"        if (tasks.size() \u003d\u003d0) {","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"\\t There is no task matching your description\");","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"mitchmalvin1"},"content":"        } else {","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"mitchmalvin1"},"content":"            System.out.println(\"\\t Here are the matching tasks for your list: \");","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"mitchmalvin1"},"content":"            int i \u003d1;","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"mitchmalvin1"},"content":"            for (Task t: tasks) {","lastModifiedDate":"2023-02-26"},{"lineNumber":98,"author":{"gitId":"mitchmalvin1"},"content":"                System.out.println(\"\\t \" + i++ + \".\" + t.toString());","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"mitchmalvin1"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":100,"author":{"gitId":"mitchmalvin1"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":103,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":104,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":105,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints the task that has just been successfully marked.","lastModifiedDate":"2023-02-26"},{"lineNumber":106,"author":{"gitId":"mitchmalvin1"},"content":"     * @param task The marked task","lastModifiedDate":"2023-02-26"},{"lineNumber":107,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":108,"author":{"gitId":"mitchmalvin1"},"content":"    public void printMarkSuccess (Task task) {","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t Nice, I have marked this task as done: \");","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t \" + task);","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":113,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":115,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":116,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints the task that has just been successfully unmarked.","lastModifiedDate":"2023-02-26"},{"lineNumber":117,"author":{"gitId":"mitchmalvin1"},"content":"     * @param task The unmarked task","lastModifiedDate":"2023-02-26"},{"lineNumber":118,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":119,"author":{"gitId":"mitchmalvin1"},"content":"    public void printUnmarkSuccess (Task task)  {","lastModifiedDate":"2023-02-25"},{"lineNumber":120,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":121,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t Ouch, I have unmarked this task: \");","lastModifiedDate":"2023-02-25"},{"lineNumber":122,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t \" + task);","lastModifiedDate":"2023-02-25"},{"lineNumber":123,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":124,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":125,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":126,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":127,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints goodbye line when user exits the program","lastModifiedDate":"2023-02-26"},{"lineNumber":128,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":129,"author":{"gitId":"mitchmalvin1"},"content":"    public void printBye() {","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":131,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"\\t Bye! Do let me know if you need any further assistance\");","lastModifiedDate":"2023-02-25"},{"lineNumber":132,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":133,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":134,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":135,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":136,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints error associated with saving","lastModifiedDate":"2023-02-26"},{"lineNumber":137,"author":{"gitId":"mitchmalvin1"},"content":"     * @param ex The IOException to be printed","lastModifiedDate":"2023-02-26"},{"lineNumber":138,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":139,"author":{"gitId":"mitchmalvin1"},"content":"    public void printSavingError(java.io.IOException ex) {","lastModifiedDate":"2023-02-25"},{"lineNumber":140,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":141,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"Exception Occured: \" + ex);","lastModifiedDate":"2023-02-25"},{"lineNumber":142,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"Failed to save your file\");","lastModifiedDate":"2023-02-25"},{"lineNumber":143,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":144,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":145,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":146,"author":{"gitId":"mitchmalvin1"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":147,"author":{"gitId":"mitchmalvin1"},"content":"     * Prints the error","lastModifiedDate":"2023-02-26"},{"lineNumber":148,"author":{"gitId":"mitchmalvin1"},"content":"     * @param ex The Exception to be printed","lastModifiedDate":"2023-02-26"},{"lineNumber":149,"author":{"gitId":"mitchmalvin1"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":150,"author":{"gitId":"mitchmalvin1"},"content":"    public void printError(Exception ex) {","lastModifiedDate":"2023-02-25"},{"lineNumber":151,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":152,"author":{"gitId":"mitchmalvin1"},"content":"        System.out.println(\"Exception Occured: \" + ex);","lastModifiedDate":"2023-02-25"},{"lineNumber":153,"author":{"gitId":"mitchmalvin1"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":154,"author":{"gitId":"mitchmalvin1"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":155,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":156,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":157,"author":{"gitId":"mitchmalvin1"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":158,"author":{"gitId":"mitchmalvin1"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"mitchmalvin1":158}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"mitchmalvin1"},"content":"event final exam /from monday /to friday","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"mitchmalvin1"},"content":"bye","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"mitchmalvin1":2}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"mitchmalvin1"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"mitchmalvin1":1}}]
