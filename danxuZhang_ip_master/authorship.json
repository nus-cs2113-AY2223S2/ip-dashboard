[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.io.File;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"    private static final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    private static final ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"    private static final String spacer \u003d \"\\t \";","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    private static final String DATA_PATH \u003d \"data\";","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"    private static final String DATA_FILE \u003d \"task-list.csv\";","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"     * Helper method to print a horizontal line.","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    private static void printDivider() {","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"     * Prints all tasks in the list.","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"    private static void listTasks() {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(spacer + \"Here are the tasks in your list:\");","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"        int cnt \u003d 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"            System.out.printf(spacer + \"%d.%s\\n\", ++cnt, task);","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"     * Checks validity of listID and then marks the corresponding task in the task list.","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"     * @param listIdStr id of the task in the task list in a string.","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"    private static void markTask(String listIdStr) {","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"            markTask(Integer.parseInt(listIdStr));","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(spacer + \"Invalid input!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(spacer + \"Valid input format: mark [list id of the task]\");","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"danxuZhang"},"content":"     * Checks validity of listID and then unmark the corresponding task in the task list.","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"danxuZhang"},"content":"     * @param listIdStr id of the task in the task list in a string.","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"danxuZhang"},"content":"    private static void unmarkTask(String listIdStr) {","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"danxuZhang"},"content":"            unmarkTask(Integer.parseInt(listIdStr));","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"danxuZhang"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(spacer + \"Invalid input!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(spacer + \"Valid input format: unmark [list id of the task]\");","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"danxuZhang"},"content":"     * Marks a task in the task list","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"danxuZhang"},"content":"     * @param listId id of the task in the task list in an int.","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"danxuZhang"},"content":"    private static void markTask(int listId) {","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"danxuZhang"},"content":"        int index \u003d listId - 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"danxuZhang"},"content":"        if (index \u003c 0 || index \u003e\u003d taskList.size()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(spacer + \"Index out of range!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"danxuZhang"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"danxuZhang"},"content":"            taskList.get(index).mark();","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"danxuZhang"},"content":"     * Unmarks a task in the task list.","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"danxuZhang"},"content":"     * @param listId id of the task in the task list in an int.","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"danxuZhang"},"content":"    private static void unmarkTask(int listId) {","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"danxuZhang"},"content":"        int index \u003d listId - 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"danxuZhang"},"content":"        if (index \u003c 0 || index \u003e\u003d taskList.size()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(spacer + \"Index out of range!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"danxuZhang"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"danxuZhang"},"content":"            taskList.get(index).unmark();","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"danxuZhang"},"content":"    public static void deleteTask(String listId) {","lastModifiedDate":"2023-02-12"},{"lineNumber":95,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":96,"author":{"gitId":"danxuZhang"},"content":"            String taskStr \u003d deleteTask(Integer.parseInt(listId));","lastModifiedDate":"2023-02-12"},{"lineNumber":97,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(spacer + \"Noted. I\u0027ve removed this task:\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":98,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(spacer + taskStr);","lastModifiedDate":"2023-02-12"},{"lineNumber":99,"author":{"gitId":"danxuZhang"},"content":"            System.out.printf(spacer + \"Now you have %d tasks in the list.\\n\", taskList.size());","lastModifiedDate":"2023-02-12"},{"lineNumber":100,"author":{"gitId":"danxuZhang"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":101,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(\"Please input a valid index!\");","lastModifiedDate":"2023-02-12"},{"lineNumber":102,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":103,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":104,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":105,"author":{"gitId":"danxuZhang"},"content":"    public static String deleteTask(int listId) {","lastModifiedDate":"2023-02-12"},{"lineNumber":106,"author":{"gitId":"danxuZhang"},"content":"        int index \u003d listId - 1;","lastModifiedDate":"2023-02-12"},{"lineNumber":107,"author":{"gitId":"danxuZhang"},"content":"        if (index \u003c 0 || index \u003e\u003d taskList.size()) {","lastModifiedDate":"2023-02-12"},{"lineNumber":108,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(spacer + \"Index out of range!\");","lastModifiedDate":"2023-02-12"},{"lineNumber":109,"author":{"gitId":"danxuZhang"},"content":"        } else {","lastModifiedDate":"2023-02-12"},{"lineNumber":110,"author":{"gitId":"danxuZhang"},"content":"            String taskStr \u003d taskList.get(index).toString();","lastModifiedDate":"2023-02-12"},{"lineNumber":111,"author":{"gitId":"danxuZhang"},"content":"            taskList.remove(index);","lastModifiedDate":"2023-02-12"},{"lineNumber":112,"author":{"gitId":"danxuZhang"},"content":"            return taskStr;","lastModifiedDate":"2023-02-12"},{"lineNumber":113,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":114,"author":{"gitId":"danxuZhang"},"content":"        return null;","lastModifiedDate":"2023-02-12"},{"lineNumber":115,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":116,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":117,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"danxuZhang"},"content":"     * Add a task from user\u0027s command.","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"danxuZhang"},"content":"     * @param cmd user\u0027s input command.","lastModifiedDate":"2023-02-01"},{"lineNumber":120,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"danxuZhang"},"content":"    private static void addTask(String cmd) {","lastModifiedDate":"2023-01-29"},{"lineNumber":122,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"danxuZhang"},"content":"            Task task \u003d createTask(cmd);","lastModifiedDate":"2023-01-29"},{"lineNumber":124,"author":{"gitId":"danxuZhang"},"content":"            taskList.add(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(spacer + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-03"},{"lineNumber":126,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(\"\\t\\t\" + task);","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(spacer + \"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":128,"author":{"gitId":"danxuZhang"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":129,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(spacer + e.getMessage());","lastModifiedDate":"2023-02-05"},{"lineNumber":130,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":131,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":132,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":134,"author":{"gitId":"danxuZhang"},"content":"     * Create a task from user\u0027s input command.","lastModifiedDate":"2023-02-01"},{"lineNumber":135,"author":{"gitId":"danxuZhang"},"content":"     * @param cmd user command.","lastModifiedDate":"2023-02-01"},{"lineNumber":136,"author":{"gitId":"danxuZhang"},"content":"     * @return a task instance (can be event, deadline, etc).","lastModifiedDate":"2023-02-01"},{"lineNumber":137,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException when user input an invalid command","lastModifiedDate":"2023-02-01"},{"lineNumber":138,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":139,"author":{"gitId":"danxuZhang"},"content":"    private static Task createTask(String cmd) throws IllegalArgumentException {","lastModifiedDate":"2023-02-05"},{"lineNumber":140,"author":{"gitId":"danxuZhang"},"content":"        String[] cmdArgs \u003d cmd.split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":141,"author":{"gitId":"danxuZhang"},"content":"        if (cmdArgs.length \u003c\u003d 1) {","lastModifiedDate":"2023-02-05"},{"lineNumber":142,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"☹ OOPS!!! The description cannot be empty!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":143,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":144,"author":{"gitId":"danxuZhang"},"content":"        switch (cmdArgs[0]) {","lastModifiedDate":"2023-01-29"},{"lineNumber":145,"author":{"gitId":"danxuZhang"},"content":"        case \"todo\":","lastModifiedDate":"2023-01-29"},{"lineNumber":146,"author":{"gitId":"danxuZhang"},"content":"            return new Todo(cmdArgs);","lastModifiedDate":"2023-02-03"},{"lineNumber":147,"author":{"gitId":"danxuZhang"},"content":"        case \"deadline\":","lastModifiedDate":"2023-01-29"},{"lineNumber":148,"author":{"gitId":"danxuZhang"},"content":"            return new Deadline(cmdArgs);","lastModifiedDate":"2023-02-03"},{"lineNumber":149,"author":{"gitId":"danxuZhang"},"content":"        case \"event\":","lastModifiedDate":"2023-01-29"},{"lineNumber":150,"author":{"gitId":"danxuZhang"},"content":"            return new Event(cmdArgs);","lastModifiedDate":"2023-02-03"},{"lineNumber":151,"author":{"gitId":"danxuZhang"},"content":"        default:","lastModifiedDate":"2023-01-29"},{"lineNumber":152,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-02-05"},{"lineNumber":153,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":154,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":155,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":156,"author":{"gitId":"danxuZhang"},"content":"    private static void initData(String path, String fileName) {","lastModifiedDate":"2023-02-12"},{"lineNumber":157,"author":{"gitId":"danxuZhang"},"content":"        File directory \u003d new File(path);","lastModifiedDate":"2023-02-12"},{"lineNumber":158,"author":{"gitId":"danxuZhang"},"content":"        directory.mkdir();","lastModifiedDate":"2023-02-12"},{"lineNumber":159,"author":{"gitId":"danxuZhang"},"content":"        File file \u003d new File(path + \"/\" + fileName);","lastModifiedDate":"2023-02-12"},{"lineNumber":160,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":161,"author":{"gitId":"danxuZhang"},"content":"            file.createNewFile();","lastModifiedDate":"2023-02-12"},{"lineNumber":162,"author":{"gitId":"danxuZhang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":163,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-02-12"},{"lineNumber":164,"author":{"gitId":"danxuZhang"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-12"},{"lineNumber":165,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":166,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":167,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":168,"author":{"gitId":"danxuZhang"},"content":"    private static void readData(String fileName) throws FileNotFoundException {","lastModifiedDate":"2023-02-12"},{"lineNumber":169,"author":{"gitId":"danxuZhang"},"content":"        File file \u003d new File(fileName);","lastModifiedDate":"2023-02-12"},{"lineNumber":170,"author":{"gitId":"danxuZhang"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-02-12"},{"lineNumber":171,"author":{"gitId":"danxuZhang"},"content":"            throw new FileNotFoundException();","lastModifiedDate":"2023-02-12"},{"lineNumber":172,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":173,"author":{"gitId":"danxuZhang"},"content":"        Scanner fileScanner \u003d new Scanner(file);","lastModifiedDate":"2023-02-12"},{"lineNumber":174,"author":{"gitId":"danxuZhang"},"content":"        while (fileScanner.hasNext()) {","lastModifiedDate":"2023-02-12"},{"lineNumber":175,"author":{"gitId":"danxuZhang"},"content":"            String line \u003d fileScanner.nextLine();","lastModifiedDate":"2023-02-12"},{"lineNumber":176,"author":{"gitId":"danxuZhang"},"content":"            String otherThanQuote \u003d \" [^\\\"] \";","lastModifiedDate":"2023-02-12"},{"lineNumber":177,"author":{"gitId":"danxuZhang"},"content":"            String quotedString \u003d String.format(\" \\\" %s* \\\" \", otherThanQuote);","lastModifiedDate":"2023-02-12"},{"lineNumber":178,"author":{"gitId":"danxuZhang"},"content":"            String regex \u003d String.format(\"(?x) \" + // enable comments, ignore white spaces","lastModifiedDate":"2023-02-12"},{"lineNumber":179,"author":{"gitId":"danxuZhang"},"content":"                            \",                         \" + // match a comma","lastModifiedDate":"2023-02-12"},{"lineNumber":180,"author":{"gitId":"danxuZhang"},"content":"                            \"(?\u003d                       \" + // start positive look ahead","lastModifiedDate":"2023-02-12"},{"lineNumber":181,"author":{"gitId":"danxuZhang"},"content":"                            \"  (?:                     \" + //   start non-capturing group 1","lastModifiedDate":"2023-02-12"},{"lineNumber":182,"author":{"gitId":"danxuZhang"},"content":"                            \"    %s*                   \" + //     match \u0027otherThanQuote\u0027 zero or more times","lastModifiedDate":"2023-02-12"},{"lineNumber":183,"author":{"gitId":"danxuZhang"},"content":"                            \"    %s                    \" + //     match \u0027quotedString\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":184,"author":{"gitId":"danxuZhang"},"content":"                            \"  )*                      \" + //   end group 1 and repeat it zero or more times","lastModifiedDate":"2023-02-12"},{"lineNumber":185,"author":{"gitId":"danxuZhang"},"content":"                            \"  %s*                     \" + //   match \u0027otherThanQuote\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":186,"author":{"gitId":"danxuZhang"},"content":"                            \"  $                       \" + // match the end of the string","lastModifiedDate":"2023-02-12"},{"lineNumber":187,"author":{"gitId":"danxuZhang"},"content":"                            \")                         \", // stop positive look ahead","lastModifiedDate":"2023-02-12"},{"lineNumber":188,"author":{"gitId":"danxuZhang"},"content":"                    otherThanQuote, quotedString, otherThanQuote);","lastModifiedDate":"2023-02-12"},{"lineNumber":189,"author":{"gitId":"danxuZhang"},"content":"            String[] args \u003d line.split(regex, -1);","lastModifiedDate":"2023-02-12"},{"lineNumber":190,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-02-12"},{"lineNumber":191,"author":{"gitId":"danxuZhang"},"content":"                boolean isMarked \u003d Integer.parseInt(args[1]) \u003d\u003d 1;","lastModifiedDate":"2023-02-12"},{"lineNumber":192,"author":{"gitId":"danxuZhang"},"content":"                for (int i \u003d 2; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-12"},{"lineNumber":193,"author":{"gitId":"danxuZhang"},"content":"                    args[i] \u003d args[i].substring(1, args[i].length()-1);","lastModifiedDate":"2023-02-12"},{"lineNumber":194,"author":{"gitId":"danxuZhang"},"content":"                }","lastModifiedDate":"2023-02-12"},{"lineNumber":195,"author":{"gitId":"danxuZhang"},"content":"                String content \u003d args[2];","lastModifiedDate":"2023-02-12"},{"lineNumber":196,"author":{"gitId":"danxuZhang"},"content":"                switch (args[0]) {","lastModifiedDate":"2023-02-12"},{"lineNumber":197,"author":{"gitId":"danxuZhang"},"content":"                case \"todo\":","lastModifiedDate":"2023-02-12"},{"lineNumber":198,"author":{"gitId":"danxuZhang"},"content":"                    taskList.add(new Todo(content, isMarked));","lastModifiedDate":"2023-02-12"},{"lineNumber":199,"author":{"gitId":"danxuZhang"},"content":"                    break;","lastModifiedDate":"2023-02-12"},{"lineNumber":200,"author":{"gitId":"danxuZhang"},"content":"                case \"deadline\":","lastModifiedDate":"2023-02-12"},{"lineNumber":201,"author":{"gitId":"danxuZhang"},"content":"                    taskList.add(new Deadline(content, args[3], isMarked));","lastModifiedDate":"2023-02-12"},{"lineNumber":202,"author":{"gitId":"danxuZhang"},"content":"                    break;","lastModifiedDate":"2023-02-12"},{"lineNumber":203,"author":{"gitId":"danxuZhang"},"content":"                case \"event\":","lastModifiedDate":"2023-02-12"},{"lineNumber":204,"author":{"gitId":"danxuZhang"},"content":"                    taskList.add(new Event(content, args[3], args[4], isMarked));","lastModifiedDate":"2023-02-12"},{"lineNumber":205,"author":{"gitId":"danxuZhang"},"content":"                    break;","lastModifiedDate":"2023-02-12"},{"lineNumber":206,"author":{"gitId":"danxuZhang"},"content":"                default:","lastModifiedDate":"2023-02-12"},{"lineNumber":207,"author":{"gitId":"danxuZhang"},"content":"                    throw new IllegalArgumentException();","lastModifiedDate":"2023-02-12"},{"lineNumber":208,"author":{"gitId":"danxuZhang"},"content":"                }","lastModifiedDate":"2023-02-12"},{"lineNumber":209,"author":{"gitId":"danxuZhang"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":210,"author":{"gitId":"danxuZhang"},"content":"                System.err.println(\"Cannot add task: \" + line);","lastModifiedDate":"2023-02-12"},{"lineNumber":211,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":212,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":213,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":214,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":215,"author":{"gitId":"danxuZhang"},"content":"    private static void writeData(String fileName) {","lastModifiedDate":"2023-02-12"},{"lineNumber":216,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":217,"author":{"gitId":"danxuZhang"},"content":"            FileWriter fw \u003d new FileWriter(fileName);","lastModifiedDate":"2023-02-12"},{"lineNumber":218,"author":{"gitId":"danxuZhang"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2023-02-12"},{"lineNumber":219,"author":{"gitId":"danxuZhang"},"content":"                fw.write(task.toCSV() + System.lineSeparator());","lastModifiedDate":"2023-02-12"},{"lineNumber":220,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":221,"author":{"gitId":"danxuZhang"},"content":"            fw.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":222,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":223,"author":{"gitId":"danxuZhang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":224,"author":{"gitId":"danxuZhang"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-12"},{"lineNumber":225,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":226,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":227,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":228,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":236,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":237,"author":{"gitId":"danxuZhang"},"content":"        // greeting messages","lastModifiedDate":"2023-01-26"},{"lineNumber":238,"author":{"gitId":"danxuZhang"},"content":"        printDivider();","lastModifiedDate":"2023-01-26"},{"lineNumber":239,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(spacer + \"Hello! I\u0027m Tohru.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":240,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(spacer + \"What can I do for you?\");","lastModifiedDate":"2023-02-03"},{"lineNumber":241,"author":{"gitId":"danxuZhang"},"content":"        printDivider();","lastModifiedDate":"2023-01-26"},{"lineNumber":242,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":243,"author":{"gitId":"danxuZhang"},"content":"            readData(DATA_PATH + \"/\" + DATA_FILE);","lastModifiedDate":"2023-02-12"},{"lineNumber":244,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(\"Read data from file \" + DATA_PATH + \"/\" + DATA_FILE);","lastModifiedDate":"2023-02-12"},{"lineNumber":245,"author":{"gitId":"danxuZhang"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2023-02-12"},{"lineNumber":246,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(\"Creating new data file in \" + DATA_PATH + \"/\" + DATA_FILE);","lastModifiedDate":"2023-02-12"},{"lineNumber":247,"author":{"gitId":"danxuZhang"},"content":"            initData(DATA_PATH, DATA_FILE);","lastModifiedDate":"2023-02-12"},{"lineNumber":248,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":249,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":250,"author":{"gitId":"danxuZhang"},"content":"        // user interactions","lastModifiedDate":"2023-01-26"},{"lineNumber":251,"author":{"gitId":"danxuZhang"},"content":"        while (true) {","lastModifiedDate":"2023-01-26"},{"lineNumber":252,"author":{"gitId":"danxuZhang"},"content":"            String cmd \u003d scanner.nextLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":253,"author":{"gitId":"danxuZhang"},"content":"            String[] cmdArgs \u003d cmd.split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":254,"author":{"gitId":"danxuZhang"},"content":"            printDivider();","lastModifiedDate":"2023-01-26"},{"lineNumber":255,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":256,"author":{"gitId":"danxuZhang"},"content":"            if (cmd.equals(\"bye\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":257,"author":{"gitId":"danxuZhang"},"content":"                break;","lastModifiedDate":"2023-01-26"},{"lineNumber":258,"author":{"gitId":"danxuZhang"},"content":"            } else if (cmd.equals(\"list\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":259,"author":{"gitId":"danxuZhang"},"content":"                listTasks();","lastModifiedDate":"2023-01-26"},{"lineNumber":260,"author":{"gitId":"danxuZhang"},"content":"            } else if (cmdArgs[0].equals(\"mark\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":261,"author":{"gitId":"danxuZhang"},"content":"                markTask(cmdArgs[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":262,"author":{"gitId":"danxuZhang"},"content":"            } else if (cmdArgs[0].equals(\"unmark\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":263,"author":{"gitId":"danxuZhang"},"content":"                unmarkTask(cmdArgs[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":264,"author":{"gitId":"danxuZhang"},"content":"            } else if (cmdArgs[0].equals(\"delete\")) {","lastModifiedDate":"2023-02-12"},{"lineNumber":265,"author":{"gitId":"danxuZhang"},"content":"                deleteTask(cmdArgs[1]);","lastModifiedDate":"2023-02-12"},{"lineNumber":266,"author":{"gitId":"danxuZhang"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":267,"author":{"gitId":"danxuZhang"},"content":"                addTask(cmd);","lastModifiedDate":"2023-01-29"},{"lineNumber":268,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":269,"author":{"gitId":"danxuZhang"},"content":"            writeData(DATA_PATH + \"/\" + DATA_FILE);","lastModifiedDate":"2023-02-12"},{"lineNumber":270,"author":{"gitId":"danxuZhang"},"content":"            printDivider();","lastModifiedDate":"2023-01-26"},{"lineNumber":271,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":272,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":273,"author":{"gitId":"danxuZhang"},"content":"        // exit message","lastModifiedDate":"2023-01-26"},{"lineNumber":274,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(spacer + \"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":275,"author":{"gitId":"danxuZhang"},"content":"        printDivider();","lastModifiedDate":"2023-01-26"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"danxuZhang":267,"-":10}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":" * Represents tasks that need to be done before a specific date/time.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":" * e.g., submit report by 11/10/2019 5pm.","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"    protected String by;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"     * Constructor initializing the content and deadline of the Deadline task.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"     * The task is unmarked by default.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"     * @param content content of the Deadline task.","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"     * @param by deadline of the Deadline task.","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"    public Deadline(String content, String by) {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"        this(content, by, false);","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"    public Deadline(String content, String by, boolean isMarked) {","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"        super(content, isMarked);","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"     * Constructs a Deadline class from input arguments.","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"     * @param args input arguments containing content and by time of the deadline.","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException exceptions with message when (part of) input is missing.","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"    public Deadline(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(\"deadline\");","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder content \u003d new StringBuilder();","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder by \u003d new StringBuilder();","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"        int byIndex \u003d -1;","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 0; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"            if (args[i].equals(\"/by\")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"                byIndex \u003d i;","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"        if (byIndex \u003d\u003d -1) {","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"☹ OOPS!!! Cannot find the by time of the event.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 1; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"            if (i \u003d\u003d byIndex) {","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"                continue;","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"            if (i \u003c byIndex) {","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"                content.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"            } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"danxuZhang"},"content":"                by.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"danxuZhang"},"content":"        if (content.toString().isEmpty()) {","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"danxuZhang"},"content":"        } else if (by.toString().isEmpty()) {","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"☹ OOPS!!! The by time of a deadline cannot be empty.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"danxuZhang"},"content":"        this.content \u003d content.toString().trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"danxuZhang"},"content":"        this.by \u003d by.toString().trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"danxuZhang"},"content":"    public String getBy() {","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"danxuZhang"},"content":"        return by;","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"danxuZhang"},"content":"    public void setBy(String by) {","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"danxuZhang"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"danxuZhang"},"content":"    public String toCSV() {","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"danxuZhang"},"content":"        return \"deadline,\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"danxuZhang"},"content":"                super.toCSV() + \",\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":79,"author":{"gitId":"danxuZhang"},"content":"                \"\\\"\" + by + \"\\\"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":80,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":81,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"danxuZhang"},"content":"     * Converts the task to a string with label, mark status and deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"danxuZhang"},"content":"     * @return a string containing the task\u0027s label, mark status and deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"danxuZhang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"danxuZhang"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"danxuZhang":89}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":" * tasks that start at a specific date/time and ends at a specific date/time.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":" * e.g., (a) team project meeting 2/10/2019 2-4pm.","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":" *      (b) orientation week 4/10/2019 to 11/10/2019.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"    protected String from;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"    protected String to;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"     * Constructor initializing the content, start time, end time of the Event task.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"     * The task is unmarked by default.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"     * @param content content of the Event.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"     * @param from starting time of the Event.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"     * @param to ending time of the Event.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    public Event(String content, String from, String to) {","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"        this(content, from, to, false);","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"    public Event(String content, String from, String to, boolean isMarked) {","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"        super(content, isMarked);","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"     * Constructs an Event class from input arguments.","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"     * @param args arguments containing content, from, to time of the event.","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException exceptions with message when (part of) input is missing.","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"    public Event(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(\"event\");","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder content \u003d new StringBuilder();","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder from \u003d new StringBuilder();","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder to \u003d new StringBuilder();","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"        int fromIndex \u003d -1;","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"        int toIndex \u003d -1;","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 0; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"            if (args[i].equals(\"/from\")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"                fromIndex \u003d i;","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"            } else if (args[i].equals(\"/to\")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"                toIndex \u003d i;","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"        if (fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1) {","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"☹ OOPS!!! Cannot find from or to time of the event!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 1; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"danxuZhang"},"content":"            if (i \u003c fromIndex) {","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"danxuZhang"},"content":"                content.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"danxuZhang"},"content":"            } else if (i \u003e fromIndex \u0026\u0026 i \u003c toIndex) {","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"danxuZhang"},"content":"                from.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"danxuZhang"},"content":"            } else if (i \u003e toIndex) {","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"danxuZhang"},"content":"                to.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"danxuZhang"},"content":"        if (content.toString().isEmpty() || from.toString().isEmpty() || to.toString().isEmpty()) {","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"☹ OOPS!!! The content/from/to of an event cannot be empty!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"danxuZhang"},"content":"        this.content \u003d content.toString().trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"danxuZhang"},"content":"        this.from \u003d from.toString().trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"danxuZhang"},"content":"        this.to \u003d to.toString().trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"danxuZhang"},"content":"    public String getFrom() {","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"danxuZhang"},"content":"        return from;","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"danxuZhang"},"content":"    public void setFrom(String from) {","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"danxuZhang"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":80,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"danxuZhang"},"content":"    public String getTo() {","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"danxuZhang"},"content":"        return to;","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"danxuZhang"},"content":"    public void setTo(String to) {","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"danxuZhang"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"danxuZhang"},"content":"    public String toCSV() {","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"danxuZhang"},"content":"        return \"event,\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":91,"author":{"gitId":"danxuZhang"},"content":"                super.toCSV() + \",\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":92,"author":{"gitId":"danxuZhang"},"content":"                \"\\\"\" + from + \"\\\"\" + \",\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":93,"author":{"gitId":"danxuZhang"},"content":"                \"\\\"\" + to + \"\\\"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":94,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":95,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":96,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"danxuZhang"},"content":"     * Converts the task to a string with label, marked status, starting and ending time.","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"danxuZhang"},"content":"     * @return a string containing the task\u0027s label, marked status, starting and ending time.","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":101,"author":{"gitId":"danxuZhang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":102,"author":{"gitId":"danxuZhang"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"danxuZhang":104}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":" * The Task class represents real-world tasks with content and marking status.","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"    protected String content;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"    protected boolean isMarked;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"     * Default constructor for the Task class.","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"     * Initialize task content to be empty and set isMarked to be false.","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    public Task() {","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"        this(\"\", false);","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"     * Another constructor for the Task class.","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"     * Initialize task content to be the parameter and set isMarked to be false.","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"     * @param content content of the task","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"    public Task(String content) {","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"        this(content, false);","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"     * Another constructor for the Task class.","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"     * @param content content of the task.","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"     * @param isMarked marking status of the task.","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"    public Task(String content, boolean isMarked) {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"        this.isMarked \u003d isMarked;","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"    public String getContent() {","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"        return content;","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"    public void setContent(String content) {","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"    public boolean getMarked() {","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"        return isMarked;","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"     * Prints the marking status of the task following by the content.","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"danxuZhang"},"content":"    public void printTask() {","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(this);","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"danxuZhang"},"content":"     * Marks the marking status of the task, i.e. set isMarked to be true.","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"danxuZhang"},"content":"     * Prints a reply message after successfully mark the task.","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"danxuZhang"},"content":"     * Prints an error message if the task is already marked.","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"danxuZhang"},"content":"    public void mark() {","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"danxuZhang"},"content":"        if (!isMarked) {","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"danxuZhang"},"content":"            isMarked \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(\"\\t Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(\"\\t \" + this);","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"danxuZhang"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(\"\\t The task is already marked!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"danxuZhang"},"content":"     * Unmarks the marking status of the task, i.e. set isMarked to be false.","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"danxuZhang"},"content":"     * Prints a reply message after successfully unmark the task.","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"danxuZhang"},"content":"     * Prints an error message if the task is already unchecked.","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"danxuZhang"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"danxuZhang"},"content":"        if (isMarked) {","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"danxuZhang"},"content":"            isMarked \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(\"\\t OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(\"\\t \" + this);","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"danxuZhang"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(\"\\t This task is already not marked!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"danxuZhang"},"content":"    public String toCSV() {","lastModifiedDate":"2023-02-12"},{"lineNumber":88,"author":{"gitId":"danxuZhang"},"content":"        return (isMarked ? \"1\" : \"0\") + \",\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":89,"author":{"gitId":"danxuZhang"},"content":"                \"\\\"\" + content + \"\\\"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":91,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":92,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"danxuZhang"},"content":"     * Converts the task to a string containing marking status and content.","lastModifiedDate":"2023-01-26"},{"lineNumber":94,"author":{"gitId":"danxuZhang"},"content":"     * e.g. For a marked task: [X] a marked task.","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"danxuZhang"},"content":"     * e.g. For an unmarked task: [ ] an unmarked task.","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"danxuZhang"},"content":"     * @return a string containing marking status and task content","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"danxuZhang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"danxuZhang"},"content":"        return \"[\" + (isMarked ? \"X\" : \" \") + \"]\" + \" \" + content;","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"danxuZhang":102}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":" * Represents tasks without any date/time attached to it.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":" * e.g., visit new theme park.","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"     * Constructor initializing the content of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"     * The task is unmarked by default.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"     * @param content content of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"    public Todo(String content) {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"        this(content, false);","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    public Todo(String content, boolean isMarked) {","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"        super(content, isMarked);","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"     * Constructs a Todo class from arguments","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"     * @param args arguments containing the content of the todo task.","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException exceptions with message when (part of) input is missing.","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"    public Todo(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(\"todo\");","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder content \u003d new StringBuilder();","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 1; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"            content.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"        if (content.toString().isEmpty()) {","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"        this.content \u003d content.toString().trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"    public String toCSV() {","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"        return \"todo,\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"                super.toCSV();","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"     * Converts the class to a string with label and marked status.","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"     * @return a string containing the task\u0027s label and marked status.","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"danxuZhang":52}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"todo read book","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"mark 1","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"todo join sports club","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"mark 4","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"bye","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"danxuZhang":7}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"danxuZhang":1,"-":37}}]
