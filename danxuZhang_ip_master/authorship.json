[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"Project Duke is a personal assistant chat-bot that helps a person tracks his various tasks.","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"Currently, the user can track there todos, deadlines and events using Duke.","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"* [Features](#Features)","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"* [Usage](#usage)","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"  * [`help`](#help---show-help-information)","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"  * [`list`](#list---list-all-tasks)","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"  * [`todo`](#todo---add-a-todo-task)","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"  * [`deadline`](#deadline---add-a-deadline-task)","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"  * [`event`](#event---add-an-event-task)","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"  * [`find`](#find---find-tasks-by-keyword)","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"  * [`mark`](#mark---mark-task--s--as-done)","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"  * [`unmark`](#unmark---unmark-task--s--as-not-done-yet)","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"  * [`delete`](#delete---delete-task)","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"  * [`bye`](#bye---exit-the-application)","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"## Features ","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"### Manage and Track Tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"The user can track all their added tasks including todos, deadlines and events with their complete status and dates.","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"### `help` - Show help information","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"Display all acceptable commands and their usages.","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"`help`","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"All acceptable commands and their usages.","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"     Here are some sample usages: ","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"\t todo: add a todo task","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"\t deadline: add a deadline task with by time","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"\t event: add an event task with start and to time","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"\t list: Display all tasks in the list with their indices","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"\t find: find a task by searching for a keyword","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"\t mark: mark task(s) to be done","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"\t unmark: unmark task(s)","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"\t delete: delete a task from the task list","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"danxuZhang"},"content":"\t help: Show program usage instructions","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"danxuZhang"},"content":"\t bye: show available commands and their usages","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"danxuZhang"},"content":"### `list` - List all tasks ","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"danxuZhang"},"content":"List all tasks in the task list.  ","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"danxuZhang"},"content":"`list`","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"danxuZhang"},"content":"All tasks in the task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"danxuZhang"},"content":"\t Here are the tasks in your list:","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"danxuZhang"},"content":"\t - 1. [D][ ] hello (by: Feb 22 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"danxuZhang"},"content":"\t - 2. [E][ ] task (from: Feb 26 2023, to: Feb 27 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":75,"author":{"gitId":"danxuZhang"},"content":"\t - 3. [T][ ] hello world","lastModifiedDate":"2023-03-01"},{"lineNumber":76,"author":{"gitId":"danxuZhang"},"content":"\t - 4. [E][X] destroy the world (from: Jan 1 2023, to: Jan 1 2024)","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"danxuZhang"},"content":"### `todo` - Add a todo task","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"danxuZhang"},"content":"Add a todo task with its description","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"danxuZhang"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"danxuZhang"},"content":"`todo watch formula one race`","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"danxuZhang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"danxuZhang"},"content":"An echo of the added todo task, and current number of tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":92,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":93,"author":{"gitId":"danxuZhang"},"content":"\t Got it. I\u0027ve added this task:","lastModifiedDate":"2023-03-01"},{"lineNumber":94,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":95,"author":{"gitId":"danxuZhang"},"content":"\t [T][ ] watch formula one race","lastModifiedDate":"2023-03-01"},{"lineNumber":96,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":97,"author":{"gitId":"danxuZhang"},"content":"\t Now you have 1 tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":100,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":101,"author":{"gitId":"danxuZhang"},"content":"### `deadline` - Add a deadline task","lastModifiedDate":"2023-03-01"},{"lineNumber":102,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":103,"author":{"gitId":"danxuZhang"},"content":"Add a deadline task with its description, by date.","lastModifiedDate":"2023-03-01"},{"lineNumber":104,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":105,"author":{"gitId":"danxuZhang"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":106,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":107,"author":{"gitId":"danxuZhang"},"content":"`deadline eat lunch /by 31/07/2023`","lastModifiedDate":"2023-03-01"},{"lineNumber":108,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":109,"author":{"gitId":"danxuZhang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":110,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":111,"author":{"gitId":"danxuZhang"},"content":"An echo of the added deadline task, and current number of tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":114,"author":{"gitId":"danxuZhang"},"content":"\t Got it. I\u0027ve added this task:","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":116,"author":{"gitId":"danxuZhang"},"content":"\t [D][ ] eat lunch (by: Jul 31 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":117,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":118,"author":{"gitId":"danxuZhang"},"content":"\t Now you have 2 tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":119,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":120,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":121,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":122,"author":{"gitId":"danxuZhang"},"content":"### `event` - Add an event task","lastModifiedDate":"2023-03-01"},{"lineNumber":123,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":124,"author":{"gitId":"danxuZhang"},"content":"Add an event task with its description, from date, to date.","lastModifiedDate":"2023-03-01"},{"lineNumber":125,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":126,"author":{"gitId":"danxuZhang"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":127,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":128,"author":{"gitId":"danxuZhang"},"content":"`event Hokkaido trip /from 01/01/2023 /to 07/01/2023`","lastModifiedDate":"2023-03-01"},{"lineNumber":129,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":130,"author":{"gitId":"danxuZhang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":131,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":132,"author":{"gitId":"danxuZhang"},"content":"An echo of the added event task, and the current number of tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":133,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":134,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":135,"author":{"gitId":"danxuZhang"},"content":"\t Got it. I\u0027ve added this task:","lastModifiedDate":"2023-03-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":137,"author":{"gitId":"danxuZhang"},"content":"\t [E][ ] Hokkaido trip (from: Jan 1 2023, to: Jan 7 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":138,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":139,"author":{"gitId":"danxuZhang"},"content":"\t Now you have 3 tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":140,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":141,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":142,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":143,"author":{"gitId":"danxuZhang"},"content":"### `find` - Find tasks by keyword","lastModifiedDate":"2023-03-01"},{"lineNumber":144,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":145,"author":{"gitId":"danxuZhang"},"content":"List all tasks that contains the input keyword.","lastModifiedDate":"2023-03-01"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":149,"author":{"gitId":"danxuZhang"},"content":"`find eat`","lastModifiedDate":"2023-03-01"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":153,"author":{"gitId":"danxuZhang"},"content":"A list of all tasks that contains the input keyword.","lastModifiedDate":"2023-03-01"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":155,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":156,"author":{"gitId":"danxuZhang"},"content":"\t Here are the matching tasks in your list:","lastModifiedDate":"2023-03-01"},{"lineNumber":157,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":158,"author":{"gitId":"danxuZhang"},"content":"\t - 2. [D][ ] eat lunch (by: Jul 31 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":159,"author":{"gitId":"danxuZhang"},"content":"\t - 4. [T][ ] eat dinner","lastModifiedDate":"2023-03-01"},{"lineNumber":160,"author":{"gitId":"danxuZhang"},"content":"\t - 5. [T][ ] eat breakfast ","lastModifiedDate":"2023-03-01"},{"lineNumber":161,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":162,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":163,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":164,"author":{"gitId":"danxuZhang"},"content":"### `mark` - Mark task(s) as done","lastModifiedDate":"2023-03-01"},{"lineNumber":165,"author":{"gitId":"danxuZhang"},"content":"Mark one or more tasks by entering their indexes.","lastModifiedDate":"2023-03-01"},{"lineNumber":166,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":167,"author":{"gitId":"danxuZhang"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":168,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":169,"author":{"gitId":"danxuZhang"},"content":"`mark 1 2`","lastModifiedDate":"2023-03-01"},{"lineNumber":170,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":171,"author":{"gitId":"danxuZhang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":172,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":173,"author":{"gitId":"danxuZhang"},"content":"Messages that the task has been marked as done.","lastModifiedDate":"2023-03-01"},{"lineNumber":174,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":175,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":176,"author":{"gitId":"danxuZhang"},"content":"\t Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-03-01"},{"lineNumber":177,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":178,"author":{"gitId":"danxuZhang"},"content":"\t [T][X] watch formula one race","lastModifiedDate":"2023-03-01"},{"lineNumber":179,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":180,"author":{"gitId":"danxuZhang"},"content":"\t Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-03-01"},{"lineNumber":181,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":182,"author":{"gitId":"danxuZhang"},"content":"\t [D][X] eat lunch (by: Jul 31 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":183,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":184,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":185,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":186,"author":{"gitId":"danxuZhang"},"content":"### `unmark` - Unmark task(s) as not done yet","lastModifiedDate":"2023-03-01"},{"lineNumber":187,"author":{"gitId":"danxuZhang"},"content":"Unmark one or more tasks by entering their indexes.","lastModifiedDate":"2023-03-01"},{"lineNumber":188,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":189,"author":{"gitId":"danxuZhang"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":190,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":191,"author":{"gitId":"danxuZhang"},"content":"`unmark 1 2`","lastModifiedDate":"2023-03-01"},{"lineNumber":192,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":193,"author":{"gitId":"danxuZhang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":194,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":195,"author":{"gitId":"danxuZhang"},"content":"Messages that the task has been marked as done.","lastModifiedDate":"2023-03-01"},{"lineNumber":196,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":197,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":198,"author":{"gitId":"danxuZhang"},"content":"\t OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-03-01"},{"lineNumber":199,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":200,"author":{"gitId":"danxuZhang"},"content":"\t [T][ ] watch formula one race","lastModifiedDate":"2023-03-01"},{"lineNumber":201,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":202,"author":{"gitId":"danxuZhang"},"content":"\t OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-03-01"},{"lineNumber":203,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":204,"author":{"gitId":"danxuZhang"},"content":"\t [D][ ] eat lunch (by: Jul 31 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":205,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":206,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":207,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":208,"author":{"gitId":"danxuZhang"},"content":"### `delete` - Delete task","lastModifiedDate":"2023-03-01"},{"lineNumber":209,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":210,"author":{"gitId":"danxuZhang"},"content":"Delete a task at the given index.","lastModifiedDate":"2023-03-01"},{"lineNumber":211,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":212,"author":{"gitId":"danxuZhang"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":213,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":214,"author":{"gitId":"danxuZhang"},"content":"`delete 2`","lastModifiedDate":"2023-03-01"},{"lineNumber":215,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":216,"author":{"gitId":"danxuZhang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":217,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":218,"author":{"gitId":"danxuZhang"},"content":"Messages that the task has been deleted and the current number of tasks in the list. ","lastModifiedDate":"2023-03-01"},{"lineNumber":219,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":220,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":221,"author":{"gitId":"danxuZhang"},"content":"\t Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-03-01"},{"lineNumber":222,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":223,"author":{"gitId":"danxuZhang"},"content":"\t [D][ ] eat lunch (by: Jul 31 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":224,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":225,"author":{"gitId":"danxuZhang"},"content":"\t Now you have 4 tasks in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":226,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":227,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":228,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":229,"author":{"gitId":"danxuZhang"},"content":"### `bye` - Exit the application","lastModifiedDate":"2023-03-01"},{"lineNumber":230,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":231,"author":{"gitId":"danxuZhang"},"content":"Exit the running application.","lastModifiedDate":"2023-03-01"},{"lineNumber":232,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":233,"author":{"gitId":"danxuZhang"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":234,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":235,"author":{"gitId":"danxuZhang"},"content":"`bye`","lastModifiedDate":"2023-03-01"},{"lineNumber":236,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":237,"author":{"gitId":"danxuZhang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":238,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":239,"author":{"gitId":"danxuZhang"},"content":"A goodbye messages.","lastModifiedDate":"2023-03-01"},{"lineNumber":240,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":241,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":242,"author":{"gitId":"danxuZhang"},"content":"\t Exiting the application as requested... ","lastModifiedDate":"2023-03-01"},{"lineNumber":243,"author":{"gitId":"danxuZhang"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":244,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":245,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"danxuZhang":215,"-":30}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import duke.command.CommandResult;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"import duke.parser.CommandParser;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"import duke.storage.StorageFile;","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"import duke.data.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":" * Entry point of the Duke Application.","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":" * Initializes the application and interacts with the user.","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"public class Main {","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    private static final String VERSION \u003d \"0.2\";","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"    private TextUi ui;","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"    private StorageFile storageFile;","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"    public static void main(String... args) {","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"        new Main().run(args);","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"     * Runs the program until exits.","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"     * @param args: init arguments","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"    private void run(String... args) {","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"        init();","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"        loopUntilExit();","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"        finish();","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"     * Initializes the required objects, loads data from the disk,","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"     * and print welcome messages","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"     * @param args: init arguments","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"    private void init(String... args) {","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"            this.ui \u003d new TextUi();","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"            this.taskList \u003d new TaskList();","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"            this.storageFile \u003d new StorageFile();","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"                int lines \u003d storageFile.loadCsv(taskList);","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"                ui.printMessage(String.format(\"Load %d task(s) from file \u0027%s\u0027\", lines, storageFile.getPath()));","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"danxuZhang"},"content":"                storageFile.initCsv();","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"danxuZhang"},"content":"                ui.printMessage(String.format(\"Create new data file \u0027%s\u0027\", storageFile.getPath()));","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"danxuZhang"},"content":"            } finally {","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"danxuZhang"},"content":"                ui.printWelcomeMsg(VERSION);","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"danxuZhang"},"content":"                ui.printDivider();","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"danxuZhang"},"content":"                ui.printIntroMsg();","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"danxuZhang"},"content":"                ui.printDivider();","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"danxuZhang"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"danxuZhang"},"content":"            ui.printMessage(\"init failed!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"danxuZhang"},"content":"            throw new RuntimeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"danxuZhang"},"content":"     * Reads user input command and executes it until user inputs an exit command.","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"danxuZhang"},"content":"    private void loopUntilExit() {","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"danxuZhang"},"content":"        Command command;","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"danxuZhang"},"content":"        do {","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"danxuZhang"},"content":"            String userInput \u003d ui.getUserCommand();","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"danxuZhang"},"content":"                command \u003d new CommandParser().parseCommand(userInput);","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"danxuZhang"},"content":"                ui.printDivider();","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"danxuZhang"},"content":"                CommandResult result \u003d executeCommand(command);","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"danxuZhang"},"content":"                ui.printResult(result);","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"danxuZhang"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"danxuZhang"},"content":"                command \u003d null;","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"danxuZhang"},"content":"                ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"danxuZhang"},"content":"            ui.printDivider();","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"danxuZhang"},"content":"        } while (!ExitCommand.isExitCommand(command));","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"danxuZhang"},"content":"     * Prints a goodbye message and writes data to the disk.","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"danxuZhang"},"content":"    private void finish() {","lastModifiedDate":"2023-02-25"},{"lineNumber":91,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"danxuZhang"},"content":"            storageFile.writeCsv(taskList);","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"danxuZhang"},"content":"            ui.printMessage(String.format(\"Data has been written to \u0027%s\u0027\", storageFile.getPath()));","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"danxuZhang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"danxuZhang"},"content":"            ui.printMultiMessage(\"Failed to save task list!\", e.getMessage());","lastModifiedDate":"2023-03-01"},{"lineNumber":96,"author":{"gitId":"danxuZhang"},"content":"        } finally {","lastModifiedDate":"2023-03-01"},{"lineNumber":97,"author":{"gitId":"danxuZhang"},"content":"            ui.printGoodByeMsg();","lastModifiedDate":"2023-02-25"},{"lineNumber":98,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"danxuZhang"},"content":"        System.exit(0);","lastModifiedDate":"2023-02-25"},{"lineNumber":100,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":101,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":103,"author":{"gitId":"danxuZhang"},"content":"     * Prepares data that will be used by the command.","lastModifiedDate":"2023-03-01"},{"lineNumber":104,"author":{"gitId":"danxuZhang"},"content":"     * @param command command to prepare data for.","lastModifiedDate":"2023-03-01"},{"lineNumber":105,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":106,"author":{"gitId":"danxuZhang"},"content":"    private void prepareData(Command command) {","lastModifiedDate":"2023-02-25"},{"lineNumber":107,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"danxuZhang"},"content":"            command.setTaskList(taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"danxuZhang"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(e.getMessage());","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":113,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"danxuZhang"},"content":"     * Executes the command.","lastModifiedDate":"2023-03-01"},{"lineNumber":116,"author":{"gitId":"danxuZhang"},"content":"     * @param command command to be executed.","lastModifiedDate":"2023-03-01"},{"lineNumber":117,"author":{"gitId":"danxuZhang"},"content":"     * @return command execution result.","lastModifiedDate":"2023-03-01"},{"lineNumber":118,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":119,"author":{"gitId":"danxuZhang"},"content":"    private CommandResult executeCommand(Command command) {","lastModifiedDate":"2023-02-25"},{"lineNumber":120,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":121,"author":{"gitId":"danxuZhang"},"content":"            prepareData(command);","lastModifiedDate":"2023-02-25"},{"lineNumber":122,"author":{"gitId":"danxuZhang"},"content":"            return command.execute();","lastModifiedDate":"2023-02-25"},{"lineNumber":123,"author":{"gitId":"danxuZhang"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":124,"author":{"gitId":"danxuZhang"},"content":"            ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-25"},{"lineNumber":125,"author":{"gitId":"danxuZhang"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-02-25"},{"lineNumber":126,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":127,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":128,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"danxuZhang":128}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import duke.data.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":" * Represents an executable command object.","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"    protected TaskList taskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"    public Command() {}","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"     * Prepare data for the command.","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"     * @param taskList task list to work on.","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    public void setTaskList(TaskList taskList) {","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"     * Executes the command and returns execution result.","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"     * @return execution result.","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"        throw new UnsupportedOperationException(\"This method is to be implemented by child classes.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"danxuZhang":28}},{"path":"src/main/java/duke/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import java.util.Collection;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import java.util.List;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"public class CommandResult {","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"    /** Result messages */","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"    private final List\u003cString\u003e resultMessages \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult(String resultMessage) {","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"        resultMessages.add(resultMessage);","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult(Collection\u003cString\u003e resultMessages) {","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"        this.resultMessages.addAll(resultMessages);","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult(String... resultMessages) {","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"        this.resultMessages.addAll(Arrays.asList(resultMessages));","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"    public List\u003cString\u003e getResultMessages() {","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"        return resultMessages;","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"danxuZhang":30}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import duke.common.CommandReply;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import duke.data.exception.DuplicateTaskException;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Deadline;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":" * Adds a deadline task to the task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"            + \": add a deadline task with by time \"","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"            + \"Example: deadline prepare exam /by 31/07/2023\";","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    private final String content;","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"    private final LocalDate byTime;","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"    public DeadlineCommand(String content, LocalDate byTime) {","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"        this.byTime \u003d byTime;","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"        Task task \u003d new Deadline(content, byTime);","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"            taskList.addTask(task);","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"        } catch (DuplicateTaskException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"            return new CommandResult(CommandReply.ADD_TASK_DUPLICATE);","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"        return new CommandResult(","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"                CommandReply.ADD_TASK_HEADER,","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"                task + \"\\n\",","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"                String.format(CommandReply.ADD_TASK_TAIL_F, taskList.size())","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"        );","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"danxuZhang":41}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import duke.common.CommandReply;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import java.util.Collection;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import java.util.List;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":" * Deletes a task from the task list using its index.","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"            + \": delete a task from the task list \"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"            + \"Example: delete 1 2 3\";","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"    private final List\u003cInteger\u003e toDeleteList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"    public DeleteCommand(int... toDeleteIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"        for (int toDelete : toDeleteIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"            toDeleteList.add(toDelete);","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"    public DeleteCommand(Collection\u003cInteger\u003e toDeleteIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"        toDeleteList.addAll(toDeleteIndex);","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"        List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"        for (int toDelete : toDeleteList) {","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"                String deletedTask \u003d taskList.getTask(toDelete).toString();","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"                taskList.deleteTask(toDelete);","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"                results.add(CommandReply.DELETE_TASK_HEADER);","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"                results.add(deletedTask + \"\\n\");","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"                results.add(String.format(CommandReply.DELETE_TASK_TAIL_F, taskList.size()));","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"                results.add(String.format(CommandReply.TASK_INDEX_OUT_OF_BOUND_F, toDelete));","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"        return new CommandResult(results);","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"danxuZhang":46}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import duke.data.exception.DuplicateTaskException;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Event;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"import duke.common.CommandReply;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":" * Adds an event task to the task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"            + \": add an event task with start and to time \"","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"            + \"Example: event Hokkaido trip /from 30/07/2023 /to 01/08/2023\";","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"    private final String content;","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    private final LocalDate fromTime;","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"    private final LocalDate toTime;","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"    public EventCommand (String content, LocalDate from, LocalDate to) {","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"        this.fromTime \u003d from;","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"        this.toTime \u003d to;","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"        Task task \u003d new Event(content, fromTime, toTime);","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"            taskList.addTask(task);","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"        } catch (DuplicateTaskException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"            return new CommandResult(CommandReply.ADD_TASK_DUPLICATE);","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"        return new CommandResult(","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"                CommandReply.ADD_TASK_HEADER,","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"                task + \"\\n\",","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"                String.format(CommandReply.ADD_TASK_TAIL_F, taskList.size())","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"        );","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"danxuZhang":42}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":" * Exits the application.","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"            + \": show available commands and their usages\";","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"    public static final String EXIT_MSG \u003d \"Exiting the application as requested...\";","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"    public ExitCommand() {}","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"        return new CommandResult(EXIT_MSG);","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"     * Checks whether a command is an exit command or not.","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"     * @param toCheck command to check.","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"     * @return true if is an instance of ExitCommand else false.","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"    public static boolean isExitCommand(Command toCheck) {","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"        return toCheck instanceof ExitCommand;","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"danxuZhang":27}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import duke.common.CommandReply;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import java.util.List;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":" * Finds tasks that contains a keyword from the task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_USAGE \u003d  COMMAND_WORD","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"            + \": find a task by searching for a keyword \"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"            + \"Example: find book\";","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    public static final String FIND_HEADER \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    private final String keyword;","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"        List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"        results.add(FIND_HEADER);","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); ++i) {","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"            Task task \u003d taskList.getTask(i+1);","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"            if (task.getContent().contains(keyword)) {","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"                results.add(String.format(CommandReply.LIST_ITEM_TEMPLATE, i+1, task));","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"        return new CommandResult(results);","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"danxuZhang":36}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import java.util.List;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":" * Displays help information.","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"public class HelpCommand extends Command{","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"            + \": Show program usage instructions\";","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    private static final String HEADER \u003d \"Here are some sample usages: \\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"        List\u003cString\u003e usages \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"        usages.add(HEADER);","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"        usages.add(TodoCommand.COMMAND_USAGE);","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"        usages.add(DeadlineCommand.COMMAND_USAGE);","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"        usages.add(EventCommand.COMMAND_USAGE);","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"        usages.add(ListCommand.COMMAND_USAGE);","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"        usages.add(FindCommand.COMMAND_USAGE);","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"        usages.add(MarkCommand.COMMAND_USAGE);","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"        usages.add(UnmarkCommand.COMMAND_USAGE);","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"        usages.add(DeleteCommand.COMMAND_USAGE);","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"        usages.add(HelpCommand.COMMAND_USAGE);","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"        usages.add(ExitCommand.COMMAND_USAGE);","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"        return new CommandResult(usages);","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"danxuZhang":32}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import duke.common.CommandReply;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":" * Lists all tasks in the task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"            + \": Display all tasks in the list with their indices\";","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"    private static final String LIST_HEADER \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"    public ListCommand() {}","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"            return new CommandResult(\"You don\u0027t have any task in the list!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"        ArrayList\u003cString\u003e replayMessages \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"        replayMessages.add(LIST_HEADER);","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"        int cnt \u003d 0;","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"            cnt +\u003d 1;","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"            replayMessages.add(String.format(CommandReply.LIST_ITEM_TEMPLATE, cnt, task.toString()));","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"        return new CommandResult(replayMessages);","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"danxuZhang":34}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import java.util.Collection;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import java.util.List;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import duke.common.CommandReply;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"import duke.data.exception.DuplicateMarkException;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":" * Marks a task to be done using its index.","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"public class MarkCommand extends Command{","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"            + \": mark task(s) to be done\";","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    private final List\u003cInteger\u003e toMarkList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    public MarkCommand(int... toMarkIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"        for (int toMark : toMarkIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"            toMarkList.add(toMark);","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    public MarkCommand(Collection\u003cInteger\u003e toMarkIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"        toMarkList.addAll(toMarkIndex);","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"        List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"        for (int toMark : toMarkList) {","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"                taskList.markTask(toMark);","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"                results.add(CommandReply.MARK_TASK_SUCCESS);","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"                results.add(taskList.getTask(toMark) + \"\\n\");","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"                results.add(String.format(CommandReply.TASK_INDEX_OUT_OF_BOUND_F, toMark));","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"            } catch (DuplicateMarkException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"                results.add(String.format(CommandReply.MARK_MARKED_TASK_F, toMark));","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"        return new CommandResult(results);","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"danxuZhang":45}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import duke.data.exception.DuplicateTaskException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Todo;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import duke.common.CommandReply;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":" * Creates a todo task to the task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"            + \": add a todo task\";","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"    private final String content;","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"    public TodoCommand(String content) {","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"        Task task \u003d new Todo(content);","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"            taskList.addTask(task);","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"        } catch (DuplicateTaskException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"            return new CommandResult(\"This task is already added in the list.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"        return new CommandResult(","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"                CommandReply.ADD_TASK_HEADER,","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"                task + \"\\n\",","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"                String.format(CommandReply.ADD_TASK_TAIL_F, taskList.size())","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"        );","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"danxuZhang":36}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import java.util.Collection;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import java.util.List;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import duke.common.CommandReply;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"import duke.data.exception.DuplicateMarkException;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":" * Unmarks a task to be not done yet using its index.","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    public static final String COMMAND_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"            + \": unmark task(s)\";","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    private final List\u003cInteger\u003e toUnmarkList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    public UnmarkCommand(int... toUnmarkIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"        for (int toMark : toUnmarkIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"            toUnmarkList.add(toMark);","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    public UnmarkCommand(Collection\u003cInteger\u003e toUnmarkIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"        toUnmarkList.addAll(toUnmarkIndex);","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"        List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"        for (int toUnmark : toUnmarkList) {","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"                taskList.unmarkTask(toUnmark);","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"                results.add(CommandReply.UNMARK_TASK_SUCCESS);","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"                results.add(taskList.getTask(toUnmark) + \"\\n\");","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"                results.add(String.format(CommandReply.TASK_INDEX_OUT_OF_BOUND_F, toUnmark));","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"            } catch (DuplicateMarkException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"                results.add(String.format(CommandReply.UNMARK_UNMARKED_TASK_F, toUnmark));","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"        return new CommandResult(results);","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"danxuZhang":45}},{"path":"src/main/java/duke/common/CommandReply.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.common;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":" * Keeps some common strings and formatted strings for replaying commands.","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"public class CommandReply {","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"    public static final String ADD_TASK_HEADER \u003d \"Got it. I\u0027ve added this task: \\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"    public static final String ADD_TASK_TAIL_F \u003d \"Now you have %d tasks in the list.\";","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"    public static final String ADD_TASK_DUPLICATE \u003d \"This task is already added in the list.\";","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"    public static final String TASK_INDEX_OUT_OF_BOUND_F \u003d \"The input task index %d is out of bound!\";","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"    public static final String MARK_TASK_SUCCESS \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    public static final String MARK_MARKED_TASK_F \u003d \"Task no. %d is already marked!\";","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    public static final String UNMARK_TASK_SUCCESS \u003d \"OK, I\u0027ve marked this task as not done yet:\\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"    public static final String UNMARK_UNMARKED_TASK_F \u003d \"Task no. %d is already not marked!\";","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"    public static final String DELETE_TASK_HEADER  \u003d \"Noted. I\u0027ve removed this task:\\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    public static final String DELETE_TASK_TAIL_F \u003d \"Now you have %d tasks in the list.\";","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"    public static final String LIST_ITEM_TEMPLATE \u003d \"- %d. %s\";","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"danxuZhang":23}},{"path":"src/main/java/duke/common/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.common;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":" * Keeps messages to be shown to users.","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"public class Messages {","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"    public static final String SPACER \u003d \"\\t \";","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"    public static final String LOGO \u003d SPACER + \" ____        _        \\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"            + SPACER + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"            + SPACER +\"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"            + SPACER +\"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"            + SPACER +\"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"    public static final String DIVIDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    public static final String MSG_GREETINGS \u003d \"Hello from\\n\" + LOGO;","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    public static final String MSG_INTRODUCTION \u003d \"Hello! I\u0027m Tohru. What can I do for you?\";","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"    public static final String MSG_GOODBYE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"danxuZhang":17}},{"path":"src/main/java/duke/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.parser;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import java.util.List;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":" * Parses user input to command.","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"public final class CommandParser {","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    private static final String OOPS \u003d \"☹ OOPS!!! \";","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"    public CommandParser() {}","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"     * Parses raw user input text command to an executable command object.","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"     * @param userInputCommand raw text of user input.","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"     * @return an executable command object.","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException if the user input is not valid.","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"    public Command parseCommand(String userInputCommand) throws IllegalArgumentException {","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"        String[] args \u003d userInputCommand.split(\" \");","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"        switch (args[0]) {","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"        case TodoCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"            return parseTodo(args);","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"            return parseDeadline(args);","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"            return parseEvent(args);","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"            return new ListCommand();","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"            return parseFind(args);","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"            return parseMark(args);","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"        case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"            return parseUnmark(args);","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"danxuZhang"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"danxuZhang"},"content":"            return parseDelete(args);","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"danxuZhang"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"danxuZhang"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"danxuZhang"},"content":"        case HelpCommand.COMMAND_WORD: //fall through","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"danxuZhang"},"content":"        default:","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"danxuZhang"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"danxuZhang"},"content":"     * Parses user input text arguments to an executable TodoCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"danxuZhang"},"content":"     * @param args text arguments to create the TodoCommand with description.","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"danxuZhang"},"content":"     * @return an executable TodoCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException if the description is empty.","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"danxuZhang"},"content":"    private Command parseTodo(String[] args) throws  IllegalArgumentException {","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(TodoCommand.COMMAND_WORD);","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 1; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"danxuZhang"},"content":"            sb.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"danxuZhang"},"content":"        if (sb.toString().isEmpty()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":77,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"danxuZhang"},"content":"        String content \u003d sb.toString().trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"danxuZhang"},"content":"        return new TodoCommand(content);","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":82,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"danxuZhang"},"content":"     * Parses user input text arguments to an executable DeadlineCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"danxuZhang"},"content":"     * @param args text arguments to create the DeadlineCommand with description and by date.","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"danxuZhang"},"content":"     * @return an executable DeadlineCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException if the description or by date is empty, or invalid date format.","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"danxuZhang"},"content":"    private Command parseDeadline(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(DeadlineCommand.COMMAND_WORD);","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder contentSb \u003d new StringBuilder();","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder bySb \u003d new StringBuilder();","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"danxuZhang"},"content":"        int byIndex \u003d -1;","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 0; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"danxuZhang"},"content":"            if (args[i].equals(\"/by\")) {","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"danxuZhang"},"content":"                byIndex \u003d i;","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":98,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":100,"author":{"gitId":"danxuZhang"},"content":"        if (byIndex \u003d\u003d -1) {","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"Cannot find the by time of the event.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":103,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":104,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 1; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-26"},{"lineNumber":105,"author":{"gitId":"danxuZhang"},"content":"            if (i \u003d\u003d byIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":106,"author":{"gitId":"danxuZhang"},"content":"                continue;","lastModifiedDate":"2023-02-26"},{"lineNumber":107,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":108,"author":{"gitId":"danxuZhang"},"content":"            if (i \u003c byIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":109,"author":{"gitId":"danxuZhang"},"content":"                contentSb.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-26"},{"lineNumber":110,"author":{"gitId":"danxuZhang"},"content":"            } else {","lastModifiedDate":"2023-02-26"},{"lineNumber":111,"author":{"gitId":"danxuZhang"},"content":"                bySb.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-26"},{"lineNumber":112,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":113,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":114,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":115,"author":{"gitId":"danxuZhang"},"content":"        if (contentSb.toString().isEmpty()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":116,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":117,"author":{"gitId":"danxuZhang"},"content":"        } else if (bySb.toString().isEmpty()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":118,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"The by time of a deadline cannot be empty.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":119,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":120,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":121,"author":{"gitId":"danxuZhang"},"content":"        String content \u003d contentSb.toString().trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":122,"author":{"gitId":"danxuZhang"},"content":"        String by \u003d bySb.toString().trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":123,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":124,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":125,"author":{"gitId":"danxuZhang"},"content":"            LocalDate byDate \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2023-02-26"},{"lineNumber":126,"author":{"gitId":"danxuZhang"},"content":"            return new DeadlineCommand(content, byDate);","lastModifiedDate":"2023-02-26"},{"lineNumber":127,"author":{"gitId":"danxuZhang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":128,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"Invalid date time. Format: dd/mm/yyyy\");","lastModifiedDate":"2023-03-01"},{"lineNumber":129,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":130,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":131,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":132,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":133,"author":{"gitId":"danxuZhang"},"content":"     * Parses user input text arguments to an executable EventCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":134,"author":{"gitId":"danxuZhang"},"content":"     * @param args text arguments to create the EventCommand with description, from and to dates.","lastModifiedDate":"2023-03-01"},{"lineNumber":135,"author":{"gitId":"danxuZhang"},"content":"     * @return an executable EventCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":136,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException if the description/from/to are empty, or invalid date format.","lastModifiedDate":"2023-03-01"},{"lineNumber":137,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":138,"author":{"gitId":"danxuZhang"},"content":"    private Command parseEvent(String[] args) throws IllegalArgumentException{","lastModifiedDate":"2023-02-26"},{"lineNumber":139,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(EventCommand.COMMAND_WORD);","lastModifiedDate":"2023-03-01"},{"lineNumber":140,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder contentSb \u003d new StringBuilder();","lastModifiedDate":"2023-02-26"},{"lineNumber":141,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder fromSb \u003d new StringBuilder();","lastModifiedDate":"2023-02-26"},{"lineNumber":142,"author":{"gitId":"danxuZhang"},"content":"        StringBuilder toSb \u003d new StringBuilder();","lastModifiedDate":"2023-02-26"},{"lineNumber":143,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":144,"author":{"gitId":"danxuZhang"},"content":"        int fromIndex \u003d -1;","lastModifiedDate":"2023-02-26"},{"lineNumber":145,"author":{"gitId":"danxuZhang"},"content":"        int toIndex \u003d -1;","lastModifiedDate":"2023-02-26"},{"lineNumber":146,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 0; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-26"},{"lineNumber":147,"author":{"gitId":"danxuZhang"},"content":"            if (args[i].equals(\"/from\")) {","lastModifiedDate":"2023-02-26"},{"lineNumber":148,"author":{"gitId":"danxuZhang"},"content":"                fromIndex \u003d i;","lastModifiedDate":"2023-02-26"},{"lineNumber":149,"author":{"gitId":"danxuZhang"},"content":"            } else if (args[i].equals(\"/to\")) {","lastModifiedDate":"2023-02-26"},{"lineNumber":150,"author":{"gitId":"danxuZhang"},"content":"                toIndex \u003d i;","lastModifiedDate":"2023-02-26"},{"lineNumber":151,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":152,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":153,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":154,"author":{"gitId":"danxuZhang"},"content":"        if (fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1) {","lastModifiedDate":"2023-02-26"},{"lineNumber":155,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"Cannot find from or to time of the event!\");","lastModifiedDate":"2023-02-26"},{"lineNumber":156,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":157,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":158,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 1; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-26"},{"lineNumber":159,"author":{"gitId":"danxuZhang"},"content":"            if (i \u003c fromIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":160,"author":{"gitId":"danxuZhang"},"content":"                contentSb.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-26"},{"lineNumber":161,"author":{"gitId":"danxuZhang"},"content":"            } else if (i \u003e fromIndex \u0026\u0026 i \u003c toIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":162,"author":{"gitId":"danxuZhang"},"content":"                fromSb.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-26"},{"lineNumber":163,"author":{"gitId":"danxuZhang"},"content":"            } else if (i \u003e toIndex) {","lastModifiedDate":"2023-02-26"},{"lineNumber":164,"author":{"gitId":"danxuZhang"},"content":"                toSb.append(args[i]).append(\" \");","lastModifiedDate":"2023-02-26"},{"lineNumber":165,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":166,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":167,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":168,"author":{"gitId":"danxuZhang"},"content":"        if (contentSb.toString().isEmpty() || fromSb.toString().isEmpty() || toSb.toString().isEmpty()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":169,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"The content/from/to of an event cannot be empty!\");","lastModifiedDate":"2023-02-26"},{"lineNumber":170,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":171,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":172,"author":{"gitId":"danxuZhang"},"content":"        String content \u003d contentSb.toString().trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":173,"author":{"gitId":"danxuZhang"},"content":"        String from \u003d fromSb.toString().trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":174,"author":{"gitId":"danxuZhang"},"content":"        String to \u003d toSb.toString().trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":175,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":176,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":177,"author":{"gitId":"danxuZhang"},"content":"            LocalDate fromDate \u003d LocalDate.parse(from, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2023-02-26"},{"lineNumber":178,"author":{"gitId":"danxuZhang"},"content":"            LocalDate toDate \u003d LocalDate.parse(to, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2023-02-26"},{"lineNumber":179,"author":{"gitId":"danxuZhang"},"content":"            return new EventCommand(content, fromDate, toDate);","lastModifiedDate":"2023-02-26"},{"lineNumber":180,"author":{"gitId":"danxuZhang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":181,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"Invalid date time. Format: dd/mm/yyyy\");","lastModifiedDate":"2023-03-01"},{"lineNumber":182,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":183,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":184,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":185,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":186,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":187,"author":{"gitId":"danxuZhang"},"content":"     * Parses user input text arguments to an executable FindCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":188,"author":{"gitId":"danxuZhang"},"content":"     * @param args keyword to find.","lastModifiedDate":"2023-03-01"},{"lineNumber":189,"author":{"gitId":"danxuZhang"},"content":"     * @return an executable FindCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":190,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException when there is no keyword or more than one keywords.","lastModifiedDate":"2023-03-01"},{"lineNumber":191,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":192,"author":{"gitId":"danxuZhang"},"content":"    private Command parseFind(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-26"},{"lineNumber":193,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(FindCommand.COMMAND_WORD);","lastModifiedDate":"2023-02-26"},{"lineNumber":194,"author":{"gitId":"danxuZhang"},"content":"        if (args.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-26"},{"lineNumber":195,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"Cannot find keyword to search.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":196,"author":{"gitId":"danxuZhang"},"content":"        } else if (args.length \u003e 2) {","lastModifiedDate":"2023-02-26"},{"lineNumber":197,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"Can only search for one keyword.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":198,"author":{"gitId":"danxuZhang"},"content":"        } else { //args.length \u003d\u003d 2","lastModifiedDate":"2023-02-26"},{"lineNumber":199,"author":{"gitId":"danxuZhang"},"content":"            String keyword \u003d args[1];","lastModifiedDate":"2023-02-26"},{"lineNumber":200,"author":{"gitId":"danxuZhang"},"content":"            return new FindCommand(keyword);","lastModifiedDate":"2023-02-26"},{"lineNumber":201,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":202,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":203,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":204,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":205,"author":{"gitId":"danxuZhang"},"content":"     * Parses user input text arguments to an executable MarkCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":206,"author":{"gitId":"danxuZhang"},"content":"     * @param args index(es) of the task(s) to mark.","lastModifiedDate":"2023-03-01"},{"lineNumber":207,"author":{"gitId":"danxuZhang"},"content":"     * @return an executable MarkCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":208,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException if no task to mark or input id is not a number.","lastModifiedDate":"2023-03-01"},{"lineNumber":209,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":210,"author":{"gitId":"danxuZhang"},"content":"    private Command parseMark(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-26"},{"lineNumber":211,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(MarkCommand.COMMAND_WORD);","lastModifiedDate":"2023-03-01"},{"lineNumber":212,"author":{"gitId":"danxuZhang"},"content":"        if (args.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-26"},{"lineNumber":213,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"Cannot find task to mark.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":214,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":215,"author":{"gitId":"danxuZhang"},"content":"        if (args.length \u003d\u003d 2) {","lastModifiedDate":"2023-02-26"},{"lineNumber":216,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-02-26"},{"lineNumber":217,"author":{"gitId":"danxuZhang"},"content":"                return new MarkCommand(Integer.parseInt(args[1]));","lastModifiedDate":"2023-02-26"},{"lineNumber":218,"author":{"gitId":"danxuZhang"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":219,"author":{"gitId":"danxuZhang"},"content":"                throw new IllegalArgumentException(OOPS + args[1] + \" is not a valid number!\");","lastModifiedDate":"2023-02-26"},{"lineNumber":220,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":221,"author":{"gitId":"danxuZhang"},"content":"        } else {","lastModifiedDate":"2023-02-26"},{"lineNumber":222,"author":{"gitId":"danxuZhang"},"content":"            return new MarkCommand(parseArgsToInt(args, 1));","lastModifiedDate":"2023-02-26"},{"lineNumber":223,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":224,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":225,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":226,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":227,"author":{"gitId":"danxuZhang"},"content":"     * Parses user input text arguments to an executable UnmarkCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":228,"author":{"gitId":"danxuZhang"},"content":"     * @param args index(es) of the task(s) to unmark.","lastModifiedDate":"2023-03-01"},{"lineNumber":229,"author":{"gitId":"danxuZhang"},"content":"     * @return an executable UnmarkCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":230,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException if no task to unmark or input id is not a number.","lastModifiedDate":"2023-03-01"},{"lineNumber":231,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":232,"author":{"gitId":"danxuZhang"},"content":"    private Command parseUnmark(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-26"},{"lineNumber":233,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(UnmarkCommand.COMMAND_WORD);","lastModifiedDate":"2023-03-01"},{"lineNumber":234,"author":{"gitId":"danxuZhang"},"content":"        if (args.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-26"},{"lineNumber":235,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"Cannot find task to mark.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":236,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":237,"author":{"gitId":"danxuZhang"},"content":"        if (args.length \u003d\u003d 2) {","lastModifiedDate":"2023-02-26"},{"lineNumber":238,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-02-26"},{"lineNumber":239,"author":{"gitId":"danxuZhang"},"content":"                return new UnmarkCommand(Integer.parseInt(args[1]));","lastModifiedDate":"2023-02-26"},{"lineNumber":240,"author":{"gitId":"danxuZhang"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":241,"author":{"gitId":"danxuZhang"},"content":"                throw new IllegalArgumentException(OOPS + args[1] + \" is not a valid number!\");","lastModifiedDate":"2023-02-26"},{"lineNumber":242,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":243,"author":{"gitId":"danxuZhang"},"content":"        } else {","lastModifiedDate":"2023-02-26"},{"lineNumber":244,"author":{"gitId":"danxuZhang"},"content":"            return new UnmarkCommand(parseArgsToInt(args, 1));","lastModifiedDate":"2023-02-26"},{"lineNumber":245,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":246,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":247,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":248,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":249,"author":{"gitId":"danxuZhang"},"content":"     * Parses user input text arguments to an executable UnmarkCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":250,"author":{"gitId":"danxuZhang"},"content":"     * @param args index(es) of the task(s) to delete.","lastModifiedDate":"2023-03-01"},{"lineNumber":251,"author":{"gitId":"danxuZhang"},"content":"     * @return an executable DeleteCommand.","lastModifiedDate":"2023-03-01"},{"lineNumber":252,"author":{"gitId":"danxuZhang"},"content":"     * @throws IllegalArgumentException if no task to delete or input id is not a number.","lastModifiedDate":"2023-03-01"},{"lineNumber":253,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":254,"author":{"gitId":"danxuZhang"},"content":"    private Command parseDelete(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-26"},{"lineNumber":255,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(DeleteCommand.COMMAND_WORD);","lastModifiedDate":"2023-02-26"},{"lineNumber":256,"author":{"gitId":"danxuZhang"},"content":"        if (args.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-26"},{"lineNumber":257,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(OOPS + \"Cannot find task to delete.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":258,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":259,"author":{"gitId":"danxuZhang"},"content":"        if (args.length \u003d\u003d 2) {","lastModifiedDate":"2023-02-26"},{"lineNumber":260,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-02-26"},{"lineNumber":261,"author":{"gitId":"danxuZhang"},"content":"                return new DeleteCommand(Integer.parseInt(args[1]));","lastModifiedDate":"2023-02-26"},{"lineNumber":262,"author":{"gitId":"danxuZhang"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":263,"author":{"gitId":"danxuZhang"},"content":"                throw new IllegalArgumentException(OOPS + args[1] + \" is not a valid number!\");","lastModifiedDate":"2023-02-26"},{"lineNumber":264,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":265,"author":{"gitId":"danxuZhang"},"content":"        } else {","lastModifiedDate":"2023-02-26"},{"lineNumber":266,"author":{"gitId":"danxuZhang"},"content":"            return new UnmarkCommand(parseArgsToInt(args, 1));","lastModifiedDate":"2023-02-26"},{"lineNumber":267,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":268,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":269,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":270,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":271,"author":{"gitId":"danxuZhang"},"content":"     * A helper method to parse string arguments of numbers to a list of integers.","lastModifiedDate":"2023-03-01"},{"lineNumber":272,"author":{"gitId":"danxuZhang"},"content":"     * @param args string arguments of numbers.","lastModifiedDate":"2023-03-01"},{"lineNumber":273,"author":{"gitId":"danxuZhang"},"content":"     * @param startId starting id to parse.","lastModifiedDate":"2023-03-01"},{"lineNumber":274,"author":{"gitId":"danxuZhang"},"content":"     * @return parsing result.","lastModifiedDate":"2023-03-01"},{"lineNumber":275,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":276,"author":{"gitId":"danxuZhang"},"content":"    private List\u003cInteger\u003e parseArgsToInt(String[] args, int startId) {","lastModifiedDate":"2023-03-01"},{"lineNumber":277,"author":{"gitId":"danxuZhang"},"content":"        List\u003cInteger\u003e toParse \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-01"},{"lineNumber":278,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d startId; i \u003c args.length; ++i) {","lastModifiedDate":"2023-03-01"},{"lineNumber":279,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-03-01"},{"lineNumber":280,"author":{"gitId":"danxuZhang"},"content":"                int id \u003d Integer.parseInt(args[i]);","lastModifiedDate":"2023-03-01"},{"lineNumber":281,"author":{"gitId":"danxuZhang"},"content":"                toParse.add(id);","lastModifiedDate":"2023-03-01"},{"lineNumber":282,"author":{"gitId":"danxuZhang"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":283,"author":{"gitId":"danxuZhang"},"content":"                throw new IllegalArgumentException(OOPS + args[i] + \" is not a valid number!\");","lastModifiedDate":"2023-03-01"},{"lineNumber":284,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":285,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":286,"author":{"gitId":"danxuZhang"},"content":"        return toParse;","lastModifiedDate":"2023-03-01"},{"lineNumber":287,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":288,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"danxuZhang":288}},{"path":"src/main/java/duke/parser/CsvParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.parser;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import java.util.UnknownFormatConversionException;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Deadline;","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Event;","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Todo;","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":" * Parses a csv line to a Task object.","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"public class CsvParser {","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    private static final String OTHER_THAN_QUOTE_REGEX \u003d \" [^\\\"] \";","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"    private static final String QUOTED_STRING_REGEX \u003d String.format(\" \\\" %s* \\\" \", OTHER_THAN_QUOTE_REGEX);","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"    /** Regex to extract content between quotes. (e.g. extract hello from \"hello\") */","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"    private static final String BETWEEN_QUOTES_REGEX \u003d String.format(\"(?x) \" // enable comments, ignore white spaces","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"                    + \",                         \" // match a comma","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"                    + \"(?\u003d                       \" // start positive look ahead","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"                    + \"  (?:                     \" //   start non-capturing group 1","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"                    + \"    %s*                   \" //     match \u0027otherThanQuote\u0027 zero or more times","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"                    + \"    %s                    \" //     match \u0027quotedString\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"                    + \"  )*                      \" //   end group 1 and repeat it zero or more times","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"                    + \"  %s*                     \" //   match \u0027otherThanQuote\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"                    + \"  $                       \" // match the end of the string","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"                    + \")                         \", // stop positive look ahead","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"            OTHER_THAN_QUOTE_REGEX, QUOTED_STRING_REGEX, OTHER_THAN_QUOTE_REGEX);","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"    public CsvParser() {}","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"     * Parses a line of CSV file to a Task object/","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"     * @param line a CSV line (line seperated by comma).","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"     * @return a Task object/","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"    public Task parseLine(String line) {","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"        String[] args \u003d splitCsvLine(line);","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"        switch (args[0]) {","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"        case TodoCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"            return parseTodo(args);","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"            return parseDeadline(args);","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"            return parseEvent(args);","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"        default:","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"            throw new UnknownFormatConversionException(\"Unknown command word!\");","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"danxuZhang"},"content":"    private String[] splitCsvLine(String line) {","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"danxuZhang"},"content":"        String[] args \u003d line.split(BETWEEN_QUOTES_REGEX, -1);","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"danxuZhang"},"content":"        for (int i \u003d 0; i \u003c args.length; ++i) {","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"danxuZhang"},"content":"            String arg \u003d args[i];","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"danxuZhang"},"content":"            if (arg.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 arg.charAt(arg.length()-1) \u003d\u003d \u0027\\\"\u0027) {","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"danxuZhang"},"content":"                args[i] \u003d arg.substring(1, arg.length()-1);","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":63,"author":{"gitId":"danxuZhang"},"content":"        return args;","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"danxuZhang"},"content":"    private Task parseTodo(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-26"},{"lineNumber":67,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(TodoCommand.COMMAND_WORD);","lastModifiedDate":"2023-02-26"},{"lineNumber":68,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":69,"author":{"gitId":"danxuZhang"},"content":"            boolean isMarked \u003d (Integer.parseInt(args[1]) \u003d\u003d 1);","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"danxuZhang"},"content":"            String content \u003d args[2];","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"danxuZhang"},"content":"            return new Todo(content, isMarked);","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"danxuZhang"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"Format conversion failed.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":77,"author":{"gitId":"danxuZhang"},"content":"    private Task parseDeadline(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-26"},{"lineNumber":78,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(DeadlineCommand.COMMAND_WORD);","lastModifiedDate":"2023-02-26"},{"lineNumber":79,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":80,"author":{"gitId":"danxuZhang"},"content":"            boolean isMarked \u003d (Integer.parseInt(args[1]) \u003d\u003d 1);","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"danxuZhang"},"content":"            String content \u003d args[2];","lastModifiedDate":"2023-02-26"},{"lineNumber":82,"author":{"gitId":"danxuZhang"},"content":"            String byTime \u003d args[3];","lastModifiedDate":"2023-02-26"},{"lineNumber":83,"author":{"gitId":"danxuZhang"},"content":"            LocalDate byDate \u003d LocalDate.parse(byTime);","lastModifiedDate":"2023-02-26"},{"lineNumber":84,"author":{"gitId":"danxuZhang"},"content":"            return new Deadline(content, byDate, isMarked);","lastModifiedDate":"2023-02-26"},{"lineNumber":85,"author":{"gitId":"danxuZhang"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":86,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"Number format conversion failed.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":87,"author":{"gitId":"danxuZhang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":88,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"Date time format conversion failed.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":90,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"danxuZhang"},"content":"    private Task parseEvent(String[] args) throws IllegalArgumentException {","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"danxuZhang"},"content":"        assert args[0].equals(EventCommand.COMMAND_WORD);","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"danxuZhang"},"content":"            boolean isMarked \u003d (Integer.parseInt(args[1]) \u003d\u003d 1);","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"danxuZhang"},"content":"            String content \u003d args[2];","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"danxuZhang"},"content":"            String fromTime \u003d args[3];","lastModifiedDate":"2023-02-26"},{"lineNumber":98,"author":{"gitId":"danxuZhang"},"content":"            String toTime \u003d args[4];","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"danxuZhang"},"content":"            LocalDate fromDate \u003d LocalDate.parse(fromTime);","lastModifiedDate":"2023-02-26"},{"lineNumber":100,"author":{"gitId":"danxuZhang"},"content":"            LocalDate toDate \u003d LocalDate.parse(toTime);","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"danxuZhang"},"content":"            return new Event(content, fromDate, toDate, isMarked);","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"danxuZhang"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":103,"author":{"gitId":"danxuZhang"},"content":"            throw new IllegalArgumentException(\"Format conversion failed.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":104,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":105,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":106,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"danxuZhang":106}},{"path":"src/main/java/duke/storage/StorageFile.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.storage;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.io.File;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"import duke.data.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"import duke.data.exception.DuplicateTaskException;","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"import duke.parser.CsvParser;","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":" * Represents the file used to store user data (task list).","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"public final class StorageFile {","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"    /** Default file directory used to store user data. */","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"    private static final String DEFAULT_DIR \u003d \"data\";","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"    /** Default file name used to store user data. */","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"    private static final String DEFAULT_FILE \u003d \"duke.csv\";","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    /** Default file path (dir + file name) used to  store user data. */","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"    private static final String DEFAULT_FILE_PATH \u003d DEFAULT_DIR + \"/\" + DEFAULT_FILE;","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"    /** Path used for storing user data.*/","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"    private final Path path;","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"    public StorageFile() {","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"        this(DEFAULT_FILE_PATH);","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"    public StorageFile(String filePath) {","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"        path \u003d Paths.get(filePath);","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"    public String getPath() {","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"        return path.toString();","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"     * Writes the task list to a CSV file.","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"     * @param taskList task list to be written.","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"     * @throws IOException when the storage file cannot be found or opened.","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"    public void writeCsv(TaskList taskList) throws IOException {","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"        FileWriter fw \u003d new FileWriter(path.toFile());","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"            fw.write(task.toCSV() + System.lineSeparator());","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"        fw.close();","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"danxuZhang"},"content":"     * Initializes the CSV file used for storing task list, creates one if there does not exist.","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"danxuZhang"},"content":"    public void initCsv() {","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"danxuZhang"},"content":"        File directory \u003d new File(DEFAULT_DIR);","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"danxuZhang"},"content":"            assert directory.mkdir();","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"danxuZhang"},"content":"        } catch (AssertionError ae) {","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(\"Directory already exists.\");","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"danxuZhang"},"content":"        File file \u003d new File(DEFAULT_DIR + \"/\" + DEFAULT_FILE);","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"danxuZhang"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":67,"author":{"gitId":"danxuZhang"},"content":"            assert file.createNewFile();","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"danxuZhang"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(ioe.getMessage());","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"danxuZhang"},"content":"            ioe.printStackTrace();","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"danxuZhang"},"content":"        } catch (AssertionError ae){","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"danxuZhang"},"content":"            System.err.println(\"File already exists.\");","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"danxuZhang"},"content":"     * Loads task list from CSV file.","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"danxuZhang"},"content":"     * @param taskList task list to be loaded.","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"danxuZhang"},"content":"     * @return number of lines successfully loaded.","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"danxuZhang"},"content":"     * @throws FileNotFoundException if the csv file is empty.","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"danxuZhang"},"content":"    public int loadCsv(TaskList taskList) throws FileNotFoundException {","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"danxuZhang"},"content":"        File file \u003d new File(path.toFile().toURI());","lastModifiedDate":"2023-02-26"},{"lineNumber":84,"author":{"gitId":"danxuZhang"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":85,"author":{"gitId":"danxuZhang"},"content":"            throw new FileNotFoundException();","lastModifiedDate":"2023-02-26"},{"lineNumber":86,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":87,"author":{"gitId":"danxuZhang"},"content":"        Scanner fileScanner \u003d new Scanner(file);","lastModifiedDate":"2023-02-26"},{"lineNumber":88,"author":{"gitId":"danxuZhang"},"content":"        int cnt \u003d 0;","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"danxuZhang"},"content":"        int cnt_success \u003d 0;","lastModifiedDate":"2023-02-26"},{"lineNumber":90,"author":{"gitId":"danxuZhang"},"content":"        while (fileScanner.hasNext()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"danxuZhang"},"content":"            cnt +\u003d 1;","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"danxuZhang"},"content":"            try {","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"danxuZhang"},"content":"                taskList.addTask(new CsvParser().parseLine(fileScanner.nextLine()));","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"danxuZhang"},"content":"                cnt_success +\u003d 1;","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"danxuZhang"},"content":"            } catch (DuplicateTaskException | IllegalArgumentException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"danxuZhang"},"content":"                System.err.printf(\"Failed to load line %d.\\n\", cnt);","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"danxuZhang"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":98,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"danxuZhang"},"content":"        return cnt_success;","lastModifiedDate":"2023-02-26"},{"lineNumber":100,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"danxuZhang":102}},{"path":"src/main/java/duke/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"package duke.ui;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"import java.util.List;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"import duke.command.CommandResult;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"import duke.common.Messages;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"danxuZhang"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"danxuZhang"},"content":" * Text UI of this command line application.","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"danxuZhang"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"danxuZhang"},"content":"public final class TextUi {","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"danxuZhang"},"content":"    private static final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"danxuZhang"},"content":"    public TextUi() {","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"danxuZhang"},"content":"    public void printDivider() {","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(Messages.DIVIDER);","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"danxuZhang"},"content":"     * Prints a welcome message to the user with current application version.","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"danxuZhang"},"content":"     * @param version current application version.","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"danxuZhang"},"content":"    public void printWelcomeMsg(String version) {","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(Messages.SPACER + Messages.MSG_GREETINGS);","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(Messages.SPACER + \"Version: \" + version);","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"danxuZhang"},"content":"     * Prints a message introducing the application.","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"danxuZhang"},"content":"    public void printIntroMsg() {","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(Messages.SPACER + Messages.MSG_INTRODUCTION);","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"danxuZhang"},"content":"     * Prints a goodbye message to the user.","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"danxuZhang"},"content":"    public void printGoodByeMsg() {","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(Messages.SPACER + Messages.MSG_GOODBYE);","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"danxuZhang"},"content":"     * Print a message string to the user.","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"danxuZhang"},"content":"     * @param msg message to be shown.","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"danxuZhang"},"content":"    public void printMessage(String msg) {","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(Messages.SPACER + msg);","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"danxuZhang"},"content":"     * Print multiple messages to the user.","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"danxuZhang"},"content":"     * @param messages messages to be shown.","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"danxuZhang"},"content":"    public void printMultiMessage(String... messages) {","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"danxuZhang"},"content":"        for (String msg : messages) {","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(Messages.SPACER + msg);","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"danxuZhang"},"content":"     * Prints the execution result to the user.","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"danxuZhang"},"content":"     * @param result command execution result.","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"danxuZhang"},"content":"    public void printResult(CommandResult result) {","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"danxuZhang"},"content":"        List\u003cString\u003e resultMessages \u003d result.getResultMessages();","lastModifiedDate":"2023-02-26"},{"lineNumber":68,"author":{"gitId":"danxuZhang"},"content":"        for (String msg : resultMessages) {","lastModifiedDate":"2023-02-26"},{"lineNumber":69,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(Messages.SPACER + msg);","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"danxuZhang"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"danxuZhang"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"danxuZhang"},"content":"     * Gets raw user input command and loops until the user input is not empty.","lastModifiedDate":"2023-03-01"},{"lineNumber":75,"author":{"gitId":"danxuZhang"},"content":"     * @return a raw text string of user input command.","lastModifiedDate":"2023-03-01"},{"lineNumber":76,"author":{"gitId":"danxuZhang"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"danxuZhang"},"content":"    public String getUserCommand() {","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"danxuZhang"},"content":"        System.out.println(Messages.SPACER + \"Enter command: \");","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"danxuZhang"},"content":"        String input \u003d scanner.nextLine().trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"danxuZhang"},"content":"        while (input.isEmpty()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"danxuZhang"},"content":"            System.out.println(Messages.SPACER + \"Input is empty!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"danxuZhang"},"content":"            input \u003d scanner.nextLine().trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"danxuZhang"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"danxuZhang"},"content":"        return input;","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"danxuZhang"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"danxuZhang"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"danxuZhang":86}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danxuZhang"},"content":"todo read book","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"danxuZhang"},"content":"mark 1","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"danxuZhang"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"danxuZhang"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"danxuZhang"},"content":"todo join sports club","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"danxuZhang"},"content":"mark 4","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"danxuZhang"},"content":"bye","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"danxuZhang":7}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"danxuZhang"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"danxuZhang":1,"-":37}}]
