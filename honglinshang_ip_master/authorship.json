[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"# Duke Individual Project","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"This is an organiser to help you keep track of your tasks. ","lastModifiedDate":"2023-02-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"## Using Duke","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"On opening, Duke should greet you with this","lastModifiedDate":"2023-02-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"|  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"| | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"| |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"|____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"## Loading Save File","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"The default path for the save file has been defined in ```Duke.java```  ","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"On opening, Duke will read and parse the contents in the save file to initialise your task list.  ","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"*If there are any errors with the data in the save file, a warning will be shown after the welcome message.*  ","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"Each time the task list is updated, Duke will automatically overwrite the save file to the latest version.  ","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"There is no need to save the task list before exiting the program. ","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"## List of Commands","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"- Enter ```help``` to see a list of commands that are available in Duke","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"- Enter ```list``` to see the complete list of all tasks","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"- Enter ```todo [task]``` to add a task to the list","lastModifiedDate":"2023-02-09"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"- Enter ```deadline [task] /by [date]``` to add a task that need to be done before a specific date/time","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"- Enter ```event [task] /from [date] /to [date]``` to add a task that starts and ends at a specific date/time","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"- Enter ```mark [idx]``` based on the task\u0027s index in the list to mark it as done ","lastModifiedDate":"2023-02-09"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"- Enter ```unmark [idx]``` based on the task\u0027s index in the list to mark it as not done ","lastModifiedDate":"2023-02-09"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"- Enter ```delete [idx]``` based on the task\u0027s index in the list to remove the task from your list","lastModifiedDate":"2023-02-14"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"- Enter ```find [keyword]``` to see all tasks containing the keyword","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"- Enter ```date [yyyy-MM-dd]``` to see all tasks occurring on that date","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"- Enter ```bye``` to exit the program  ","lastModifiedDate":"2023-02-09"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"\u003e #### Using the ```date``` function","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"\u003e The ```date``` function will only work for Deadlines and Events with ```[date]``` entered as ```[yyyy-MM-ddTHH:mm]```       ","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"\u003e eg. ```deadline read book /by 2023-10-30T23:59``` sets a deadline for Oct 20 2023, 11:59PM","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":31,"-":13}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.exception.EmptyDescException;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.exception.IllegalCommandException;","lastModifiedDate":"2023-02-14"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidDateTime;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidDeadline;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidEvent;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":" * Main class for running Duke","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"public class Duke {","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"    public static final String FILE_PATH \u003d \"/Users/linshang/Documents/cs2113/ip/save.txt\";","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     * Initialises Duke by loading in data from save file.","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"     * Sets up Ui, Storage, and Tasklist.","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"     * @param filePath location of the local save file","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"        ui.printWelcomeMessage();","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-22"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"            storage.update();","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"            Ui.printErrorForIO();","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"     * Continuously reads, executes, and prints outputs of user commands until ExitCommand is called.","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"    public void run() {","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"        while (!isExit) {","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"            try {","lastModifiedDate":"2023-02-09"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"                ui.showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"                Command c \u003d Parser.parseCommand(fullCommand);","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"                isExit \u003d c.getExit();","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"            } catch (IllegalCommandException e) {","lastModifiedDate":"2023-02-09"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"                ui.printInvalidCommand();","lastModifiedDate":"2023-02-22"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"            } catch (EmptyDescException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"                ui.printEmptyDescription();","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-14"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"                ui.printErrorForIdx(tasks.getSize());","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"            } catch (InvalidDeadline e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"                ui.printInvalidDeadline();","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"            } catch (InvalidEvent e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"                ui.printInvalidEvent();","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"            } catch (InvalidDateTime e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"                ui.printInvalidDateTime();","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"            } finally {","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"                ui.showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-09"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"     * Main method. Initialises and runs Duke","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-22"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"        new Duke(FILE_PATH).run();","lastModifiedDate":"2023-02-22"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"        System.exit(0);","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"honglinshang":78,"-":1}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.command.DateCommand;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"import duke.command.ModifyCommand;","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"import duke.exception.EmptyDescException;","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"import duke.exception.IllegalCommandException;","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidDateTime;","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidDeadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidEvent;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":" * Parser class that makes sense of user commands or text.","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"public class Parser {","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"    // User command words understood by Duke","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_EXIT_WORD \u003d \"bye\";","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_HELP_WORD \u003d \"help\";","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_LIST_WORD \u003d \"list\";","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_DATE_WORD \u003d \"date\";","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_FIND_WORD \u003d \"find\";","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_MARK_WORD \u003d \"mark\";","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_UNMARK_WORD \u003d \"unmark\";","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_DELETE_WORD \u003d \"delete\";","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_TODO_WORD \u003d \"todo\";","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_DEADLINE_WORD \u003d \"deadline\";","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_EVENT_WORD \u003d \"event\";","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"     * Returns a different type of Command class depending on the type of command input by the user.","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"     * @param userCommand Command line input from user","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"     * @return Corresponding Command class to user input","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"     * @throws EmptyDescException If task description/keyword is left empty (for Add/Find commands respectively)","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"     * @throws IllegalCommandException If an unknown command is input by the user","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"     * @throws NumberFormatException If the index is left empty (for Mark, Delete commands)","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidDeadline If the input format for adding a deadline is wrong","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidEvent If the input format for adding an event is wrong","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidDateTime If the input format for a date and time is wrong","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"    public static Command parseCommand(String userCommand)","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"            throws EmptyDescException, IllegalCommandException, NumberFormatException,","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"            InvalidDeadline, InvalidEvent, InvalidDateTime {","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"        final String[] split \u003d userCommand.trim().split(\"\\\\s+\", 2);","lastModifiedDate":"2023-02-14"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"        String command \u003d split[0];","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"        switch (command) {","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_EXIT_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_HELP_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_LIST_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"            return new ListCommand();","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DATE_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"            if (split.length !\u003d 2) {","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"                throw new InvalidDateTime();","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"            return new DateCommand(split[1]);","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_FIND_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"            if (split.length !\u003d 2) {","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"                throw new EmptyDescException();","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"            return new FindCommand(split[1]);","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_MARK_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_UNMARK_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DELETE_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"            if (split.length !\u003d 2) {","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"                throw new NumberFormatException();","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"            return new ModifyCommand(command, split[1]);","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_TODO_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DEADLINE_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_EVENT_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"            if (split.length !\u003d 2) {","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"                throw new EmptyDescException();","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"            return new AddCommand(command, split[1]);","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"        default:","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"            throw new IllegalCommandException();","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":90,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":91,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"honglinshang"},"content":"     * Parses the input date and time, returns it as a String according to the given pattern.","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"honglinshang"},"content":"     * @param date Input date and time in the form of LocalDateTime","lastModifiedDate":"2023-02-23"},{"lineNumber":95,"author":{"gitId":"honglinshang"},"content":"     * @param dateString Input date and time in the form of a String","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"honglinshang"},"content":"     * @param pattern Format that the input date and time should be parsed into","lastModifiedDate":"2023-02-23"},{"lineNumber":97,"author":{"gitId":"honglinshang"},"content":"     * @return String with parsed date and time","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"honglinshang"},"content":"    public static String parseDateTime(LocalDateTime date, String dateString, DateTimeFormatter pattern) {","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"honglinshang"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"honglinshang"},"content":"            return date.format(pattern);","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"honglinshang"},"content":"        return dateString;","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":105,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"honglinshang"},"content":"     * Separates the user input for a Deadline into the Deadline\u0027s description and its due date.","lastModifiedDate":"2023-02-23"},{"lineNumber":108,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":109,"author":{"gitId":"honglinshang"},"content":"     * @param param CLI user input after \"deadline\"","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"honglinshang"},"content":"     * @return String array consisting separated description and due date of the deadline","lastModifiedDate":"2023-02-23"},{"lineNumber":111,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidDeadline If the user did not input the due date in the right format","lastModifiedDate":"2023-02-23"},{"lineNumber":112,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":113,"author":{"gitId":"honglinshang"},"content":"    public static String[] parseDeadline(String param) throws InvalidDeadline {","lastModifiedDate":"2023-02-23"},{"lineNumber":114,"author":{"gitId":"honglinshang"},"content":"        String[] split \u003d param.trim().split(\"\\\\s/by\\\\s\", 2);","lastModifiedDate":"2023-02-14"},{"lineNumber":115,"author":{"gitId":"honglinshang"},"content":"        if (split.length !\u003d 2) {","lastModifiedDate":"2023-02-15"},{"lineNumber":116,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidDeadline();","lastModifiedDate":"2023-02-15"},{"lineNumber":117,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":118,"author":{"gitId":"honglinshang"},"content":"        return split;","lastModifiedDate":"2023-02-15"},{"lineNumber":119,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":120,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":121,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":122,"author":{"gitId":"honglinshang"},"content":"     * Separates the user input for a Deadline into the Event\u0027s description and its start and end date.","lastModifiedDate":"2023-02-23"},{"lineNumber":123,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":124,"author":{"gitId":"honglinshang"},"content":"     * @param param CLI user input after \"event\"","lastModifiedDate":"2023-02-23"},{"lineNumber":125,"author":{"gitId":"honglinshang"},"content":"     * @return String array consisting separated description, start date, and end date of the event","lastModifiedDate":"2023-02-23"},{"lineNumber":126,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidEvent If the user did not input the start or end date in the right format","lastModifiedDate":"2023-02-23"},{"lineNumber":127,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":128,"author":{"gitId":"honglinshang"},"content":"    public static String[] parseEvent(String param) throws InvalidEvent {","lastModifiedDate":"2023-02-23"},{"lineNumber":129,"author":{"gitId":"honglinshang"},"content":"        String[] split \u003d param.trim().split(\"\\\\s/from\\\\s|\\\\s/to\\\\s\", 3);","lastModifiedDate":"2023-02-14"},{"lineNumber":130,"author":{"gitId":"honglinshang"},"content":"        if (split.length !\u003d 3) {","lastModifiedDate":"2023-02-15"},{"lineNumber":131,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidEvent();","lastModifiedDate":"2023-02-15"},{"lineNumber":132,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":133,"author":{"gitId":"honglinshang"},"content":"        return split;","lastModifiedDate":"2023-02-15"},{"lineNumber":134,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":135,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":136,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-14"}],"authorContributionMap":{"honglinshang":136}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidDeadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidEvent;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidSaveFile;","lastModifiedDate":"2023-02-14"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-14"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-14"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-14"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-02-14"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"import java.io.File;","lastModifiedDate":"2023-02-14"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-14"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-14"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"// Task list","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"import static duke.task.TaskList.allTasks;","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":" * Storage class that initialises the task list and updates the save file.","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":" *","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":" * Each task is saved as a line in the save file in this format:","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":" *   [type] | [status] | [description]","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":" *","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":" * Followed by:","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":" *   /by [date]                  for Deadlines or","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":" *   /from [date] /to [date]     for Events","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"public class Storage {","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"    // ints indicating position of terms in each line of the save file","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"    private static final int TYPE_POS \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"    private static final int STATUS_POS \u003d 4;","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"    private static final int PARAM_POS \u003d 8;","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"    // chars representing type of Tasks within the save file","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"    private static final char TXT_TODO_WORD \u003d \u0027T\u0027;","lastModifiedDate":"2023-02-14"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"    private static final char TXT_DEADLINE_WORD \u003d \u0027D\u0027;","lastModifiedDate":"2023-02-14"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"    private static final char TXT_EVENT_WORD \u003d \u0027E\u0027;","lastModifiedDate":"2023-02-14"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"    // Location of save file","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"    protected static String filePath;","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"     * Initialise Storage class, set filePath.","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-02-22"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-02-22"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"     * Overwrites the existing save file based on the current ArrayList of Tasks allTasks.","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"     * @throws IOException If something goes wrong during the overwriting process","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"    public static void update() throws IOException {","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"        FileWriter overwrite \u003d new FileWriter(filePath);","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"        for (Task task : allTasks) {","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"            String desc \u003d task.getDescription();","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"            String type \u003d task.getType();","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"            String stat \u003d task.getStatus();","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"            switch (type) {","lastModifiedDate":"2023-02-14"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"            case \"todo\":","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"                overwrite.write(\"T | \" + stat + \" | \" + desc + \"\\n\");","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"                break;","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"            case \"deadline\":","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"                Deadline tempDeadline \u003d (Deadline) task;","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"                String by \u003d tempDeadline.getBy(Task.storePattern);","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"                overwrite.write(\"D | \" + stat + \" | \" + desc + \" /by \" + by + \"\\n\");","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"                break;","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"            case \"event\":","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"                Event tempEvent \u003d (Event) task;","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"                String from \u003d tempEvent.getFrom(Task.storePattern);","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"                String to \u003d tempEvent.getTo(Task.storePattern);","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"                overwrite.write(\"E | \" + stat + \" | \" + desc + \" /from \" + from + \" /to \" + to + \"\\n\");","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"                break;","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-14"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"        overwrite.close();","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"     * Loads data from the save file and initialises it into a new ArrayList.","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"     * If save file is not found, create a new save file and return an empty ArrayList.","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"     * @return ArrayList of Tasks (either containing data in save file or empty)","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"     * @throws IOException If save file is not found, and a new one cannot be created","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"honglinshang"},"content":"    public static ArrayList\u003cTask\u003e load() throws IOException {","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"honglinshang"},"content":"        ArrayList\u003cTask\u003e newAllTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"honglinshang"},"content":"        File save \u003d new File(filePath);","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"honglinshang"},"content":"            newAllTasks \u003d readFileContents(save);","lastModifiedDate":"2023-02-23"},{"lineNumber":95,"author":{"gitId":"honglinshang"},"content":"            return newAllTasks;","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"honglinshang"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":97,"author":{"gitId":"honglinshang"},"content":"            Ui.printErrorFileNotFound();","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"honglinshang"},"content":"            save.createNewFile();","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"honglinshang"},"content":"            return newAllTasks;","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":101,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":102,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":103,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"honglinshang"},"content":"     * Using a Scanner, read each line of the save file and initialise them as Tasks in a new ArrayList.","lastModifiedDate":"2023-02-23"},{"lineNumber":105,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"honglinshang"},"content":"     * @param save Save file","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"honglinshang"},"content":"     * @return ArrayList of Tasks based on data written in the save file","lastModifiedDate":"2023-02-23"},{"lineNumber":108,"author":{"gitId":"honglinshang"},"content":"     * @throws FileNotFoundException If the save file cannot be found at filePath","lastModifiedDate":"2023-02-23"},{"lineNumber":109,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"honglinshang"},"content":"    private static ArrayList\u003cTask\u003e readFileContents(File save) throws FileNotFoundException {","lastModifiedDate":"2023-02-15"},{"lineNumber":111,"author":{"gitId":"honglinshang"},"content":"        Scanner s \u003d new Scanner(save);","lastModifiedDate":"2023-02-14"},{"lineNumber":112,"author":{"gitId":"honglinshang"},"content":"        ArrayList\u003cTask\u003e newArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-15"},{"lineNumber":113,"author":{"gitId":"honglinshang"},"content":"        int counter \u003d 0;","lastModifiedDate":"2023-02-14"},{"lineNumber":114,"author":{"gitId":"honglinshang"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-02-14"},{"lineNumber":115,"author":{"gitId":"honglinshang"},"content":"            try {","lastModifiedDate":"2023-02-14"},{"lineNumber":116,"author":{"gitId":"honglinshang"},"content":"                newArrayList.add(newTask(s.nextLine()));","lastModifiedDate":"2023-02-15"},{"lineNumber":117,"author":{"gitId":"honglinshang"},"content":"                counter++;","lastModifiedDate":"2023-02-14"},{"lineNumber":118,"author":{"gitId":"honglinshang"},"content":"            } catch (InvalidSaveFile e) {","lastModifiedDate":"2023-02-14"},{"lineNumber":119,"author":{"gitId":"honglinshang"},"content":"                Ui.printInvalidSaveFile(counter, filePath);","lastModifiedDate":"2023-02-23"},{"lineNumber":120,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-14"},{"lineNumber":121,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":122,"author":{"gitId":"honglinshang"},"content":"        return newArrayList;","lastModifiedDate":"2023-02-15"},{"lineNumber":123,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":124,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":125,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":126,"author":{"gitId":"honglinshang"},"content":"     * Takes a line from the save file, interprets it, and returns it as a new Task.","lastModifiedDate":"2023-02-23"},{"lineNumber":127,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":128,"author":{"gitId":"honglinshang"},"content":"     * @param text Line from the save file","lastModifiedDate":"2023-02-23"},{"lineNumber":129,"author":{"gitId":"honglinshang"},"content":"     * @return Corresponding Task class based on data from text","lastModifiedDate":"2023-02-23"},{"lineNumber":130,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidSaveFile If any line in the input data is not of the right format","lastModifiedDate":"2023-02-23"},{"lineNumber":131,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":132,"author":{"gitId":"honglinshang"},"content":"    private static Task newTask(String text) throws InvalidSaveFile {","lastModifiedDate":"2023-02-23"},{"lineNumber":133,"author":{"gitId":"honglinshang"},"content":"        char type \u003d getType(text);","lastModifiedDate":"2023-02-23"},{"lineNumber":134,"author":{"gitId":"honglinshang"},"content":"        Boolean isDone \u003d isStatusDone(text);","lastModifiedDate":"2023-02-23"},{"lineNumber":135,"author":{"gitId":"honglinshang"},"content":"        String param \u003d getParam(text);","lastModifiedDate":"2023-02-23"},{"lineNumber":136,"author":{"gitId":"honglinshang"},"content":"        switch (type) {","lastModifiedDate":"2023-02-23"},{"lineNumber":137,"author":{"gitId":"honglinshang"},"content":"        case TXT_TODO_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":138,"author":{"gitId":"honglinshang"},"content":"            return newToDo(isDone, param);","lastModifiedDate":"2023-02-23"},{"lineNumber":139,"author":{"gitId":"honglinshang"},"content":"        case TXT_DEADLINE_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":140,"author":{"gitId":"honglinshang"},"content":"            return newDeadline(isDone, param);","lastModifiedDate":"2023-02-23"},{"lineNumber":141,"author":{"gitId":"honglinshang"},"content":"        case TXT_EVENT_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":142,"author":{"gitId":"honglinshang"},"content":"            return newEvent(isDone, param);","lastModifiedDate":"2023-02-23"},{"lineNumber":143,"author":{"gitId":"honglinshang"},"content":"        default:","lastModifiedDate":"2023-02-23"},{"lineNumber":144,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidSaveFile();","lastModifiedDate":"2023-02-23"},{"lineNumber":145,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":146,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":147,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":148,"author":{"gitId":"honglinshang"},"content":"    private static char getType(String text) {","lastModifiedDate":"2023-02-23"},{"lineNumber":149,"author":{"gitId":"honglinshang"},"content":"        return text.charAt(TYPE_POS);","lastModifiedDate":"2023-02-23"},{"lineNumber":150,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":151,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":152,"author":{"gitId":"honglinshang"},"content":"    private static Boolean isStatusDone(String text) {","lastModifiedDate":"2023-02-23"},{"lineNumber":153,"author":{"gitId":"honglinshang"},"content":"        if (text.charAt(STATUS_POS) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2023-02-23"},{"lineNumber":154,"author":{"gitId":"honglinshang"},"content":"            return true;","lastModifiedDate":"2023-02-23"},{"lineNumber":155,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":156,"author":{"gitId":"honglinshang"},"content":"        return false;","lastModifiedDate":"2023-02-23"},{"lineNumber":157,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":158,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":159,"author":{"gitId":"honglinshang"},"content":"    private static String getParam(String text) {","lastModifiedDate":"2023-02-23"},{"lineNumber":160,"author":{"gitId":"honglinshang"},"content":"        return text.substring(PARAM_POS);","lastModifiedDate":"2023-02-23"},{"lineNumber":161,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":162,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":163,"author":{"gitId":"honglinshang"},"content":"    private static ToDo newToDo(Boolean isDone, String param) {","lastModifiedDate":"2023-02-23"},{"lineNumber":164,"author":{"gitId":"honglinshang"},"content":"        ToDo newToDo \u003d new ToDo(param);","lastModifiedDate":"2023-02-23"},{"lineNumber":165,"author":{"gitId":"honglinshang"},"content":"        newToDo.setDone(isDone);","lastModifiedDate":"2023-02-23"},{"lineNumber":166,"author":{"gitId":"honglinshang"},"content":"        return newToDo;","lastModifiedDate":"2023-02-23"},{"lineNumber":167,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":168,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":169,"author":{"gitId":"honglinshang"},"content":"    private static Deadline newDeadline(Boolean isDone, String param) throws InvalidSaveFile {","lastModifiedDate":"2023-02-23"},{"lineNumber":170,"author":{"gitId":"honglinshang"},"content":"        final String[] paramAndBy;","lastModifiedDate":"2023-02-23"},{"lineNumber":171,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":172,"author":{"gitId":"honglinshang"},"content":"            paramAndBy \u003d Parser.parseDeadline(param);","lastModifiedDate":"2023-02-23"},{"lineNumber":173,"author":{"gitId":"honglinshang"},"content":"        } catch (InvalidDeadline e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":174,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidSaveFile();","lastModifiedDate":"2023-02-23"},{"lineNumber":175,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":176,"author":{"gitId":"honglinshang"},"content":"        Deadline newDeadline \u003d new Deadline(paramAndBy[0], paramAndBy[1]);","lastModifiedDate":"2023-02-23"},{"lineNumber":177,"author":{"gitId":"honglinshang"},"content":"        newDeadline.setDone(isDone);","lastModifiedDate":"2023-02-23"},{"lineNumber":178,"author":{"gitId":"honglinshang"},"content":"        return newDeadline;","lastModifiedDate":"2023-02-23"},{"lineNumber":179,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":180,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":181,"author":{"gitId":"honglinshang"},"content":"    private static Event newEvent(Boolean isDone, String param) throws InvalidSaveFile {","lastModifiedDate":"2023-02-23"},{"lineNumber":182,"author":{"gitId":"honglinshang"},"content":"        final String[] paramAndFromTo;","lastModifiedDate":"2023-02-23"},{"lineNumber":183,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":184,"author":{"gitId":"honglinshang"},"content":"            paramAndFromTo \u003d Parser.parseEvent(param);","lastModifiedDate":"2023-02-23"},{"lineNumber":185,"author":{"gitId":"honglinshang"},"content":"        } catch (InvalidEvent e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":186,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidSaveFile();","lastModifiedDate":"2023-02-23"},{"lineNumber":187,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":188,"author":{"gitId":"honglinshang"},"content":"        Event newEvent \u003d new Event(paramAndFromTo[0], paramAndFromTo[1], paramAndFromTo[2]);","lastModifiedDate":"2023-02-23"},{"lineNumber":189,"author":{"gitId":"honglinshang"},"content":"        newEvent.setDone(isDone);","lastModifiedDate":"2023-02-23"},{"lineNumber":190,"author":{"gitId":"honglinshang"},"content":"        return newEvent;","lastModifiedDate":"2023-02-23"},{"lineNumber":191,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":192,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":193,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-14"}],"authorContributionMap":{"honglinshang":193}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-14"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-14"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-22"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":" * User Interface class that deals with inputs from and outputs to the user","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"public class Ui {","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"    // Scanner to read user inputs on CLI","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    private static final Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"     * Get user input from CLI.","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"     * @return String containing the CLI input","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"    public static String readCommand() {","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"        return in.nextLine();","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"    public static void showLine() {","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"    public static void printWelcomeMessage() {","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"        showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Hello from\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"                \" ____        _\\n\" +","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"                \"|  _ \\\\ _   _| | _____\\n\" +","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"                \"| | | | | | | |/ / _ \\\\\\n\" +","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"                \"| |_| | |_| |   \u003c  __/\\n\" +","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"                \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\" +","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"                \"Enter \\\"help\\\" to see a list of commands.\");","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"        showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"     * For \u003ccode\u003ehelp\u003c/code\u003e command.","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"     * Prints out a list of all available commands.","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"    public static void printHelpMessage() {","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\" Enter \\\"list\\\" to see all tasks\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"todo [task]\\\" to add a task\\n\" +","lastModifiedDate":"2023-02-09"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"deadline [task] /by [date]\\\" to add a deadline\\n\" +","lastModifiedDate":"2023-02-09"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"event [task] /from [date] /to [date]\\\" to add an event\\n\" +","lastModifiedDate":"2023-02-09"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"mark [idx]\\\" to mark task as done\\n\" +","lastModifiedDate":"2023-02-09"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"unmark [idx]\\\" to mark task as not done\\n\" +","lastModifiedDate":"2023-02-09"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"delete [idx]\\\" to remove task from list\\n\" +","lastModifiedDate":"2023-02-14"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"find [keyword]\\\" to see all tasks containing [keyword]\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"date [yyyy-MM-dd]\\\" to see all tasks occurring on that date\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"bye\\\" to exit the program\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"                \"\\n For Duke to understand [date], you can enter it in the form of\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"                \"     \\\"yyyy-MM-ddThh:mm\\\"\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"                \" eg. \\\"2023-10-30T23:59\\\" for Oct 20 2023, 11:59PM\");","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"     * For \u003ccode\u003elist\u003c/code\u003e command.","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"     * Prints all Tasks within the ArrayList given.","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"     * @param allTasks ArrayList of Tasks","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"    public static void printList(ArrayList\u003cTask\u003e allTasks) {","lastModifiedDate":"2023-02-14"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"        if (allTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-22"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"            System.out.println(\"There are no tasks in your list!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"            return;","lastModifiedDate":"2023-02-22"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-22"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"        for (int i \u003d 0; i \u003c allTasks.size(); i++) {","lastModifiedDate":"2023-02-14"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"            System.out.println(i + 1 + \".\" + allTasks.get(i));","lastModifiedDate":"2023-02-14"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"     * For \u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003edeadline\u003c/code\u003e, and \u003ccode\u003eevent\u003c/code\u003e commands.","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"     * Prints out message for successful adding of Task.","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"     * @param newTask Task that has just been added","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"    public static void printAddMessage(Task newTask) {","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Got it. I\u0027ve added this \" + newTask.getType() + \":\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"                \"  \" + newTask);","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"honglinshang"},"content":"     * For \u003ccode\u003emark\u003c/code\u003e command.","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"honglinshang"},"content":"     * Prints out message for successful marking of Task as done.","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":95,"author":{"gitId":"honglinshang"},"content":"     * @param doneTask Task that has just been marked as done","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":97,"author":{"gitId":"honglinshang"},"content":"    public static void printMarkDone(Task doneTask) {","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Nice!, I\u0027ve marked this task as done:\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"honglinshang"},"content":"                \"  \" + doneTask);","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"honglinshang"},"content":"     * For \u003ccode\u003eunmark\u003c/code\u003e command.","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"honglinshang"},"content":"     * Prints out message for successful marking of Task as not done.","lastModifiedDate":"2023-02-23"},{"lineNumber":105,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"honglinshang"},"content":"     * @param notDoneTask Task that has just been marked as not done","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":108,"author":{"gitId":"honglinshang"},"content":"    public static void printMarkNotDone(Task notDoneTask) {","lastModifiedDate":"2023-02-23"},{"lineNumber":109,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"honglinshang"},"content":"                \"  \" + notDoneTask);","lastModifiedDate":"2023-02-23"},{"lineNumber":111,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":112,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":113,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":114,"author":{"gitId":"honglinshang"},"content":"     * For \u003ccode\u003edelete\u003c/code\u003e command.","lastModifiedDate":"2023-02-23"},{"lineNumber":115,"author":{"gitId":"honglinshang"},"content":"     * Prints out message for successful deletion of Task.","lastModifiedDate":"2023-02-23"},{"lineNumber":116,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":117,"author":{"gitId":"honglinshang"},"content":"     * @param deletedTask Task that will be deleted","lastModifiedDate":"2023-02-23"},{"lineNumber":118,"author":{"gitId":"honglinshang"},"content":"     * @param size        Number of tasks left in the list after deletion","lastModifiedDate":"2023-02-23"},{"lineNumber":119,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":120,"author":{"gitId":"honglinshang"},"content":"    public static void printDeleted(Task deletedTask, int size) {","lastModifiedDate":"2023-02-23"},{"lineNumber":121,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Noted, I\u0027ve removed this task:\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":122,"author":{"gitId":"honglinshang"},"content":"                \"  \" + deletedTask + \"\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":123,"author":{"gitId":"honglinshang"},"content":"                \"Now you have \" + (size - 1) + \" tasks in the list\");","lastModifiedDate":"2023-02-23"},{"lineNumber":124,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":125,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":126,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":127,"author":{"gitId":"honglinshang"},"content":"     * For \u003ccode\u003efind\u003c/code\u003e command.","lastModifiedDate":"2023-02-23"},{"lineNumber":128,"author":{"gitId":"honglinshang"},"content":"     * Prints all Tasks within the ArrayList given, all containing a certain keyword.","lastModifiedDate":"2023-02-23"},{"lineNumber":129,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":130,"author":{"gitId":"honglinshang"},"content":"     * @param foundTasks ArrayList of Tasks containing a keyword","lastModifiedDate":"2023-02-23"},{"lineNumber":131,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":132,"author":{"gitId":"honglinshang"},"content":"    public static void printFoundList(ArrayList\u003cTask\u003e foundTasks) {","lastModifiedDate":"2023-02-23"},{"lineNumber":133,"author":{"gitId":"honglinshang"},"content":"        if (foundTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-23"},{"lineNumber":134,"author":{"gitId":"honglinshang"},"content":"            System.out.println(\"There are no matching tasks!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":135,"author":{"gitId":"honglinshang"},"content":"            return;","lastModifiedDate":"2023-02-23"},{"lineNumber":136,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":137,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-02-23"},{"lineNumber":138,"author":{"gitId":"honglinshang"},"content":"        for (int i \u003d 0; i \u003c foundTasks.size(); i++) {","lastModifiedDate":"2023-02-23"},{"lineNumber":139,"author":{"gitId":"honglinshang"},"content":"            System.out.println(i + 1 + \".\" + foundTasks.get(i));","lastModifiedDate":"2023-02-23"},{"lineNumber":140,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":141,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":142,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":143,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":144,"author":{"gitId":"honglinshang"},"content":"     * For \u003ccode\u003edate\u003c/code\u003e command.","lastModifiedDate":"2023-02-23"},{"lineNumber":145,"author":{"gitId":"honglinshang"},"content":"     * Prints all Tasks within the ArrayList given, all happening on a certain date.","lastModifiedDate":"2023-02-23"},{"lineNumber":146,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":147,"author":{"gitId":"honglinshang"},"content":"     * @param happeningTasks ArrayList of Tasks happening on a date","lastModifiedDate":"2023-02-23"},{"lineNumber":148,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":149,"author":{"gitId":"honglinshang"},"content":"    public static void printDateList(ArrayList\u003cTask\u003e happeningTasks, LocalDate date) {","lastModifiedDate":"2023-02-23"},{"lineNumber":150,"author":{"gitId":"honglinshang"},"content":"        String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-02-23"},{"lineNumber":151,"author":{"gitId":"honglinshang"},"content":"        if (happeningTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-23"},{"lineNumber":152,"author":{"gitId":"honglinshang"},"content":"            System.out.println(\"There are no tasks on \" + dateString + \"!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":153,"author":{"gitId":"honglinshang"},"content":"            return;","lastModifiedDate":"2023-02-23"},{"lineNumber":154,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":155,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Here are the tasks happening on \" + dateString + \":\");","lastModifiedDate":"2023-02-23"},{"lineNumber":156,"author":{"gitId":"honglinshang"},"content":"        for (int i \u003d 0; i \u003c happeningTasks.size(); i++) {","lastModifiedDate":"2023-02-23"},{"lineNumber":157,"author":{"gitId":"honglinshang"},"content":"            System.out.println(i + 1 + \".\" + happeningTasks.get(i));","lastModifiedDate":"2023-02-23"},{"lineNumber":158,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":159,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":160,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":161,"author":{"gitId":"honglinshang"},"content":"    public static void printExitMessage() {","lastModifiedDate":"2023-02-14"},{"lineNumber":162,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":163,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":164,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":165,"author":{"gitId":"honglinshang"},"content":"    // error messages","lastModifiedDate":"2023-02-14"},{"lineNumber":166,"author":{"gitId":"honglinshang"},"content":"    public static void printErrorForIdx(int size) {","lastModifiedDate":"2023-02-23"},{"lineNumber":167,"author":{"gitId":"honglinshang"},"content":"        if (size !\u003d 0) {","lastModifiedDate":"2023-02-23"},{"lineNumber":168,"author":{"gitId":"honglinshang"},"content":"            System.out.println(\"Please enter [idx] in the form of an integer from 1 to \" + size);","lastModifiedDate":"2023-02-23"},{"lineNumber":169,"author":{"gitId":"honglinshang"},"content":"        } else {","lastModifiedDate":"2023-02-14"},{"lineNumber":170,"author":{"gitId":"honglinshang"},"content":"            System.out.println(\"There are no tasks in your list!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":171,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":172,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":173,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":174,"author":{"gitId":"honglinshang"},"content":"    public static void printErrorForIO() {","lastModifiedDate":"2023-02-15"},{"lineNumber":175,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Something went wrong with the hard disk :(\");","lastModifiedDate":"2023-02-23"},{"lineNumber":176,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":177,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":178,"author":{"gitId":"honglinshang"},"content":"    public static void printErrorFileNotFound() {","lastModifiedDate":"2023-02-15"},{"lineNumber":179,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Save file not found, initialising empty list...\");","lastModifiedDate":"2023-02-23"},{"lineNumber":180,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":181,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":182,"author":{"gitId":"honglinshang"},"content":"    public static void printInvalidDeadline() {","lastModifiedDate":"2023-02-09"},{"lineNumber":183,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Please enter deadline as \\\"deadline [task] /by [date]\\\".\");","lastModifiedDate":"2023-02-23"},{"lineNumber":184,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":185,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":186,"author":{"gitId":"honglinshang"},"content":"    public static void printInvalidEvent() {","lastModifiedDate":"2023-02-09"},{"lineNumber":187,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Please enter event as \\\"event [task] /from [date] /to [date]\\\".\");","lastModifiedDate":"2023-02-23"},{"lineNumber":188,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":189,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":190,"author":{"gitId":"honglinshang"},"content":"    public void printInvalidDateTime() {","lastModifiedDate":"2023-02-23"},{"lineNumber":191,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Please enter date in the format of yyyy-MM-dd.\");","lastModifiedDate":"2023-02-23"},{"lineNumber":192,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":193,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":194,"author":{"gitId":"honglinshang"},"content":"    public static void printInvalidCommand() {","lastModifiedDate":"2023-02-09"},{"lineNumber":195,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Sorry, but I don\u0027t know what that means :(\");","lastModifiedDate":"2023-02-23"},{"lineNumber":196,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":197,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":198,"author":{"gitId":"honglinshang"},"content":"    public static void printInvalidSaveFile(int counter, String filePath) {","lastModifiedDate":"2023-02-23"},{"lineNumber":199,"author":{"gitId":"honglinshang"},"content":"        showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":200,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"There is an error in save.txt at line \" + (counter + 1) + \"\\n\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":201,"author":{"gitId":"honglinshang"},"content":"                \"Task \" + (counter + 1) + \" has been excluded. You can edit the save file at:\\n\" +","lastModifiedDate":"2023-02-15"},{"lineNumber":202,"author":{"gitId":"honglinshang"},"content":"                filePath);","lastModifiedDate":"2023-02-23"},{"lineNumber":203,"author":{"gitId":"honglinshang"},"content":"        showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":204,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":205,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":206,"author":{"gitId":"honglinshang"},"content":"    public static void printEmptyDescription() {","lastModifiedDate":"2023-02-23"},{"lineNumber":207,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Oops! The description cannot be empty.\");","lastModifiedDate":"2023-02-23"},{"lineNumber":208,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":209,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":210,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"honglinshang":210}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.Parser;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidDeadline;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidEvent;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"import static duke.Parser.COMMAND_DEADLINE_WORD;","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"import static duke.Parser.COMMAND_EVENT_WORD;","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"import static duke.Parser.COMMAND_TODO_WORD;","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"import static duke.task.TaskList.allTasks;","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":" * Add Command class that adds a Task to the existing TaskList tasks.","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":" * Handles \u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003edeadline\u003c/code\u003e, and \u003ccode\u003eevent\u003c/code\u003e commands.","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"    protected String type;","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"    protected String desc;","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"    protected String by;","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"    protected String from;","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"    protected String to;","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"     * Initialises the class with the type and description of the task given in the command.","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"     * @param type Type of task being added (ToDo, Deadline, or Event)","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"     * @param param Description of task given by user (including date(s) for Deadline, Event)","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidDeadline If the Deadline being added has the wrong format","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidEvent If the Event being added has the wrong format","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"    public AddCommand(String type, String param) throws InvalidDeadline, InvalidEvent {","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"        switch(type){","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_TODO_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"            this.desc \u003d param;","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DEADLINE_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"            String[] paramAndBy \u003d Parser.parseDeadline(param);","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"            this.desc \u003d paramAndBy[0];","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"            this.by \u003d paramAndBy[1];","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_EVENT_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"            String[] paramAndFromTo \u003d Parser.parseEvent(param);","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"            this.desc \u003d paramAndFromTo[0];","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"            this.from \u003d paramAndFromTo[1];","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"            this.to \u003d paramAndFromTo[2];","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"     * Executes the adding of a Task to the TaskList tasks based on data in the class.","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"     * @param tasks The TaskList to be added to","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints success or error message to user","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"     * @param storage Gets updated after the Task has been added","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"        switch(type) {","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_TODO_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"            tasks.addToDo(desc);","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DEADLINE_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"            tasks.addDeadline(desc, by);","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_EVENT_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"            tasks.addEvent(desc, from, to);","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"        ui.printAddMessage(allTasks.get(allTasks.size() - 1));","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"            Storage.update();","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"            ui.printErrorForIO();","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":84}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":" * Abstract class Command is the parent of all types of Commands","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    private Boolean isExit \u003d false;","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"     * Sets \u003ccode\u003eisExit\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e.","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"     * Called when the current Command is the ExitCommand.","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"    public void setExit() {","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"        isExit \u003d true;","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"    public Boolean getExit() {","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"        return isExit;","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":28}},{"path":"src/main/java/duke/command/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidDateTime;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":" * Date Command class that shortlists Tasks that occur on the given date.","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"public class DateCommand extends Command {","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    LocalDate date;","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"     * Initialises the class with the given date to shortlist for.","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"     * @param dateString User input of the date from the CLI, should be in format \u003ccode\u003eyyyy-MM-dd\u003c/code\u003e","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidDateTime If the input date does not fit the above format","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"    public DateCommand (String dateString) throws InvalidDateTime {","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"            this.date \u003d LocalDate.parse(dateString);","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidDateTime();","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"     * Shortlists and prints Tasks from the TaskList that occur during the given date.","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"     * @param tasks The existing TaskList","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints shortlisted Tasks to user","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"        ui.printDateList(tasks.getTasksOnDate(date), date);","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":43}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":" * Exit Command class that allows user to exit the program.","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"     * Prints exit message.","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"     * Sets the exit status of the Command to be true.","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints exit message to user","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"        ui.printExitMessage();","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"        this.setExit();","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":24}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.exception.InvalidDateTime;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":" * Find Command class that shortlists Tasks that contain a given keyword.","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    protected String keyword;","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"     * Initialises the class with the given keyword to shortlist for.","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"     * @param keyword User input of the keyword from the CLI","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     * Shortlists and prints Tasks from the TaskList that contain the given keyword.","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"     * @param tasks The existing TaskList","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints shortlisted Tasks to user","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"        ui.printFoundList(tasks.findTasks(keyword));","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":34}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":" * Help Command class that shows user a list of all available Commands.","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"     * Prints list of all available Commands and their abilities.","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints list of Commands to user","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"        ui.printHelpMessage();","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":22}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":" * List Command class that shows user a list of all the Tasks they have input.","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"        ui.printList(tasks.getAllTasks());","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":17}},{"path":"src/main/java/duke/command/ModifyCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import static duke.Parser.COMMAND_DELETE_WORD;","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"import static duke.Parser.COMMAND_MARK_WORD;","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"import static duke.Parser.COMMAND_UNMARK_WORD;","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":" * Mark and Delete Command class that modifies an existing Task from the TaskList tasks.","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":" * Handles \u003ccode\u003emark\u003c/code\u003e, \u003ccode\u003eunmark\u003c/code\u003e, and \u003ccode\u003edelete\u003c/code\u003e commands.","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"public class ModifyCommand extends Command {","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    protected String command;","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"    protected int idx;","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"     * Initialises the class with the type and description of the task given in the command.","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"     * @param command Type of modification command being executed (mark, unmark, delete)","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"     * @param param Contains the index of the task to be modified","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"    public ModifyCommand(String command, String param) {","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"        int idx \u003d Integer.parseInt(param) - 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"     * Executes the modification of a Task in the TaskList tasks based on data in the class.","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"     * @param tasks The TaskList of existing Tasks","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints success or error message to user","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"     * @param storage Gets updated after the TaskList has been modified","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"        if (idx \u003c 0 || idx \u003e\u003d tasks.getSize()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"            throw new NumberFormatException();","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"        switch(command) {","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_MARK_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"            tasks.markDone(idx);","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"            ui.printMarkDone(tasks.allTasks.get(idx));","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_UNMARK_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"            tasks.markNotDone(idx);","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"            ui.printMarkNotDone(tasks.allTasks.get(idx));","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DELETE_WORD:","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"            ui.printDeleted(tasks.allTasks.get(idx), tasks.getSize());","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"            tasks.deleteTask(idx);","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"            Storage.update();","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"            ui.printErrorForIO();","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":67}},{"path":"src/main/java/duke/exception/EmptyDescException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.exception;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when task description or keyword is left empty.","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class EmptyDescException extends Throwable {","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/duke/exception/IllegalCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.exception;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when command is not understood by Duke.","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class IllegalCommandException extends Throwable {","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/duke/exception/InvalidDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.exception;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when the date and time is input in the wrong format.","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class InvalidDateTime extends Throwable {","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/duke/exception/InvalidDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.exception;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when a deadline is input in the wrong format","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class InvalidDeadline extends Throwable {","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/duke/exception/InvalidEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.exception;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when an event is input in the wrong format","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class InvalidEvent extends Throwable {","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/duke/exception/InvalidSaveFile.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.exception;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when the local save file has been corrupted.","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class InvalidSaveFile extends Throwable {","lastModifiedDate":"2023-02-14"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-14"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.task;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.Parser;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    public static final String DEADLINE_LABEL \u003d \"D\";","lastModifiedDate":"2023-02-09"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"    protected String byString;","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"     * Initialises as in Task, with added parsing for due date.","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"     * If parsing is not possible, save due date as String.","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"     * @param description String describing the Task","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"     * @param by String describing the due date","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"            this.by \u003d LocalDateTime.parse(by);","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"            this.byString \u003d by;","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing the due date of the Deadline.","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"     * @param pattern Desired format for String after parsing","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"     * @return Parsed due date","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"    public String getBy(DateTimeFormatter pattern) {","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"        return Parser.parseDateTime(by, byString, pattern);","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"    public String getType() {","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"        return \"deadline\";","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"    public Boolean isOnDate(LocalDate date) {","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"        if (by !\u003d null \u0026\u0026 date.isEqual(by.toLocalDate())) {","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"            return true;","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"        return false;","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"        return \"[\" + DEADLINE_LABEL + \"][\" + getStatus() + \"] \" + description + \" (by: \" + getBy(printPattern) + \")\";","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"honglinshang":60}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.task;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import duke.Parser;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"    public static final String EVENT_LABEL \u003d \"E\";","lastModifiedDate":"2023-02-09"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"    protected String fromString;","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"    protected String toString;","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"     * Initialises as in Task, with added parsing for start and end dates.","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"     * If parsing is not possible, save date(s) as String(s).","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"     * @param description String describing the Task","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"     * @param from String describing the start date","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"     * @param to String describing the end date","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"            this.from \u003d LocalDateTime.parse(from);","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"            this.fromString \u003d from;","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"            this.to \u003d LocalDateTime.parse(to);","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"            this.toString \u003d to;","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing the start date of the Event.","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"     * @param pattern Desired format for String after parsing","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"     * @return Parsed start date","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"    public String getFrom(DateTimeFormatter pattern) {","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"        return Parser.parseDateTime(from, fromString, pattern);","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing the end date of the Event.","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"     * @param pattern Desired format for String after parsing","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"     * @return Parsed end date","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"    public String getTo(DateTimeFormatter pattern) {","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"        return Parser.parseDateTime(to, toString, pattern);","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"    public String getType() {","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"        return \"event\";","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"    public Boolean isOnDate(LocalDate date) {","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"        if (from !\u003d null) {","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"            if (date.isEqual(from.toLocalDate())) {","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"                return true;","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"            if (date.isBefore(from.toLocalDate())) {","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"                return false;","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"            if (to !\u003d null \u0026\u0026 date.isBefore(to.toLocalDate())) {","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"                return true;","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"        if (to !\u003d null \u0026\u0026 date.isEqual(to.toLocalDate())) {","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"            return true;","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"        return false;","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"        return \"[\" + EVENT_LABEL + \"][\" + getStatus() + \"] \" + description +","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"                \" (from: \" + getFrom(printPattern) + \" to: \" + getTo(printPattern) + \")\";","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"honglinshang":88}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.task;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":" * Abstract class Task is the parent of all types of Tasks","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-14"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"    protected String description;","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"    // Formatters used to parse and print date and time","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"    protected static DateTimeFormatter printPattern \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mma\");","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    public static DateTimeFormatter storePattern \u003d DateTimeFormatter.ISO_LOCAL_DATE_TIME;","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"     * Initialises the Task with its description sets its status as not done.","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"     * @param description String describing the Task","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing the type of the Task.","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"     * @return String describing the type of Task","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"    public String getType() {","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"        return \"task\";","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing the Task.","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"     * @return String describing the Task","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"        return description;","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"     * Check if the Task has been done.","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if the Task is done, \u003ccode\u003efalse\u003c/code\u003e otherwise","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"        return isDone;","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing status of the Task.","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"     * @return \"X\" if the Task is done, \" \" otherwise","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"    public String getStatus() {","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"        return (isDone() ? \"X\" : \" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"     * Set the status of the Task based on the input.","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"     * @param done Boolean describing the status of the task","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"     * Given a date, determine if it overlaps with the duration of the Task.","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"     * @param date Date to be checked","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if there is overlap, \u003ccode\u003efalse\u003c/code\u003e otherwise","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"    public Boolean isOnDate(LocalDate date) {","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"        return false;","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"     * Prints out the Task in desired format","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"        return description;","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":90,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"honglinshang":91}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.task;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-22"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":" * TaskList class that contains the task list.","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"public class TaskList {","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"    // Task list containing all Tasks","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    public static ArrayList\u003cTask\u003e allTasks;","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"     * Initialise allTasks with the given ArrayList.","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"     * @param allTasks List of Tasks","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    public TaskList(ArrayList\u003cTask\u003e allTasks) {","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"        this.allTasks \u003d allTasks;","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     * Get the list of all Tasks.","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"     * @return ArrayList allTasks","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"    public static ArrayList\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"        return allTasks;","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"     * Get a shortlisted list of all Tasks that overlap with the given date.","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"     * @param date The given date to check for","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"     * @return ArrayList of all shortlisted tasks","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"    public static ArrayList\u003cTask\u003e getTasksOnDate(LocalDate date) {","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"        ArrayList\u003cTask\u003e tasksOnDate \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"        for (Task task : allTasks) {","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"            if (task.isOnDate(date)) {","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"                tasksOnDate.add(task);","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"        return tasksOnDate;","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"     * Get a shortlisted list of all Tasks that contain the given keyword in their description.","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"     * @param keyword The given keyword to check for","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"     * @return ArrayList of all shortlisted tasks","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"    public static ArrayList\u003cTask\u003e findTasks(String keyword) {","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"        for (Task task : allTasks) {","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"            if (task.description.contains(keyword)) {","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"                foundTasks.add(task);","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"        return foundTasks;","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"     * Get the number of Tasks currently in the TaskList.","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"     * @return Number of existing Tasks","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"    public static int getSize() {","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"        return allTasks.size();","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"     * Marks Task at given index as done.","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"     * @param idx Given index","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"    public static void markDone(int idx) {","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"        allTasks.get(idx).setDone(true);","lastModifiedDate":"2023-02-22"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"     * Marks Task at given index as not done.","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"     * @param idx Given index","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"    public static void markNotDone(int idx) {","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"        allTasks.get(idx).setDone(false);","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":90,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":91,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"honglinshang"},"content":"     * Deletes Task at given index.","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"honglinshang"},"content":"     * @param idx Given index","lastModifiedDate":"2023-02-23"},{"lineNumber":95,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"honglinshang"},"content":"    public static void deleteTask(int idx) {","lastModifiedDate":"2023-02-23"},{"lineNumber":97,"author":{"gitId":"honglinshang"},"content":"        allTasks.remove(idx);","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":99,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":100,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"honglinshang"},"content":"     * Adds a ToDo to the TaskList.","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"honglinshang"},"content":"     * @param param String describing the Todo","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":105,"author":{"gitId":"honglinshang"},"content":"    public static void addToDo(String param) {","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"honglinshang"},"content":"        allTasks.add(new ToDo(param));","lastModifiedDate":"2023-02-22"},{"lineNumber":107,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":108,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":109,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"honglinshang"},"content":"     * Adds a Deadline to the TaskList.","lastModifiedDate":"2023-02-23"},{"lineNumber":111,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":112,"author":{"gitId":"honglinshang"},"content":"     * @param param String describing the Deadline","lastModifiedDate":"2023-02-23"},{"lineNumber":113,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":114,"author":{"gitId":"honglinshang"},"content":"    public static void addDeadline(String param, String by) {","lastModifiedDate":"2023-02-23"},{"lineNumber":115,"author":{"gitId":"honglinshang"},"content":"        allTasks.add(new Deadline(param, by));","lastModifiedDate":"2023-02-22"},{"lineNumber":116,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":117,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":118,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":119,"author":{"gitId":"honglinshang"},"content":"     * Adds an Event to the TaskList.","lastModifiedDate":"2023-02-23"},{"lineNumber":120,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":121,"author":{"gitId":"honglinshang"},"content":"     * @param param String describing the Event","lastModifiedDate":"2023-02-23"},{"lineNumber":122,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":123,"author":{"gitId":"honglinshang"},"content":"    public static void addEvent(String param, String from, String to) {","lastModifiedDate":"2023-02-23"},{"lineNumber":124,"author":{"gitId":"honglinshang"},"content":"        allTasks.add(new Event(param, from, to));","lastModifiedDate":"2023-02-22"},{"lineNumber":125,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":126,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":127,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-02-22"}],"authorContributionMap":{"honglinshang":127}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package duke.task;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"    public static final String TODO_LABEL \u003d \"T\";","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"     * Initialises as in Task.","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"     * @param description String describing the Task","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    public String getType() {","lastModifiedDate":"2023-02-09"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"        return \"todo\";","lastModifiedDate":"2023-02-09"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"        return \"[\" + TODO_LABEL + \"][\" + getStatus() + \"] \" + description;","lastModifiedDate":"2023-02-09"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"honglinshang":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"help","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"list","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"todo","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"todo eat lunch","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"deadline","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"deadline submit tutorial","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"deadline submit tutorial /by 2023-03-03T23:59","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"event","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"event lecture /from 2023-05-03T09:00","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"event lecture /from 2023-05-03T09:00 /to 11:00AM","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"list","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"mark eat lunch","lastModifiedDate":"2023-02-14"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"mark 8","lastModifiedDate":"2023-02-14"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"mark 5","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"list","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"unmark 5","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"list","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"delete eat lunch","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"delete 0","lastModifiedDate":"2023-02-14"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"delete 4","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"list","lastModifiedDate":"2023-02-14"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"event holiday /from 2023-02-25T00:00 /to 2023-03-04T23:59","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"date","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"date 2023-03-03","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"find","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"find cat","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"find book","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"hello","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"bye","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"honglinshang":29}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/exception/*.java ../src/main/java/duke/task/*.java","lastModifiedDate":"2023-02-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"cp save_test.txt /Users/linshang/Documents/cs2113/ip/save.txt","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"    echo \"Output: PASSED\"","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"    # compare save file to expected save file","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"    diff /Users/linshang/Documents/cs2113/ip/save.txt save_result.txt","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"    if [ $? -eq 0 ]","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"    then","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"        echo \"Save file: PASSED\"","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    else","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"        echo \"Save file: FAILED\"","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"        echo \"Test result: FAILED\"","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"        exit 1","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"    fi","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"    echo \"Output: FAILED\"","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"honglinshang":14,"-":37}},{"path":"text-ui-test/save_result.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"T | X | read book","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"D |   | return book /by June 6th","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"E | X | project meeting Aug 6th /from 2pm /to 4pm","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"D |   | submit tutorial /by 2023-03-03T23:59:00","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"E |   | lecture /from 2023-05-03T09:00:00 /to 11:00AM","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"E |   | holiday /from 2023-02-25T00:00:00 /to 2023-03-04T23:59:00","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"honglinshang":6}},{"path":"text-ui-test/save_test.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"T | X | read book","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"D |   | return book /by June 6th","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"D |   | join sports club by tomorrow","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"E | X | project meeting Aug 6th /from 2pm /to 4pm","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"honglinshang":4}}]
