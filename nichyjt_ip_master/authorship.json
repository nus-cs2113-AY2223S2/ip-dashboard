[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"# MAX User Guide","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"MAX is the individual project component for CS2113, AY22/23 Semester 2.","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" /$$      /$$  /$$$$$$  /$$   /$$","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"| $$$    /$$$ /$$__  $$| $$  / $$","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"| $$$$  /$$$$| $$  \\ $$|  $$/ $$/       /^ ^\\  -- BORK! I\u0027M MAX!","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"| $$ $$/$$ $$| $$$$$$$$ \\  $$$$/       / 0 0 \\","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"| $$  $$$| $$| $$__  $$  \u003e$$  $$       V\\ Y /V","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"| $$\\  $ | $$| $$  | $$ /$$/\\  $$       / - \\","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"| $$ \\/  | $$| $$  | $$| $$  \\ $$      /    |","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"|__/     |__/|__/  |__/|__/  |__/     V__)  ||","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"MAX is your *paw*-sonal productivity to help you *MAX*-imize your productivity!","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"## Table of Contents","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"- [MAX User Guide](#max-user-guide)","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"  - [Features](#features)","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    - [Task Creation](#task-creation)","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    - [Task Management](#task-management)","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    - [Persistent State](#persistent-state)","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"  - [Usage](#usage)","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    - [`todo` - Add a TODO task](#todo---add-a-todo-task)","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    - [`deadline` - Add a Deadline Task](#deadline---add-a-deadline-task)","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    - [`event` - Add an Event Task](#event---add-an-event-task)","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    - [`list` - Get your Task List](#list---get-your-task-list)","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    - [`mark` - Tag task as done](#mark---tag-task-as-done)","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    - [`unmark` - Tag task as undone](#unmark---tag-task-as-undone)","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    - [`delete` - Remove a Task](#delete---remove-a-task)","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    - [`fetch` or `find` - Query for a task](#fetch-or-find---query-for-a-task)","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    - [`debug` - Activate debug mode](#debug---activate-debug-mode)","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    - [`exit` - Exit MAX](#exit---exit-max)","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"Max comes with features for you to manage your daily tasks efficiently via CLI.","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"### Task Creation","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"Manage your work by creating tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"MAX provides three types of tasks for creation:","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"1. `Todo`, for all your daily task needs","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"2. `Deadlines`, for tasks that need to be done fast","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"3. `Event`, to manage all sorts of appointments and meetings","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"### Task Management","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"MAX can help you `mark`, `list` and `fetch` your tasks with ease!","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"- MAX allows you to tick off your todos, deadline and events","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"  to give you a sense of accomplishment!","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"- MAX can also list all your tasks to get a overview of what","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"  you\u0027ve done so far!","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"- Need to fetch or find some tasks easily?","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"  Tell MAX what you\u0027re looking for, and he\u0027ll dig it up for you.","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"### Persistent State","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"MAX automatically saves all your task data to your local hard drive.","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"When you start MAX up again,","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"MAX will load up your tasks in the previous session for you automatically!","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"### `todo` - Add a TODO task","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"Create a `todo` type of task for MAX to remember.","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"Syntax:   ","lastModifiedDate":"2023-03-01"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"``todo (your_task_description)``","lastModifiedDate":"2023-03-01"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"`todo buy max 2 balls!`","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"MAX will read your `todo` description,","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"remember it and read it back to you via console after adding it to your task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"Got it. Task added:","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"[T][ ] buy max 2 new balls!","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"You now have 1 tasks in your list.","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"### `deadline` - Add a Deadline Task","lastModifiedDate":"2023-03-01"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"Create a `deadline` type of task for MAX to remember.  ","lastModifiedDate":"2023-03-01"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"Deadlines have a due date, a compulsory parameter that must be included.","lastModifiedDate":"2023-03-01"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"Syntax:","lastModifiedDate":"2023-03-01"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"`deadline (description) --by (YYYY-MM-dd HHmm)`","lastModifiedDate":"2023-03-01"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"`deadline feed max ^_^ --by 2023-02-17 1842`","lastModifiedDate":"2023-03-01"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"MAX will read your `deadline` and due date,","lastModifiedDate":"2023-03-01"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"remember it and read it back to you via console after adding it to your task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"Got it. Task added:","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"[D][ ] feed max ^_^ (by: Feb 17 1842, 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"You now have 1 tasks in your list.","lastModifiedDate":"2023-03-01"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"### `event` - Add an Event Task","lastModifiedDate":"2023-03-01"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"Create a `event` type of task for MAX to remember.  ","lastModifiedDate":"2023-03-01"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"Events have a from and to date.  ","lastModifiedDate":"2023-03-01"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"These are compulsory parameters that must be included.","lastModifiedDate":"2023-03-01"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"Syntax:","lastModifiedDate":"2023-03-01"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"`event (description) --from (YYYY-MM-dd HHmm) --to (YYYY-MM-dd HHmm)`","lastModifiedDate":"2023-03-01"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"Note that the order of `--to` and `--from` arguments do not matter!","lastModifiedDate":"2023-03-01"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"`event Max\u0027s vet appointment! --from 2023-12-13 0842 --to 2023-12-13 1949`","lastModifiedDate":"2023-03-01"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"MAX will read your `event`, from and to dates.  ","lastModifiedDate":"2023-03-01"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"MAX will remember it and read it back to you via console after adding it to your task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"Got it. Task added:","lastModifiedDate":"2023-03-01"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"[E][ ] Max\u0027s vet appointment! (FROM: Dec 13 0842, 2023, TO: Dec 13 1949, 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"You now have 1 tasks in your list.","lastModifiedDate":"2023-03-01"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"### `list` - Get your Task List","lastModifiedDate":"2023-03-01"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"Get your list of tasks.  ","lastModifiedDate":"2023-03-01"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"The list contains an overview of each tasks\u0027 status.","lastModifiedDate":"2023-03-01"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"`list`","lastModifiedDate":"2023-03-01"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"Returns your task list, with tasks sorted in chronological order when it was added.","lastModifiedDate":"2023-03-01"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"Here\u0027s what\u0027s in your list:","lastModifiedDate":"2023-03-01"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"1. [T][ ] buy max 2 new balls!","lastModifiedDate":"2023-03-01"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"2. [D][ ] feed max ^_^ (by: Feb 17 1842, 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"3. [E][ ] Max\u0027s vet appointment! (FROM: Dec 13 0842, 2023, TO: Dec 13 1949, 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"### `mark` - Tag task as done","lastModifiedDate":"2023-03-01"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"Marks a task in the tasklist as done.  ","lastModifiedDate":"2023-03-01"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"The task number is the number of the task from running `list`.","lastModifiedDate":"2023-03-01"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"If the task is already done,","lastModifiedDate":"2023-03-01"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"MAX will still carry on and mark it done again.","lastModifiedDate":"2023-03-01"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"Syntax:  ","lastModifiedDate":"2023-03-01"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"``mark (task_number)``","lastModifiedDate":"2023-03-01"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"`mark 2`","lastModifiedDate":"2023-03-01"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"MAX tags the task as done and reads the done task back to you.","lastModifiedDate":"2023-03-01"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"If the task number is invalid, MAX will let you know.","lastModifiedDate":"2023-03-01"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"Okay, marking this task as done: ","lastModifiedDate":"2023-03-01"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"[D][X] feed max ^_^ (by: Feb 17 1842, 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"### `unmark` - Tag task as undone","lastModifiedDate":"2023-03-01"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"Marks a task in the tasklist as NOT done.  ","lastModifiedDate":"2023-03-01"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"The task number is the number of the task from running `list`.","lastModifiedDate":"2023-03-01"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"If the task is already not done,","lastModifiedDate":"2023-03-01"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"MAX will still carry on and mark it as undone again.","lastModifiedDate":"2023-03-01"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"Syntax:  ","lastModifiedDate":"2023-03-01"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"`unmark (task_number)`","lastModifiedDate":"2023-03-01"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"`unmark 2`","lastModifiedDate":"2023-03-01"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"MAX tags the task as done and reads the done task back to you.","lastModifiedDate":"2023-03-01"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"If the task number is invalid, MAX will let you know.","lastModifiedDate":"2023-03-01"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"Okay, setting this task as undone: ","lastModifiedDate":"2023-03-01"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"[D][ ] feed max ^_^ (by: Feb 17 1842, 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"### `delete` - Remove a Task","lastModifiedDate":"2023-03-01"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"Removes a task from your task list.","lastModifiedDate":"2023-03-01"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"The task number is the number of the task from running `list`.","lastModifiedDate":"2023-03-01"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"Syntax:  ","lastModifiedDate":"2023-03-01"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"`delete (task_number)`","lastModifiedDate":"2023-03-01"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"`delete 2`","lastModifiedDate":"2023-03-01"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"MAX removes the task matching the task number from your tasklist.","lastModifiedDate":"2023-03-01"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"After that, MAX reads the removed task back to you.","lastModifiedDate":"2023-03-01"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"If the task number is invalid, MAX will let you know.","lastModifiedDate":"2023-03-01"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":232,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":233,"author":{"gitId":"nichyjt"},"content":"Woof woof this task will be rem-woofed:","lastModifiedDate":"2023-03-01"},{"lineNumber":234,"author":{"gitId":"nichyjt"},"content":"[D][ ] feed max ^_^ (by: Feb 17 1842, 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":235,"author":{"gitId":"nichyjt"},"content":"You now have 2 tasks in your list.","lastModifiedDate":"2023-03-01"},{"lineNumber":236,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":237,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":238,"author":{"gitId":"nichyjt"},"content":"### `fetch` or `find` - Query for a task","lastModifiedDate":"2023-03-01"},{"lineNumber":239,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":240,"author":{"gitId":"nichyjt"},"content":"Ask MAX to fetch tasks that match a search query.  ","lastModifiedDate":"2023-03-01"},{"lineNumber":241,"author":{"gitId":"nichyjt"},"content":"Fetch and Find do the same thing. Find is an alias for Fetch.","lastModifiedDate":"2023-03-01"},{"lineNumber":242,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":243,"author":{"gitId":"nichyjt"},"content":"Syntax:","lastModifiedDate":"2023-03-01"},{"lineNumber":244,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":245,"author":{"gitId":"nichyjt"},"content":"`find (your_query)`","lastModifiedDate":"2023-03-01"},{"lineNumber":246,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":247,"author":{"gitId":"nichyjt"},"content":"The search query can be an arbitrarily long string with spaces.","lastModifiedDate":"2023-03-01"},{"lineNumber":248,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":249,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":250,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":251,"author":{"gitId":"nichyjt"},"content":"`find max`","lastModifiedDate":"2023-03-01"},{"lineNumber":252,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":253,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":254,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":255,"author":{"gitId":"nichyjt"},"content":"MAX tags the task as done and reads the done task back to you.","lastModifiedDate":"2023-03-01"},{"lineNumber":256,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":257,"author":{"gitId":"nichyjt"},"content":"If the task number is invalid, MAX will let you know.","lastModifiedDate":"2023-03-01"},{"lineNumber":258,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":259,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":260,"author":{"gitId":"nichyjt"},"content":"Max sniffed out these matching tasks:","lastModifiedDate":"2023-03-01"},{"lineNumber":261,"author":{"gitId":"nichyjt"},"content":"1. [T][ ] buy max 2 new balls!","lastModifiedDate":"2023-03-01"},{"lineNumber":262,"author":{"gitId":"nichyjt"},"content":"2. [D][ ] feed max ^_^ (by: Feb 17 1842, 2023)","lastModifiedDate":"2023-03-01"},{"lineNumber":263,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":264,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":265,"author":{"gitId":"nichyjt"},"content":"### `debug` - Activate debug mode","lastModifiedDate":"2023-03-01"},{"lineNumber":266,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":267,"author":{"gitId":"nichyjt"},"content":"Activates a developer-friendly mode for testing.  ","lastModifiedDate":"2023-03-01"},{"lineNumber":268,"author":{"gitId":"nichyjt"},"content":"In debug mode, MAX will not save any data to disk.","lastModifiedDate":"2023-03-01"},{"lineNumber":269,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":270,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":271,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":272,"author":{"gitId":"nichyjt"},"content":"`debug`","lastModifiedDate":"2023-03-01"},{"lineNumber":273,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":274,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-01"},{"lineNumber":275,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":276,"author":{"gitId":"nichyjt"},"content":"MAX activates debug mode and warns you of the implications.","lastModifiedDate":"2023-03-01"},{"lineNumber":277,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":278,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":279,"author":{"gitId":"nichyjt"},"content":"--- BORK BORK ---- THIS IS IMPORTANT! ---- BORK BORK ---","lastModifiedDate":"2023-03-01"},{"lineNumber":280,"author":{"gitId":"nichyjt"},"content":"MAX is now in debug mode. No data will be saved or loaded from disk.","lastModifiedDate":"2023-03-01"},{"lineNumber":281,"author":{"gitId":"nichyjt"},"content":"To exit debug mode, restart MAX.","lastModifiedDate":"2023-03-01"},{"lineNumber":282,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":283,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":284,"author":{"gitId":"nichyjt"},"content":"### `exit` - Exit MAX","lastModifiedDate":"2023-03-01"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":286,"author":{"gitId":"nichyjt"},"content":"Exits MAX, returning you to your shell that executed MAX.","lastModifiedDate":"2023-03-01"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":290,"author":{"gitId":"nichyjt"},"content":"`exit`","lastModifiedDate":"2023-03-01"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":294,"author":{"gitId":"nichyjt"},"content":"MAX says goodbye.","lastModifiedDate":"2023-03-01"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":296,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":297,"author":{"gitId":"nichyjt"},"content":"Goodbye! Thank you for using MAX.","lastModifiedDate":"2023-03-01"},{"lineNumber":298,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"nichyjt":275,"-":23}},{"path":"src/main/java/max/Max.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import max.ui.Ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import max.command.Command;","lastModifiedDate":"2023-02-06"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import max.command.CommandParser;","lastModifiedDate":"2023-02-06"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import max.command.CommandValidator;","lastModifiedDate":"2023-02-06"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import max.command.InvalidCommandException;","lastModifiedDate":"2023-02-06"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import max.task.*;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" * MAX is a CLI personal productivity assistant, built as part of CS2113 iP","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" * MAX allows users to track and manage their tasks, and offers persistent data storage.","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" * MAX can track tasks that are: Deadlines, events and todos that encompass most users\u0027 needs","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" * MAX also comes with a special DEBUG mode for developers who want to extend on MAX for testing","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"public class Max {","lastModifiedDate":"2023-02-06"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    private static boolean isListening;","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    private static boolean isDebugMode \u003d false;","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    private static Ui ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static TaskManager taskManager;","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private static final CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    private static final CommandValidator commandValidator \u003d new CommandValidator();","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_DEBUG_MODE \u003d \"MAX is now in debug mode. No data will be saved/loaded.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_DEBUG_HELP \u003d \"To exit debug mode, restart MAX.\";","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_GOODBYE \u003d \"Goodbye! Thank you for using MAX.\";","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Awoo? I don\u0027t understand that command.\";","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    public static void setIsListening(boolean isListening) {","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"        Max.isListening \u003d isListening;","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"     * Kill Max\u0027s event driver loop and print the goodbye message","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    public static void exit() {","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        setIsListening(false);","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_GOODBYE);","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    private static void startDebugMode() {","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"        isDebugMode \u003d true;","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"        taskManager.resetTaskList();","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"        ui.notifyImportant();","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_DEBUG_MODE);","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_DEBUG_HELP);","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    private static void executeList() {","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"        taskManager.printTasklist();","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"     * Marks a task as done or not done using TaskManager","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * @param commandPayload argument-payload map of user input","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"     * @param mainCommand    command derived from user input","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"    private static void executeMarkTask(HashMap\u003cString, String\u003e commandPayload, Command mainCommand) {","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        String mainCommandString \u003d mainCommand.getMainCommand();","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"        String taskNumString \u003d commandPayload.get(mainCommandString);","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"        if (mainCommand.equals(Command.MARK)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"            taskManager.markTask(taskNumString, true);","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"        } else if (mainCommand.equals(Command.UNMARK)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"            taskManager.markTask(taskNumString, false);","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"     * Adds a task using TaskManager","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"     * @param commandPayload argument-payload map of user input","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"     * @param mainCommand    command derived from user input","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"    private static void executeAddTask(HashMap\u003cString, String\u003e commandPayload, Command mainCommand) {","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            taskManager.createTask(commandPayload, mainCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        } catch (TaskException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(exception.getMessage());","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"     * Removes a task using TaskManager","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"     * @param commandPayload argument-payload map of user input","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"     * @param mainCommand    command derived from user input","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    private static void executeDeleteTask(HashMap\u003cString, String\u003e commandPayload, Command mainCommand) {","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        String taskNumString \u003d commandPayload.get(mainCommand.getMainCommand());","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        taskManager.deleteTask(taskNumString);","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"     * Prints error message for unknown commands","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"    private static void handleUnknownCommand() {","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"     * Finds tasks based on a query using TaskManager","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     * @param commandPayload argument-payload map of user input","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"     * @param mainCommand    command derived from user input","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"    private static void executeFindTasks(HashMap\u003cString, String\u003e commandPayload, Command mainCommand) {","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        String argumentKey \u003d mainCommand.getMainCommand();","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        taskManager.findTasks(commandPayload, argumentKey);","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     * Matches the mainCommand to the proper task method to be executed","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"     * @param commandPayload argument-payload map of user input","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"     * @param mainCommand    command derived from user input","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"    private static void executeCommand(HashMap\u003cString, String\u003e commandPayload, Command mainCommand) {","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"        switch (mainCommand) {","lastModifiedDate":"2023-01-31"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"        case EXIT:","lastModifiedDate":"2023-02-05"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"            exit();","lastModifiedDate":"2023-02-05"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-26"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"        case LIST:","lastModifiedDate":"2023-02-05"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"            executeList();","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-26"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"        case MARK:","lastModifiedDate":"2023-02-05"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        case UNMARK:","lastModifiedDate":"2023-02-05"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"            executeMarkTask(commandPayload, mainCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-26"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        case TASK_EVENT:","lastModifiedDate":"2023-02-05"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"        case TASK_DEADLINE:","lastModifiedDate":"2023-02-05"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"        case TASK_TODO:","lastModifiedDate":"2023-02-05"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"            executeAddTask(commandPayload, mainCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-31"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"        case DELETE:","lastModifiedDate":"2023-02-13"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"            executeDeleteTask(commandPayload, mainCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-02-13"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"        case DEBUG:","lastModifiedDate":"2023-02-13"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"            startDebugMode();","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-02-13"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        case FIND:","lastModifiedDate":"2023-02-25"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        case FETCH:","lastModifiedDate":"2023-02-25"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"            executeFindTasks(commandPayload, mainCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-02-25"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"        default:","lastModifiedDate":"2023-01-26"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"            handleUnknownCommand();","lastModifiedDate":"2023-03-15"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-26"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"     * Takes in user input as a string, figures out what it is and executes the correct command action.","lastModifiedDate":"2023-03-15"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"     * @param command Unprocessed user input from console","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"    public static void handleCommand(String command) {","lastModifiedDate":"2023-03-15"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        String[] commandList \u003d commandParser.splitIntoCommands(command);","lastModifiedDate":"2023-03-15"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"        // Process subcommands into \u003csubcommand, payload\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e commandPayload \u003d commandParser.getCommandPayloadMap(commandList);","lastModifiedDate":"2023-03-15"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"        Command mainCommand \u003d commandParser.getCommandType(commandList[0]);","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"        // Ensure command has correct argument size and correct argument names","lastModifiedDate":"2023-03-15"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"            commandValidator.validateCommandPayloadMap(mainCommand, commandPayload);","lastModifiedDate":"2023-03-15"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"        } catch (InvalidCommandException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(exception.getMessage());","lastModifiedDate":"2023-03-15"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"        // Assertion: commandPayload is correct for its given mainCommand","lastModifiedDate":"2023-03-15"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"        executeCommand(commandPayload, mainCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"        // Backup data after every command","lastModifiedDate":"2023-02-13"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"        if (!isDebugMode) {","lastModifiedDate":"2023-02-13"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"            taskManager.saveData();","lastModifiedDate":"2023-02-13"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"        // Init task subsystem (Controller)","lastModifiedDate":"2023-02-13"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"        taskManager \u003d new TaskManager();","lastModifiedDate":"2023-02-13"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"        taskManager.loadData();","lastModifiedDate":"2023-02-13"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"        // Greet when data has been loaded and problematic saved data has been highlighted","lastModifiedDate":"2023-02-13"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-03-03"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"        ui.greet();","lastModifiedDate":"2023-02-23"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"        setIsListening(true);","lastModifiedDate":"2023-01-26"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"        // Init IO","lastModifiedDate":"2023-01-26"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-26"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"        // Event driver loop to continuously listen for inputs","lastModifiedDate":"2023-01-26"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"        while (isListening) {","lastModifiedDate":"2023-01-26"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"            ui.printCommandPrompt();","lastModifiedDate":"2023-02-23"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"            String command \u003d input.nextLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"            ui.printBorder();","lastModifiedDate":"2023-02-23"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"            handleCommand(command);","lastModifiedDate":"2023-01-26"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"            ui.printBorder();","lastModifiedDate":"2023-02-23"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"nichyjt":203,"-":3}},{"path":"src/main/java/max/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/*","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * Defines the structure of commands from user input","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * Generally, a user command consists of three components.","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * 1. Main Command","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * 2. Arguments","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * 3. Payload","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" * User input can be abstracted into:","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * \u003cMainCommand\u003e (\u003cPayload\u003e) (--\u003cArgument\u003e (\u003cArgument payload\u003e) --(\u003cArgument\u003e (...)) ... )","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"public enum Command {","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    TASK_TODO(1, \"todo\", new String[]{}),","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    TASK_DEADLINE(2, \"deadline\", new String[]{\"by\"}),","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    TASK_EVENT(3, \"event\", new String[]{\"from\", \"to\"}),","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    MARK(1, \"mark\", new String[]{}),","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    UNMARK(1, \"unmark\", new String[]{}),","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    DELETE(1, \"delete\", new String[]{}),","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    EXIT(1, \"exit\", new String[]{}),","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    LIST(1, \"list\", new String[]{}),","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    DEBUG(1, \"debug\", new String[]{}),","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    FIND(1, \"find\", new String[]{}),","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    FETCH(1, \"fetch\", new String[]{}),","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    UNKNOWN_COMMAND(1, \"\", new String[]{});","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    // Defines how many arguments (subcommands + main command) a Command has","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    // The argument length for a command must be minimally 1 (itself) e.g. list, mark","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private int argumentLength;","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    private String mainCommand;","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    private String[] subcommandNames;","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    Command(int argumentLength, String commandName, String[] subcommandNames) {","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"        this.argumentLength \u003d argumentLength;","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        this.mainCommand \u003d commandName;","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"        this.subcommandNames \u003d subcommandNames;","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"     * Get the number of arguments expected for a given command","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"     * @return number of arguments expected","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    public int getArgumentLength() {","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"        return argumentLength;","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"     * Get the string format for an action (main command)","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     * e.g. list, delete, mark, deadline","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"     * @return string value of the main command","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    public String getMainCommand() {","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"        return mainCommand;","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * Get the string list for arguments needed by the main command","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"     * e.g. to, from for","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"     * @return String list for the subcommands","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"    public String[] getSubcommandNames() {","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"        return subcommandNames;","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"nichyjt":67}},{"path":"src/main/java/max/command/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.command;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"public class CommandParser {","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"    private static final int ZERO_INDEX_START \u003d 0;","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"    private static final int ONE_INDEX_START \u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"    private static final int ONE_INDEX_OFFSET \u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"     * Constructs a CommandParser.","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"     * A CommandParser is used to process user input from a defined format \u003cp\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"     * We define the user input format via console to consist of: \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"     * 1. COMMANDS - user input substring consisting of an argument and payload \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"     * 2. ARGUMENTS - command substring representing the action/parameters of the command \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"     * 3. PAYLOADS - value of the action/parameters \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"     * For example, a given user input: \u003ci\u003e\"deadline work on CS2113 --by Sunday\"\u003c/i\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eHas commands [\"deadline work on CS2113\", \"by Sunday\"]\u003c/li\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eHas arguments [\"deadline\", \"by\"]\u003c/li\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eHas payloads [\"work on CS2113\", [\"Sunday\"]\u003c/li\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    public CommandParser() {","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"     * Takes in a user input (string) in its entirety and partitions it into its commands in an array. \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"     * A command is defined as either: \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"     * 1. The first word in the user input and its payload \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"     * 2. OR the word immediately following \" --\" and its payload \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"     * For example: \u003ci\u003edeadline my_task --by -xyz sunday-monday\u003c/i\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"     * Will render as: [\"deadline my_task\", \"by -xyz sunday-monday\"]","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"     * @param rawCommand user console input in its entirety","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"     * @return String array of commands","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    public String[] splitIntoCommands(String rawCommand) {","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"        return rawCommand.split(\" --\");","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"     * Processes a list of commands and maps each command\u0027s argument to its payload \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"     * Each command consists of an argument and payload \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     * For example, for user input: \"deadline work on CS2113 --by Sunday\"","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003e    Has commands [\"deadline work on CS2113\", \"by Sunday\"]    \u003c/li\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003e    Has arguments [\"deadline\", \"by\"]                         \u003c/li\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003e    Has payloads [\"work on CS2113\", [\"Sunday\"]               \u003c/li\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"     * Thus,  as: \u003c\"deadline\", \"work on CS2113\"\u003e, \u003cby, Sunday\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"     * @param commandList list of commands","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"     * @return HashMap","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"    public HashMap\u003cString, String\u003e getCommandPayloadMap(String[] commandList) {","lastModifiedDate":"2023-02-06"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e commandMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        for (String cmdStr : commandList) {","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            String cmd \u003d extractArgumentFromCommand(cmdStr);","lastModifiedDate":"2023-02-26"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"            String text \u003d extractPayloadFromCommand(cmdStr);","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"            commandMap.put(cmd, text);","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"        return commandMap;","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"     * Return the argument from a command \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"     * For example, the command: \"by Friday, 13th\" \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * Should return [\"by\"]","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"     * @param command the command to be processed","lastModifiedDate":"2023-02-26"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"     * @return command\u0027s payload rendered as a string","lastModifiedDate":"2023-02-26"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"    private static String extractArgumentFromCommand(String command) {","lastModifiedDate":"2023-02-26"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        String[] words \u003d command.split(\" \");","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        return words[ZERO_INDEX_START];","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"     * Return the payload from a command text \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"     * For example, the command: \"by Friday, 13th\" \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"     * Should return [\"by\" , \"Friday, 13th\"]","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"     * @param command the command to be processed","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"     * @return command\u0027s payload rendered as a string","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"    private static String extractPayloadFromCommand(String command) {","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        String[] words \u003d command.split(\" \");","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        String subcommandText \u003d \"\";","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d ONE_INDEX_START; i \u003c words.length; ++i) {","lastModifiedDate":"2023-03-03"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"            subcommandText \u003d subcommandText.concat(words[i]);","lastModifiedDate":"2023-02-05"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"            if (i !\u003d words.length - ONE_INDEX_OFFSET) {","lastModifiedDate":"2023-03-03"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"                subcommandText \u003d subcommandText.concat(\" \");","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"        return subcommandText;","lastModifiedDate":"2023-02-05"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     * Returns what valid main command the input string represents.","lastModifiedDate":"2023-02-26"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"     * A main command is a valid command defined under the Command enum","lastModifiedDate":"2023-02-26"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"     * The input string should be the FIRST argument input of any given command.","lastModifiedDate":"2023-02-26"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"     * For example, the input \u003ci\u003e\"mark 10\"\u003c/i\u003e has first argument \u003ci\u003e`mark`\u003c/i\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"     * @param mainCommand the first argument input, i.e. the command that the user wants to execute (e.g. list)","lastModifiedDate":"2023-02-26"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     * @return Command type of the detected command. Returns UNKNOWN_COMMAND for unmatchable inputs.","lastModifiedDate":"2023-02-26"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"    public Command getCommandType(String mainCommand) {","lastModifiedDate":"2023-02-26"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        // Extract the main command from its payload","lastModifiedDate":"2023-02-26"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"        String commandName \u003d extractArgumentFromCommand(mainCommand);","lastModifiedDate":"2023-02-26"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        // Find out which Command commandName is","lastModifiedDate":"2023-02-05"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        Command[] commands \u003d Command.values();","lastModifiedDate":"2023-02-05"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"        for (Command command : commands) {","lastModifiedDate":"2023-02-05"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"            if (command.getMainCommand().equals(commandName)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"                return command;","lastModifiedDate":"2023-02-05"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"        return Command.UNKNOWN_COMMAND;","lastModifiedDate":"2023-02-05"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"nichyjt":130}},{"path":"src/main/java/max/command/CommandValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.command;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * CommandValidator helps check for the correctness the arguments that have been processed","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"public class CommandValidator {","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_INVALID_ARG_NUM_EXPECTED \u003d \"Invalid number of arguments. Expected: \";","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_INVALID_ARG_NUM_GOT \u003d \", Got: \";","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_MISSING_ARG \u003d \"Missing argument: \";","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    public CommandValidator() {","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"     * Takes in a command type to check the commandPayload map against \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"     * Checks for 2 things:","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"     * 1. All required commands are present \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"     * 2. Only the required commands are present \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"     * @param command         command type to check the argumentPayload map against","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"     * @param argumentPayload the map containing argument-payload pairs","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"     * @throws InvalidCommandException if there are missing or too many arguments","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    public void validateCommandPayloadMap(Command command, HashMap\u003cString, String\u003e argumentPayload) throws InvalidCommandException {","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"        String[] requiredSubcommands \u003d command.getSubcommandNames();","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        int expectedSize \u003d command.getArgumentLength();","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        if (argumentPayload.size() !\u003d expectedSize) {","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d MESSAGE_INVALID_ARG_NUM_EXPECTED + expectedSize;","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"            errorMessage +\u003d MESSAGE_INVALID_ARG_NUM_GOT + argumentPayload.size();","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"            throw new InvalidCommandException(errorMessage);","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"        // Ensure that all required subcommands exist","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        for (String subcommand : requiredSubcommands) {","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"            if (!argumentPayload.containsKey(subcommand)) {","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"                throw new InvalidCommandException(MESSAGE_MISSING_ARG + subcommand);","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"nichyjt":43}},{"path":"src/main/java/max/command/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.command;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"    public InvalidCommandException(String errorMessage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"nichyjt":7}},{"path":"src/main/java/max/data/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.data;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import max.ui.Ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import max.task.*;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import java.io.File;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" * Storage is the interface for MAX to load/save data.","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * Internally, Storage has functions to tokenize \u0026 de-tokenize task data from MAX.","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * Storage will automatically create a data folder to store data for persistence.","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"public class Storage {","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    private static final String DELIMITER \u003d \" -- \";","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    // These constants define the index position of task arguments in the token array","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    private static final int TASK_TYPE_INDEX \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    private static final int TASK_DONE_INDEX \u003d 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    private static final int TASK_DESCRIPTION_INDEX \u003d 2;","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private static final int TASK_START_DATE_INDEX \u003d 3;","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    private static final int TASK_DUE_DATE_INDEX \u003d 3;","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    private static final int TASK_END_DATE_INDEX \u003d 4;","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    // Index and size integer constants","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    private static final int SIZE_EMPTY \u003d 0;","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private static final int ZERO_INDEX_START \u003d 0;","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    private static final int ONE_INDEX_START \u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    private static final int MIN_TASK_ARG_LENGTH \u003d 3;","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    private static final int EMPTY_FILE_TASK_LENGTH \u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    // Delimiter constants","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_NEWLINE_TOKEN \u003d \"\\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_DONE_TOKEN \u003d \"1\";","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_UNDONE_TOKEN \u003d \"0\";","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_TODO_TOKEN \u003d \"T\";","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_EVENT_TOKEN \u003d \"E\";","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_DEADLINE_TOKEN \u003d \"D\";","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_FILENAME \u003d \"tasklist\";","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_FILE_EXT \u003d \".txt\";","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_DATA_DIR \u003d \"data\";","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_CURR_DIR \u003d \".\";","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    // The following constants define set messages","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"    private static final String EXCEPTION_MAKE_FILE_FAIL \u003d \"Failed to create new file!\";","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    private static final String EXCEPTION_WRITE_DATA_FAIL \u003d \"Failed to write data!\";","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    private static final String EXCEPTION_BAD_TASK_LEN \u003d \"Invalid task token length!\";","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    private static final String EXCEPTION_MISSING_TOKEN \u003d \"Missing a task token!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    private static final String EXCEPTION_UNKNOWN_LOAD_ERROR \u003d \"Unknown error encountered while loading data!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_TASK_FAIL_LOAD \u003d \"There are tasks I couldn\u0027t load \u003e\u003c\\\"\";","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_TASK_REINPUT \u003d \"You MUST manually input these tasks again:\";","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_BAD_TASK \u003d \"\\nBad task: \";","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_COLON_SEPARATOR \u003d \": \";","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"    private static Ui ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"    Path maxDataDirectory;","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"     * Constructs a Storage class instance to help with saving/loading of data","lastModifiedDate":"2023-02-26"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    public Storage() {","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"        maxDataDirectory \u003d Paths.get(TASK_CURR_DIR, TASK_DATA_DIR);","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"        // Create data directory if it does not exist","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"            Files.createDirectories(maxDataDirectory);","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"            ui.printError(exception.getMessage());","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"     * Check if a file exists in the ./data directory \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"     * Notify the user via console on errors, if any. \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"     * Automatically create the file if the file does not exist.","lastModifiedDate":"2023-02-26"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"     * @param filename Filename to check","lastModifiedDate":"2023-02-26"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"     * @return True if file exists, else False","lastModifiedDate":"2023-02-26"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"    private boolean doesFileExist(String filename) {","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"        Path pathToFilename \u003d maxDataDirectory.resolve(filename + TASK_FILE_EXT);","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        File maxDataFile \u003d new File(pathToFilename.toUri());","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"        boolean isDataExist \u003d maxDataFile.exists();","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"        if (!isDataExist) {","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"            try {","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"                maxDataFile.createNewFile();","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"            } catch (IOException exception) {","lastModifiedDate":"2023-02-23"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"                ui.notifyImportant();","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"                ui.printError(EXCEPTION_MAKE_FILE_FAIL);","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"                ui.printMessage(exception.getMessage());","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        return isDataExist;","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"     * Takes in a list of Tasks to tokenize into a string \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"     * Each task will be tokenized in this format: \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"     * {Label} -- {isDone} -- {description} { -- [otherArgs] ...} \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"     * The command validator filters out rogue usage of \u0027--\u0027 between words. \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"     * This guarantees that all our task inputs can be properly delimited by \u0027--\u0027 \u003cbr\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"     * @param taskList","lastModifiedDate":"2023-02-26"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"     * @return string of all the tokenized tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"    private String tokenizeTasks(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-02-26"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        String tokenizedString \u003d \"\";","lastModifiedDate":"2023-02-23"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-02-26"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"            String taskString \u003d task.getTaskLabel() + DELIMITER;","lastModifiedDate":"2023-02-26"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"            String isDone \u003d task.isDone() ? TASK_DONE_TOKEN : TASK_UNDONE_TOKEN;","lastModifiedDate":"2023-02-26"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"            taskString +\u003d isDone + DELIMITER;","lastModifiedDate":"2023-02-26"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"            taskString +\u003d task.getRawDescription();","lastModifiedDate":"2023-02-23"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"            if (task instanceof Event) {","lastModifiedDate":"2023-02-23"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"                // Task has other arguments. Add them in","lastModifiedDate":"2023-02-23"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"                taskString +\u003d DELIMITER;","lastModifiedDate":"2023-02-26"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"                taskString +\u003d ((Event) task).getEventFrom() + DELIMITER;","lastModifiedDate":"2023-02-26"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"                taskString +\u003d ((Event) task).getEventTo();","lastModifiedDate":"2023-02-23"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"            } else if (task instanceof Deadline) {","lastModifiedDate":"2023-02-23"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"                // Task has other arguments. Add them in","lastModifiedDate":"2023-02-23"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"                taskString +\u003d DELIMITER;","lastModifiedDate":"2023-02-26"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"                taskString +\u003d ((Deadline) task).getDueDate();","lastModifiedDate":"2023-02-23"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"            tokenizedString \u003d tokenizedString.concat(taskString + TASK_NEWLINE_TOKEN);","lastModifiedDate":"2023-02-26"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"        return tokenizedString;","lastModifiedDate":"2023-02-23"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"    private void printErrorMessages(ArrayList\u003cString\u003e errors) {","lastModifiedDate":"2023-02-23"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"        if (errors.size() \u003d\u003d SIZE_EMPTY) {","lastModifiedDate":"2023-03-03"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-02-23"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"        ui.notifyImportant();","lastModifiedDate":"2023-02-23"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"        ui.printError(MESSAGE_TASK_FAIL_LOAD);","lastModifiedDate":"2023-02-26"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_TASK_REINPUT);","lastModifiedDate":"2023-02-26"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        int count \u003d ONE_INDEX_START;","lastModifiedDate":"2023-03-03"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        for (String error : errors) {","lastModifiedDate":"2023-02-23"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(count + MESSAGE_COLON_SEPARATOR + error);","lastModifiedDate":"2023-02-26"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"            count +\u003d 1;","lastModifiedDate":"2023-03-15"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"    private Todo buildTodo(String[] taskComponents) {","lastModifiedDate":"2023-03-15"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"        String taskDescription \u003d taskComponents[TASK_DESCRIPTION_INDEX];","lastModifiedDate":"2023-03-15"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"        return new Todo(taskDescription);","lastModifiedDate":"2023-03-15"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"    private Deadline buildDeadline(String[] taskComponents) throws StorageLoadException {","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"        String taskDescription \u003d taskComponents[TASK_DESCRIPTION_INDEX];","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"        String taskStart;","lastModifiedDate":"2023-03-15"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"            taskStart \u003d taskComponents[TASK_DUE_DATE_INDEX];","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"        } catch (IndexOutOfBoundsException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"            throw new StorageLoadException(EXCEPTION_MISSING_TOKEN);","lastModifiedDate":"2023-03-15"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"        return new Deadline(taskDescription, taskStart);","lastModifiedDate":"2023-03-15"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"    private Event buildEvent(String[] taskComponents) throws StorageLoadException {","lastModifiedDate":"2023-03-15"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"        String taskDescription \u003d taskComponents[TASK_DESCRIPTION_INDEX];","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"        String taskStart;","lastModifiedDate":"2023-03-15"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"        String taskEnd;","lastModifiedDate":"2023-03-15"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"            taskStart \u003d taskComponents[TASK_START_DATE_INDEX];","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"            taskEnd \u003d taskComponents[TASK_END_DATE_INDEX];","lastModifiedDate":"2023-03-15"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"        } catch (IndexOutOfBoundsException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"            throw new StorageLoadException(EXCEPTION_MISSING_TOKEN);","lastModifiedDate":"2023-03-15"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"        return new Event(taskDescription, taskStart, taskEnd);","lastModifiedDate":"2023-03-15"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"    private void markNewTask(Task newTask, boolean isTaskDone) {","lastModifiedDate":"2023-03-15"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"        if (isTaskDone) {","lastModifiedDate":"2023-03-15"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"            newTask.markAsDone();","lastModifiedDate":"2023-03-15"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-03-15"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"            newTask.markAsUndone();","lastModifiedDate":"2023-03-15"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"    private Task detokenizeTaskString(String taskString) throws StorageLoadException {","lastModifiedDate":"2023-03-15"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"        String[] taskComponents \u003d taskString.split(DELIMITER);","lastModifiedDate":"2023-02-26"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"        // Sanity check - taskComponents should minimally have length 3 - task label, done status and description","lastModifiedDate":"2023-03-15"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"        if (taskComponents.length \u003c MIN_TASK_ARG_LENGTH) {","lastModifiedDate":"2023-03-03"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"            throw new StorageLoadException(EXCEPTION_BAD_TASK_LEN);","lastModifiedDate":"2023-03-15"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"        Task newTask;","lastModifiedDate":"2023-02-23"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"        String taskType \u003d taskComponents[TASK_TYPE_INDEX];","lastModifiedDate":"2023-02-23"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"        boolean isTaskDone \u003d taskComponents[TASK_DONE_INDEX].equals(TASK_DONE_TOKEN);","lastModifiedDate":"2023-02-26"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"        switch (taskType) {","lastModifiedDate":"2023-02-23"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"        case TASK_TODO_TOKEN:","lastModifiedDate":"2023-02-26"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"            newTask \u003d buildTodo(taskComponents);","lastModifiedDate":"2023-03-15"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"        case TASK_DEADLINE_TOKEN:","lastModifiedDate":"2023-02-26"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"            newTask \u003d buildDeadline(taskComponents);","lastModifiedDate":"2023-03-15"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"        case TASK_EVENT_TOKEN:","lastModifiedDate":"2023-02-26"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"            newTask \u003d buildEvent(taskComponents);","lastModifiedDate":"2023-03-15"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-02-23"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"        default:","lastModifiedDate":"2023-02-23"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"            throw new StorageLoadException(EXCEPTION_UNKNOWN_LOAD_ERROR);","lastModifiedDate":"2023-03-15"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"        markNewTask(newTask, isTaskDone);","lastModifiedDate":"2023-03-15"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"        return newTask;","lastModifiedDate":"2023-03-15"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"     * Processes a tokenized string and formats it into a list of Tasks \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"     * The Tasks will be loaded on a best-effort basis. \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"     * Instead of throwing an exception, problematic taskStrings will be \u003ci\u003eskipped\u003c/i\u003e. \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"     * All problematic tokens will be printed afterwards for the user\u0027s information.","lastModifiedDate":"2023-03-15"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"     * @param tokenizedString tokenized string format of the tasks","lastModifiedDate":"2023-03-15"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"     * @return List of Tasks that were successfully detokenized","lastModifiedDate":"2023-03-15"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cTask\u003e detokenizeTasks(String tokenizedString) {","lastModifiedDate":"2023-03-15"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-15"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"        String[] tasks \u003d tokenizedString.split(TASK_NEWLINE_TOKEN);","lastModifiedDate":"2023-03-15"},{"lineNumber":232,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":233,"author":{"gitId":"nichyjt"},"content":"        // Edge case: Handle empty file","lastModifiedDate":"2023-03-15"},{"lineNumber":234,"author":{"gitId":"nichyjt"},"content":"        if (tasks.length \u003d\u003d EMPTY_FILE_TASK_LENGTH \u0026\u0026 tasks[ZERO_INDEX_START].length() \u003d\u003d SIZE_EMPTY) {","lastModifiedDate":"2023-03-15"},{"lineNumber":235,"author":{"gitId":"nichyjt"},"content":"            return taskArrayList;","lastModifiedDate":"2023-03-15"},{"lineNumber":236,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":237,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":238,"author":{"gitId":"nichyjt"},"content":"        // Holds the error messages for each bad task for printing","lastModifiedDate":"2023-03-15"},{"lineNumber":239,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e badTaskStrings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-15"},{"lineNumber":240,"author":{"gitId":"nichyjt"},"content":"        for (String taskString : tasks) {","lastModifiedDate":"2023-03-15"},{"lineNumber":241,"author":{"gitId":"nichyjt"},"content":"            try {","lastModifiedDate":"2023-03-15"},{"lineNumber":242,"author":{"gitId":"nichyjt"},"content":"                Task detokenizedTask \u003d detokenizeTaskString(taskString);","lastModifiedDate":"2023-03-15"},{"lineNumber":243,"author":{"gitId":"nichyjt"},"content":"                taskArrayList.add(detokenizedTask);","lastModifiedDate":"2023-03-15"},{"lineNumber":244,"author":{"gitId":"nichyjt"},"content":"            } catch (StorageLoadException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":245,"author":{"gitId":"nichyjt"},"content":"                badTaskStrings.add(exception.getMessage());","lastModifiedDate":"2023-03-15"},{"lineNumber":246,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":247,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":248,"author":{"gitId":"nichyjt"},"content":"        printErrorMessages(badTaskStrings);","lastModifiedDate":"2023-02-23"},{"lineNumber":249,"author":{"gitId":"nichyjt"},"content":"        return taskArrayList;","lastModifiedDate":"2023-02-23"},{"lineNumber":250,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":251,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":252,"author":{"gitId":"nichyjt"},"content":"    private void writeToDisk(String data, String filename) {","lastModifiedDate":"2023-02-23"},{"lineNumber":253,"author":{"gitId":"nichyjt"},"content":"        Path pathToFilename \u003d maxDataDirectory.resolve(filename + TASK_FILE_EXT);","lastModifiedDate":"2023-02-26"},{"lineNumber":254,"author":{"gitId":"nichyjt"},"content":"        File maxDataFile \u003d new File(pathToFilename.toUri());","lastModifiedDate":"2023-02-23"},{"lineNumber":255,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":256,"author":{"gitId":"nichyjt"},"content":"            FileWriter writer \u003d new FileWriter(maxDataFile.getAbsolutePath());","lastModifiedDate":"2023-02-23"},{"lineNumber":257,"author":{"gitId":"nichyjt"},"content":"            writer.write(data);","lastModifiedDate":"2023-02-23"},{"lineNumber":258,"author":{"gitId":"nichyjt"},"content":"            writer.close();","lastModifiedDate":"2023-02-23"},{"lineNumber":259,"author":{"gitId":"nichyjt"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-02-23"},{"lineNumber":260,"author":{"gitId":"nichyjt"},"content":"            System.out.println(EXCEPTION_WRITE_DATA_FAIL);","lastModifiedDate":"2023-02-26"},{"lineNumber":261,"author":{"gitId":"nichyjt"},"content":"            System.out.println(exception.getMessage());","lastModifiedDate":"2023-02-23"},{"lineNumber":262,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":263,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":264,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":265,"author":{"gitId":"nichyjt"},"content":"    private String loadFromDisk(String filename) {","lastModifiedDate":"2023-02-23"},{"lineNumber":266,"author":{"gitId":"nichyjt"},"content":"        Path pathToFileName \u003d maxDataDirectory.resolve(filename + TASK_FILE_EXT);","lastModifiedDate":"2023-02-26"},{"lineNumber":267,"author":{"gitId":"nichyjt"},"content":"        File maxDataFile \u003d new File(pathToFileName.toUri());","lastModifiedDate":"2023-02-23"},{"lineNumber":268,"author":{"gitId":"nichyjt"},"content":"        StringBuilder data \u003d new StringBuilder();","lastModifiedDate":"2023-02-23"},{"lineNumber":269,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":270,"author":{"gitId":"nichyjt"},"content":"            Scanner reader \u003d new Scanner(maxDataFile);","lastModifiedDate":"2023-02-23"},{"lineNumber":271,"author":{"gitId":"nichyjt"},"content":"            while (reader.hasNextLine()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":272,"author":{"gitId":"nichyjt"},"content":"                data.append(reader.nextLine()).append(TASK_NEWLINE_TOKEN);","lastModifiedDate":"2023-02-26"},{"lineNumber":273,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":274,"author":{"gitId":"nichyjt"},"content":"        } catch (FileNotFoundException exception) {","lastModifiedDate":"2023-02-23"},{"lineNumber":275,"author":{"gitId":"nichyjt"},"content":"            System.out.println(exception.getMessage());","lastModifiedDate":"2023-02-23"},{"lineNumber":276,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":277,"author":{"gitId":"nichyjt"},"content":"        return data.toString();","lastModifiedDate":"2023-02-23"},{"lineNumber":278,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":279,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":280,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":281,"author":{"gitId":"nichyjt"},"content":"     * Takes in a list of tasks to save on the user\u0027s hard-drive","lastModifiedDate":"2023-02-26"},{"lineNumber":282,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":283,"author":{"gitId":"nichyjt"},"content":"     * @param taskList list of tasks to be saved to disk","lastModifiedDate":"2023-02-26"},{"lineNumber":284,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":285,"author":{"gitId":"nichyjt"},"content":"    public void saveTasksToDisk(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-02-23"},{"lineNumber":286,"author":{"gitId":"nichyjt"},"content":"        String tokenizedTasks \u003d tokenizeTasks(taskList);","lastModifiedDate":"2023-02-23"},{"lineNumber":287,"author":{"gitId":"nichyjt"},"content":"        writeToDisk(tokenizedTasks, TASK_FILENAME);","lastModifiedDate":"2023-02-23"},{"lineNumber":288,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":289,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":290,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":291,"author":{"gitId":"nichyjt"},"content":"     * Returns a list of tasks that exist on the user\u0027s hard-drive","lastModifiedDate":"2023-02-26"},{"lineNumber":292,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":293,"author":{"gitId":"nichyjt"},"content":"     * @return A list of successfully loaded tasks from the disk,","lastModifiedDate":"2023-02-26"},{"lineNumber":294,"author":{"gitId":"nichyjt"},"content":"     * or an empty list if no task data file was found","lastModifiedDate":"2023-02-26"},{"lineNumber":295,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":296,"author":{"gitId":"nichyjt"},"content":"    public ArrayList\u003cTask\u003e loadTasksFromDisk() {","lastModifiedDate":"2023-02-23"},{"lineNumber":297,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cTask\u003e processedTaskData;","lastModifiedDate":"2023-02-23"},{"lineNumber":298,"author":{"gitId":"nichyjt"},"content":"        if (doesFileExist(TASK_FILENAME)) {","lastModifiedDate":"2023-02-23"},{"lineNumber":299,"author":{"gitId":"nichyjt"},"content":"            String tokenizedTaskString \u003d loadFromDisk(TASK_FILENAME);","lastModifiedDate":"2023-02-23"},{"lineNumber":300,"author":{"gitId":"nichyjt"},"content":"            processedTaskData \u003d detokenizeTasks(tokenizedTaskString);","lastModifiedDate":"2023-02-23"},{"lineNumber":301,"author":{"gitId":"nichyjt"},"content":"            return processedTaskData;","lastModifiedDate":"2023-02-23"},{"lineNumber":302,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":303,"author":{"gitId":"nichyjt"},"content":"        processedTaskData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-23"},{"lineNumber":304,"author":{"gitId":"nichyjt"},"content":"        return processedTaskData;","lastModifiedDate":"2023-02-23"},{"lineNumber":305,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":306,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"nichyjt":306}},{"path":"src/main/java/max/data/StorageLoadException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.data;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"public class StorageLoadException extends Exception {","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"    public StorageLoadException(String errorMessage) {","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"nichyjt":7}},{"path":"src/main/java/max/task/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * DateParser helps with input-output validation for date strings","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * Input dates are checked and edited to follow this format: yyyy-MM-dd HHmm","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * Output dates are checked to edited to follow this format: MMM dd HHmm, yyyy","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" * Transformation between the 2 formats are handled in this class","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"public class DateParser {","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    private static DateTimeFormatter inputDateFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    private static DateTimeFormatter outputDateFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd HHmm, yyyy\");","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    private static String INPUT_FORMAT_HINT \u003d \"Max only accepts dates of format: yyyy-MM-dd HHmm\";","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    private static String INVALID_TO_FROM_MESSAGE \u003d \"Your --from date must be before the --to date!\";","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"     * Creates a DateParser object that can validate date strings","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    public DateParser() {","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"     * Converts a string representing an input date into a Java date format","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"     * This function will only accept input dates of format: \"yyyy-MM-dd HHmm\"","lastModifiedDate":"2023-02-27"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"     * @param dateString user input date","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"     * @return LocalDateTime representation of the user input date","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"     * @throws TaskException dateString does not conform to input format standards","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    public LocalDateTime parseDate(String dateString) throws TaskException {","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        LocalDateTime dateTime;","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"            dateTime \u003d LocalDateTime.parse(dateString, inputDateFormat);","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        } catch (DateTimeException exception) {","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"            throw new TaskException(INPUT_FORMAT_HINT);","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"        return dateTime;","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"     * Converts a LocalDateTime to the user-friendly output date format","lastModifiedDate":"2023-02-27"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     * Output date format is defined as \"MMM dd HHmm, yyyy\"","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"     * @param dateTime dateTime to be converted to output format","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"     * @return String of date format \"MMM dd HHmm, yyyy\"","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    public String dateToString(LocalDateTime dateTime) {","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        // The following should not throw an error","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        return outputDateFormat.format(dateTime);","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"    // Takes in a dateString to be formatted into the output date format","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"    public String formatInputString(String dateString) throws TaskException {","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"        LocalDateTime dateTime \u003d parseDate(dateString);","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        return dateToString(dateTime);","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"     * Checks that user has input start and end dates that make sense","lastModifiedDate":"2023-02-27"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"     * @param toString   user input for ending date","lastModifiedDate":"2023-02-27"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"     * @param fromString user input for starting date","lastModifiedDate":"2023-02-27"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"     * @throws TaskException end date is before start date","lastModifiedDate":"2023-02-27"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"    public void validateToFromDates(String toString, String fromString) throws TaskException {","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        LocalDateTime to \u003d parseDate(toString);","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        LocalDateTime from \u003d parseDate(fromString);","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"        if (from.isAfter(to)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"            throw new TaskException(INVALID_TO_FROM_MESSAGE);","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"nichyjt":81}},{"path":"src/main/java/max/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import max.ui.Ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * Deadline is a subclass of Task","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * It additionally stores the due date of the Task.","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_LABEL \u003d \"D\";","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"    private static final String WRAPPER_BY \u003d \" (by: \";","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    private static final String WRAPPER_END \u003d \")\";","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    private String dueDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"     * Create a Deadline object, a subclass of Task.","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"     * Used to keep track of a Task\u0027s due date.","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"     * @param description String describing the Deadline","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"     * @param dueDate     Date that the deadline is due","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    public Deadline(String description, String dueDate) {","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"        String description \u003d ui.wrapMessage(getTaskLabel()) + super.getDescription();","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"        description \u003d description.concat(WRAPPER_BY + this.dueDate + WRAPPER_END);","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        return description;","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    public String getTaskLabel() {","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        return TASK_LABEL;","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"     * Helper method to retrieve the due date of a Deadline","lastModifiedDate":"2023-02-27"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"     * @return Deadline\u0027s due date","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    public String getDueDate() {","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"        return dueDate;","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nichyjt":51}},{"path":"src/main/java/max/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import max.ui.Ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * Event is a subclass of Task","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * It additionally stores the from and to dates of the event.","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_LABEL \u003d \"E\";","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"    private static final String WRAPPER_FROM \u003d \" (FROM: \";","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    private static final String WRAPPER_COMMA \u003d \", \";","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    private static final String WRAPPER_TO \u003d \"TO: \";","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    private static final String WRAPPER_END \u003d \")\";","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    private String eventFrom;","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    private String eventTo;","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"     * Create an Event object, a subclass of Task.","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"     * Used to keep track of a Task\u0027s start and end times.","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"     * @param description String describing the Event","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"     * @param from        Datetime of the event\u0027s start","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"     * @param to          Datetime of the event\u0027s end","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        this.eventFrom \u003d from;","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        this.eventTo \u003d to;","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        String desc \u003d ui.wrapMessage(getTaskLabel()) + super.getDescription();","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        String fromStr \u003d WRAPPER_FROM + eventFrom + WRAPPER_COMMA;","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"        String toStr \u003d WRAPPER_TO + eventTo + WRAPPER_END;","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        desc \u003d desc.concat(fromStr).concat(toStr);","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        return desc;","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    public String getTaskLabel() {","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"        return TASK_LABEL;","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     * Helper method to retrieve the \u0027from\u0027 date of an Event","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"     * @return Event \u0027from\u0027 date","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    public String getEventFrom() {","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"        return eventFrom;","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * Helper method to retrieve the \u0027to\u0027 date of an Event","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"     * @return Event \u0027to\u0027 date","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"    public String getEventTo() {","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"        return eventTo;","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nichyjt":66}},{"path":"src/main/java/max/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import max.ui.Ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * Task is the parent class of all types of Tasks.","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" * This abstract class describes common behaviour that all Tasks \u0026 its children  must inherit","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * A task should be able to minimally do the following \u003cbr\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * 1. Store the description of the task","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" * 2. Store the completion status of the task","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" * 3. Return the description and metadata of the Task","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    protected String description;","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    private final Ui ui;","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_LABEL \u003d \"?\";","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    private static final String STATUS_DONE \u003d \"X\";","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    private static final String STATUS_NOT_DONE \u003d \" \";","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"     * Based on the task, returns the label representing the Task type","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"     * @return TaskLabel string","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    public String getTaskLabel() {","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"        return TASK_LABEL;","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"     * Create a Task object","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"     * @param description String describing the Task","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    public String getRawDescription() {","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"        return description;","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"     * Get the Icon representing the status of the Task","lastModifiedDate":"2023-02-27"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     * Returns the constant Icon string STATUS_DONE or STATUS_NOT_DONE","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"     * @return statusIcon","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"        return (isDone ? STATUS_DONE : STATUS_NOT_DONE); // mark done task with X","lastModifiedDate":"2023-02-27"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * Get a formatted string representing the task description for user viewing","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"     * @return Formatted description string of the task","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"        String wrappedIcon \u003d ui.wrapMessage(getStatusIcon());","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"        return wrappedIcon + ui.getSingleSpace() + description;","lastModifiedDate":"2023-02-27"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"     * Find the status of Task\u0027s {@code isDone} status","lastModifiedDate":"2023-02-27"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"     * @return boolean {@code isDone} state","lastModifiedDate":"2023-02-27"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"     * Toggles the Task\u0027s {@code isDone} status as {@code true}","lastModifiedDate":"2023-02-27"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"     * Toggles the Task\u0027s {@code isDone} status as {@code false}","lastModifiedDate":"2023-02-27"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"nichyjt":91}},{"path":"src/main/java/max/task/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"public class TaskException extends Exception {","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"    public TaskException(String errorMessage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"nichyjt":7}},{"path":"src/main/java/max/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import max.ui.Ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import max.command.Command;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import max.data.Storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * TaskManager is the controller that contains and manages the user\u0027s task list","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" * TaskManager helps with data management such as save/load","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" * and modifying task state (e.g. deletion, marking as complete)","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"public class TaskManager {","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    private final Ui ui;","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    private final DateParser dateParser;","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    // String literals definitions","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_MISSING_NO \u003d \"I\u0027m a dog, but even I know that you didn\u0027t enter a number.\";","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_BAD_TASK_NUM \u003d \"Invalid task number!\";","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_EMPTY_DESCRIPTION \u003d \"I\u0027m a dog, but even I know you didn\u0027t enter anything.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_TODO \u003d \"todo\";","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_EVENT \u003d \"event\";","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_EVENT_FROM \u003d \"from\";","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_EVENT_TO \u003d \"to\";","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_DEADLINE_BY \u003d \"by\";","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_ADD_TASK \u003d \"Got it. Task added:\";","lastModifiedDate":"2023-02-27"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_CURR_TASK \u003d \"You now have \";","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_CURR_TASK_LEFT \u003d \" tasks in your list.\";","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_LIST_HEADER \u003d \"Here\u0027s what\u0027s in your list:\";","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_MARK_DONE \u003d \"Okay, marking this task as done: \";","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_MARK_UNDONE \u003d \"Okay, setting this task as undone: \";","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_REMOVE_TASK \u003d \"Woof woof this task will be rem-woofed:\";","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_MAX_CANNOT_FIND \u003d \"Max dug around everywhere but can\u0027t find anything!\";","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_MAX_HAS_FOUND \u003d \"Max sniffed out these matching tasks:\";","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_EMPTY_QUERY \u003d \"I\u0027m gonna bite you. Your query is empty!\";","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_LIST_EMPTY \u003d \"There\u0027s nothing in your list. I\u0027m gonna bite you.\";","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    private static final String EXCEPTION_ADD_TASK_FAILED \u003d \"Throw me a bone here, I couldn\u0027t create a task!\";","lastModifiedDate":"2023-02-27"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    private static final String DOT_SPACE \u003d \". \";","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    private String validateDescription(String description) throws TaskException {","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"        String formattedDescription \u003d description.trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"        if (formattedDescription.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"            throw new TaskException(ERROR_EMPTY_DESCRIPTION);","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"        return formattedDescription;","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"     * Creates a new to-do task","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"     * @param commandMap argumentPayload map of the user input","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"     * @return a to-do task","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"    private Task createTodo(HashMap\u003cString, String\u003e commandMap) throws TaskException {","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        String description \u003d commandMap.get(TASK_TODO);","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"        description \u003d validateDescription(description);","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"        return new Todo(description);","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"     * Creates a new Deadline task","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"     * @param commandMap argumentPayload map of the user input","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"     * @return a deadline task","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"    private Task createDeadline(HashMap\u003cString, String\u003e commandMap) throws TaskException {","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        String description \u003d commandMap.get(TASK_DEADLINE);","lastModifiedDate":"2023-02-27"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        description \u003d validateDescription(description);","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"        String deadline \u003d commandMap.get(TASK_DEADLINE_BY);","lastModifiedDate":"2023-02-27"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        deadline \u003d dateParser.formatInputString(deadline);","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        return new Deadline(description, deadline);","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"     * Creates a new Event task","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"     * @param commandMap argumentPayload map of the user input","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"     * @return an Event task","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"    private Task createEvent(HashMap\u003cString, String\u003e commandMap) throws TaskException {","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        String description \u003d commandMap.get(TASK_EVENT);","lastModifiedDate":"2023-02-27"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"        description \u003d validateDescription(description);","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"        String from \u003d commandMap.get(TASK_EVENT_FROM);","lastModifiedDate":"2023-02-27"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        String to \u003d commandMap.get(TASK_EVENT_TO);","lastModifiedDate":"2023-02-27"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        // Format dates","lastModifiedDate":"2023-02-25"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        dateParser.validateToFromDates(to, from);","lastModifiedDate":"2023-02-25"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        from \u003d dateParser.formatInputString(from);","lastModifiedDate":"2023-02-25"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        to \u003d dateParser.formatInputString(to);","lastModifiedDate":"2023-02-25"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"        return new Event(description, from, to);","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"    private void printTaskAddedMessage(Task newTask) {","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_ADD_TASK);","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(newTask.getDescription());","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_CURR_TASK + tasks.size() + MESSAGE_CURR_TASK_LEFT);","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     * Create a task, which may be To-do, deadline or events","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"     * @param commandMap argumentPayload map of the user input","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"     * @param command    the type of task to create","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"     * @throws TaskException for bad user inputs","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"    public void createTask(HashMap\u003cString, String\u003e commandMap, Command command) throws TaskException {","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        // Assertion: commandMap has the correct subcommands \u0026 length","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        if (command.equals(Command.TASK_TODO)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"            // To-do task","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"            newTask \u003d createTodo(commandMap);","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        } else if (command.equals(Command.TASK_DEADLINE)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"            // Deadline task","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"            newTask \u003d createDeadline(commandMap);","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"        } else if (command.equals(Command.TASK_EVENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"            // Event task","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"            newTask \u003d createEvent(commandMap);","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"        if (newTask \u003d\u003d null) {","lastModifiedDate":"2023-02-13"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"            // Safety check in case the assertion fails","lastModifiedDate":"2023-02-13"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"            throw new TaskException(EXCEPTION_ADD_TASK_FAILED);","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-02-13"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"        printTaskAddedMessage(newTask);","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"     * Prints the task list of all tasks MAX is keeping track of","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"    public void printTasklist() {","lastModifiedDate":"2023-02-13"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-13"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(MESSAGE_LIST_EMPTY);","lastModifiedDate":"2023-02-25"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-02-13"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_LIST_HEADER);","lastModifiedDate":"2023-02-27"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {","lastModifiedDate":"2023-02-13"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"            // Print number, box, description in that order","lastModifiedDate":"2023-02-13"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"            Task curr \u003d tasks.get(i);","lastModifiedDate":"2023-02-13"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"            int currentTask \u003d i + ONE_OFFSET;","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(currentTask + DOT_SPACE + curr.getDescription());","lastModifiedDate":"2023-03-15"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"     * Takes in a string representing the 1-indexed task number \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"     * Checks for string validity and range validity \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"     * @param taskNumString string representation of the","lastModifiedDate":"2023-03-15"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"     * @return zero-indexed integer representing the index of the task","lastModifiedDate":"2023-03-15"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"     * @throws TaskException for out of range numbers and non-number inputs","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"    private int convertTaskNumberString(String taskNumString) throws TaskException {","lastModifiedDate":"2023-02-13"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        int taskNum;","lastModifiedDate":"2023-02-13"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"            taskNum \u003d Integer.parseInt(taskNumString) - ONE_OFFSET;","lastModifiedDate":"2023-03-15"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2023-02-13"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"            throw new TaskException(ERROR_MISSING_NO);","lastModifiedDate":"2023-02-27"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"        if (taskNum \u003c 0 || taskNum \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"            throw new TaskException(ERROR_BAD_TASK_NUM);","lastModifiedDate":"2023-02-27"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"        return taskNum;","lastModifiedDate":"2023-02-13"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"     * Mark the task to be done or not done","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"     * @param taskNumString string representing the task number to be marked","lastModifiedDate":"2023-03-15"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"     * @param isDone        if true, the task will be marked as done, else not done","lastModifiedDate":"2023-03-15"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"    public void markTask(String taskNumString, boolean isDone) {","lastModifiedDate":"2023-02-13"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"        int taskNum;","lastModifiedDate":"2023-02-13"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"            taskNum \u003d convertTaskNumberString(taskNumString);","lastModifiedDate":"2023-02-13"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"        } catch (TaskException exception) {","lastModifiedDate":"2023-02-13"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"            ui.printError(exception.getMessage());","lastModifiedDate":"2023-02-23"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-02-13"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"        // Update the task\u0027s done status","lastModifiedDate":"2023-02-13"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"        if (isDone) {","lastModifiedDate":"2023-02-13"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"            tasks.get(taskNum).markAsDone();","lastModifiedDate":"2023-02-13"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(MESSAGE_MARK_DONE);","lastModifiedDate":"2023-02-27"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"            tasks.get(taskNum).markAsUndone();","lastModifiedDate":"2023-02-13"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(MESSAGE_MARK_UNDONE);","lastModifiedDate":"2023-02-27"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(tasks.get(taskNum).getDescription());","lastModifiedDate":"2023-02-23"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"     * Remove a task from the task list","lastModifiedDate":"2023-03-15"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"     * @param taskNumString string representing the task number to be deleted","lastModifiedDate":"2023-03-15"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"    public void deleteTask(String taskNumString) {","lastModifiedDate":"2023-02-13"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"        int taskNum;","lastModifiedDate":"2023-02-13"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"            taskNum \u003d convertTaskNumberString(taskNumString);","lastModifiedDate":"2023-02-13"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"        } catch (TaskException exception) {","lastModifiedDate":"2023-02-13"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(exception.getMessage());","lastModifiedDate":"2023-02-23"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-02-13"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"        // Assertion: taskNum is in tasklist range, guaranteed by convertTaskNumStr()","lastModifiedDate":"2023-02-13"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_REMOVE_TASK);","lastModifiedDate":"2023-02-27"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(tasks.get(taskNum).getDescription());","lastModifiedDate":"2023-02-23"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"        tasks.remove(taskNum);","lastModifiedDate":"2023-02-13"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_CURR_TASK + tasks.size() + MESSAGE_CURR_TASK_LEFT);","lastModifiedDate":"2023-02-27"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"     * Loads all tasks from the /data folder","lastModifiedDate":"2023-03-15"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"    public void loadData() {","lastModifiedDate":"2023-02-13"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"        Storage dataHandler \u003d new Storage();","lastModifiedDate":"2023-02-23"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"        this.tasks \u003d dataHandler.loadTasksFromDisk();","lastModifiedDate":"2023-02-13"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"     * Saves all current tasks to the /data folder","lastModifiedDate":"2023-03-15"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"    public void saveData() {","lastModifiedDate":"2023-02-13"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"        Storage dataHandler \u003d new Storage();","lastModifiedDate":"2023-02-23"},{"lineNumber":232,"author":{"gitId":"nichyjt"},"content":"        dataHandler.saveTasksToDisk(tasks);","lastModifiedDate":"2023-02-13"},{"lineNumber":233,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":234,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":235,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":236,"author":{"gitId":"nichyjt"},"content":"     * Resets the task list to have no tasks","lastModifiedDate":"2023-03-15"},{"lineNumber":237,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":238,"author":{"gitId":"nichyjt"},"content":"    public void resetTaskList() {","lastModifiedDate":"2023-02-13"},{"lineNumber":239,"author":{"gitId":"nichyjt"},"content":"        tasks.clear();","lastModifiedDate":"2023-02-13"},{"lineNumber":240,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":241,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":242,"author":{"gitId":"nichyjt"},"content":"    private void printFoundTasks(ArrayList\u003cTask\u003e matchedTasks) {","lastModifiedDate":"2023-03-15"},{"lineNumber":243,"author":{"gitId":"nichyjt"},"content":"        ui.printMessage(MESSAGE_MAX_HAS_FOUND);","lastModifiedDate":"2023-03-15"},{"lineNumber":244,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 0; i \u003c matchedTasks.size(); ++i) {","lastModifiedDate":"2023-03-15"},{"lineNumber":245,"author":{"gitId":"nichyjt"},"content":"            Task curr \u003d matchedTasks.get(i);","lastModifiedDate":"2023-03-15"},{"lineNumber":246,"author":{"gitId":"nichyjt"},"content":"            int currentTask \u003d i + ONE_OFFSET;","lastModifiedDate":"2023-03-15"},{"lineNumber":247,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(currentTask + DOT_SPACE + curr.getDescription());","lastModifiedDate":"2023-03-15"},{"lineNumber":248,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":249,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":250,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":251,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":252,"author":{"gitId":"nichyjt"},"content":"     * Find tasks that may be related to the","lastModifiedDate":"2023-03-15"},{"lineNumber":253,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":254,"author":{"gitId":"nichyjt"},"content":"     * @param commandPayload  argumentPayload map of the user input","lastModifiedDate":"2023-03-15"},{"lineNumber":255,"author":{"gitId":"nichyjt"},"content":"     * @param findArgumentKey the key value \"find\" or \"fetch\" that contains the query argument","lastModifiedDate":"2023-03-15"},{"lineNumber":256,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":257,"author":{"gitId":"nichyjt"},"content":"    public void findTasks(HashMap\u003cString, String\u003e commandPayload, String findArgumentKey) {","lastModifiedDate":"2023-03-15"},{"lineNumber":258,"author":{"gitId":"nichyjt"},"content":"        // Naiively search for tasks that have exact matches with the query string","lastModifiedDate":"2023-03-15"},{"lineNumber":259,"author":{"gitId":"nichyjt"},"content":"        String query \u003d commandPayload.get(findArgumentKey);","lastModifiedDate":"2023-03-15"},{"lineNumber":260,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":261,"author":{"gitId":"nichyjt"},"content":"        if (query.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":262,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(MESSAGE_EMPTY_QUERY);","lastModifiedDate":"2023-02-25"},{"lineNumber":263,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-02-25"},{"lineNumber":264,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":265,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":266,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-25"},{"lineNumber":267,"author":{"gitId":"nichyjt"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-02-25"},{"lineNumber":268,"author":{"gitId":"nichyjt"},"content":"            String taskDescription \u003d task.getDescription();","lastModifiedDate":"2023-02-25"},{"lineNumber":269,"author":{"gitId":"nichyjt"},"content":"            if (taskDescription.contains(query)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":270,"author":{"gitId":"nichyjt"},"content":"                matchedTasks.add(task);","lastModifiedDate":"2023-02-25"},{"lineNumber":271,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":272,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":273,"author":{"gitId":"nichyjt"},"content":"        // Print all related items","lastModifiedDate":"2023-02-25"},{"lineNumber":274,"author":{"gitId":"nichyjt"},"content":"        if (matchedTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":275,"author":{"gitId":"nichyjt"},"content":"            ui.printMessage(MESSAGE_MAX_CANNOT_FIND);","lastModifiedDate":"2023-02-25"},{"lineNumber":276,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":277,"author":{"gitId":"nichyjt"},"content":"            printFoundTasks(matchedTasks);","lastModifiedDate":"2023-03-15"},{"lineNumber":278,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":279,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":280,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":281,"author":{"gitId":"nichyjt"},"content":"    public TaskManager() {","lastModifiedDate":"2023-02-13"},{"lineNumber":282,"author":{"gitId":"nichyjt"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-13"},{"lineNumber":283,"author":{"gitId":"nichyjt"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-23"},{"lineNumber":284,"author":{"gitId":"nichyjt"},"content":"        dateParser \u003d new DateParser();","lastModifiedDate":"2023-02-25"},{"lineNumber":285,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":286,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"nichyjt":286}},{"path":"src/main/java/max/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import max.ui.Ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * Todo is a subclass of Task","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * It stores the description of the task.","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    private static final String TASK_LABEL \u003d \"T\";","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"    private final Ui ui;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"     * Create an Todo object, a subclass of Task.","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"     * @param description String describing the Task","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"        String wrappedTask \u003d ui.wrapMessage(getTaskLabel());","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"        return wrappedTask + super.getDescription();","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    public String getTaskLabel() {","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"        return TASK_LABEL;","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nichyjt":34}},{"path":"src/main/java/max/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * Ui helps with the console output formatting for MAX","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * Ui provides an interface to format and output common patterns, such as:","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * 1. Printing borders","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * 2. Printing MAX\u0027s logo","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" * 3. Printing errors","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * 4. Printing messages","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * 5. Wrapping messages with brackets","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"public class Ui {","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    private final String LOGO \u003d buildLogo();","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    private static final String BORDER \u003d \"────────────────────────────────────────────────────────────\";","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    private static final String CMD_PROMPT \u003d \"~$ \";","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_GREET \u003d \"Hello! I\u0027m Max, your PAWsonal productivity assistant\";","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_GREET_1 \u003d \"What can I do for you to MAXimize your day?\";","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_IMPORTANT \u003d \"--- BORK BORK ---- THIS IS IMPORTANT! ---- BORK BORK ---\";","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    private static final String MESSAGE_ERROR \u003d \"Awoo? Max dug up an error:\";","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    private static final String NEWLINE \u003d \"\\n\";","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    private static final String SINGLE_SPACE \u003d \" \";","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String WRAPPER_OPEN \u003d \"[\";","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private static final String WRAPPER_CLOSE \u003d \"]\";","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"     * Construts a Ui object to handle console output","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    public Ui() {","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    private static String buildLogo() {","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        String logoString \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"        logoString \u003d logoString.concat(\" /$$      /$$  /$$$$$$  /$$   /$$\\n\");","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        logoString \u003d logoString.concat(\"| $$$    /$$$ /$$__  $$| $$  / $$\\n\");","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        logoString \u003d logoString.concat(\"| $$$$  /$$$$| $$  \\\\ $$|  $$/ $$/       /^ ^\\\\\\n\");","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"        logoString \u003d logoString.concat(\"| $$ $$/$$ $$| $$$$$$$$ \\\\  $$$$/       / 0 0 \\\\\\n\");","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        logoString \u003d logoString.concat(\"| $$  $$$| $$| $$__  $$  \u003e$$  $$       V\\\\ Y /V\\n\");","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        logoString \u003d logoString.concat(\"| $$\\\\  $ | $$| $$  | $$ /$$/\\\\  $$       / - \\\\\\n\");","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"        logoString \u003d logoString.concat(\"| $$ \\\\/  | $$| $$  | $$| $$  \\\\ $$      /    |\\n\");","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        logoString \u003d logoString.concat(\"|__/     |__/|__/  |__/|__/  |__/     V__)  ||\");","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"        return logoString;","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"     * Utility to help print messages to console","lastModifiedDate":"2023-02-27"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     * @param message Message to be printed to console","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"        System.out.println(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"     * Notifies the user of an error, before printing it to console","lastModifiedDate":"2023-02-27"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * @param exceptionMessage errors to be printed","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"    public void printError(String exceptionMessage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"        notifyError();","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        printMessage(exceptionMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"     * Prints a pretty border to console","lastModifiedDate":"2023-02-27"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"    public void printBorder() {","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"        System.out.println(BORDER);","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * Prints the command prompt cursor","lastModifiedDate":"2023-02-27"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    public void printCommandPrompt() {","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"        System.out.print(CMD_PROMPT);","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"     * Prints the standard welcome message by MAX","lastModifiedDate":"2023-02-27"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"    public void greet() {","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        printMessage(LOGO);","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        printMessage(MESSAGE_GREET);","lastModifiedDate":"2023-02-26"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        printMessage(MESSAGE_GREET_1);","lastModifiedDate":"2023-02-26"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        printBorder();","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"     * Notify the user via output of something important that will be printed","lastModifiedDate":"2023-02-27"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"    public void notifyImportant() {","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        printMessage(MESSAGE_IMPORTANT);","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"     * Notify the user via output of some error that will be printed","lastModifiedDate":"2023-02-27"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"    public void notifyError() {","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"        printMessage(MESSAGE_ERROR);","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     * Convenience method to get a newline","lastModifiedDate":"2023-02-27"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"     * @return newline character","lastModifiedDate":"2023-02-27"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"    public String getNewline() {","lastModifiedDate":"2023-02-27"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        return NEWLINE;","lastModifiedDate":"2023-02-27"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-27"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     * Convenience method to get a single space character","lastModifiedDate":"2023-02-27"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     * This is used for padding and minor formatting requirements","lastModifiedDate":"2023-02-27"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     * @return single space character","lastModifiedDate":"2023-02-27"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"    public String getSingleSpace() {","lastModifiedDate":"2023-02-27"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        return SINGLE_SPACE;","lastModifiedDate":"2023-02-27"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-27"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"     * Wraps an input message with brackets and returns the string","lastModifiedDate":"2023-02-27"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     * For example, message \u003d \"Hello, world!\" \u003cbr\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     * Becomes: \"[Hello, world!]\"","lastModifiedDate":"2023-02-27"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"     * @param message to be wrapped","lastModifiedDate":"2023-02-27"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"     * @return message wrapped with brackets","lastModifiedDate":"2023-02-27"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"    public String wrapMessage(String message) {","lastModifiedDate":"2023-02-27"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        String wrappedMessage \u003d WRAPPER_OPEN;","lastModifiedDate":"2023-02-27"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"        wrappedMessage +\u003d message;","lastModifiedDate":"2023-02-27"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"        wrappedMessage +\u003d WRAPPER_CLOSE;","lastModifiedDate":"2023-02-27"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"        return wrappedMessage;","lastModifiedDate":"2023-02-27"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-27"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"nichyjt":140}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"list","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"debug","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"todo Foobar","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"deadline badArgument","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"deadline badArgument -by foobar","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"deadline deadline1 --by 2020-10-10 2359","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"deadline deadline2 --by 2022-19-01 0000","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"event badArgument","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"event missingArg --from 2020-10-10 2359","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"event missingArg1 --by 2020-10-10 2359","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"event event1 --from 2020-10-10 2359 --to 2020-11-10 0000","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"event event2 --to 2020-11-10 0900 --from 2020-11-10 0001","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"list","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"mark -1","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"mark 0","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"mark 1","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"mark 2","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"mark 100","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"list","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"unmark -1","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"unmark 1","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"unmark 100","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"list","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"todo seven--eleven","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"todo handle seven errors","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"find seven","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"fetch seven","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"find dead","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"fetch dead","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"find foobar","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"fetch foobar","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"exit","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"nichyjt":32}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*\\*.java","lastModifiedDate":"2023-02-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"java -classpath ..\\bin max.Max \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"nichyjt":2}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*/*.java","lastModifiedDate":"2023-02-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"java -classpath ../bin max.Max \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":36,"nichyjt":2}}]
