[{"path":"src/main/java/max/Max.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import max.command.Command;","lastModifiedDate":"2023-02-06"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import max.command.CommandParser;","lastModifiedDate":"2023-02-06"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import max.command.CommandValidator;","lastModifiedDate":"2023-02-06"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import max.command.InvalidCommandException;","lastModifiedDate":"2023-02-06"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import max.task.*;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"public class Max {","lastModifiedDate":"2023-02-06"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    private static boolean isListening;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    private static TaskManager taskManager;","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static void setIsListening(boolean keepListening) {","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"        Max.isListening \u003d keepListening;","lastModifiedDate":"2023-02-06"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    public static void printBorder() {","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        System.out.println(\"────────────────────────────────────────────────────────────\");","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    public static void exit() {","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"        setIsListening(false);","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"        System.out.print(\"Goodbye! Thank you for using MAX.\\n\");","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    public static void handleCommand(String command) {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        CommandValidator commandValidator \u003d new CommandValidator();","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        // Update the keepAlive flag","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        String[] commandList \u003d commandParser.splitIntoCommands(command);","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        // Process subcommands into \u003csubcommand, payload\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e commandPayload \u003d commandParser.getCommandPayloadMap(commandList);","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        Command mainCommand \u003d commandParser.getCommandType(commandList[0]);","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"        // Validate command to ensure it has:","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"        // 1. Correct argument size","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"        // 2. Correct argument names","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"        // WARNING: This validation does not check for payload correctness","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"            commandValidator.validateCommandPayloadMap(mainCommand, commandPayload);","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"        } catch (InvalidCommandException exception) {","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"            System.out.println(exception.getMessage());","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        // Assertion: commandPayload is correct for its given mainCommand","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        switch (mainCommand) {","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        case EXIT:","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"            exit();","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        case LIST:","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            taskManager.printTasklist();","lastModifiedDate":"2023-02-12"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"        case MARK:","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"            String taskNumString \u003d commandPayload.get(\"mark\");","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"            taskManager.markTask(taskNumString, true);","lastModifiedDate":"2023-02-12"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"        case UNMARK:","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"            taskNumString \u003d commandPayload.get(\"unmark\");","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"            taskManager.markTask(taskNumString, false);","lastModifiedDate":"2023-02-12"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"        case TASK_EVENT:","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        case TASK_DEADLINE:","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        case TASK_TODO:","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"            try {","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"                taskManager.createTask(commandPayload, mainCommand);","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"            }catch (TaskException exception){","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"                System.out.println(exception.getMessage());","lastModifiedDate":"2023-02-12"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-02-12"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        case DELETE:","lastModifiedDate":"2023-02-12"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"            taskNumString \u003d commandPayload.get(\"delete\");","lastModifiedDate":"2023-02-12"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"            taskManager.deleteTask(taskNumString);","lastModifiedDate":"2023-02-12"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        default:","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"            // { Command.UNKNOWN_COMMAND }","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"            System.out.println(\"Awoo? I don\u0027t understand that command.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    public static void greet() {","lastModifiedDate":"2023-02-05"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        printBorder();","lastModifiedDate":"2023-02-05"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        System.out.println(\"Hello! I\u0027m Max, your PAWsonal productivity assistant\");","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        System.out.println(\"What can I do for you to MAXimize your day?\");","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        printBorder();","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        String logo \u003d \" /$$      /$$  /$$$$$$  /$$   /$$\\n\" +","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"                \"| $$$    /$$$ /$$__  $$| $$  / $$\\n\" +","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"                \"| $$$$  /$$$$| $$  \\\\ $$|  $$/ $$/       /^ ^\\\\\\n\" +","lastModifiedDate":"2023-01-31"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"                \"| $$ $$/$$ $$| $$$$$$$$ \\\\  $$$$/       / 0 0 \\\\\\n\" +","lastModifiedDate":"2023-01-31"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"                \"| $$  $$$| $$| $$__  $$  \u003e$$  $$       V\\\\ Y /V\\n\" +","lastModifiedDate":"2023-01-31"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"                \"| $$\\\\  $ | $$| $$  | $$ /$$/\\\\  $$       / - \\\\\\n\" +","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"                \"| $$ \\\\/  | $$| $$  | $$| $$  \\\\ $$      /    |\\n\" +","lastModifiedDate":"2023-01-31"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"                \"|__/     |__/|__/  |__/|__/  |__/     V__)  ||\";","lastModifiedDate":"2023-01-31"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        System.out.println(logo);","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        greet();","lastModifiedDate":"2023-02-05"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"        setIsListening(true);","lastModifiedDate":"2023-01-26"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        // Init task subsystem (Controller)","lastModifiedDate":"2023-02-12"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"        taskManager \u003d new TaskManager();","lastModifiedDate":"2023-02-12"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        // Init IO","lastModifiedDate":"2023-01-26"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-26"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"        // Event driver loop to continuously listen for inputs","lastModifiedDate":"2023-01-26"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        while (isListening) {","lastModifiedDate":"2023-01-26"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"            System.out.print(\"~$ \");","lastModifiedDate":"2023-01-26"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"            String command \u003d input.nextLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"            printBorder();","lastModifiedDate":"2023-02-05"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"            handleCommand(command);","lastModifiedDate":"2023-01-26"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"            printBorder();","lastModifiedDate":"2023-02-05"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"nichyjt":125,"-":3}},{"path":"src/main/java/max/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.command;/*","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":" * Defines the structure of commands from user input","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":" * Generally, a user command consists of three components.","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * 1. Main Command","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * 2. Sub Command","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * 3. Payload","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * User input can be abstracted into:","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * \u003cMainCommand\u003e (\u003cPayload\u003e) (--\u003cSubcommand\u003e (\u003cSubcommand payload\u003e) --(\u003cSubcommand2\u003e (...)) ... )","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"public enum Command {","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"    TASK_TODO(1, \"todo\", new String[]{}),","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    TASK_DEADLINE(2, \"deadline\", new String[]{\"by\"}),","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    TASK_EVENT(3, \"event\", new String[]{\"from\", \"to\"}),","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    MARK(1, \"mark\", new String[]{}),","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    UNMARK(1, \"unmark\", new String[]{}),","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"        DELETE(1, \"delete\", new String[]{}),","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    EXIT(1, \"exit\", new String[]{}),","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    LIST(1, \"list\", new String[]{}),","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    UNKNOWN_COMMAND(1, \"\", new String[]{});","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    // Defines how many arguments (subcommands + main command) a Command has","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    // The argument length for a command must be minimally 1 (itself) e.g. list, mark","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private int argumentLength;","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private String mainCommand;","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    private String[] subcommandNames;","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    Command(int argumentLength, String commandName, String[] subcommandNames) {","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"        this.argumentLength \u003d argumentLength;","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        this.mainCommand \u003d commandName;","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        this.subcommandNames \u003d subcommandNames;","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    public int getArgumentLength() {","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        return argumentLength;","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    public String getMainCommand() {","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"        return mainCommand;","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    public String[] getSubcommandNames() {","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        return subcommandNames;","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"nichyjt":45}},{"path":"src/main/java/max/command/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.command;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"public class CommandParser {","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"    public CommandParser() {","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    public String[] splitIntoCommands(String rawCommand) {","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"        // \" -\" splits the string into substrings","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"        // if the substring starts with two dashes \u0027--\u0027 and is preceded by whitespace","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"        // For example: deadline my_task --by -xyz sunday-monday","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"        // Will output: [\"deadline my_task\", \"by -xyz sunday-monday\"]","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"        // For now, this does not account for accidental or adversarial \u0027--\u0027 input at the start of words","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"        // but this is an unlikely edge case that can be dealt with later","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"        return rawCommand.split(\" --\");","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    public HashMap\u003cString, String\u003e getCommandPayloadMap(String[] commandList) {","lastModifiedDate":"2023-02-06"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        // Each command can be processed into a subcommand and its corresponding text value","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"        // For example: \"deadline work on CS2113 --by Sunday\"","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"        // Should map to: \u003c\"deadline\", \"work on CS2113\"\u003e, \u003cby, Sunday\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e commandMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"        for (String cmdStr : commandList) {","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"            String cmd \u003d extractCommandFromSubcommand(cmdStr);","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"            String text \u003d extractTextFromSubcommand(cmdStr);","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"            commandMap.put(cmd, text);","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        return commandMap;","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    public static String extractCommandFromSubcommand(String subcommand) {","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        // Subcommands have format \u003csubcommand\u003e \u003ctext_to_extract\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"        // Return the \u003csubcommand\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        // For example, the deadline subcommand: \"by Friday, 13th\"","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        // Should return \"by\"","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"        String[] words \u003d subcommand.split(\" \");","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        return words[0];","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    public static String extractTextFromSubcommand(String subcommand) {","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"        // Subcommands have format \u003csubcommand\u003e \u003ctext_to_extract\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"        // Return the \u003csubcommand\u003e and \u003ctext_to_extract\u003e in a string array","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"        // For example, the deadline subcommand: \"by Friday, 13th\"","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"        // Should return [\"by\" , \"Friday, 13th\"]","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"        String[] words \u003d subcommand.split(\" \");","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"        String subcommandText \u003d \"\";","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 1; i \u003c words.length; ++i) {","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"            subcommandText \u003d subcommandText.concat(words[i]);","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"            if (i !\u003d words.length - 1) {","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"                subcommandText \u003d subcommandText.concat(\" \");","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        return subcommandText;","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"    // Takes in the Main command and its payload, if any","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"    public Command getCommandType(String mainCommand) {","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        /* TODO:","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"         *  Consider possible optimisation by hashing the commands","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"         *   This may be premature optimisation, might not be necessary","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"         */","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"        // Extract the real command from its payload","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"        String commandName \u003d extractCommandFromSubcommand(mainCommand);","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"        // Find out which Command commandName is","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"        Command[] commands \u003d Command.values();","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"        for (Command command : commands) {","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"            if (command.getMainCommand().equals(commandName)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"                return command;","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        return Command.UNKNOWN_COMMAND;","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"nichyjt":78}},{"path":"src/main/java/max/command/CommandValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.command;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"public class CommandValidator {","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"    public CommandValidator() {","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"    // Takes in a command type to check the commandPayload map against","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    // Checks for 2 things:","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"    // 1. All required commands are present","lastModifiedDate":"2023-02-06"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    // 2. Only the required commands are present","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    public void validateCommandPayloadMap(Command command, HashMap commandPayload) throws InvalidCommandException {","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"        String[] requiredSubcommands \u003d command.getSubcommandNames();","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"        int expectedSize \u003d command.getArgumentLength();","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"        if (commandPayload.size() !\u003d expectedSize) {","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d \"Invalid number of arguments. Expected: \" + expectedSize + \", Got: \" + commandPayload.size();","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"            throw new InvalidCommandException(errorMessage);","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"        // Ensure that all required subcommands exist","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        for (String subcommand : requiredSubcommands) {","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"            if (!commandPayload.containsKey(subcommand)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"                throw new InvalidCommandException(\"Missing argument: \" + subcommand);","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"nichyjt":28}},{"path":"src/main/java/max/command/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.command;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"    public InvalidCommandException(String errorMessage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"nichyjt":7}},{"path":"src/main/java/max/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"    private String dueDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"    public Deadline(String description, String dueDate) {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"        String description \u003d \"[D]\" + super.getDescription();","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"        description \u003d description.concat(\" (by: \" + this.dueDate + \")\");","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"        return description;","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nichyjt":17}},{"path":"src/main/java/max/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"    private String eventFrom;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"    private String eventTo;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"        this.eventFrom \u003d from;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"        this.eventTo \u003d to;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"        String desc \u003d \"[E]\" + super.getDescription();","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"        String fromStr \u003d \" (FROM: \" + eventFrom + \", \";","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"        String toStr \u003d \"TO: \" + eventTo + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"        desc \u003d desc.concat(fromStr).concat(toStr);","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"        return desc;","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nichyjt":21}},{"path":"src/main/java/max/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"public class Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"    protected String description;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"nichyjt":31}},{"path":"src/main/java/max/task/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"public class TaskException extends Exception {","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"    public TaskException(String errorMessage) {","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"nichyjt":7}},{"path":"src/main/java/max/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import max.command.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import max.command.InvalidCommandException;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"public class TaskManager {","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"    public void createTask(HashMap\u003cString, String\u003e commandMap, Command command) throws TaskException {","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"        // Assertion: commandMap has the correct subcommands \u0026 length","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"        if (command.equals(Command.TASK_TODO)) {","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"            // To-do task","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"            String description \u003d commandMap.get(\"todo\");","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"            newTask \u003d new Todo(description);","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"        } else if (command.equals(Command.TASK_DEADLINE)) {","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"            // Deadline task","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"            String description \u003d commandMap.get(\"deadline\");","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"            String deadline \u003d commandMap.get(\"by\");","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"            newTask \u003d new Deadline(description, deadline);","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"        } else if (command.equals(Command.TASK_EVENT)) {","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"            // Event task","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"            String description \u003d commandMap.get(\"event\");","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"            String from \u003d commandMap.get(\"from\");","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"            String to \u003d commandMap.get(\"to\");","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"            newTask \u003d new Event(description, from, to);","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        if (newTask \u003d\u003d null) {","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"            // Safety check in case the assertion fails","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"            throw new TaskException(\"Throw me a bone here, I couldn\u0027t create a task!\");","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"        System.out.println(\"Got it. Task added:\");","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        System.out.println(newTask.getDescription());","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        System.out.println(\"You now have \" + tasks.size() + \" tasks in your list.\");","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    public void printTasklist() {","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"            System.out.println(\"There\u0027s nothing in your list. I\u0027m gonna bite you.\");","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"        System.out.println(\"Here\u0027s what\u0027s in your list:\");","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"            // Print number, box, description in that order","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"            Task curr \u003d tasks.get(i);","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"            System.out.print(i + 1 + \". \" + curr.getDescription() + \u0027\\n\u0027);","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    // Takes in a string representing the 1-indexed task number","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    // Checks for string validity and range validity","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    // Returns the 0-indexed task number value","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    private int convertTaskNumberString(String taskNumString) throws TaskException {","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        int taskNum;","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"            taskNum \u003d Integer.parseInt(taskNumString) - 1; // Convert to 0-idx","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            throw new TaskException(\"I\u0027m a dog, but even I know that you didn\u0027t enter a number.\");","lastModifiedDate":"2023-02-12"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"        if(taskNum \u003c 0 || taskNum \u003e\u003d tasks.size()){","lastModifiedDate":"2023-02-12"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"            throw new TaskException(\"Invalid task number!\");","lastModifiedDate":"2023-02-12"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"        return taskNum;","lastModifiedDate":"2023-02-12"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"    public void markTask(String taskNumString, boolean isDone) {","lastModifiedDate":"2023-02-12"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"        int taskNum;","lastModifiedDate":"2023-02-12"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"            taskNum \u003d convertTaskNumberString(taskNumString);","lastModifiedDate":"2023-02-12"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        }catch (TaskException exception){","lastModifiedDate":"2023-02-12"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"            System.out.println(exception.getMessage());","lastModifiedDate":"2023-02-12"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        // Update the task\u0027s done status","lastModifiedDate":"2023-02-12"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        if (isDone) {","lastModifiedDate":"2023-02-12"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            tasks.get(taskNum).markAsDone();","lastModifiedDate":"2023-02-12"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"            System.out.println(\"Okay, marking this task as done: \");","lastModifiedDate":"2023-02-12"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-02-12"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"            tasks.get(taskNum).markAsUndone();","lastModifiedDate":"2023-02-12"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"            System.out.println(\"Okay, setting this task as undone: \");","lastModifiedDate":"2023-02-12"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        System.out.println(tasks.get(taskNum).getDescription());","lastModifiedDate":"2023-02-12"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"    public void deleteTask(String taskNumString){","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"        int taskNum;","lastModifiedDate":"2023-02-12"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"            taskNum \u003d convertTaskNumberString(taskNumString);","lastModifiedDate":"2023-02-12"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        }catch (TaskException exception){","lastModifiedDate":"2023-02-12"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"            System.out.println(exception.getMessage());","lastModifiedDate":"2023-02-12"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-02-12"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        // Assertion: taskNum is in tasklist range, guaranteed by convertTaskNumStr()","lastModifiedDate":"2023-02-12"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"        System.out.println(\"Woof woof this task will be rem-woofed:\");","lastModifiedDate":"2023-02-12"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        System.out.println(tasks.get(taskNum).getDescription());","lastModifiedDate":"2023-02-12"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        tasks.remove(taskNum);","lastModifiedDate":"2023-02-12"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"        System.out.println(\"You have have \" + tasks.size() + \" tasks left.\");","lastModifiedDate":"2023-02-12"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"    public TaskManager() {","lastModifiedDate":"2023-02-12"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-12"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"nichyjt":106}},{"path":"src/main/java/max/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package max.task;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"        return \"[T]\" + super.getDescription();","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nichyjt":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"list","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"delete 0","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"delete -1","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"delete 100","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"todo Foobar","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"deadline badArgument","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"deadline badArgument -by foobar","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"deadline deadline1 --by Sunday","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"deadline deadline2 --by Some--day","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"event badArgument","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"event missingArg --from Foo","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"event missingArg1 --by Foo","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"event event1 --from Foo --to Bar","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"event event2 --to Baz --from Zulu","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"list","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"mark -1","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"mark 0","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"mark 1","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"mark 2","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"mark 100","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"list","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"unmark -1","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"unmark 1","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"unmark 100","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"list","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"delete 3","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"list","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"delete 1","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"delete 1000","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"delete -1","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"list","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"exit","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"nichyjt":32}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*\\*.java","lastModifiedDate":"2023-02-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"nichyjt":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*/*.java","lastModifiedDate":"2023-02-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"nichyjt":1}}]
