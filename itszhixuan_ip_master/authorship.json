[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"     * Due date of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"    protected String by;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"     * Functions in the Deadline class.","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"     * @param description Name of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"     * @param by Due date of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"     * The string output when class is called.","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"     * @return Status and due date.","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"itszhixuan":25}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"import exceptions.MarkOutOfBounds;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"import exceptions.UnmarkOutOfBounds;","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"import java.io.File;","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"     * Ensures that a fixed line formatting is made.","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"    public static final String LINE_FORMATTING \u003d","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"            \"____________________________________________________________\\n\";","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"by\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_BY_NUM \u003d 4;","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"todo\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":32,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":33,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_TODO_NUM \u003d 5;","lastModifiedDate":"2023-02-04"},{"lineNumber":34,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":35,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"event\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_EVENT_NUM \u003d 6;","lastModifiedDate":"2023-02-04"},{"lineNumber":39,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":40,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"from\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":41,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":42,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":43,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_FROM_NUM \u003d 6;","lastModifiedDate":"2023-02-04"},{"lineNumber":44,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":45,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"to\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":47,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":48,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_TO_NUM \u003d 4;","lastModifiedDate":"2023-02-04"},{"lineNumber":49,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":50,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"unmark\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":51,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":52,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":53,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_UNMARK_NUM \u003d 7;","lastModifiedDate":"2023-02-04"},{"lineNumber":54,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":55,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"mark\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":56,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":57,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":58,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_MARK_NUM \u003d 5;","lastModifiedDate":"2023-02-04"},{"lineNumber":59,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"delete\" in","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_DELETE_NUM \u003d 7;","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":65,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"itszhixuan"},"content":"     * Keeps track of the current position of task in the list.","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"itszhixuan"},"content":"    private static int taskNum \u003d 0;","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"itszhixuan"},"content":"     * Resizeable array that stores the user inputs.","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"itszhixuan"},"content":"    private static ArrayList\u003cTask\u003e storedValues \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":74,"author":{"gitId":"itszhixuan"},"content":"     * Home directory for creating directory and txt file.","lastModifiedDate":"2023-02-12"},{"lineNumber":75,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"itszhixuan"},"content":"    private static final String HOME \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"itszhixuan"},"content":"     * Fixed directory where txt file will be saved.","lastModifiedDate":"2023-02-12"},{"lineNumber":79,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":80,"author":{"gitId":"itszhixuan"},"content":"    private static final File FILEPATH \u003d Paths.get(HOME, \"IdeaProjects\", \"ip\", \"src\",","lastModifiedDate":"2023-02-12"},{"lineNumber":81,"author":{"gitId":"itszhixuan"},"content":"            \"main\", \"data\", \"duke-inputs.txt\").toFile();","lastModifiedDate":"2023-02-12"},{"lineNumber":82,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":83,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":84,"author":{"gitId":"itszhixuan"},"content":"     * Main function greets the user and runs processInputs().","lastModifiedDate":"2023-02-04"},{"lineNumber":85,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"itszhixuan"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":88,"author":{"gitId":"itszhixuan"},"content":"            fileAvailability();","lastModifiedDate":"2023-02-12"},{"lineNumber":89,"author":{"gitId":"itszhixuan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"itszhixuan"},"content":"            System.out.println(\"File not found!\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":91,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":92,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":93,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":94,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":95,"author":{"gitId":"itszhixuan"},"content":"     * Checks if the file is already created in the user\u0027s environment. If not, fileAvailability will","lastModifiedDate":"2023-02-12"},{"lineNumber":96,"author":{"gitId":"itszhixuan"},"content":"     * create the directory or txt file, depending on what is missing.","lastModifiedDate":"2023-02-12"},{"lineNumber":97,"author":{"gitId":"itszhixuan"},"content":"     * Duke will only proceed when the txt file is detected.","lastModifiedDate":"2023-02-12"},{"lineNumber":98,"author":{"gitId":"itszhixuan"},"content":"     * @throws FileNotFoundException When the file is not found in the environment.","lastModifiedDate":"2023-02-12"},{"lineNumber":99,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":100,"author":{"gitId":"itszhixuan"},"content":"    public static void fileAvailability() throws FileNotFoundException {","lastModifiedDate":"2023-02-12"},{"lineNumber":101,"author":{"gitId":"itszhixuan"},"content":"        Path path \u003d Paths.get(HOME, \"IdeaProjects\", \"ip\", \"src\", \"main\", \"data\");","lastModifiedDate":"2023-02-12"},{"lineNumber":102,"author":{"gitId":"itszhixuan"},"content":"        boolean directoryExists \u003d Files.exists(path);","lastModifiedDate":"2023-02-12"},{"lineNumber":103,"author":{"gitId":"itszhixuan"},"content":"        if (!directoryExists) {","lastModifiedDate":"2023-02-12"},{"lineNumber":104,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-12"},{"lineNumber":105,"author":{"gitId":"itszhixuan"},"content":"                Files.createDirectory(path);","lastModifiedDate":"2023-02-12"},{"lineNumber":106,"author":{"gitId":"itszhixuan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":107,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Error occurred!\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":108,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":109,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":110,"author":{"gitId":"itszhixuan"},"content":"        Path textFile \u003d Paths.get(HOME, \"IdeaProjects\", \"ip\", \"src\", \"main\", \"data\", \"duke-inputs.txt\");","lastModifiedDate":"2023-02-12"},{"lineNumber":111,"author":{"gitId":"itszhixuan"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":112,"author":{"gitId":"itszhixuan"},"content":"            Files.createFile(textFile);","lastModifiedDate":"2023-02-12"},{"lineNumber":113,"author":{"gitId":"itszhixuan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":114,"author":{"gitId":"itszhixuan"},"content":"            System.out.println(\"File already exists!\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":115,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":116,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":117,"author":{"gitId":"itszhixuan"},"content":"        File data \u003d textFile.toFile();","lastModifiedDate":"2023-02-12"},{"lineNumber":118,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":119,"author":{"gitId":"itszhixuan"},"content":"        if (data.exists()) {","lastModifiedDate":"2023-02-12"},{"lineNumber":120,"author":{"gitId":"itszhixuan"},"content":"            showGreetings();","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"itszhixuan"},"content":"            acceptUserInputs(data);","lastModifiedDate":"2023-02-12"},{"lineNumber":122,"author":{"gitId":"itszhixuan"},"content":"            showGoodbye();","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":125,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":126,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":127,"author":{"gitId":"itszhixuan"},"content":"     * Reads in the user inputs and processes the commands.","lastModifiedDate":"2023-02-05"},{"lineNumber":128,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":129,"author":{"gitId":"itszhixuan"},"content":"    private static void acceptUserInputs(File data) {","lastModifiedDate":"2023-02-12"},{"lineNumber":130,"author":{"gitId":"itszhixuan"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":131,"author":{"gitId":"itszhixuan"},"content":"            readExistingData(data, storedValues);","lastModifiedDate":"2023-02-12"},{"lineNumber":132,"author":{"gitId":"itszhixuan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":133,"author":{"gitId":"itszhixuan"},"content":"            System.out.println(\"File is not found!\");","lastModifiedDate":"2023-02-12"},{"lineNumber":134,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":135,"author":{"gitId":"itszhixuan"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-26"},{"lineNumber":136,"author":{"gitId":"itszhixuan"},"content":"        String line \u003d in.nextLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":137,"author":{"gitId":"itszhixuan"},"content":"        while (!hasProcessedAllInputs(line, storedValues)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":138,"author":{"gitId":"itszhixuan"},"content":"            line \u003d in.nextLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":139,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":140,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":141,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":142,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":143,"author":{"gitId":"itszhixuan"},"content":"     * Reads the existing data within the txt file before new user inputs are allowed. Ensures that the","lastModifiedDate":"2023-02-12"},{"lineNumber":144,"author":{"gitId":"itszhixuan"},"content":"     * list is the most updated since the last interaction with Duke.","lastModifiedDate":"2023-02-12"},{"lineNumber":145,"author":{"gitId":"itszhixuan"},"content":"     * @param data The txt file in the local environment.","lastModifiedDate":"2023-02-12"},{"lineNumber":146,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":147,"author":{"gitId":"itszhixuan"},"content":"     * @throws FileNotFoundException Thrown when file is not found in the environment.","lastModifiedDate":"2023-02-12"},{"lineNumber":148,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":149,"author":{"gitId":"itszhixuan"},"content":"    private static void readExistingData(File data, ArrayList\u003cTask\u003e storedValues) throws FileNotFoundException {","lastModifiedDate":"2023-02-12"},{"lineNumber":150,"author":{"gitId":"itszhixuan"},"content":"        Scanner readData \u003d new Scanner(data);","lastModifiedDate":"2023-02-12"},{"lineNumber":151,"author":{"gitId":"itszhixuan"},"content":"        while (readData.hasNext()) {","lastModifiedDate":"2023-02-12"},{"lineNumber":152,"author":{"gitId":"itszhixuan"},"content":"            // Previous data stored from calling duke","lastModifiedDate":"2023-02-12"},{"lineNumber":153,"author":{"gitId":"itszhixuan"},"content":"            String extractType[] \u003d readData.nextLine().split(\" | \", 5);","lastModifiedDate":"2023-02-12"},{"lineNumber":154,"author":{"gitId":"itszhixuan"},"content":"            String type \u003d extractType[0];","lastModifiedDate":"2023-02-12"},{"lineNumber":155,"author":{"gitId":"itszhixuan"},"content":"            String marked \u003d extractType[2];","lastModifiedDate":"2023-02-12"},{"lineNumber":156,"author":{"gitId":"itszhixuan"},"content":"            String task \u003d extractType[4];","lastModifiedDate":"2023-02-12"},{"lineNumber":157,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":158,"author":{"gitId":"itszhixuan"},"content":"            switch (type) {","lastModifiedDate":"2023-02-12"},{"lineNumber":159,"author":{"gitId":"itszhixuan"},"content":"            case \"T\":","lastModifiedDate":"2023-02-12"},{"lineNumber":160,"author":{"gitId":"itszhixuan"},"content":"                readExistingToDo(storedValues, marked, task);","lastModifiedDate":"2023-02-12"},{"lineNumber":161,"author":{"gitId":"itszhixuan"},"content":"                break;","lastModifiedDate":"2023-02-12"},{"lineNumber":162,"author":{"gitId":"itszhixuan"},"content":"            case \"D\":","lastModifiedDate":"2023-02-12"},{"lineNumber":163,"author":{"gitId":"itszhixuan"},"content":"                readExistingDeadline(storedValues, extractType, marked);","lastModifiedDate":"2023-02-12"},{"lineNumber":164,"author":{"gitId":"itszhixuan"},"content":"                break;","lastModifiedDate":"2023-02-12"},{"lineNumber":165,"author":{"gitId":"itszhixuan"},"content":"            case \"E\":","lastModifiedDate":"2023-02-12"},{"lineNumber":166,"author":{"gitId":"itszhixuan"},"content":"                readExistingEvent(storedValues, extractType, marked);","lastModifiedDate":"2023-02-12"},{"lineNumber":167,"author":{"gitId":"itszhixuan"},"content":"                break;","lastModifiedDate":"2023-02-12"},{"lineNumber":168,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":169,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":170,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":171,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":172,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":173,"author":{"gitId":"itszhixuan"},"content":"     * Reads the existing events within the txt file, processes it and displays it when the command \"list\"","lastModifiedDate":"2023-02-12"},{"lineNumber":174,"author":{"gitId":"itszhixuan"},"content":"     * is called by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":175,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":176,"author":{"gitId":"itszhixuan"},"content":"     * @param extractType Description of task with duration.","lastModifiedDate":"2023-02-12"},{"lineNumber":177,"author":{"gitId":"itszhixuan"},"content":"     * @param marked Status of marked in txt file.","lastModifiedDate":"2023-02-12"},{"lineNumber":178,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":179,"author":{"gitId":"itszhixuan"},"content":"    private static void readExistingEvent(ArrayList\u003cTask\u003e storedValues, String[] extractType, String marked) {","lastModifiedDate":"2023-02-12"},{"lineNumber":180,"author":{"gitId":"itszhixuan"},"content":"        int firstSlash \u003d extractType[4].indexOf(\"|\");","lastModifiedDate":"2023-02-12"},{"lineNumber":181,"author":{"gitId":"itszhixuan"},"content":"        String eventName \u003d extractType[4].substring(0,firstSlash-1);","lastModifiedDate":"2023-02-12"},{"lineNumber":182,"author":{"gitId":"itszhixuan"},"content":"        String eventDuration \u003d extractType[4].substring(firstSlash+2);","lastModifiedDate":"2023-02-12"},{"lineNumber":183,"author":{"gitId":"itszhixuan"},"content":"        int secondSlash \u003d eventDuration.indexOf(\"|\");","lastModifiedDate":"2023-02-12"},{"lineNumber":184,"author":{"gitId":"itszhixuan"},"content":"        String eventFrom \u003d eventDuration.substring(0,secondSlash-1);","lastModifiedDate":"2023-02-12"},{"lineNumber":185,"author":{"gitId":"itszhixuan"},"content":"        String eventTo \u003d eventDuration.substring(secondSlash+2);","lastModifiedDate":"2023-02-12"},{"lineNumber":186,"author":{"gitId":"itszhixuan"},"content":"        Event addInputE \u003d new Event(eventName, eventFrom, eventTo);","lastModifiedDate":"2023-02-12"},{"lineNumber":187,"author":{"gitId":"itszhixuan"},"content":"        storedValues.add(taskNum,addInputE);","lastModifiedDate":"2023-02-12"},{"lineNumber":188,"author":{"gitId":"itszhixuan"},"content":"        if (marked.equals(\"1\")) {","lastModifiedDate":"2023-02-12"},{"lineNumber":189,"author":{"gitId":"itszhixuan"},"content":"            storedValues.get(taskNum).markAsDone();","lastModifiedDate":"2023-02-12"},{"lineNumber":190,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":191,"author":{"gitId":"itszhixuan"},"content":"        taskNum +\u003d 1;","lastModifiedDate":"2023-02-12"},{"lineNumber":192,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":193,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":194,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":195,"author":{"gitId":"itszhixuan"},"content":"     * Reads the existing deadlines within the txt file, processes it and displays it when the command \"list\"","lastModifiedDate":"2023-02-12"},{"lineNumber":196,"author":{"gitId":"itszhixuan"},"content":"     * is called by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":197,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":198,"author":{"gitId":"itszhixuan"},"content":"     * @param extractType Description of task with duration.","lastModifiedDate":"2023-02-12"},{"lineNumber":199,"author":{"gitId":"itszhixuan"},"content":"     * @param marked Status of marked in txt file.","lastModifiedDate":"2023-02-12"},{"lineNumber":200,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":201,"author":{"gitId":"itszhixuan"},"content":"    private static void readExistingDeadline(ArrayList\u003cTask\u003e storedValues, String[] extractType, String marked) {","lastModifiedDate":"2023-02-12"},{"lineNumber":202,"author":{"gitId":"itszhixuan"},"content":"        int slash \u003d extractType[4].indexOf(\"|\");","lastModifiedDate":"2023-02-12"},{"lineNumber":203,"author":{"gitId":"itszhixuan"},"content":"        String deadlineTask \u003d extractType[4].substring(0, slash-1);","lastModifiedDate":"2023-02-12"},{"lineNumber":204,"author":{"gitId":"itszhixuan"},"content":"        String deadlineBy \u003d extractType[4].substring(slash+2);","lastModifiedDate":"2023-02-12"},{"lineNumber":205,"author":{"gitId":"itszhixuan"},"content":"        Deadline addInputD \u003d new Deadline(deadlineTask, deadlineBy);","lastModifiedDate":"2023-02-12"},{"lineNumber":206,"author":{"gitId":"itszhixuan"},"content":"        storedValues.add(taskNum,addInputD);","lastModifiedDate":"2023-02-12"},{"lineNumber":207,"author":{"gitId":"itszhixuan"},"content":"        if (marked.equals(\"1\")) {","lastModifiedDate":"2023-02-12"},{"lineNumber":208,"author":{"gitId":"itszhixuan"},"content":"            storedValues.get(taskNum).markAsDone();","lastModifiedDate":"2023-02-12"},{"lineNumber":209,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":210,"author":{"gitId":"itszhixuan"},"content":"        taskNum +\u003d 1;","lastModifiedDate":"2023-02-12"},{"lineNumber":211,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":212,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":213,"author":{"gitId":"itszhixuan"},"content":"     * Reads the existing todos within the txt file, processes it and displays it when the command \"list\"","lastModifiedDate":"2023-02-12"},{"lineNumber":214,"author":{"gitId":"itszhixuan"},"content":"     * is called by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":215,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":216,"author":{"gitId":"itszhixuan"},"content":"     * @param marked Status of marked in txt file.","lastModifiedDate":"2023-02-12"},{"lineNumber":217,"author":{"gitId":"itszhixuan"},"content":"     * @param task Description of task.","lastModifiedDate":"2023-02-12"},{"lineNumber":218,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":219,"author":{"gitId":"itszhixuan"},"content":"    private static void readExistingToDo(ArrayList\u003cTask\u003e storedValues, String marked, String task) {","lastModifiedDate":"2023-02-12"},{"lineNumber":220,"author":{"gitId":"itszhixuan"},"content":"        Todo addInputT \u003d new Todo(task);","lastModifiedDate":"2023-02-12"},{"lineNumber":221,"author":{"gitId":"itszhixuan"},"content":"        storedValues.add(taskNum,addInputT);","lastModifiedDate":"2023-02-12"},{"lineNumber":222,"author":{"gitId":"itszhixuan"},"content":"        if (marked.equals(\"1\")) {","lastModifiedDate":"2023-02-12"},{"lineNumber":223,"author":{"gitId":"itszhixuan"},"content":"            storedValues.get(taskNum).markAsDone();","lastModifiedDate":"2023-02-12"},{"lineNumber":224,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":225,"author":{"gitId":"itszhixuan"},"content":"        taskNum +\u003d 1;","lastModifiedDate":"2023-02-12"},{"lineNumber":226,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":227,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":228,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-05"},{"lineNumber":229,"author":{"gitId":"itszhixuan"},"content":"     * Detects the user input and matches the command with the desired output.","lastModifiedDate":"2023-02-05"},{"lineNumber":230,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-05"},{"lineNumber":231,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-05"},{"lineNumber":232,"author":{"gitId":"itszhixuan"},"content":"     * @return False if bye command is not called.","lastModifiedDate":"2023-02-05"},{"lineNumber":233,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":234,"author":{"gitId":"itszhixuan"},"content":"    private static boolean hasProcessedAllInputs(String line, ArrayList\u003cTask\u003e storedValues) {","lastModifiedDate":"2023-02-11"},{"lineNumber":235,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":236,"author":{"gitId":"itszhixuan"},"content":"        String splitInputs[] \u003d line.split(\" \", 2);","lastModifiedDate":"2023-02-05"},{"lineNumber":237,"author":{"gitId":"itszhixuan"},"content":"        String command \u003d splitInputs[0];","lastModifiedDate":"2023-02-05"},{"lineNumber":238,"author":{"gitId":"itszhixuan"},"content":"        switch (command) {","lastModifiedDate":"2023-02-05"},{"lineNumber":239,"author":{"gitId":"itszhixuan"},"content":"        case \"bye\":","lastModifiedDate":"2023-02-05"},{"lineNumber":240,"author":{"gitId":"itszhixuan"},"content":"            return true;","lastModifiedDate":"2023-02-05"},{"lineNumber":241,"author":{"gitId":"itszhixuan"},"content":"        case \"list\":","lastModifiedDate":"2023-02-05"},{"lineNumber":242,"author":{"gitId":"itszhixuan"},"content":"            printList(storedValues);","lastModifiedDate":"2023-02-12"},{"lineNumber":243,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-05"},{"lineNumber":244,"author":{"gitId":"itszhixuan"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-05"},{"lineNumber":245,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-10"},{"lineNumber":246,"author":{"gitId":"itszhixuan"},"content":"                markItem(storedValues, line, taskNum);","lastModifiedDate":"2023-02-10"},{"lineNumber":247,"author":{"gitId":"itszhixuan"},"content":"            } catch (MarkOutOfBounds e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":248,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Item to mark is not in list!\");","lastModifiedDate":"2023-02-10"},{"lineNumber":249,"author":{"gitId":"itszhixuan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":250,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"File is not found!\");","lastModifiedDate":"2023-02-12"},{"lineNumber":251,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":252,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-05"},{"lineNumber":253,"author":{"gitId":"itszhixuan"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-05"},{"lineNumber":254,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-10"},{"lineNumber":255,"author":{"gitId":"itszhixuan"},"content":"                unmarkItem(storedValues, line);","lastModifiedDate":"2023-02-04"},{"lineNumber":256,"author":{"gitId":"itszhixuan"},"content":"            } catch (UnmarkOutOfBounds e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":257,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Item to unmark is not in list!\");","lastModifiedDate":"2023-02-10"},{"lineNumber":258,"author":{"gitId":"itszhixuan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":259,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"File is not found!\");","lastModifiedDate":"2023-02-12"},{"lineNumber":260,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":261,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-05"},{"lineNumber":262,"author":{"gitId":"itszhixuan"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-05"},{"lineNumber":263,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-10"},{"lineNumber":264,"author":{"gitId":"itszhixuan"},"content":"                taskNum \u003d processDeadline(storedValues, taskNum, line);","lastModifiedDate":"2023-02-04"},{"lineNumber":265,"author":{"gitId":"itszhixuan"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":266,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Deadline is not added in the correct format! \\n\" +","lastModifiedDate":"2023-02-10"},{"lineNumber":267,"author":{"gitId":"itszhixuan"},"content":"                        \"deadline \u003cdescription\u003e /by \u003cdate\u003e \\n\");","lastModifiedDate":"2023-02-10"},{"lineNumber":268,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":269,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-05"},{"lineNumber":270,"author":{"gitId":"itszhixuan"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-05"},{"lineNumber":271,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-10"},{"lineNumber":272,"author":{"gitId":"itszhixuan"},"content":"                taskNum \u003d processToDo(storedValues, taskNum, line);","lastModifiedDate":"2023-02-04"},{"lineNumber":273,"author":{"gitId":"itszhixuan"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":274,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"The description after todo cannot be empty!\");","lastModifiedDate":"2023-02-10"},{"lineNumber":275,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":276,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-05"},{"lineNumber":277,"author":{"gitId":"itszhixuan"},"content":"        case \"event\":","lastModifiedDate":"2023-02-05"},{"lineNumber":278,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-10"},{"lineNumber":279,"author":{"gitId":"itszhixuan"},"content":"                taskNum \u003d processEvent(storedValues, taskNum, line);","lastModifiedDate":"2023-02-04"},{"lineNumber":280,"author":{"gitId":"itszhixuan"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":281,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Event is not added in the correct format! \\n\" +","lastModifiedDate":"2023-02-10"},{"lineNumber":282,"author":{"gitId":"itszhixuan"},"content":"                        \"event \u003cdescription\u003e /from \u003cdate\u003e /to \u003cdate\u003e \\n\");","lastModifiedDate":"2023-02-10"},{"lineNumber":283,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":284,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-05"},{"lineNumber":285,"author":{"gitId":"itszhixuan"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-11"},{"lineNumber":286,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-11"},{"lineNumber":287,"author":{"gitId":"itszhixuan"},"content":"                deleteTask(line, storedValues);","lastModifiedDate":"2023-02-12"},{"lineNumber":288,"author":{"gitId":"itszhixuan"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":289,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Item to delete is not in the list!\");","lastModifiedDate":"2023-02-11"},{"lineNumber":290,"author":{"gitId":"itszhixuan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":291,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Error!\");","lastModifiedDate":"2023-02-12"},{"lineNumber":292,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":293,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-11"},{"lineNumber":294,"author":{"gitId":"itszhixuan"},"content":"        default:","lastModifiedDate":"2023-02-05"},{"lineNumber":295,"author":{"gitId":"itszhixuan"},"content":"            // Commands that are not listed above","lastModifiedDate":"2023-02-04"},{"lineNumber":296,"author":{"gitId":"itszhixuan"},"content":"            System.out.println(\"Invalid command, try again! \\n\");","lastModifiedDate":"2023-02-04"},{"lineNumber":297,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":298,"author":{"gitId":"itszhixuan"},"content":"        return false;","lastModifiedDate":"2023-02-05"},{"lineNumber":299,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":300,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":301,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":302,"author":{"gitId":"itszhixuan"},"content":"     * Deletes the task in the list and the txt file, when the user no longer needs the task.","lastModifiedDate":"2023-02-12"},{"lineNumber":303,"author":{"gitId":"itszhixuan"},"content":"     * @param line The command input from user.","lastModifiedDate":"2023-02-12"},{"lineNumber":304,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":305,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when error is detected.","lastModifiedDate":"2023-02-12"},{"lineNumber":306,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":307,"author":{"gitId":"itszhixuan"},"content":"    private static void deleteTask(String line, ArrayList\u003cTask\u003e storedValues) throws IOException {","lastModifiedDate":"2023-02-12"},{"lineNumber":308,"author":{"gitId":"itszhixuan"},"content":"        int length \u003d line.length();","lastModifiedDate":"2023-02-11"},{"lineNumber":309,"author":{"gitId":"itszhixuan"},"content":"        String itemToDelete \u003d line.substring(REMOVE_DELETE_NUM, length);","lastModifiedDate":"2023-02-11"},{"lineNumber":310,"author":{"gitId":"itszhixuan"},"content":"        int posToDelete \u003d Integer.parseInt(itemToDelete);","lastModifiedDate":"2023-02-11"},{"lineNumber":311,"author":{"gitId":"itszhixuan"},"content":"        Task value \u003d storedValues.get(posToDelete - 1);","lastModifiedDate":"2023-02-11"},{"lineNumber":312,"author":{"gitId":"itszhixuan"},"content":"        int currLine \u003d 0;","lastModifiedDate":"2023-02-12"},{"lineNumber":313,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":314,"author":{"gitId":"itszhixuan"},"content":"        deleteTaskInTxt(posToDelete, currLine);","lastModifiedDate":"2023-02-12"},{"lineNumber":315,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":316,"author":{"gitId":"itszhixuan"},"content":"        storedValues.remove(posToDelete - 1);","lastModifiedDate":"2023-02-12"},{"lineNumber":317,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-12"},{"lineNumber":318,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \\n\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":319,"author":{"gitId":"itszhixuan"},"content":"                value + \"\\n\" +","lastModifiedDate":"2023-02-12"},{"lineNumber":320,"author":{"gitId":"itszhixuan"},"content":"                \"Now you have \" + (taskNum - 1) + \" tasks in the list. \\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":321,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-12"},{"lineNumber":322,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":323,"author":{"gitId":"itszhixuan"},"content":"        taskNum -\u003d 1;","lastModifiedDate":"2023-02-12"},{"lineNumber":324,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":325,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":326,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":327,"author":{"gitId":"itszhixuan"},"content":"     * Deletes task in txt file.","lastModifiedDate":"2023-02-12"},{"lineNumber":328,"author":{"gitId":"itszhixuan"},"content":"     * @param posToDelete Row to delete.","lastModifiedDate":"2023-02-12"},{"lineNumber":329,"author":{"gitId":"itszhixuan"},"content":"     * @param currLine Tracks the current line that it is on.","lastModifiedDate":"2023-02-12"},{"lineNumber":330,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when error is detected.","lastModifiedDate":"2023-02-12"},{"lineNumber":331,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":332,"author":{"gitId":"itszhixuan"},"content":"    private static void deleteTaskInTxt(int posToDelete, int currLine) throws IOException {","lastModifiedDate":"2023-02-12"},{"lineNumber":333,"author":{"gitId":"itszhixuan"},"content":"        File dukeInputs \u003d FILEPATH;","lastModifiedDate":"2023-02-12"},{"lineNumber":334,"author":{"gitId":"itszhixuan"},"content":"        String newContent \u003d \"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":335,"author":{"gitId":"itszhixuan"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(dukeInputs));","lastModifiedDate":"2023-02-12"},{"lineNumber":336,"author":{"gitId":"itszhixuan"},"content":"        String input \u003d reader.readLine();","lastModifiedDate":"2023-02-12"},{"lineNumber":337,"author":{"gitId":"itszhixuan"},"content":"        while (input !\u003d null) {","lastModifiedDate":"2023-02-12"},{"lineNumber":338,"author":{"gitId":"itszhixuan"},"content":"            if (posToDelete -1 !\u003d currLine) {","lastModifiedDate":"2023-02-12"},{"lineNumber":339,"author":{"gitId":"itszhixuan"},"content":"                newContent \u003d newContent + input + \"\\n\";","lastModifiedDate":"2023-02-12"},{"lineNumber":340,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":341,"author":{"gitId":"itszhixuan"},"content":"            currLine +\u003d 1;","lastModifiedDate":"2023-02-12"},{"lineNumber":342,"author":{"gitId":"itszhixuan"},"content":"            input \u003d reader.readLine();","lastModifiedDate":"2023-02-12"},{"lineNumber":343,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":344,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":345,"author":{"gitId":"itszhixuan"},"content":"        FileWriter writer \u003d new FileWriter(dukeInputs);","lastModifiedDate":"2023-02-12"},{"lineNumber":346,"author":{"gitId":"itszhixuan"},"content":"        writer.write(newContent);","lastModifiedDate":"2023-02-12"},{"lineNumber":347,"author":{"gitId":"itszhixuan"},"content":"        reader.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":348,"author":{"gitId":"itszhixuan"},"content":"        writer.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":349,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":350,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":351,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":352,"author":{"gitId":"itszhixuan"},"content":"     * Writes all the inputs made by user to the txt file so that data is saved in hard disk.","lastModifiedDate":"2023-02-12"},{"lineNumber":353,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of input values made by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":354,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when error is detected.","lastModifiedDate":"2023-02-12"},{"lineNumber":355,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":356,"author":{"gitId":"itszhixuan"},"content":"    private static void writeToFile(Task storedValues) throws IOException {","lastModifiedDate":"2023-02-12"},{"lineNumber":357,"author":{"gitId":"itszhixuan"},"content":"        FileWriter fw \u003d new FileWriter(FILEPATH, true);","lastModifiedDate":"2023-02-12"},{"lineNumber":358,"author":{"gitId":"itszhixuan"},"content":"        int marked \u003d ((storedValues.getStatusIcon().equals(\" \")) ? 0 : 1);","lastModifiedDate":"2023-02-12"},{"lineNumber":359,"author":{"gitId":"itszhixuan"},"content":"        if (storedValues.getClass().getSimpleName().equals(\"Todo\")) {","lastModifiedDate":"2023-02-12"},{"lineNumber":360,"author":{"gitId":"itszhixuan"},"content":"            fw.write(\"T | \" + marked + \" | \" + storedValues.description + \"\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":361,"author":{"gitId":"itszhixuan"},"content":"        } else if (storedValues.getClass().getSimpleName().equals(\"Deadline\")) {","lastModifiedDate":"2023-02-12"},{"lineNumber":362,"author":{"gitId":"itszhixuan"},"content":"            fw.write(\"D | \" + marked + \" | \" + storedValues.description + \" | \" +","lastModifiedDate":"2023-02-12"},{"lineNumber":363,"author":{"gitId":"itszhixuan"},"content":"                    ((Deadline) storedValues).by + \"\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":364,"author":{"gitId":"itszhixuan"},"content":"        } else {","lastModifiedDate":"2023-02-12"},{"lineNumber":365,"author":{"gitId":"itszhixuan"},"content":"            fw.write(\"E | \" + marked + \" | \" + storedValues.description + \" | \" +","lastModifiedDate":"2023-02-12"},{"lineNumber":366,"author":{"gitId":"itszhixuan"},"content":"                    ((Event) storedValues).by + \" | \" + ((Event) storedValues).to + \"\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":367,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":368,"author":{"gitId":"itszhixuan"},"content":"        fw.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":369,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":370,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":371,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":372,"author":{"gitId":"itszhixuan"},"content":"     * Prior to adding events to the list, processEvent separates the important details","lastModifiedDate":"2023-02-04"},{"lineNumber":373,"author":{"gitId":"itszhixuan"},"content":"     * within the input for further data storage.","lastModifiedDate":"2023-02-04"},{"lineNumber":374,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-04"},{"lineNumber":375,"author":{"gitId":"itszhixuan"},"content":"     * @param taskNum The existing position in the list.","lastModifiedDate":"2023-02-04"},{"lineNumber":376,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-04"},{"lineNumber":377,"author":{"gitId":"itszhixuan"},"content":"     * @return Updated position in the list.","lastModifiedDate":"2023-02-04"},{"lineNumber":378,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":379,"author":{"gitId":"itszhixuan"},"content":"    private static int processEvent(ArrayList\u003cTask\u003e storedValues, int taskNum, String line) {","lastModifiedDate":"2023-02-11"},{"lineNumber":380,"author":{"gitId":"itszhixuan"},"content":"        int firstForwardSlash \u003d line.indexOf(\u0027/\u0027);","lastModifiedDate":"2023-02-01"},{"lineNumber":381,"author":{"gitId":"itszhixuan"},"content":"        String taskName \u003d line.substring(REMOVE_EVENT_NUM, firstForwardSlash - 1);","lastModifiedDate":"2023-02-04"},{"lineNumber":382,"author":{"gitId":"itszhixuan"},"content":"        String duration \u003d line.substring(firstForwardSlash + REMOVE_FROM_NUM);","lastModifiedDate":"2023-02-04"},{"lineNumber":383,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":384,"author":{"gitId":"itszhixuan"},"content":"        int secondForwardSlash \u003d duration.indexOf(\u0027/\u0027);","lastModifiedDate":"2023-02-01"},{"lineNumber":385,"author":{"gitId":"itszhixuan"},"content":"        String startingTime \u003d duration.substring(0, secondForwardSlash - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":386,"author":{"gitId":"itszhixuan"},"content":"        String endingTime \u003d duration.substring(secondForwardSlash + REMOVE_TO_NUM);","lastModifiedDate":"2023-02-04"},{"lineNumber":387,"author":{"gitId":"itszhixuan"},"content":"        Event eventInput \u003d new Event(taskName, startingTime, endingTime);","lastModifiedDate":"2023-02-01"},{"lineNumber":388,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":389,"author":{"gitId":"itszhixuan"},"content":"        taskNum \u003d addTask(storedValues, taskNum, eventInput);","lastModifiedDate":"2023-02-04"},{"lineNumber":390,"author":{"gitId":"itszhixuan"},"content":"        return taskNum;","lastModifiedDate":"2023-02-04"},{"lineNumber":391,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":392,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":393,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":394,"author":{"gitId":"itszhixuan"},"content":"     * Prior to adding events with command toDo to the list, processtoDo separates the","lastModifiedDate":"2023-02-04"},{"lineNumber":395,"author":{"gitId":"itszhixuan"},"content":"     * important details within the input for data storage.","lastModifiedDate":"2023-02-04"},{"lineNumber":396,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-04"},{"lineNumber":397,"author":{"gitId":"itszhixuan"},"content":"     * @param taskNum The existing position in the list.","lastModifiedDate":"2023-02-04"},{"lineNumber":398,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-04"},{"lineNumber":399,"author":{"gitId":"itszhixuan"},"content":"     * @return Updated position in the list.","lastModifiedDate":"2023-02-04"},{"lineNumber":400,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":401,"author":{"gitId":"itszhixuan"},"content":"    private static int processToDo(ArrayList\u003cTask\u003e storedValues, int taskNum, String line) {","lastModifiedDate":"2023-02-11"},{"lineNumber":402,"author":{"gitId":"itszhixuan"},"content":"        String removeCommand \u003d line.substring(REMOVE_TODO_NUM);","lastModifiedDate":"2023-02-04"},{"lineNumber":403,"author":{"gitId":"itszhixuan"},"content":"        Todo todoInput \u003d new Todo(removeCommand);","lastModifiedDate":"2023-02-04"},{"lineNumber":404,"author":{"gitId":"itszhixuan"},"content":"        taskNum \u003d addTask(storedValues, taskNum, todoInput);","lastModifiedDate":"2023-02-04"},{"lineNumber":405,"author":{"gitId":"itszhixuan"},"content":"        return taskNum;","lastModifiedDate":"2023-02-04"},{"lineNumber":406,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":407,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":408,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":409,"author":{"gitId":"itszhixuan"},"content":"     * Prior to adding events with command deadline to the list, processDeadline separates the","lastModifiedDate":"2023-02-04"},{"lineNumber":410,"author":{"gitId":"itszhixuan"},"content":"     * important details within the input for data storage.","lastModifiedDate":"2023-02-04"},{"lineNumber":411,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-04"},{"lineNumber":412,"author":{"gitId":"itszhixuan"},"content":"     * @param taskNum The existing position in the list.","lastModifiedDate":"2023-02-04"},{"lineNumber":413,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-04"},{"lineNumber":414,"author":{"gitId":"itszhixuan"},"content":"     * @return Updated position in the list.","lastModifiedDate":"2023-02-04"},{"lineNumber":415,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":416,"author":{"gitId":"itszhixuan"},"content":"    private static int processDeadline(ArrayList\u003cTask\u003e storedValues, int taskNum, String line) {","lastModifiedDate":"2023-02-11"},{"lineNumber":417,"author":{"gitId":"itszhixuan"},"content":"        int forwardSlash \u003d line.indexOf(\u0027/\u0027);","lastModifiedDate":"2023-02-04"},{"lineNumber":418,"author":{"gitId":"itszhixuan"},"content":"        int endOfTask \u003d forwardSlash - 1;","lastModifiedDate":"2023-02-04"},{"lineNumber":419,"author":{"gitId":"itszhixuan"},"content":"        int dates \u003d forwardSlash + REMOVE_BY_NUM;","lastModifiedDate":"2023-02-04"},{"lineNumber":420,"author":{"gitId":"itszhixuan"},"content":"        Deadline deadlineInput \u003d new Deadline(line.substring(9, endOfTask), line.substring(dates));","lastModifiedDate":"2023-02-04"},{"lineNumber":421,"author":{"gitId":"itszhixuan"},"content":"        taskNum \u003d addTask(storedValues, taskNum, deadlineInput);","lastModifiedDate":"2023-02-04"},{"lineNumber":422,"author":{"gitId":"itszhixuan"},"content":"        return taskNum;","lastModifiedDate":"2023-02-04"},{"lineNumber":423,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":424,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":425,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":426,"author":{"gitId":"itszhixuan"},"content":"     * Adds processed user inputs into the list of stored values.","lastModifiedDate":"2023-02-04"},{"lineNumber":427,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-04"},{"lineNumber":428,"author":{"gitId":"itszhixuan"},"content":"     * @param taskNum The existing position in the list.","lastModifiedDate":"2023-02-04"},{"lineNumber":429,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-04"},{"lineNumber":430,"author":{"gitId":"itszhixuan"},"content":"     * @return Updated position in the list.","lastModifiedDate":"2023-02-04"},{"lineNumber":431,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":432,"author":{"gitId":"itszhixuan"},"content":"    private static int addTask(ArrayList\u003cTask\u003e storedValues, int taskNum, Task line) {","lastModifiedDate":"2023-02-11"},{"lineNumber":433,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":434,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \\n\" + line.toString() + \"\\n\" +","lastModifiedDate":"2023-02-01"},{"lineNumber":435,"author":{"gitId":"itszhixuan"},"content":"                \"Now you have \" + (taskNum + 1) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-02-04"},{"lineNumber":436,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":437,"author":{"gitId":"itszhixuan"},"content":"        // Store value in line into list","lastModifiedDate":"2023-02-04"},{"lineNumber":438,"author":{"gitId":"itszhixuan"},"content":"        storedValues.add(taskNum,line);","lastModifiedDate":"2023-02-12"},{"lineNumber":439,"author":{"gitId":"itszhixuan"},"content":"        taskNum +\u003d 1;","lastModifiedDate":"2023-02-04"},{"lineNumber":440,"author":{"gitId":"itszhixuan"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":441,"author":{"gitId":"itszhixuan"},"content":"            writeToFile(line);","lastModifiedDate":"2023-02-12"},{"lineNumber":442,"author":{"gitId":"itszhixuan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":443,"author":{"gitId":"itszhixuan"},"content":"            System.out.println(\"Something went wrong...\" + e.getMessage());","lastModifiedDate":"2023-02-12"},{"lineNumber":444,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":445,"author":{"gitId":"itszhixuan"},"content":"        return taskNum;","lastModifiedDate":"2023-02-04"},{"lineNumber":446,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":447,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":448,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":449,"author":{"gitId":"itszhixuan"},"content":"     * Unmarks the task in the list when called.","lastModifiedDate":"2023-02-04"},{"lineNumber":450,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-12"},{"lineNumber":451,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-04"},{"lineNumber":452,"author":{"gitId":"itszhixuan"},"content":"     * @throws UnmarkOutOfBounds Thrown when the value input is out of bounds.","lastModifiedDate":"2023-02-12"},{"lineNumber":453,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when other errors are detected.","lastModifiedDate":"2023-02-12"},{"lineNumber":454,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":455,"author":{"gitId":"itszhixuan"},"content":"    private static void unmarkItem(ArrayList\u003cTask\u003e storedValues, String line) throws UnmarkOutOfBounds, IOException {","lastModifiedDate":"2023-02-12"},{"lineNumber":456,"author":{"gitId":"itszhixuan"},"content":"        int length \u003d line.length();","lastModifiedDate":"2023-01-28"},{"lineNumber":457,"author":{"gitId":"itszhixuan"},"content":"        String itemToMark \u003d line.substring(REMOVE_UNMARK_NUM, length);","lastModifiedDate":"2023-02-04"},{"lineNumber":458,"author":{"gitId":"itszhixuan"},"content":"        int numToMark \u003d Integer.parseInt(itemToMark);","lastModifiedDate":"2023-01-28"},{"lineNumber":459,"author":{"gitId":"itszhixuan"},"content":"        // Unmark the item","lastModifiedDate":"2023-02-04"},{"lineNumber":460,"author":{"gitId":"itszhixuan"},"content":"        if (taskNum \u003c numToMark) {","lastModifiedDate":"2023-02-10"},{"lineNumber":461,"author":{"gitId":"itszhixuan"},"content":"            throw new UnmarkOutOfBounds();","lastModifiedDate":"2023-02-10"},{"lineNumber":462,"author":{"gitId":"itszhixuan"},"content":"        } else {","lastModifiedDate":"2023-02-10"},{"lineNumber":463,"author":{"gitId":"itszhixuan"},"content":"            unmarkTaskInTxt(storedValues, numToMark);","lastModifiedDate":"2023-02-12"},{"lineNumber":464,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":465,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":466,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":467,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":468,"author":{"gitId":"itszhixuan"},"content":"     * Unmarks the tast in the txt file when called.","lastModifiedDate":"2023-02-12"},{"lineNumber":469,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-12"},{"lineNumber":470,"author":{"gitId":"itszhixuan"},"content":"     * @param numToMark The row in txt file to be unmarked.","lastModifiedDate":"2023-02-12"},{"lineNumber":471,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when file cannot be read.","lastModifiedDate":"2023-02-12"},{"lineNumber":472,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":473,"author":{"gitId":"itszhixuan"},"content":"    private static void unmarkTaskInTxt(ArrayList\u003cTask\u003e storedValues, int numToMark) throws IOException {","lastModifiedDate":"2023-02-12"},{"lineNumber":474,"author":{"gitId":"itszhixuan"},"content":"        storedValues.get(numToMark -1).unmarkAsDone();","lastModifiedDate":"2023-02-11"},{"lineNumber":475,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":476,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet: \\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":477,"author":{"gitId":"itszhixuan"},"content":"                storedValues.get(numToMark -1).toString() + \"\\n\");","lastModifiedDate":"2023-02-11"},{"lineNumber":478,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":479,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":480,"author":{"gitId":"itszhixuan"},"content":"        File dukeInputs \u003d FILEPATH;","lastModifiedDate":"2023-02-12"},{"lineNumber":481,"author":{"gitId":"itszhixuan"},"content":"        String prevContent \u003d \"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":482,"author":{"gitId":"itszhixuan"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(dukeInputs));","lastModifiedDate":"2023-02-12"},{"lineNumber":483,"author":{"gitId":"itszhixuan"},"content":"        String input \u003d reader.readLine();","lastModifiedDate":"2023-02-12"},{"lineNumber":484,"author":{"gitId":"itszhixuan"},"content":"        while (input !\u003d null) {","lastModifiedDate":"2023-02-12"},{"lineNumber":485,"author":{"gitId":"itszhixuan"},"content":"            prevContent \u003d prevContent + input + \"\\n\";","lastModifiedDate":"2023-02-12"},{"lineNumber":486,"author":{"gitId":"itszhixuan"},"content":"            input \u003d reader.readLine();","lastModifiedDate":"2023-02-12"},{"lineNumber":487,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":488,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":489,"author":{"gitId":"itszhixuan"},"content":"        char type \u003d storedValues.get(numToMark -1).getClass().toString().substring(6).charAt(0);","lastModifiedDate":"2023-02-12"},{"lineNumber":490,"author":{"gitId":"itszhixuan"},"content":"        String toReplace \u003d (type + \" | 1 | \" + storedValues.get(numToMark -1).description);","lastModifiedDate":"2023-02-12"},{"lineNumber":491,"author":{"gitId":"itszhixuan"},"content":"        String toReplaceWith \u003d (type + \" | 0 | \" + storedValues.get(numToMark -1).description);","lastModifiedDate":"2023-02-12"},{"lineNumber":492,"author":{"gitId":"itszhixuan"},"content":"        String newContent \u003d prevContent.replace(toReplace, toReplaceWith);","lastModifiedDate":"2023-02-12"},{"lineNumber":493,"author":{"gitId":"itszhixuan"},"content":"        FileWriter writer \u003d new FileWriter(dukeInputs);","lastModifiedDate":"2023-02-12"},{"lineNumber":494,"author":{"gitId":"itszhixuan"},"content":"        writer.write(newContent);","lastModifiedDate":"2023-02-12"},{"lineNumber":495,"author":{"gitId":"itszhixuan"},"content":"        reader.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":496,"author":{"gitId":"itszhixuan"},"content":"        writer.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":497,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":498,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":499,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":500,"author":{"gitId":"itszhixuan"},"content":"     * Marks the task in the list when called.","lastModifiedDate":"2023-02-04"},{"lineNumber":501,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-04"},{"lineNumber":502,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-04"},{"lineNumber":503,"author":{"gitId":"itszhixuan"},"content":"     * @param taskNum The task number from user input that is to be marked.","lastModifiedDate":"2023-02-12"},{"lineNumber":504,"author":{"gitId":"itszhixuan"},"content":"     * @throws MarkOutOfBounds Thrown when the task number exceeds the number of items in list.","lastModifiedDate":"2023-02-12"},{"lineNumber":505,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when error is detected.","lastModifiedDate":"2023-02-12"},{"lineNumber":506,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":507,"author":{"gitId":"itszhixuan"},"content":"    private static void markItem(ArrayList\u003cTask\u003e storedValues, String line, int taskNum) throws MarkOutOfBounds, IOException {","lastModifiedDate":"2023-02-12"},{"lineNumber":508,"author":{"gitId":"itszhixuan"},"content":"        int length \u003d line.length();","lastModifiedDate":"2023-01-28"},{"lineNumber":509,"author":{"gitId":"itszhixuan"},"content":"        String itemToMark \u003d line.substring(REMOVE_MARK_NUM, length);","lastModifiedDate":"2023-02-04"},{"lineNumber":510,"author":{"gitId":"itszhixuan"},"content":"        int numToMark \u003d Integer.parseInt(itemToMark);","lastModifiedDate":"2023-01-28"},{"lineNumber":511,"author":{"gitId":"itszhixuan"},"content":"        // Mark the item as complete","lastModifiedDate":"2023-02-04"},{"lineNumber":512,"author":{"gitId":"itszhixuan"},"content":"        if (taskNum \u003c numToMark) {","lastModifiedDate":"2023-02-10"},{"lineNumber":513,"author":{"gitId":"itszhixuan"},"content":"            // Means that it is out of bounds","lastModifiedDate":"2023-02-10"},{"lineNumber":514,"author":{"gitId":"itszhixuan"},"content":"            throw new MarkOutOfBounds();","lastModifiedDate":"2023-02-10"},{"lineNumber":515,"author":{"gitId":"itszhixuan"},"content":"        } else {","lastModifiedDate":"2023-02-10"},{"lineNumber":516,"author":{"gitId":"itszhixuan"},"content":"            markTaskInTxt(storedValues, numToMark);","lastModifiedDate":"2023-02-12"},{"lineNumber":517,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":518,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":519,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":520,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":521,"author":{"gitId":"itszhixuan"},"content":"     * Marks the task in the txt file.","lastModifiedDate":"2023-02-12"},{"lineNumber":522,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-12"},{"lineNumber":523,"author":{"gitId":"itszhixuan"},"content":"     * @param numToMark Task number from user input that is to be marked.","lastModifiedDate":"2023-02-12"},{"lineNumber":524,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when file cannot be read.","lastModifiedDate":"2023-02-12"},{"lineNumber":525,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":526,"author":{"gitId":"itszhixuan"},"content":"    private static void markTaskInTxt(ArrayList\u003cTask\u003e storedValues, int numToMark) throws IOException {","lastModifiedDate":"2023-02-12"},{"lineNumber":527,"author":{"gitId":"itszhixuan"},"content":"        storedValues.get(numToMark -1).markAsDone();","lastModifiedDate":"2023-02-11"},{"lineNumber":528,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":529,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":530,"author":{"gitId":"itszhixuan"},"content":"                + storedValues.get(numToMark -1).toString() + \"\\n\");","lastModifiedDate":"2023-02-11"},{"lineNumber":531,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":532,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":533,"author":{"gitId":"itszhixuan"},"content":"        File dukeInputs \u003d FILEPATH;","lastModifiedDate":"2023-02-12"},{"lineNumber":534,"author":{"gitId":"itszhixuan"},"content":"        String prevContent \u003d \"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":535,"author":{"gitId":"itszhixuan"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(dukeInputs));","lastModifiedDate":"2023-02-12"},{"lineNumber":536,"author":{"gitId":"itszhixuan"},"content":"        String input \u003d reader.readLine();","lastModifiedDate":"2023-02-12"},{"lineNumber":537,"author":{"gitId":"itszhixuan"},"content":"        while (input !\u003d null) {","lastModifiedDate":"2023-02-12"},{"lineNumber":538,"author":{"gitId":"itszhixuan"},"content":"            prevContent \u003d prevContent + input + \"\\n\";","lastModifiedDate":"2023-02-12"},{"lineNumber":539,"author":{"gitId":"itszhixuan"},"content":"            input \u003d reader.readLine();","lastModifiedDate":"2023-02-12"},{"lineNumber":540,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":541,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":542,"author":{"gitId":"itszhixuan"},"content":"        char type \u003d storedValues.get(numToMark -1).getClass().toString().substring(6).charAt(0);","lastModifiedDate":"2023-02-12"},{"lineNumber":543,"author":{"gitId":"itszhixuan"},"content":"        String toReplace \u003d (type + \" | 0 | \" + storedValues.get(numToMark -1).description);","lastModifiedDate":"2023-02-12"},{"lineNumber":544,"author":{"gitId":"itszhixuan"},"content":"        String toReplaceWith \u003d (type + \" | 1 | \" + storedValues.get(numToMark -1).description);","lastModifiedDate":"2023-02-12"},{"lineNumber":545,"author":{"gitId":"itszhixuan"},"content":"        String newContent \u003d prevContent.replace(toReplace, toReplaceWith);","lastModifiedDate":"2023-02-12"},{"lineNumber":546,"author":{"gitId":"itszhixuan"},"content":"        FileWriter writer \u003d new FileWriter(dukeInputs);","lastModifiedDate":"2023-02-12"},{"lineNumber":547,"author":{"gitId":"itszhixuan"},"content":"        writer.write(newContent);","lastModifiedDate":"2023-02-12"},{"lineNumber":548,"author":{"gitId":"itszhixuan"},"content":"        reader.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":549,"author":{"gitId":"itszhixuan"},"content":"        writer.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":550,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":551,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":552,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":553,"author":{"gitId":"itszhixuan"},"content":"     * Print all items within the list of stored tasks.","lastModifiedDate":"2023-02-04"},{"lineNumber":554,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-04"},{"lineNumber":555,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":556,"author":{"gitId":"itszhixuan"},"content":"    private static void printList(ArrayList\u003cTask\u003e storedValues) {","lastModifiedDate":"2023-02-12"},{"lineNumber":557,"author":{"gitId":"itszhixuan"},"content":"        int currValue \u003d 0;","lastModifiedDate":"2023-01-28"},{"lineNumber":558,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":559,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":560,"author":{"gitId":"itszhixuan"},"content":"        for (Task value : storedValues) {","lastModifiedDate":"2023-02-11"},{"lineNumber":561,"author":{"gitId":"itszhixuan"},"content":"            System.out.println((currValue + 1) + \".\" + value.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":562,"author":{"gitId":"itszhixuan"},"content":"            currValue +\u003d 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":563,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":564,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":565,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":566,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":567,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":568,"author":{"gitId":"itszhixuan"},"content":"     * Outputs the goodbye formatting and message to the user when bye","lastModifiedDate":"2023-02-04"},{"lineNumber":569,"author":{"gitId":"itszhixuan"},"content":"     * command is called.","lastModifiedDate":"2023-02-04"},{"lineNumber":570,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":571,"author":{"gitId":"itszhixuan"},"content":"    private static void showGoodbye() {","lastModifiedDate":"2023-01-28"},{"lineNumber":572,"author":{"gitId":"itszhixuan"},"content":"        String bye \u003d \"Bye. Hope to see you again soon!\\n\";","lastModifiedDate":"2023-02-04"},{"lineNumber":573,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-04"},{"lineNumber":574,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(bye);","lastModifiedDate":"2023-01-26"},{"lineNumber":575,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-04"},{"lineNumber":576,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":577,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":578,"author":{"gitId":"itszhixuan"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":579,"author":{"gitId":"itszhixuan"},"content":"     * Shows the formatted greetings to the user when called.","lastModifiedDate":"2023-02-04"},{"lineNumber":580,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":581,"author":{"gitId":"itszhixuan"},"content":"    private static void showGreetings() {","lastModifiedDate":"2023-01-28"},{"lineNumber":582,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":583,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":584,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":585,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":586,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-28"},{"lineNumber":587,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":588,"author":{"gitId":"itszhixuan"},"content":"        String hello \u003d \" Hello! I\u0027m Duke\\n\" +","lastModifiedDate":"2023-02-04"},{"lineNumber":589,"author":{"gitId":"itszhixuan"},"content":"                \" What can I do for you?\\n\";","lastModifiedDate":"2023-02-04"},{"lineNumber":590,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":591,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-01-28"},{"lineNumber":592,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-04"},{"lineNumber":593,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(hello);","lastModifiedDate":"2023-01-28"},{"lineNumber":594,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-04"},{"lineNumber":595,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":596,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":597,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":598,"author":{"gitId":"itszhixuan"},"content":"     * Prints the fixed formatting line when called.","lastModifiedDate":"2023-02-04"},{"lineNumber":599,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":600,"author":{"gitId":"itszhixuan"},"content":"    private static void formattingLine() {","lastModifiedDate":"2023-01-28"},{"lineNumber":601,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(LINE_FORMATTING);","lastModifiedDate":"2023-02-04"},{"lineNumber":602,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":603,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"itszhixuan":592,"-":11}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"public class Event extends Task{","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"     * The starting time of the event.","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"    protected String by;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"     * The ending time of the event.","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"    protected String to;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"     * Functions in the Event class.","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"     * @param description Name of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"     * @param by Starting time of the event.","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"     * @param to Ending time of the event.","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"    public Event(String description,String by, String to) {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"     * The string output when class is called.","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"     * @return Status, starting time and ending time.","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"itszhixuan"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"itszhixuan"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"itszhixuan"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + by + \" to: \" + to + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"itszhixuan":31}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"public class Task {","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"     * The description of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"    protected String description;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"     * The completion status of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"     * Functions in the Task class","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"     * @param description Name of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"     * Gets the current status of the task within the list.","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"     * @return isDone.","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"itszhixuan"},"content":"     * Marks the specified item as done.","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"itszhixuan"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"itszhixuan"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"itszhixuan"},"content":"     * Unmarks the specified item as done.","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"itszhixuan"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"itszhixuan"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":42,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":43,"author":{"gitId":"itszhixuan"},"content":"     * The string output when class is called.","lastModifiedDate":"2023-02-04"},{"lineNumber":44,"author":{"gitId":"itszhixuan"},"content":"     * @return Status and description.","lastModifiedDate":"2023-02-04"},{"lineNumber":45,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"itszhixuan"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"itszhixuan"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"itszhixuan"},"content":"        return \"[\" + getStatusIcon()+ \"] \" + description;","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"itszhixuan":50}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"     * Functions in the Todo class.","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"     * @param description Name of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"     * The string output when class is called.","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"     * @return Status and description.","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"itszhixuan":18}},{"path":"src/main/java/exceptions/MarkOutOfBounds.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"package exceptions;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"public class MarkOutOfBounds extends Exception {","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"    public MarkOutOfBounds () {","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"itszhixuan":6}},{"path":"src/main/java/exceptions/UnmarkOutOfBounds.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"package exceptions;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"public class UnmarkOutOfBounds extends Exception{","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"    public UnmarkOutOfBounds() {","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"itszhixuan":6}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"todo add task","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"list","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"bye","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"itszhixuan":3}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"itszhixuan":1,"-":33}}]
