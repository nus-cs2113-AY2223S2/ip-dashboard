[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"     * Due date of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"    protected String by;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"     * Functions in the Deadline class.","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"     * @param description Name of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"     * @param by Due date of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"     * The string output when class is called.","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"     * @return Status and due date.","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"itszhixuan":25}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"import java.io.File;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"     * Ensures that a fixed line formatting is made.","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"    public static final String LINE_FORMATTING \u003d","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"            \"____________________________________________________________\\n\";","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"by\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_BY_NUM \u003d 4;","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"todo\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_TODO_NUM \u003d 5;","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"event\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_EVENT_NUM \u003d 6;","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"from\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":32,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_FROM_NUM \u003d 6;","lastModifiedDate":"2023-02-04"},{"lineNumber":33,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":34,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"to\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":35,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_TO_NUM \u003d 4;","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":39,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"unmark\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":40,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":41,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":42,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_UNMARK_NUM \u003d 7;","lastModifiedDate":"2023-02-04"},{"lineNumber":43,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":44,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"mark\" in","lastModifiedDate":"2023-02-04"},{"lineNumber":45,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":47,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_MARK_NUM \u003d 5;","lastModifiedDate":"2023-02-04"},{"lineNumber":48,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"itszhixuan"},"content":"     * The fixed number of spaces when processing commands involving \"delete\" in","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"itszhixuan"},"content":"     * the input.","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"itszhixuan"},"content":"    public static final int REMOVE_DELETE_NUM \u003d 7;","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":54,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"itszhixuan"},"content":"     * Keeps track of the current position of task in the list.","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"itszhixuan"},"content":"    public static int taskNum \u003d 0;","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"itszhixuan"},"content":"     * Resizeable array that stores the user inputs.","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"itszhixuan"},"content":"    public static ArrayList\u003cTask\u003e storedValues \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":63,"author":{"gitId":"itszhixuan"},"content":"     * Home directory for creating directory and txt file.","lastModifiedDate":"2023-02-12"},{"lineNumber":64,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":65,"author":{"gitId":"itszhixuan"},"content":"    public static final String HOME \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-12"},{"lineNumber":67,"author":{"gitId":"itszhixuan"},"content":"     * Fixed directory where txt file will be saved.","lastModifiedDate":"2023-02-12"},{"lineNumber":68,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":69,"author":{"gitId":"itszhixuan"},"content":"    public static final File FILEPATH \u003d Paths.get(HOME, \"IdeaProjects\", \"ip\", \"src\",","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"itszhixuan"},"content":"            \"main\", \"data\", \"duke-inputs.txt\").toFile();","lastModifiedDate":"2023-02-12"},{"lineNumber":71,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":72,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":73,"author":{"gitId":"itszhixuan"},"content":"     * Main function greets the user and runs processInputs().","lastModifiedDate":"2023-02-04"},{"lineNumber":74,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":76,"author":{"gitId":"itszhixuan"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"itszhixuan"},"content":"            fileAvailability();","lastModifiedDate":"2023-02-21"},{"lineNumber":78,"author":{"gitId":"itszhixuan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":79,"author":{"gitId":"itszhixuan"},"content":"            System.out.println(\"File not found!\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":80,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":81,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":82,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":83,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":84,"author":{"gitId":"itszhixuan"},"content":"     * Checks if the file is already created in the user\u0027s environment. If not, fileAvailability will","lastModifiedDate":"2023-02-21"},{"lineNumber":85,"author":{"gitId":"itszhixuan"},"content":"     * create the directory or txt file, depending on what is missing.","lastModifiedDate":"2023-02-21"},{"lineNumber":86,"author":{"gitId":"itszhixuan"},"content":"     * Duke will only proceed when the txt file is detected.","lastModifiedDate":"2023-02-21"},{"lineNumber":87,"author":{"gitId":"itszhixuan"},"content":"     * @throws FileNotFoundException When the file is not found in the environment.","lastModifiedDate":"2023-02-21"},{"lineNumber":88,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":89,"author":{"gitId":"itszhixuan"},"content":"    public static void fileAvailability() throws FileNotFoundException {","lastModifiedDate":"2023-02-21"},{"lineNumber":90,"author":{"gitId":"itszhixuan"},"content":"        File data \u003d Storage.createFile();","lastModifiedDate":"2023-02-21"},{"lineNumber":91,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":92,"author":{"gitId":"itszhixuan"},"content":"        if (data.exists()) {","lastModifiedDate":"2023-02-21"},{"lineNumber":93,"author":{"gitId":"itszhixuan"},"content":"            showGreetings();","lastModifiedDate":"2023-02-21"},{"lineNumber":94,"author":{"gitId":"itszhixuan"},"content":"            Ui.acceptUserInputs(data);","lastModifiedDate":"2023-02-21"},{"lineNumber":95,"author":{"gitId":"itszhixuan"},"content":"            showGoodbye();","lastModifiedDate":"2023-02-21"},{"lineNumber":96,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":97,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":98,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":99,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":100,"author":{"gitId":"itszhixuan"},"content":"     * Outputs the goodbye formatting and message to the user when bye","lastModifiedDate":"2023-02-04"},{"lineNumber":101,"author":{"gitId":"itszhixuan"},"content":"     * command is called.","lastModifiedDate":"2023-02-04"},{"lineNumber":102,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":103,"author":{"gitId":"itszhixuan"},"content":"    private static void showGoodbye() {","lastModifiedDate":"2023-02-21"},{"lineNumber":104,"author":{"gitId":"itszhixuan"},"content":"        String bye \u003d \"Bye. Hope to see you again soon!\\n\";","lastModifiedDate":"2023-02-04"},{"lineNumber":105,"author":{"gitId":"itszhixuan"},"content":"        TaskList.formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":106,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(bye);","lastModifiedDate":"2023-01-26"},{"lineNumber":107,"author":{"gitId":"itszhixuan"},"content":"        TaskList.formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":109,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"itszhixuan"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":111,"author":{"gitId":"itszhixuan"},"content":"     * Shows the formatted greetings to the user when called.","lastModifiedDate":"2023-02-04"},{"lineNumber":112,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":113,"author":{"gitId":"itszhixuan"},"content":"    private static void showGreetings() {","lastModifiedDate":"2023-02-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"itszhixuan"},"content":"        String hello \u003d \" Hello! I\u0027m Duke\\n\" +","lastModifiedDate":"2023-02-04"},{"lineNumber":121,"author":{"gitId":"itszhixuan"},"content":"                \" What can I do for you?\\n\";","lastModifiedDate":"2023-02-04"},{"lineNumber":122,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"itszhixuan"},"content":"        TaskList.formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":125,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(hello);","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"itszhixuan"},"content":"        TaskList.formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":128,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":129,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"itszhixuan":119,"-":11}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"public class Event extends Task{","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"     * The starting time of the event.","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"    protected String by;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"     * The ending time of the event.","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"    protected String to;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"     * Functions in the Event class.","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"     * @param description Name of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"     * @param by Starting time of the event.","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"     * @param to Ending time of the event.","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"    public Event(String description,String by, String to) {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"     * The string output when class is called.","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"     * @return Status, starting time and ending time.","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"itszhixuan"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"itszhixuan"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"itszhixuan"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + by + \" to: \" + to + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"itszhixuan":31}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"import exceptions.MarkOutOfBounds;","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"import exceptions.UnmarkOutOfBounds;","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"public class Parser {","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"    // Functions in this file deals with making sense of the user command","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"     * Prior to adding events with command deadline to the list, processDeadline separates the","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"     * important details within the input for data storage.","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"     * @param taskNum The existing position in the list.","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"     * @return Updated position in the list.","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"    static int processDeadline(ArrayList\u003cTask\u003e storedValues, int taskNum, String line) {","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"        int forwardSlash \u003d line.indexOf(\u0027/\u0027);","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"        int endOfTask \u003d forwardSlash - 1;","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"        int dates \u003d forwardSlash + Duke.REMOVE_BY_NUM;","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"        Deadline deadlineInput \u003d new Deadline(line.substring(9, endOfTask), line.substring(dates));","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"        taskNum \u003d TaskList.addTask(storedValues, taskNum, deadlineInput);","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"        return taskNum;","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"itszhixuan"},"content":"     * Prior to adding events with command toDo to the list, processtoDo separates the","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"itszhixuan"},"content":"     * important details within the input for data storage.","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"itszhixuan"},"content":"     * @param taskNum The existing position in the list.","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"itszhixuan"},"content":"     * @return Updated position in the list.","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"itszhixuan"},"content":"    static int processToDo(ArrayList\u003cTask\u003e storedValues, int taskNum, String line) {","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"itszhixuan"},"content":"        String removeCommand \u003d line.substring(Duke.REMOVE_TODO_NUM);","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"itszhixuan"},"content":"        Todo todoInput \u003d new Todo(removeCommand);","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"itszhixuan"},"content":"        taskNum \u003d TaskList.addTask(storedValues, taskNum, todoInput);","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"itszhixuan"},"content":"        return taskNum;","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"itszhixuan"},"content":"     * Prior to adding events to the list, processEvent separates the important details","lastModifiedDate":"2023-02-21"},{"lineNumber":44,"author":{"gitId":"itszhixuan"},"content":"     * within the input for further data storage.","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-21"},{"lineNumber":46,"author":{"gitId":"itszhixuan"},"content":"     * @param taskNum The existing position in the list.","lastModifiedDate":"2023-02-21"},{"lineNumber":47,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-21"},{"lineNumber":48,"author":{"gitId":"itszhixuan"},"content":"     * @return Updated position in the list.","lastModifiedDate":"2023-02-21"},{"lineNumber":49,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"itszhixuan"},"content":"    static int processEvent(ArrayList\u003cTask\u003e storedValues, int taskNum, String line) {","lastModifiedDate":"2023-02-21"},{"lineNumber":51,"author":{"gitId":"itszhixuan"},"content":"        int firstForwardSlash \u003d line.indexOf(\u0027/\u0027);","lastModifiedDate":"2023-02-21"},{"lineNumber":52,"author":{"gitId":"itszhixuan"},"content":"        String taskName \u003d line.substring(Duke.REMOVE_EVENT_NUM, firstForwardSlash - 1);","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"itszhixuan"},"content":"        String duration \u003d line.substring(firstForwardSlash + Duke.REMOVE_FROM_NUM);","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"itszhixuan"},"content":"        int secondForwardSlash \u003d duration.indexOf(\u0027/\u0027);","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"itszhixuan"},"content":"        String startingTime \u003d duration.substring(0, secondForwardSlash - 1);","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"itszhixuan"},"content":"        String endingTime \u003d duration.substring(secondForwardSlash + Duke.REMOVE_TO_NUM);","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"itszhixuan"},"content":"        Event eventInput \u003d new Event(taskName, startingTime, endingTime);","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":60,"author":{"gitId":"itszhixuan"},"content":"        taskNum \u003d TaskList.addTask(storedValues, taskNum, eventInput);","lastModifiedDate":"2023-02-21"},{"lineNumber":61,"author":{"gitId":"itszhixuan"},"content":"        return taskNum;","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":63,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":64,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":65,"author":{"gitId":"itszhixuan"},"content":"     * Detects the user input and matches the command with the desired output.","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":68,"author":{"gitId":"itszhixuan"},"content":"     * @return False if bye command is not called.","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"itszhixuan"},"content":"    static boolean hasProcessedAllInputs(String line, ArrayList\u003cTask\u003e storedValues) {","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":72,"author":{"gitId":"itszhixuan"},"content":"        String splitInputs[] \u003d line.split(\" \", 2);","lastModifiedDate":"2023-02-21"},{"lineNumber":73,"author":{"gitId":"itszhixuan"},"content":"        String command \u003d splitInputs[0];","lastModifiedDate":"2023-02-21"},{"lineNumber":74,"author":{"gitId":"itszhixuan"},"content":"        switch (command) {","lastModifiedDate":"2023-02-21"},{"lineNumber":75,"author":{"gitId":"itszhixuan"},"content":"        case \"bye\":","lastModifiedDate":"2023-02-21"},{"lineNumber":76,"author":{"gitId":"itszhixuan"},"content":"            return true;","lastModifiedDate":"2023-02-21"},{"lineNumber":77,"author":{"gitId":"itszhixuan"},"content":"        case \"list\":","lastModifiedDate":"2023-02-21"},{"lineNumber":78,"author":{"gitId":"itszhixuan"},"content":"            TaskList.printList(storedValues);","lastModifiedDate":"2023-02-21"},{"lineNumber":79,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-21"},{"lineNumber":80,"author":{"gitId":"itszhixuan"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-21"},{"lineNumber":81,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-21"},{"lineNumber":82,"author":{"gitId":"itszhixuan"},"content":"                TaskList.markItem(storedValues, line, Duke.taskNum);","lastModifiedDate":"2023-02-21"},{"lineNumber":83,"author":{"gitId":"itszhixuan"},"content":"            } catch (MarkOutOfBounds e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":84,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Item to mark is not in list!\");","lastModifiedDate":"2023-02-21"},{"lineNumber":85,"author":{"gitId":"itszhixuan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":86,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"File is not found!\");","lastModifiedDate":"2023-02-21"},{"lineNumber":87,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":88,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-21"},{"lineNumber":89,"author":{"gitId":"itszhixuan"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-21"},{"lineNumber":90,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-21"},{"lineNumber":91,"author":{"gitId":"itszhixuan"},"content":"                TaskList.unmarkItem(storedValues, line);","lastModifiedDate":"2023-02-21"},{"lineNumber":92,"author":{"gitId":"itszhixuan"},"content":"            } catch (UnmarkOutOfBounds e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":93,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Item to unmark is not in list!\");","lastModifiedDate":"2023-02-21"},{"lineNumber":94,"author":{"gitId":"itszhixuan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":95,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"File is not found!\");","lastModifiedDate":"2023-02-21"},{"lineNumber":96,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":97,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-21"},{"lineNumber":98,"author":{"gitId":"itszhixuan"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-21"},{"lineNumber":99,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-21"},{"lineNumber":100,"author":{"gitId":"itszhixuan"},"content":"                Duke.taskNum \u003d processDeadline(storedValues, Duke.taskNum, line);","lastModifiedDate":"2023-02-21"},{"lineNumber":101,"author":{"gitId":"itszhixuan"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":102,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Deadline is not added in the correct format! \\n\" +","lastModifiedDate":"2023-02-21"},{"lineNumber":103,"author":{"gitId":"itszhixuan"},"content":"                        \"deadline \u003cdescription\u003e /by \u003cdate\u003e \\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":104,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":105,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-21"},{"lineNumber":106,"author":{"gitId":"itszhixuan"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-21"},{"lineNumber":107,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-21"},{"lineNumber":108,"author":{"gitId":"itszhixuan"},"content":"                Duke.taskNum \u003d processToDo(storedValues, Duke.taskNum, line);","lastModifiedDate":"2023-02-21"},{"lineNumber":109,"author":{"gitId":"itszhixuan"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":110,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"The description after todo cannot be empty!\");","lastModifiedDate":"2023-02-21"},{"lineNumber":111,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":112,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-21"},{"lineNumber":113,"author":{"gitId":"itszhixuan"},"content":"        case \"event\":","lastModifiedDate":"2023-02-21"},{"lineNumber":114,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-21"},{"lineNumber":115,"author":{"gitId":"itszhixuan"},"content":"                Duke.taskNum \u003d processEvent(storedValues, Duke.taskNum, line);","lastModifiedDate":"2023-02-21"},{"lineNumber":116,"author":{"gitId":"itszhixuan"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":117,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Event is not added in the correct format! \\n\" +","lastModifiedDate":"2023-02-21"},{"lineNumber":118,"author":{"gitId":"itszhixuan"},"content":"                        \"event \u003cdescription\u003e /from \u003cdate\u003e /to \u003cdate\u003e \\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":119,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":120,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-21"},{"lineNumber":121,"author":{"gitId":"itszhixuan"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-21"},{"lineNumber":122,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-21"},{"lineNumber":123,"author":{"gitId":"itszhixuan"},"content":"                TaskList.deleteTask(line, storedValues);","lastModifiedDate":"2023-02-21"},{"lineNumber":124,"author":{"gitId":"itszhixuan"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":125,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Item to delete is not in the list!\");","lastModifiedDate":"2023-02-21"},{"lineNumber":126,"author":{"gitId":"itszhixuan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":127,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Error!\");","lastModifiedDate":"2023-02-21"},{"lineNumber":128,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":129,"author":{"gitId":"itszhixuan"},"content":"            break;","lastModifiedDate":"2023-02-21"},{"lineNumber":130,"author":{"gitId":"itszhixuan"},"content":"        default:","lastModifiedDate":"2023-02-21"},{"lineNumber":131,"author":{"gitId":"itszhixuan"},"content":"            // Commands that are not listed above","lastModifiedDate":"2023-02-21"},{"lineNumber":132,"author":{"gitId":"itszhixuan"},"content":"            System.out.println(\"Invalid command, try again! \\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":133,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":134,"author":{"gitId":"itszhixuan"},"content":"        return false;","lastModifiedDate":"2023-02-21"},{"lineNumber":135,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":136,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-21"}],"authorContributionMap":{"itszhixuan":136}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"import java.io.*;","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"public class Storage {","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"    // Functions in storage deals with loading tasks from the file and saving tasks in the file","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"     * Deletes task in txt file.","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"     * @param posToDelete Row to delete.","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"     * @param currLine Tracks the current line that it is on.","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when error is detected.","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"    static void deleteTaskInTxt(int posToDelete, int currLine) throws IOException {","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"        File dukeInputs \u003d Duke.FILEPATH;","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"        String newContent \u003d \"\";","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(dukeInputs));","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"        String input \u003d reader.readLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"        while (input !\u003d null) {","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"            if (posToDelete -1 !\u003d currLine) {","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"                newContent \u003d newContent + input + \"\\n\";","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"            currLine +\u003d 1;","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"            input \u003d reader.readLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"itszhixuan"},"content":"        FileWriter writer \u003d new FileWriter(dukeInputs);","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"itszhixuan"},"content":"        writer.write(newContent);","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"itszhixuan"},"content":"        reader.close();","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"itszhixuan"},"content":"        writer.close();","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"itszhixuan"},"content":"     * Writes all the inputs made by user to the txt file so that data is saved in hard disk.","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of input values made by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when error is detected.","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"itszhixuan"},"content":"    static void writeToFile(Task storedValues) throws IOException {","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"itszhixuan"},"content":"        FileWriter fw \u003d new FileWriter(Duke.FILEPATH, true);","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"itszhixuan"},"content":"        int marked \u003d ((storedValues.getStatusIcon().equals(\" \")) ? 0 : 1);","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"itszhixuan"},"content":"        if (storedValues.getClass().getSimpleName().equals(\"Todo\")) {","lastModifiedDate":"2023-02-21"},{"lineNumber":44,"author":{"gitId":"itszhixuan"},"content":"            fw.write(\"T | \" + marked + \" | \" + storedValues.description + \"\\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"itszhixuan"},"content":"        } else if (storedValues.getClass().getSimpleName().equals(\"Deadline\")) {","lastModifiedDate":"2023-02-21"},{"lineNumber":46,"author":{"gitId":"itszhixuan"},"content":"            fw.write(\"D | \" + marked + \" | \" + storedValues.description + \" | \" +","lastModifiedDate":"2023-02-21"},{"lineNumber":47,"author":{"gitId":"itszhixuan"},"content":"                    ((Deadline) storedValues).by + \"\\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":48,"author":{"gitId":"itszhixuan"},"content":"        } else {","lastModifiedDate":"2023-02-21"},{"lineNumber":49,"author":{"gitId":"itszhixuan"},"content":"            fw.write(\"E | \" + marked + \" | \" + storedValues.description + \" | \" +","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"itszhixuan"},"content":"                    ((Event) storedValues).by + \" | \" + ((Event) storedValues).to + \"\\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":51,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":52,"author":{"gitId":"itszhixuan"},"content":"        fw.close();","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"itszhixuan"},"content":"    static void checkIfFolderExists(Path path) {","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"itszhixuan"},"content":"        boolean directoryExists \u003d Files.exists(path);","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"itszhixuan"},"content":"        if (!directoryExists) {","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"itszhixuan"},"content":"            try {","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"itszhixuan"},"content":"                Files.createDirectory(path);","lastModifiedDate":"2023-02-21"},{"lineNumber":60,"author":{"gitId":"itszhixuan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":61,"author":{"gitId":"itszhixuan"},"content":"                System.out.println(\"Error occurred!\\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":63,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":64,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":65,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"itszhixuan"},"content":"    static Path checkIfFileExists() {","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"itszhixuan"},"content":"        Path textFile \u003d Paths.get(Duke.HOME, \"IdeaProjects\", \"ip\", \"src\", \"main\", \"data\", \"duke-inputs.txt\");","lastModifiedDate":"2023-02-21"},{"lineNumber":68,"author":{"gitId":"itszhixuan"},"content":"        try {","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"itszhixuan"},"content":"            Files.createFile(textFile);","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"itszhixuan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"itszhixuan"},"content":"            System.out.println(\"File already exists!\\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":72,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":73,"author":{"gitId":"itszhixuan"},"content":"        return textFile;","lastModifiedDate":"2023-02-21"},{"lineNumber":74,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":75,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":76,"author":{"gitId":"itszhixuan"},"content":"    static File createFile() {","lastModifiedDate":"2023-02-21"},{"lineNumber":77,"author":{"gitId":"itszhixuan"},"content":"        Path path \u003d Paths.get(Duke.HOME, \"IdeaProjects\", \"ip\", \"src\", \"main\", \"data\");","lastModifiedDate":"2023-02-21"},{"lineNumber":78,"author":{"gitId":"itszhixuan"},"content":"        checkIfFolderExists(path);","lastModifiedDate":"2023-02-21"},{"lineNumber":79,"author":{"gitId":"itszhixuan"},"content":"        Path textFile \u003d checkIfFileExists();","lastModifiedDate":"2023-02-21"},{"lineNumber":80,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":81,"author":{"gitId":"itszhixuan"},"content":"        File data \u003d textFile.toFile();","lastModifiedDate":"2023-02-21"},{"lineNumber":82,"author":{"gitId":"itszhixuan"},"content":"        return data;","lastModifiedDate":"2023-02-21"},{"lineNumber":83,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":84,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":85,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":86,"author":{"gitId":"itszhixuan"},"content":"     * Marks the task in the txt file.","lastModifiedDate":"2023-02-21"},{"lineNumber":87,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-21"},{"lineNumber":88,"author":{"gitId":"itszhixuan"},"content":"     * @param numToMark Task number from user input that is to be marked.","lastModifiedDate":"2023-02-21"},{"lineNumber":89,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when file cannot be read.","lastModifiedDate":"2023-02-21"},{"lineNumber":90,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":91,"author":{"gitId":"itszhixuan"},"content":"    public static void markTaskInTxt(ArrayList\u003cTask\u003e storedValues, int numToMark) throws IOException {","lastModifiedDate":"2023-02-21"},{"lineNumber":92,"author":{"gitId":"itszhixuan"},"content":"        storedValues.get(numToMark -1).markAsDone();","lastModifiedDate":"2023-02-21"},{"lineNumber":93,"author":{"gitId":"itszhixuan"},"content":"        TaskList.formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":94,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n\"","lastModifiedDate":"2023-02-21"},{"lineNumber":95,"author":{"gitId":"itszhixuan"},"content":"                + storedValues.get(numToMark -1).toString() + \"\\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":96,"author":{"gitId":"itszhixuan"},"content":"        TaskList.formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":97,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":98,"author":{"gitId":"itszhixuan"},"content":"        File dukeInputs \u003d Duke.FILEPATH;","lastModifiedDate":"2023-02-21"},{"lineNumber":99,"author":{"gitId":"itszhixuan"},"content":"        String prevContent \u003d \"\";","lastModifiedDate":"2023-02-21"},{"lineNumber":100,"author":{"gitId":"itszhixuan"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(dukeInputs));","lastModifiedDate":"2023-02-21"},{"lineNumber":101,"author":{"gitId":"itszhixuan"},"content":"        String input \u003d reader.readLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":102,"author":{"gitId":"itszhixuan"},"content":"        while (input !\u003d null) {","lastModifiedDate":"2023-02-21"},{"lineNumber":103,"author":{"gitId":"itszhixuan"},"content":"            prevContent \u003d prevContent + input + \"\\n\";","lastModifiedDate":"2023-02-21"},{"lineNumber":104,"author":{"gitId":"itszhixuan"},"content":"            input \u003d reader.readLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":105,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":106,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":107,"author":{"gitId":"itszhixuan"},"content":"        char type \u003d storedValues.get(numToMark -1).getClass().toString().substring(6).charAt(0);","lastModifiedDate":"2023-02-21"},{"lineNumber":108,"author":{"gitId":"itszhixuan"},"content":"        String toReplace \u003d (type + \" | 0 | \" + storedValues.get(numToMark -1).description);","lastModifiedDate":"2023-02-21"},{"lineNumber":109,"author":{"gitId":"itszhixuan"},"content":"        String toReplaceWith \u003d (type + \" | 1 | \" + storedValues.get(numToMark -1).description);","lastModifiedDate":"2023-02-21"},{"lineNumber":110,"author":{"gitId":"itszhixuan"},"content":"        String newContent \u003d prevContent.replace(toReplace, toReplaceWith);","lastModifiedDate":"2023-02-21"},{"lineNumber":111,"author":{"gitId":"itszhixuan"},"content":"        FileWriter writer \u003d new FileWriter(dukeInputs);","lastModifiedDate":"2023-02-21"},{"lineNumber":112,"author":{"gitId":"itszhixuan"},"content":"        writer.write(newContent);","lastModifiedDate":"2023-02-21"},{"lineNumber":113,"author":{"gitId":"itszhixuan"},"content":"        reader.close();","lastModifiedDate":"2023-02-21"},{"lineNumber":114,"author":{"gitId":"itszhixuan"},"content":"        writer.close();","lastModifiedDate":"2023-02-21"},{"lineNumber":115,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":116,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":117,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":118,"author":{"gitId":"itszhixuan"},"content":"     * Unmarks the tast in the txt file when called.","lastModifiedDate":"2023-02-21"},{"lineNumber":119,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-21"},{"lineNumber":120,"author":{"gitId":"itszhixuan"},"content":"     * @param numToMark The row in txt file to be unmarked.","lastModifiedDate":"2023-02-21"},{"lineNumber":121,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when file cannot be read.","lastModifiedDate":"2023-02-21"},{"lineNumber":122,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":123,"author":{"gitId":"itszhixuan"},"content":"    public static void unmarkTaskInTxt(ArrayList\u003cTask\u003e storedValues, int numToMark) throws IOException {","lastModifiedDate":"2023-02-21"},{"lineNumber":124,"author":{"gitId":"itszhixuan"},"content":"        storedValues.get(numToMark -1).unmarkAsDone();","lastModifiedDate":"2023-02-21"},{"lineNumber":125,"author":{"gitId":"itszhixuan"},"content":"        TaskList.formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":126,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet: \\n\" +","lastModifiedDate":"2023-02-21"},{"lineNumber":127,"author":{"gitId":"itszhixuan"},"content":"                storedValues.get(numToMark -1).toString() + \"\\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":128,"author":{"gitId":"itszhixuan"},"content":"        TaskList.formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":129,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":130,"author":{"gitId":"itszhixuan"},"content":"        File dukeInputs \u003d Duke.FILEPATH;","lastModifiedDate":"2023-02-21"},{"lineNumber":131,"author":{"gitId":"itszhixuan"},"content":"        String prevContent \u003d \"\";","lastModifiedDate":"2023-02-21"},{"lineNumber":132,"author":{"gitId":"itszhixuan"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(dukeInputs));","lastModifiedDate":"2023-02-21"},{"lineNumber":133,"author":{"gitId":"itszhixuan"},"content":"        String input \u003d reader.readLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":134,"author":{"gitId":"itszhixuan"},"content":"        while (input !\u003d null) {","lastModifiedDate":"2023-02-21"},{"lineNumber":135,"author":{"gitId":"itszhixuan"},"content":"            prevContent \u003d prevContent + input + \"\\n\";","lastModifiedDate":"2023-02-21"},{"lineNumber":136,"author":{"gitId":"itszhixuan"},"content":"            input \u003d reader.readLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":137,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":138,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":139,"author":{"gitId":"itszhixuan"},"content":"        char type \u003d storedValues.get(numToMark -1).getClass().toString().substring(6).charAt(0);","lastModifiedDate":"2023-02-21"},{"lineNumber":140,"author":{"gitId":"itszhixuan"},"content":"        String toReplace \u003d (type + \" | 1 | \" + storedValues.get(numToMark -1).description);","lastModifiedDate":"2023-02-21"},{"lineNumber":141,"author":{"gitId":"itszhixuan"},"content":"        String toReplaceWith \u003d (type + \" | 0 | \" + storedValues.get(numToMark -1).description);","lastModifiedDate":"2023-02-21"},{"lineNumber":142,"author":{"gitId":"itszhixuan"},"content":"        String newContent \u003d prevContent.replace(toReplace, toReplaceWith);","lastModifiedDate":"2023-02-21"},{"lineNumber":143,"author":{"gitId":"itszhixuan"},"content":"        FileWriter writer \u003d new FileWriter(dukeInputs);","lastModifiedDate":"2023-02-21"},{"lineNumber":144,"author":{"gitId":"itszhixuan"},"content":"        writer.write(newContent);","lastModifiedDate":"2023-02-21"},{"lineNumber":145,"author":{"gitId":"itszhixuan"},"content":"        reader.close();","lastModifiedDate":"2023-02-21"},{"lineNumber":146,"author":{"gitId":"itszhixuan"},"content":"        writer.close();","lastModifiedDate":"2023-02-21"},{"lineNumber":147,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":148,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":149,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-21"}],"authorContributionMap":{"itszhixuan":149}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"public class Task {","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"     * The description of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"    protected String description;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"     * The completion status of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"     * Functions in the Task class","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"     * @param description Name of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"     * Gets the current status of the task within the list.","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"     * @return isDone.","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"itszhixuan"},"content":"     * Marks the specified item as done.","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"itszhixuan"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"itszhixuan"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"itszhixuan"},"content":"     * Unmarks the specified item as done.","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"itszhixuan"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"itszhixuan"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":42,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":43,"author":{"gitId":"itszhixuan"},"content":"     * The string output when class is called.","lastModifiedDate":"2023-02-04"},{"lineNumber":44,"author":{"gitId":"itszhixuan"},"content":"     * @return Status and description.","lastModifiedDate":"2023-02-04"},{"lineNumber":45,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"itszhixuan"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"itszhixuan"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"itszhixuan"},"content":"        return \"[\" + getStatusIcon()+ \"] \" + description;","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"itszhixuan":50}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"import exceptions.MarkOutOfBounds;","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"import exceptions.UnmarkOutOfBounds;","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"public class TaskList {","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"     * Adds processed user inputs into the list of stored values.","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"     * @param taskNum The existing position in the list.","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"     * @return Updated position in the list.","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"    static int addTask(ArrayList\u003cTask\u003e storedValues, int taskNum, Task line) {","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \\n\" + line.toString() + \"\\n\" +","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"                \"Now you have \" + (taskNum + 1) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"        // Store value in line into list","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"        storedValues.add(taskNum,line);","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"        taskNum +\u003d 1;","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"        try {","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"            Storage.writeToFile(line);","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"            System.out.println(\"Something went wrong...\" + e.getMessage());","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"itszhixuan"},"content":"        return taskNum;","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"itszhixuan"},"content":"     * Prints the fixed formatting line when called.","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"itszhixuan"},"content":"    public static void formattingLine() {","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(Duke.LINE_FORMATTING);","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"itszhixuan"},"content":"     * Deletes the task in the list and the txt file, when the user no longer needs the task.","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"itszhixuan"},"content":"     * @param line The command input from user.","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when error is detected.","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":44,"author":{"gitId":"itszhixuan"},"content":"    static void deleteTask(String line, ArrayList\u003cTask\u003e storedValues) throws IOException {","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"itszhixuan"},"content":"        int length \u003d line.length();","lastModifiedDate":"2023-02-21"},{"lineNumber":46,"author":{"gitId":"itszhixuan"},"content":"        String itemToDelete \u003d line.substring(Duke.REMOVE_DELETE_NUM, length);","lastModifiedDate":"2023-02-21"},{"lineNumber":47,"author":{"gitId":"itszhixuan"},"content":"        int posToDelete \u003d Integer.parseInt(itemToDelete);","lastModifiedDate":"2023-02-21"},{"lineNumber":48,"author":{"gitId":"itszhixuan"},"content":"        Task value \u003d storedValues.get(posToDelete - 1);","lastModifiedDate":"2023-02-21"},{"lineNumber":49,"author":{"gitId":"itszhixuan"},"content":"        int currLine \u003d 0;","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":51,"author":{"gitId":"itszhixuan"},"content":"        Storage.deleteTaskInTxt(posToDelete, currLine);","lastModifiedDate":"2023-02-21"},{"lineNumber":52,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"itszhixuan"},"content":"        storedValues.remove(posToDelete - 1);","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \\n\" +","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"itszhixuan"},"content":"                value + \"\\n\" +","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"itszhixuan"},"content":"                \"Now you have \" + (Duke.taskNum - 1) + \" tasks in the list. \\n\");","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":60,"author":{"gitId":"itszhixuan"},"content":"        Duke.taskNum -\u003d 1;","lastModifiedDate":"2023-02-21"},{"lineNumber":61,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":63,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":64,"author":{"gitId":"itszhixuan"},"content":"     * Unmarks the task in the list when called.","lastModifiedDate":"2023-02-21"},{"lineNumber":65,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"itszhixuan"},"content":"     * @throws UnmarkOutOfBounds Thrown when the value input is out of bounds.","lastModifiedDate":"2023-02-21"},{"lineNumber":68,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when other errors are detected.","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"itszhixuan"},"content":"    static void unmarkItem(ArrayList\u003cTask\u003e storedValues, String line) throws UnmarkOutOfBounds, IOException {","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"itszhixuan"},"content":"        int length \u003d line.length();","lastModifiedDate":"2023-02-21"},{"lineNumber":72,"author":{"gitId":"itszhixuan"},"content":"        String itemToMark \u003d line.substring(Duke.REMOVE_UNMARK_NUM, length);","lastModifiedDate":"2023-02-21"},{"lineNumber":73,"author":{"gitId":"itszhixuan"},"content":"        int numToMark \u003d Integer.parseInt(itemToMark);","lastModifiedDate":"2023-02-21"},{"lineNumber":74,"author":{"gitId":"itszhixuan"},"content":"        // Unmark the item","lastModifiedDate":"2023-02-21"},{"lineNumber":75,"author":{"gitId":"itszhixuan"},"content":"        if (Duke.taskNum \u003c numToMark) {","lastModifiedDate":"2023-02-21"},{"lineNumber":76,"author":{"gitId":"itszhixuan"},"content":"            throw new UnmarkOutOfBounds();","lastModifiedDate":"2023-02-21"},{"lineNumber":77,"author":{"gitId":"itszhixuan"},"content":"        } else {","lastModifiedDate":"2023-02-21"},{"lineNumber":78,"author":{"gitId":"itszhixuan"},"content":"            Storage.unmarkTaskInTxt(storedValues, numToMark);","lastModifiedDate":"2023-02-21"},{"lineNumber":79,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":80,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":81,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":82,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":83,"author":{"gitId":"itszhixuan"},"content":"     * Marks the task in the list when called.","lastModifiedDate":"2023-02-21"},{"lineNumber":84,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-21"},{"lineNumber":85,"author":{"gitId":"itszhixuan"},"content":"     * @param line User input to be processed.","lastModifiedDate":"2023-02-21"},{"lineNumber":86,"author":{"gitId":"itszhixuan"},"content":"     * @param taskNum The task number from user input that is to be marked.","lastModifiedDate":"2023-02-21"},{"lineNumber":87,"author":{"gitId":"itszhixuan"},"content":"     * @throws MarkOutOfBounds Thrown when the task number exceeds the number of items in list.","lastModifiedDate":"2023-02-21"},{"lineNumber":88,"author":{"gitId":"itszhixuan"},"content":"     * @throws IOException Thrown when error is detected.","lastModifiedDate":"2023-02-21"},{"lineNumber":89,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":90,"author":{"gitId":"itszhixuan"},"content":"    static void markItem(ArrayList\u003cTask\u003e storedValues, String line, int taskNum) throws MarkOutOfBounds, IOException {","lastModifiedDate":"2023-02-21"},{"lineNumber":91,"author":{"gitId":"itszhixuan"},"content":"        int length \u003d line.length();","lastModifiedDate":"2023-02-21"},{"lineNumber":92,"author":{"gitId":"itszhixuan"},"content":"        String itemToMark \u003d line.substring(Duke.REMOVE_MARK_NUM, length);","lastModifiedDate":"2023-02-21"},{"lineNumber":93,"author":{"gitId":"itszhixuan"},"content":"        int numToMark \u003d Integer.parseInt(itemToMark);","lastModifiedDate":"2023-02-21"},{"lineNumber":94,"author":{"gitId":"itszhixuan"},"content":"        // Mark the item as complete","lastModifiedDate":"2023-02-21"},{"lineNumber":95,"author":{"gitId":"itszhixuan"},"content":"        if (taskNum \u003c numToMark) {","lastModifiedDate":"2023-02-21"},{"lineNumber":96,"author":{"gitId":"itszhixuan"},"content":"            // Means that it is out of bounds","lastModifiedDate":"2023-02-21"},{"lineNumber":97,"author":{"gitId":"itszhixuan"},"content":"            throw new MarkOutOfBounds();","lastModifiedDate":"2023-02-21"},{"lineNumber":98,"author":{"gitId":"itszhixuan"},"content":"        } else {","lastModifiedDate":"2023-02-21"},{"lineNumber":99,"author":{"gitId":"itszhixuan"},"content":"            Storage.markTaskInTxt(storedValues, numToMark);","lastModifiedDate":"2023-02-21"},{"lineNumber":100,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":101,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":102,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":103,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":104,"author":{"gitId":"itszhixuan"},"content":"     * Print all items within the list of stored tasks.","lastModifiedDate":"2023-02-21"},{"lineNumber":105,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of tasks from user inputs.","lastModifiedDate":"2023-02-21"},{"lineNumber":106,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":107,"author":{"gitId":"itszhixuan"},"content":"    static void printList(ArrayList\u003cTask\u003e storedValues) {","lastModifiedDate":"2023-02-21"},{"lineNumber":108,"author":{"gitId":"itszhixuan"},"content":"        int currValue \u003d 0;","lastModifiedDate":"2023-02-21"},{"lineNumber":109,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":110,"author":{"gitId":"itszhixuan"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-02-21"},{"lineNumber":111,"author":{"gitId":"itszhixuan"},"content":"        for (Task value : storedValues) {","lastModifiedDate":"2023-02-21"},{"lineNumber":112,"author":{"gitId":"itszhixuan"},"content":"            System.out.println((currValue + 1) + \".\" + value.toString());","lastModifiedDate":"2023-02-21"},{"lineNumber":113,"author":{"gitId":"itszhixuan"},"content":"            currValue +\u003d 1;","lastModifiedDate":"2023-02-21"},{"lineNumber":114,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":115,"author":{"gitId":"itszhixuan"},"content":"        formattingLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":116,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":117,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-21"}],"authorContributionMap":{"itszhixuan":117}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"     * Functions in the Todo class.","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"     * @param description Name of the task.","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"     * The string output when class is called.","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"     * @return Status and description.","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"itszhixuan":18}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"import java.io.File;","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"public class Ui {","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"itszhixuan"},"content":"     * Reads in the user inputs and processes the commands.","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"itszhixuan"},"content":"    static void acceptUserInputs(File data) {","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"itszhixuan"},"content":"        try {","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"itszhixuan"},"content":"            readExistingData(data, Duke.storedValues);","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"itszhixuan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"itszhixuan"},"content":"            System.out.println(\"File is not found!\");","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"itszhixuan"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"itszhixuan"},"content":"        String line \u003d in.nextLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"itszhixuan"},"content":"        while (!Parser.hasProcessedAllInputs(line, Duke.storedValues)) {","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"itszhixuan"},"content":"            line \u003d in.nextLine();","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"itszhixuan"},"content":"     * Reads the existing data within the txt file before new user inputs are allowed. Ensures that the","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"itszhixuan"},"content":"     * list is the most updated since the last interaction with Duke.","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"     * @param data The txt file in the local environment.","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"itszhixuan"},"content":"     * @throws FileNotFoundException Thrown when file is not found in the environment.","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"itszhixuan"},"content":"    private static void readExistingData(File data, ArrayList\u003cTask\u003e storedValues) throws FileNotFoundException {","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"itszhixuan"},"content":"        Scanner readData \u003d new Scanner(data);","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"itszhixuan"},"content":"        while (readData.hasNext()) {","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"itszhixuan"},"content":"            // Previous data stored from calling duke","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"itszhixuan"},"content":"            String extractType[] \u003d readData.nextLine().split(\" | \", 5);","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"itszhixuan"},"content":"            String type \u003d extractType[0];","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"itszhixuan"},"content":"            String marked \u003d extractType[2];","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"itszhixuan"},"content":"            String task \u003d extractType[4];","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"itszhixuan"},"content":"            switch (type) {","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"itszhixuan"},"content":"            case \"T\":","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"itszhixuan"},"content":"                readExistingToDo(storedValues, marked, task);","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"itszhixuan"},"content":"                break;","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"itszhixuan"},"content":"            case \"D\":","lastModifiedDate":"2023-02-21"},{"lineNumber":44,"author":{"gitId":"itszhixuan"},"content":"                readExistingDeadline(storedValues, extractType, marked);","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"itszhixuan"},"content":"                break;","lastModifiedDate":"2023-02-21"},{"lineNumber":46,"author":{"gitId":"itszhixuan"},"content":"            case \"E\":","lastModifiedDate":"2023-02-21"},{"lineNumber":47,"author":{"gitId":"itszhixuan"},"content":"                readExistingEvent(storedValues, extractType, marked);","lastModifiedDate":"2023-02-21"},{"lineNumber":48,"author":{"gitId":"itszhixuan"},"content":"                break;","lastModifiedDate":"2023-02-21"},{"lineNumber":49,"author":{"gitId":"itszhixuan"},"content":"            }","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":51,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":52,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"itszhixuan"},"content":"     * Reads the existing events within the txt file, processes it and displays it when the command \"list\"","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"itszhixuan"},"content":"     * is called by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"itszhixuan"},"content":"     * @param extractType Description of task with duration.","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"itszhixuan"},"content":"     * @param marked Status of marked in txt file.","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":60,"author":{"gitId":"itszhixuan"},"content":"    private static void readExistingEvent(ArrayList\u003cTask\u003e storedValues, String[] extractType, String marked) {","lastModifiedDate":"2023-02-21"},{"lineNumber":61,"author":{"gitId":"itszhixuan"},"content":"        int firstSlash \u003d extractType[4].indexOf(\"|\");","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"itszhixuan"},"content":"        String eventName \u003d extractType[4].substring(0,firstSlash-1);","lastModifiedDate":"2023-02-21"},{"lineNumber":63,"author":{"gitId":"itszhixuan"},"content":"        String eventDuration \u003d extractType[4].substring(firstSlash+2);","lastModifiedDate":"2023-02-21"},{"lineNumber":64,"author":{"gitId":"itszhixuan"},"content":"        int secondSlash \u003d eventDuration.indexOf(\"|\");","lastModifiedDate":"2023-02-21"},{"lineNumber":65,"author":{"gitId":"itszhixuan"},"content":"        String eventFrom \u003d eventDuration.substring(0,secondSlash-1);","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"itszhixuan"},"content":"        String eventTo \u003d eventDuration.substring(secondSlash+2);","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"itszhixuan"},"content":"        Event addInputE \u003d new Event(eventName, eventFrom, eventTo);","lastModifiedDate":"2023-02-21"},{"lineNumber":68,"author":{"gitId":"itszhixuan"},"content":"        storedValues.add(Duke.taskNum,addInputE);","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"itszhixuan"},"content":"        if (marked.equals(\"1\")) {","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"itszhixuan"},"content":"            storedValues.get(Duke.taskNum).markAsDone();","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":72,"author":{"gitId":"itszhixuan"},"content":"        Duke.taskNum +\u003d 1;","lastModifiedDate":"2023-02-21"},{"lineNumber":73,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":74,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":75,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":76,"author":{"gitId":"itszhixuan"},"content":"     * Reads the existing deadlines within the txt file, processes it and displays it when the command \"list\"","lastModifiedDate":"2023-02-21"},{"lineNumber":77,"author":{"gitId":"itszhixuan"},"content":"     * is called by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":78,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":79,"author":{"gitId":"itszhixuan"},"content":"     * @param extractType Description of task with duration.","lastModifiedDate":"2023-02-21"},{"lineNumber":80,"author":{"gitId":"itszhixuan"},"content":"     * @param marked Status of marked in txt file.","lastModifiedDate":"2023-02-21"},{"lineNumber":81,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":82,"author":{"gitId":"itszhixuan"},"content":"    private static void readExistingDeadline(ArrayList\u003cTask\u003e storedValues, String[] extractType, String marked) {","lastModifiedDate":"2023-02-21"},{"lineNumber":83,"author":{"gitId":"itszhixuan"},"content":"        int slash \u003d extractType[4].indexOf(\"|\");","lastModifiedDate":"2023-02-21"},{"lineNumber":84,"author":{"gitId":"itszhixuan"},"content":"        String deadlineTask \u003d extractType[4].substring(0, slash-1);","lastModifiedDate":"2023-02-21"},{"lineNumber":85,"author":{"gitId":"itszhixuan"},"content":"        String deadlineBy \u003d extractType[4].substring(slash+2);","lastModifiedDate":"2023-02-21"},{"lineNumber":86,"author":{"gitId":"itszhixuan"},"content":"        Deadline addInputD \u003d new Deadline(deadlineTask, deadlineBy);","lastModifiedDate":"2023-02-21"},{"lineNumber":87,"author":{"gitId":"itszhixuan"},"content":"        storedValues.add(Duke.taskNum,addInputD);","lastModifiedDate":"2023-02-21"},{"lineNumber":88,"author":{"gitId":"itszhixuan"},"content":"        if (marked.equals(\"1\")) {","lastModifiedDate":"2023-02-21"},{"lineNumber":89,"author":{"gitId":"itszhixuan"},"content":"            storedValues.get(Duke.taskNum).markAsDone();","lastModifiedDate":"2023-02-21"},{"lineNumber":90,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":91,"author":{"gitId":"itszhixuan"},"content":"        Duke.taskNum +\u003d 1;","lastModifiedDate":"2023-02-21"},{"lineNumber":92,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":93,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":94,"author":{"gitId":"itszhixuan"},"content":"    /***","lastModifiedDate":"2023-02-21"},{"lineNumber":95,"author":{"gitId":"itszhixuan"},"content":"     * Reads the existing todos within the txt file, processes it and displays it when the command \"list\"","lastModifiedDate":"2023-02-21"},{"lineNumber":96,"author":{"gitId":"itszhixuan"},"content":"     * is called by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":97,"author":{"gitId":"itszhixuan"},"content":"     * @param storedValues List of inputs stored by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":98,"author":{"gitId":"itszhixuan"},"content":"     * @param marked Status of marked in txt file.","lastModifiedDate":"2023-02-21"},{"lineNumber":99,"author":{"gitId":"itszhixuan"},"content":"     * @param task Description of task.","lastModifiedDate":"2023-02-21"},{"lineNumber":100,"author":{"gitId":"itszhixuan"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":101,"author":{"gitId":"itszhixuan"},"content":"    private static void readExistingToDo(ArrayList\u003cTask\u003e storedValues, String marked, String task) {","lastModifiedDate":"2023-02-21"},{"lineNumber":102,"author":{"gitId":"itszhixuan"},"content":"        Todo addInputT \u003d new Todo(task);","lastModifiedDate":"2023-02-21"},{"lineNumber":103,"author":{"gitId":"itszhixuan"},"content":"        storedValues.add(Duke.taskNum,addInputT);","lastModifiedDate":"2023-02-21"},{"lineNumber":104,"author":{"gitId":"itszhixuan"},"content":"        if (marked.equals(\"1\")) {","lastModifiedDate":"2023-02-21"},{"lineNumber":105,"author":{"gitId":"itszhixuan"},"content":"            storedValues.get(Duke.taskNum).markAsDone();","lastModifiedDate":"2023-02-21"},{"lineNumber":106,"author":{"gitId":"itszhixuan"},"content":"        }","lastModifiedDate":"2023-02-21"},{"lineNumber":107,"author":{"gitId":"itszhixuan"},"content":"        Duke.taskNum +\u003d 1;","lastModifiedDate":"2023-02-21"},{"lineNumber":108,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-21"},{"lineNumber":109,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-21"}],"authorContributionMap":{"itszhixuan":109}},{"path":"src/main/java/exceptions/MarkOutOfBounds.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"package exceptions;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"public class MarkOutOfBounds extends Exception {","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"    public MarkOutOfBounds () {","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"itszhixuan":6}},{"path":"src/main/java/exceptions/UnmarkOutOfBounds.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"package exceptions;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"public class UnmarkOutOfBounds extends Exception{","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"    public UnmarkOutOfBounds() {","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"itszhixuan"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"itszhixuan"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"itszhixuan"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"itszhixuan":6}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"itszhixuan"},"content":"todo add task","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"itszhixuan"},"content":"list","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"itszhixuan"},"content":"bye","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"itszhixuan":3}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"itszhixuan"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"itszhixuan":1,"-":33}}]
