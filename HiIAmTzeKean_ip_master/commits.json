{"authorDailyContributionsMap":{"HiIAmTzeKean":[{"date":"2023-01-13","commitResults":[{"hash":"a4045e5db251d369108883241d70b1e6b91a57db","messageTitle":"test: Modifed test file directory","messageBody":"Test file should belong under test folder. Expected text files will be\nplaced under test/resources in future.\n","fileTypesAndContributionMap":{"txt":{"insertions":14,"deletions":0},"java":{"insertions":11,"deletions":5}}},{"hash":"14704b54dfcbd84ee3e8bc779a9d9e70d269c124","messageTitle":"refactor: encapsulate greet and bye into functions","messageBody":"Code readability in main function call. In preparation for\nLevel 1 commit\n","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":33,"deletions":14}}}]},{"date":"2023-01-23","commitResults":[{"hash":"7ca6aa0ada139bc93baba18c18d47af7517e0cff","messageTitle":"feat: Parser package that make sense of user input","messageBody":"User can input arbitary commands. A class is designed to accept the\ninput and make sense of it for Duke class.\n\nAllows for abstraction of user input from Duke class.\n","fileTypesAndContributionMap":{"java":{"insertions":65,"deletions":0}}},{"hash":"50722ca02bc60b4a1a93c55378ddf47b11cc2903","messageTitle":"feat: Duke uses parser interface for command fetching","messageBody":"Duke class responsibility is to provide UI and should not be bothered\nwith handling of various user input. Parser abstracts message\nfetching.\n","fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":8}}},{"hash":"e60d63fe92f5aae42a7c2247db180bbc760eb744","messageTitle":"fixes: Parser class NoSuchElementException","messageBody":"Parser class did not catch exception when there is no input by user.\nMessage wrapped in try block to ensure that no null message is\ncaptured and passed to Duke.\n","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":1}}},{"hash":"154c19d7a222b64614365ee987d8a48b02bdd1ad","messageTitle":"test: Test case for Parser and Duke","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":14,"deletions":14},"java":{"insertions":63,"deletions":10}}},{"hash":"a1eeb2332f48c0eef9e27df0f693fa6eee8b351d","messageTitle":"chore: update to adhere coding standard","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":2}}},{"hash":"420882900949b801c6b8d3fc0aeaa7c548c88144","messageTitle":"feat: Task class to handle task input","messageBody":"User inputs must be handled and stored in some Array. Task class created\nto store the details and the controller will handle the addition of new\nTasks and to pass the list to Duke class\n","fileTypesAndContributionMap":{"java":{"insertions":55,"deletions":0}}},{"hash":"22e3f1aa1e4fdd02066fba5cb4df883eeca4f1c6","messageTitle":"feat: Command Enum","messageBody":"User can input any types of command. Enum will be used to group the\ncommand into 3 category.\n","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":0}}},{"hash":"cabed7e9673b7b487d638363a64e745a4c57dfdc","messageTitle":"feat: Parser class abstract message fetching","messageBody":"Duke will only call Parser to obtain the Command given by user. Parser\nwill call for next message once Duke is done handling the current\nmessage.\n","fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":23}}},{"hash":"2d532e8aa73bced5bca88a0c828e7406c622de0b","messageTitle":"feat: Duke class class add and list","messageBody":"Duke needs to be able to add and list task. Updates to Parser and Task\nallows Duke to perform the requirements\n","fileTypesAndContributionMap":{"java":{"insertions":38,"deletions":18}}},{"hash":"245fcb2037a76c3b97ec45d06c08ec23977d7bc1","messageTitle":"fix: resolve inconsistent print message","messageBody":"Printing did not have consistent tab spacing. Print now modified to\nstream message instead and Duke should provide the printing since it\nhandles the UI.\n","fileTypesAndContributionMap":{"java":{"insertions":22,"deletions":8}}},{"hash":"c5c275cf09b50efc5edde55f91a75e1ded8c54d7","messageTitle":"feat: Argument class used for passing paramters","messageBody":"Parameter passing done by generic array is not ideal especially for\ntesting purposes. Class created to store args for object passesing.\n","fileTypesAndContributionMap":{"java":{"insertions":25,"deletions":0}}},{"hash":"4da68d9516188f1501ecd07889b416400f34c4dd","messageTitle":"fix: bug in reading command","messageBody":"Command was done through string comparison. spelling mistakes are\npicked up and perceived as commands. Parser should only recognise\ncommands as the first word of the input.\n","fileTypesAndContributionMap":{"java":{"insertions":47,"deletions":12}}},{"hash":"d5f2d965b4d4732dc0db4e534e06339fa657185f","messageTitle":"feat: Task mark tracking","messageBody":"Task can be marked or unmarked depending on the status. Message\nstatus will be passed back to Duke for UI.\n","fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":2}}},{"hash":"ae04fd96ab6048f02f725ee92e7ad0f9334bb867","messageTitle":"chore: adhere to coding standard","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":19}}}]},{"date":"2023-01-25","commitResults":[{"hash":"8f4639be8b9621f728aee6b14ce8249d1399912d","messageTitle":"update gradle mainClassName","messageBody":"","tags":["A-Gradle"],"fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":1}}}]},{"date":"2023-01-27","commitResults":[{"hash":"e935bfb493a208339f3a0af023d86604e81aac44","messageTitle":"fix: package naming convention","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":22}}},{"hash":"7553e7cbe6730cc7defb91be24fc8bd41329c319","messageTitle":"rename folder","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":0}}},{"hash":"0c19ffc9e4b0b0700e1f22e7b754c3004fb57ad2","messageTitle":"fix: rename folder","messageBody":"Adhere to naming convention\n","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":0}}},{"hash":"0f816c95b76cf7be5e41fb2117f3e6505fbf58a8","messageTitle":"test: Test on public methods","messageBody":"Test correctness of logic of code\n","fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":25}}}]},{"date":"2023-01-29","commitResults":[{"hash":"091b2b7907cf7ec2346985c7ea792db3d3db2746","messageTitle":"refactor: modified constructors to call mutator","messageBody":"Mutator will be subsequently implemented with error checking. Use of mutators abstracts check\nand allow raising of exceptions.\n","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":3}}},{"hash":"121e07991a08af07379d7928041f32fe3299987b","messageTitle":"feat: custom exception for project","messageBody":"DukeException acts like the super Exception for all other exception\nthrown in this project to allow for easy debugging and testing.\n","fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":6}}},{"hash":"d6c7d3313878daeb8af7107519328444f2bbb840","messageTitle":"doc: Java documentation for interface","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":1}}},{"hash":"22cdb7de8be40fcf93cd64464ca7130f37112797","messageTitle":"feat: class update to handle DukeException","messageBody":"Exploits polymorphism properties to handle exception. Better code\nredability and debugging.\n","fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":17}}},{"hash":"e54aed410695aa477630ffae882641465237458b","messageTitle":"feat: subclass of Task","messageBody":"Extend Task class to allow for specialised tasking that user can use.\n","fileTypesAndContributionMap":{"java":{"insertions":52,"deletions":0}}},{"hash":"0010ed768156419f9bd6c64f27ce0d5625e3557a","messageTitle":"feat: Update task package to handle new subclass","messageBody":"task package should handle an abstracted view of different types of\nclasses. Polymorphism exploited here to reduce hard coding.\n","fileTypesAndContributionMap":{"java":{"insertions":79,"deletions":20}}},{"hash":"ff5e72862afc4ef02eff34f36b714e0995418d47","messageTitle":"feat: Update parser package for task subclass","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":113,"deletions":19}}},{"hash":"6c8e84b6cfc2353e9f1dd7da2bb8c511ae902f3b","messageTitle":"refactor: Duke class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":4}}},{"hash":"08e9aa569bf02d728a5a8d2d27e9c22214e50bcb","messageTitle":"refactor: parser handling of task arguments","messageBody":"Parser should not handle the arugments of each task subclass as code\ncannot scale. Task should be incharge of parsing the arguments once the\nspecific tasking requested is known by parser.\n\n- Parser.getTask() will get each subclass to make sense of the argument\n- if argument is invalid then exception will be thrown which will be made\nknown to the user\n","fileTypesAndContributionMap":{"java":{"insertions":106,"deletions":20}}},{"hash":"80367074144ef41761d5b3cb282c64572a0a7f54","messageTitle":"fix: import bugs","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":308,"deletions":420}}},{"hash":"0c34868aa1a4af22f5f97d5ca9c9405ceb38382b","messageTitle":"doc: java documentation","messageBody":"Readability for other coders\n","fileTypesAndContributionMap":{"java":{"insertions":71,"deletions":6}}},{"hash":"a65e76d5661eac8fc07a3974cb58abb0c2fc18c4","messageTitle":"chore: code quality","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":11}}},{"hash":"fcc3666e80992947cd26822386b45db53635e990","messageTitle":"feat: Custom error message","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":11}}}]}]},"authorFileTypeContributionMap":{"HiIAmTzeKean":{"java":695,"md":0,"fxml":0,"sh":0,"bat":0,"gradle":1,"txt":14}},"authorContributionVariance":{"HiIAmTzeKean":115522.21},"authorDisplayNameMap":{"HiIAmTzeKean":"CS2113-F10-4 NG T..KEAN"}}
