{"authorDailyContributionsMap":{"haoyangw":[{"date":"2023-01-19","commitResults":[{"hash":"90c0710ddfe13e70619e5d786495e26e880ee167","messageTitle":"Level 0: Duke shall greet the user and exit, for now","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":6}}}]},{"date":"2023-01-26","commitResults":[{"hash":"56d6bb3232b44c3458dbfdc81f63f3b210ef8139","messageTitle":"Implement increment Level-0: Read commands and reply","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":6}}},{"hash":"139fd3ea242263ba57326e01fb6fd84a113b7a72","messageTitle":"Add some personality to (who is now) R.I.C.A","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":38,"deletions":36}}},{"hash":"b7576ed97b208fb0e9633343e44b552629601573","messageTitle":"Implement Level-2: Add and List functionality for R.I.C.A","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":33,"deletions":5}}}]},{"date":"2023-01-27","commitResults":[{"hash":"36fc0003bac3b6978194ccb4528d44017e7f98a3","messageTitle":"Implement a basic Task class that stores task status and description","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":36,"deletions":0}}},{"hash":"f746c22f9121ebeaf8db4842386a14046ab9d624","messageTitle":"Refactor Rica to use Task objects(basic) instead of Strings","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":11}}},{"hash":"0dbac2d4114421d2f2886d57dc8c9a67bcd1f11d","messageTitle":"Implement logic for marking tasks as done through Rica","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":35,"deletions":12}}},{"hash":"a4e18891853ae07aaf8ea4b01850af01511724bf","messageTitle":"Implement logic for marking tasks as not done while fixing a bug in parsing command as mark/unmark","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":7}}},{"hash":"a4f84a832971953bf6bec43cb9aa4bb51f5b37f5","messageTitle":"Augment list command: Tell the user when no tasks have been added yet, otherwise list tasks","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":4}}},{"hash":"96b7b3b2de048b100bbd7b3619d7246fcf9a98cc","messageTitle":"Improve the reply when marking/unmarking tasks as done","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":4}}},{"hash":"9fb1a2f5bcbed65eb4be2d62aa503cd1cac04bcd","messageTitle":"Move reply for mark/unmark command to the corresponding helper function","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":6}}},{"hash":"fa2630dc1e00d412814eed97c555db9d7062f467","messageTitle":"Bounds checking: Check that task exists before trying to mark/unmark to prevent crash","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":0}}},{"hash":"441c54755e080ab25212c3a8858e6c09129b525c","messageTitle":"Sanity check: Don\u0027t mark/unmark task when it\u0027s already marked/unmarked, also inform the user about it","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":2}}},{"hash":"324fff25d5d5bcc940b82f93a2d177d22ccde277","messageTitle":"Add proper padding for mark/unmark reply that matches that of other commands for tasks","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"817c696250191102da59097ae2cd350837d4e293","messageTitle":"Another sanity check: If user spams whitespace/enter key don\u0027t end up adding a task with whitespace name/no name","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":1}}}]},{"date":"2023-02-02","commitResults":[{"hash":"203c5982f24c5a5bc49453876c8a385e5b2169f6","messageTitle":"Add javadoc comments for all non-trivial methods in our classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":0}}},{"hash":"c4977032b098d33fbf35dd85a8d8d749d675865b","messageTitle":"Rica.class: Remove unused overloaded addTask() method","messageBody":"","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":4}}}]},{"date":"2023-02-03","commitResults":[{"hash":"50f4e8d17e057cac8aafe9f9d698a5310f2dd3db","messageTitle":"Task.class: Fix non-final class variable name being written in caps instead of camelCase","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":4}}},{"hash":"b09e6e652003691d1d73ca9ea4be87f55023e7cd","messageTitle":"Rica.class: Fix indentatino for switch block","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":9,"deletions":10}}},{"hash":"67d5d2f1144ef359247e9b57b48e4a5945e16f80","messageTitle":"Task.class: Follow coding style standards and use just one setDone() setter","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":8}}},{"hash":"dddf3e2b6272688dd2a546b73767430f32d394e8","messageTitle":"Add a new Todo class and move todo logic from Task to Todo","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":17}}},{"hash":"e76c55ee50948dee81c33a19bb526c15c152311a","messageTitle":"Rica.class: Refactor to use Todo class instead of Task","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":8}}},{"hash":"dca2d79d0c50da118c592f8f4669255d2723bcd0","messageTitle":"Rica.class: Add a new command for adding todos","messageBody":"Also, rename our variables and methods now that we are using Todos instead of Tasks directly\n","fileTypesAndContributionMap":{"java":{"insertions":81,"deletions":75}}},{"hash":"ab5ef601e86edeaa50882f10eef64c35169f8146","messageTitle":"Todo.class: Add additional [T] to its toString() output","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":1}}},{"hash":"5cd9261ac63ab653afb4bd876e78deef5b4c7471","messageTitle":"Task.class: Make getDescription() publicly accessible","messageBody":"Not sensitive information anyway, in fact it is quite meaningful for other classes\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"715a52d2ec5a8d77d847733c88d5ce9b01e1eaed","messageTitle":"Move logic for creating new Todo to a factory method in Todo.class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":13}}},{"hash":"6883a44f6af91fe1985324e4f8d493f1dc6a54ab","messageTitle":"New TaskManager.class: Manages tasks(add, mark, unmark)","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":140,"deletions":0}}},{"hash":"92c863676337c2933ff4b00aa7e85c89b8de25e4","messageTitle":"Rica.class: Refactor to use the new TaskManager.class","messageBody":"Call TaskManager\u0027s methods to perform task management so Rica.class is simpler.\n","fileTypesAndContributionMap":{"java":{"insertions":9,"deletions":94}}},{"hash":"47cc7b81201de7e6e06f9dad30616ce2e589927e","messageTitle":"Rica.class: Fix warnings due to using Integer.valueOf() wrongly","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"8cbe3b3db51a66ac9926f660f039cee2b72dcaa1","messageTitle":"New Deadline.class: Todos that must be done before a date/time","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":59,"deletions":0}}},{"hash":"982962897da3332a1fc7af5c8dc9d89f6f99ceb1","messageTitle":"Update Rica.class and TaskManager.class: Support adding deadline tasks","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":5}}}]},{"date":"2023-02-04","commitResults":[{"hash":"288e97c17031d8df4cf67bfa5e96bd9a7c263ce3","messageTitle":"New Event.class: Support adding events with start/end date/time","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":82,"deletions":0}}},{"hash":"81130c1a75815009618458a9e004f90f5dd3111b","messageTitle":"Update Rica.class and TaskManager.class: Support event commands by using Event.class methods","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":2}}},{"hash":"d97300afcc4a1951f77647ccb16f78996b7e77db","messageTitle":"Fix additional whitespace messing up formatting of task management replies","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":12}}},{"hash":"407aa056dc7e2d5250821c5c56b042e4129af2b2","messageTitle":"TaskManager.class: Fix refactoring misses and grammar issue","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}}]},{"date":"2023-02-07","commitResults":[{"hash":"4c86b4e52dd764a1c1fb7eb1333b71c5cbf9f9e4","messageTitle":"TaskManager.class: Improve if conditions\u0027 readability","messageBody":"Store boolean conditions in variables with descriptive names so if conditions are easily understandable and shorter\n","fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":6}}},{"hash":"18a68416e833af2fd54d59b5ce1486c03c1da6e4","messageTitle":"Code quality improvements","messageBody":"Set some rules for arranging variables/methods in all classes from now on\n\n1. Order of arranging: Variables first, followed by constructors, and then methods\n2. Within each of the above categories, arrange by their access modifier: private-\u003edefault-\u003eprotected-\u003epublic\n3. Within each of the access modifier categories, arrange names alphabetically\n","fileTypesAndContributionMap":{"java":{"insertions":120,"deletions":115}}}]},{"date":"2023-02-08","commitResults":[{"hash":"f33648825a6be3325e85fd2fd43e45b5808fa246","messageTitle":"Code quality improvements: Reduce method length","messageBody":"Abstract logic into separate methods more to reduce the length of each individual method\n\nMakes code more readable\n","tags":["A-CodeQuality"],"fileTypesAndContributionMap":{"java":{"insertions":96,"deletions":98}}}]},{"date":"2023-02-09","commitResults":[{"hash":"e68ef1472b61ca9532672075b73905f3434e67bf","messageTitle":"Add our own RuntimeException class","messageBody":"Have RicaException to represent all of Rica\u0027s internal exceptions and RicaTaskException(subclass of RicaException)\n  to represent Rica\u0027s task-related exceptions\n","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":0}}},{"hash":"9decba34fae60a6d6d111639f85c953fd68fcc1c","messageTitle":"Use RicaException and RicaTaskException to handle errors gracefully","messageBody":"Now Rica won\u0027t crash or return null references anymore when given invalid inputs\n","fileTypesAndContributionMap":{"java":{"insertions":78,"deletions":27}}}]},{"date":"2023-02-10","commitResults":[{"hash":"dc4a2a7f50e0cd51187e2d616e98740e4541de83","messageTitle":"Create two preliminary packages: exception and task","messageBody":"exception: For RicaException and its subclasses to categorise exception conditions in Rica\n\ntask: For Task and its subclasses to categorise Rica\u0027s various tasks\n","fileTypesAndContributionMap":{"java":{"insertions":33,"deletions":5}}}]},{"date":"2023-02-11","commitResults":[{"hash":"39f9f4df50b7071e953561f60a324347e2207458","messageTitle":"TaskManager.class: Implement removing task logic","messageBody":"Actually we already have an internal helper method for removing a task by index, so just implement command validation and then\n  let the helper method rmTask() do its job\n","fileTypesAndContributionMap":{"java":{"insertions":39,"deletions":3}}},{"hash":"63fdb2df5ed08cefc4302d5c9ed9aeb8660df593","messageTitle":"Rica.class: Support a new command, \u0027delete\u0027","messageBody":"Let TaskManager.class handle the task deletion logic using its rmTask() method\n","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":0}}},{"hash":"15eaafb1f83bdf81d2f056f6de628a34ca1a271a","messageTitle":"TaskManager.class: Arrange rmTask() by access modifier and alphabet","messageBody":"Accidentally put the publicly-accessible rmTask() below the private rmTask(), oops. Broke the method arrangement rules I set earlier\n","fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":28}}},{"hash":"36c94f86a61712502381aab060d10ed5ce579cf4","messageTitle":"Task.class: Implement getType() as well to facilitate serializing","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":0}}},{"hash":"efa3d47935f356780d76b919c29f5190fe068e1a","messageTitle":"Todo.class: Use @Override tag on getType()","messageBody":"Now that getType() is also implemented by Task.class, make this clear by marking getType() with the @Override tag\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}}]},{"date":"2023-02-12","commitResults":[{"hash":"f6ebd950261383160fcf3b1a7a33153854d0069c","messageTitle":"TaskManager.class: Refector all static methods and variables","messageBody":"Fix a bad abstraction done earlier where static methods from Rica were copied to a new class(TaskManager) without removing the\n  unnecessary \u0027static\u0027 modifier.\nAfter all, all of TaskManager\u0027s methods and variables are now called from an instance of TaskManager created by Rica, so marking them\n  \u0027static\u0027 is plain wrong\n","fileTypesAndContributionMap":{"java":{"insertions":41,"deletions":37}}}]},{"date":"2023-02-13","commitResults":[{"hash":"25cfc4a1f9c9d3461f2ff8174affd26ee9b94a82","messageTitle":"Add new Serializable interface","messageBody":"Our way of marking classes as Rica-serializable. Will have to implement serializeObject() method that returns a String representation\n  of the object that we can save\n","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":0}}},{"hash":"f1585138b55c486e0302c05dd94bfbbe73f4b939","messageTitle":"Add new RicaException: RicaSerializationException","messageBody":"Categorises an internal Exception as serialization-related\n","fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":0}}},{"hash":"dbe5937b89b0e25b0a6661541d3b48cc1b8aec3f","messageTitle":"Add another RicaException: RicaStorageException","messageBody":"Categorises an internal Exception as data storage related. Lays the ground work for saving our task list later\n","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":0}}},{"hash":"2401416a5ace38530d09089ba95cdd195b9d56d4","messageTitle":"Add new StorageManager.class to handle storing Rica\u0027s data","messageBody":"As the name implies. Abstract out logic for reading/writing data to\n  persistent storage into this class.\n\nDefault data file is {project directory}/data/tasks.txt, though a\n  different path may be specified with the overloaded constructor.\n\nIf any directories along the data file path don\u0027t exist, it\u0027ll be\n  created automatically(with warning, but no crash).\n\nStorageManager.class throws RicaStorageException when it encounters\n  exceptions reading/writing to persistent storage.\n","fileTypesAndContributionMap":{"java":{"insertions":92,"deletions":0}}},{"hash":"d8fd1a7f944f6c3c38dfb0ca5872e99f4dfe3180","messageTitle":"Task.class: Implement the Serializable interface","messageBody":"Mark Task.class as Rica-serializable by implementing the\n  serializeObject() method from Serializable.\n\nAlso, provide a factory method deserializeObject() that\n  instantiates a valid Task instance from a serialized\n  String representation\n","fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":1}}},{"hash":"a5910dcd19d874188150b25b9b1a769e1c5d6cfb","messageTitle":"Todo.class: Implement our Serializable interface","messageBody":"Allow todos to be serialized into Strings using Todo.serializeObject(),\n  and add a factory method that recreates a Todo instance from a\n  valid serialized String(Todo.deserializeObject())\n","fileTypesAndContributionMap":{"java":{"insertions":22,"deletions":1}}},{"hash":"1483572f6d1120f97dfd7ec88c0e11fd4a2e2da6","messageTitle":"Todo.class: Properly encapsulate isDone instance variable","messageBody":"Make isDone a private variable so childclasses have to use\n  corresponding getter/setter methods to access/update it\n  (the proper OOP way)\n\nAlso, to support instantiating childclasses from a serialized\n  String, childclasses need to set the value of isDone from\n  their constructors. Expose the private Todo() constructor\n  that sets isDone value to childclasses as well to support\n  this behavior.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"2d5a1d9faff56ccc066aeb003249fb6558047096","messageTitle":"Todo.setDone(): Use the correct scope for getDescription()","messageBody":"getDescription() is defined in the superclass Task.class,\n  so make this obvious by calling it via the super reference\n  instead of the this reference\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"e23e891052b90bd878e181441f90622f17fcf580","messageTitle":"Event.class: Implement the Serializable interface","messageBody":"Add a private constructor for instantiating all instance\n  variables from given values to support deserializing\n\nLike for its superclasses, implement serializeObject() and\n  provide a factory method for instantiating an instance of\n  Event from a serialized String representation(that uses\n  the new private constructor).\n","fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":2}}},{"hash":"1d2f9a118d120f0a9d6d154ac9e22c8ecfc1f433","messageTitle":"Deadline.class: Implement Serializable interface","messageBody":"Like Event.class, add a private constructor for\n  instantiating all instance variables with given\n  values to support deserializing.\n\nThen we implement serializeObject() and provide a\n  factory method for instantiating an instance of\n  Deadline from a serialized String representation.\n","fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":2}}},{"hash":"39cd5b129ff850fdc2727c948ac0fa20d0a7f28c","messageTitle":"Task.class: Augment its deserializeObject() method","messageBody":"As the superclass, let Task.deserializeObject() handle(and\n  delegate) the deserialization of Task and its subclasses\n  from local storage.\n\nThrow RicaStorageException if an unrecognised Task-related\n  object data is given.\n","fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":2}}},{"hash":"1e36ff353c2333d4ce53eb5e672d4af67c5ad4cd","messageTitle":"Fix bug in marking deadlines/events as done","messageBody":"Deadlines/Events would get turned into plain Todos when\n  marked done.\n\nFix by providing overridden methods in Deadline/Events\n  that return the correct Task subclass when marked done.\n","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":0}}},{"hash":"1e6490fc09fac95b4e1fc40ebd0393dfcca5ab5e","messageTitle":"TaskManager.class: Load saved tasks on initialization","messageBody":"Create an instance of StorageManager in TaskManager\u0027s constructor\n  and let StorageManager load saved tasks into an ArrayList.\n\nIf an exception occurs, just initialise an empty ArrayList and\n  pretend no tasks were previously saved.\n","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":1}}},{"hash":"bcbd1b91818858d0a74a7cf28df2820d6966fb01","messageTitle":"TaskManager.class: Save tasks on any task list change","messageBody":"Every time a Task is added, marked done, or marked as not done,\n  save the task list through StorageManager.\n\nTo be specific, StorageManager overwrite\u0027s the content of our\n  data file with the new task list.\n","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":0}}},{"hash":"a7edf24e2628ecd83a03121c13473b234fcdb32b","messageTitle":"TaskManager.class: Save task list on task deletion","messageBody":"Didn\u0027t manage to implement this in Level-7 since\n  Level-6 and Level-7 are in different branches.\n\nThis should make the task list persistence robust.\n  Task list is saved in all known cases.\n","tags":["Level-7"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}}]}]},"authorFileTypeContributionMap":{"haoyangw":{"java":866,"md":0,"fxml":0,"sh":0,"bat":0,"gradle":0,"txt":0}},"authorContributionVariance":{"haoyangw":16706.707},"authorDisplayNameMap":{"haoyangw":"CS2113-T12-4 WANG..YANG"}}
