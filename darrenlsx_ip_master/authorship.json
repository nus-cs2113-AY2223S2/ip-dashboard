[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrenlsx"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"darrenlsx"},"content":"    protected String by;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"darrenlsx"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"darrenlsx"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"darrenlsx"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"darrenlsx"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"darrenlsx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"darrenlsx"},"content":"        return \"[D]\" + super.toString().substring(3) + \" (by: \" + by + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"darrenlsx"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"darrenlsx":13}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrenlsx"},"content":"import java.util.Locale;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"darrenlsx"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"darrenlsx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"darrenlsx"},"content":"    public static final String LINE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2023-02-06"},{"lineNumber":7,"author":{"gitId":"darrenlsx"},"content":"    public static final String BYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\\n\";","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"darrenlsx"},"content":"    public static boolean canExit \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"darrenlsx"},"content":"     * Prints message after adding To-Do/Deadline/Event task","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"darrenlsx"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"darrenlsx"},"content":"     * @param myList","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"darrenlsx"},"content":"    public static void printTaskMessage(ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"darrenlsx"},"content":"        System.out.println(LINE","lastModifiedDate":"2023-02-06"},{"lineNumber":17,"author":{"gitId":"darrenlsx"},"content":"                + \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"darrenlsx"},"content":"                + myList.get(myList.size() - 1) + \"\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"darrenlsx"},"content":"                + \"Now you have \" + myList.size() + \" in the list.\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"darrenlsx"},"content":"                + LINE);","lastModifiedDate":"2023-02-06"},{"lineNumber":21,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"darrenlsx"},"content":"     * Prints a greeting user message","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"darrenlsx"},"content":"    public static void printGreetMessage() {","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"darrenlsx"},"content":"        System.out.println(LINE + \"Hello! I\u0027m Duke\\n\"","lastModifiedDate":"2023-02-06"},{"lineNumber":28,"author":{"gitId":"darrenlsx"},"content":"                + \"What can I do for you?\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"darrenlsx"},"content":"                + LINE);","lastModifiedDate":"2023-02-06"},{"lineNumber":30,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"darrenlsx"},"content":"     * Prints exiting message before program stops","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"darrenlsx"},"content":"    public static void printByeMessage() {","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"darrenlsx"},"content":"        System.out.println(BYE_MESSAGE);","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"darrenlsx"},"content":"     * Prints an added message","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"darrenlsx"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"darrenlsx"},"content":"     * @param myList","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"darrenlsx"},"content":"    public static void printAddedTaskMessage(ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"darrenlsx"},"content":"        System.out.println(LINE + \"added: \"","lastModifiedDate":"2023-02-06"},{"lineNumber":46,"author":{"gitId":"darrenlsx"},"content":"                + myList.get(myList.size() - 1).description","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"darrenlsx"},"content":"                + \"\\n\" + LINE);","lastModifiedDate":"2023-02-06"},{"lineNumber":48,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":49,"author":{"gitId":"darrenlsx"},"content":"    public static void printIllegalInputMessage() {","lastModifiedDate":"2023-02-06"},{"lineNumber":50,"author":{"gitId":"darrenlsx"},"content":"        System.out.println(LINE","lastModifiedDate":"2023-02-06"},{"lineNumber":51,"author":{"gitId":"darrenlsx"},"content":"                +  \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\"","lastModifiedDate":"2023-02-06"},{"lineNumber":52,"author":{"gitId":"darrenlsx"},"content":"                + LINE);","lastModifiedDate":"2023-02-06"},{"lineNumber":53,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":54,"author":{"gitId":"darrenlsx"},"content":"    public static void printEmptyInputMessage(String task) {","lastModifiedDate":"2023-02-06"},{"lineNumber":55,"author":{"gitId":"darrenlsx"},"content":"        System.out.println(LINE","lastModifiedDate":"2023-02-06"},{"lineNumber":56,"author":{"gitId":"darrenlsx"},"content":"                + \"☹ OOPS!!! The description of \" + task + \" cannot be empty.\\n\"","lastModifiedDate":"2023-02-06"},{"lineNumber":57,"author":{"gitId":"darrenlsx"},"content":"                + LINE);","lastModifiedDate":"2023-02-06"},{"lineNumber":58,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"darrenlsx"},"content":"     * Adds the input text into the list","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"darrenlsx"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"darrenlsx"},"content":"     * @param s","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"darrenlsx"},"content":"     * @param myList","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"darrenlsx"},"content":"    public static void addList(String s, ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"darrenlsx"},"content":"        Task t \u003d new Task(s);","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"darrenlsx"},"content":"        myList.add(t);","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"darrenlsx"},"content":"     * Prints all the items in the list","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"darrenlsx"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"darrenlsx"},"content":"     * @param myList","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"darrenlsx"},"content":"    public static void printList(ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"darrenlsx"},"content":"        System.out.println(LINE + \"Here are the tasks in your list: \\n\");","lastModifiedDate":"2023-02-06"},{"lineNumber":77,"author":{"gitId":"darrenlsx"},"content":"        for (int i \u003d 0; i \u003c myList.size(); ++i) {","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"darrenlsx"},"content":"            System.out.println(i + 1 + \". \" + myList.get(i));","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"darrenlsx"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-06"},{"lineNumber":81,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"darrenlsx"},"content":"     * Marks the given item in the list with an \"X\"","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"darrenlsx"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"darrenlsx"},"content":"     * @param s","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"darrenlsx"},"content":"     * @param myList","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"darrenlsx"},"content":"    public static void markDone(String s, ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"darrenlsx"},"content":"        String taskToMarkString \u003d s.substring(s.length() - 1);","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"darrenlsx"},"content":"        int taskToMark \u003d Integer.parseInt(taskToMarkString) - 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"darrenlsx"},"content":"        myList.get(taskToMark).setDone();","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"darrenlsx"},"content":"        System.out.println(LINE","lastModifiedDate":"2023-02-06"},{"lineNumber":94,"author":{"gitId":"darrenlsx"},"content":"                + \"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"darrenlsx"},"content":"                + myList.get(taskToMark) + \"\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"darrenlsx"},"content":"                + LINE);","lastModifiedDate":"2023-02-06"},{"lineNumber":97,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"darrenlsx"},"content":"     * Unmarks the given item in the list","lastModifiedDate":"2023-01-27"},{"lineNumber":101,"author":{"gitId":"darrenlsx"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"darrenlsx"},"content":"     * @param s","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"darrenlsx"},"content":"     * @param myList","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"darrenlsx"},"content":"    public static void markUndone(String s, ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"darrenlsx"},"content":"        String taskToUnmarkString \u003d s.substring(s.length() - 1);","lastModifiedDate":"2023-01-26"},{"lineNumber":107,"author":{"gitId":"darrenlsx"},"content":"        int taskToUnmark \u003d Integer.parseInt(taskToUnmarkString) - 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":108,"author":{"gitId":"darrenlsx"},"content":"        myList.get(taskToUnmark).setUndone();","lastModifiedDate":"2023-01-31"},{"lineNumber":109,"author":{"gitId":"darrenlsx"},"content":"        System.out.println(LINE","lastModifiedDate":"2023-02-06"},{"lineNumber":110,"author":{"gitId":"darrenlsx"},"content":"                + \"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2023-01-26"},{"lineNumber":111,"author":{"gitId":"darrenlsx"},"content":"                + myList.get(taskToUnmark) + \"\\n\"","lastModifiedDate":"2023-01-26"},{"lineNumber":112,"author":{"gitId":"darrenlsx"},"content":"                + LINE);","lastModifiedDate":"2023-02-06"},{"lineNumber":113,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":114,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":115,"author":{"gitId":"darrenlsx"},"content":"    public static void markDoneOrUndone(String s, ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-02-06"},{"lineNumber":116,"author":{"gitId":"darrenlsx"},"content":"        String[] words \u003d s.split(\" \");","lastModifiedDate":"2023-02-06"},{"lineNumber":117,"author":{"gitId":"darrenlsx"},"content":"        String firstWord \u003d words[0];","lastModifiedDate":"2023-02-06"},{"lineNumber":118,"author":{"gitId":"darrenlsx"},"content":"        String taskToMarkOrUnmarkString \u003d s.substring(s.length() - 1);","lastModifiedDate":"2023-02-06"},{"lineNumber":119,"author":{"gitId":"darrenlsx"},"content":"        int taskToMarkOrUnmark \u003d Integer.parseInt(taskToMarkOrUnmarkString) - 1;","lastModifiedDate":"2023-02-06"},{"lineNumber":120,"author":{"gitId":"darrenlsx"},"content":"        if (firstWord.equals(\"mark\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":121,"author":{"gitId":"darrenlsx"},"content":"            myList.get(taskToMarkOrUnmark).setDone();","lastModifiedDate":"2023-02-06"},{"lineNumber":122,"author":{"gitId":"darrenlsx"},"content":"            System.out.println(LINE","lastModifiedDate":"2023-02-06"},{"lineNumber":123,"author":{"gitId":"darrenlsx"},"content":"                    + \"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-02-06"},{"lineNumber":124,"author":{"gitId":"darrenlsx"},"content":"                    + myList.get(taskToMarkOrUnmark) + \"\\n\"","lastModifiedDate":"2023-02-06"},{"lineNumber":125,"author":{"gitId":"darrenlsx"},"content":"                    + LINE);","lastModifiedDate":"2023-02-06"},{"lineNumber":126,"author":{"gitId":"darrenlsx"},"content":"        } else {","lastModifiedDate":"2023-02-06"},{"lineNumber":127,"author":{"gitId":"darrenlsx"},"content":"            myList.get(taskToMarkOrUnmark).setUndone();","lastModifiedDate":"2023-02-06"},{"lineNumber":128,"author":{"gitId":"darrenlsx"},"content":"            System.out.println(LINE","lastModifiedDate":"2023-02-06"},{"lineNumber":129,"author":{"gitId":"darrenlsx"},"content":"                    + \"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2023-02-06"},{"lineNumber":130,"author":{"gitId":"darrenlsx"},"content":"                    + myList.get(taskToMarkOrUnmark) + \"\\n\"","lastModifiedDate":"2023-02-06"},{"lineNumber":131,"author":{"gitId":"darrenlsx"},"content":"                    + LINE);","lastModifiedDate":"2023-02-06"},{"lineNumber":132,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":133,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":134,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":135,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":136,"author":{"gitId":"darrenlsx"},"content":"     * Adds the input text and marks the task as a To-Do","lastModifiedDate":"2023-01-31"},{"lineNumber":137,"author":{"gitId":"darrenlsx"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":138,"author":{"gitId":"darrenlsx"},"content":"     * @param s","lastModifiedDate":"2023-01-31"},{"lineNumber":139,"author":{"gitId":"darrenlsx"},"content":"     * @param myList","lastModifiedDate":"2023-01-31"},{"lineNumber":140,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":141,"author":{"gitId":"darrenlsx"},"content":"    public static void makeToDoFunction(String s, ArrayList\u003cTask\u003e myList) throws EmptyInputException {","lastModifiedDate":"2023-02-06"},{"lineNumber":142,"author":{"gitId":"darrenlsx"},"content":"        String[] newTask \u003d s.split(\" \", 2);","lastModifiedDate":"2023-02-06"},{"lineNumber":143,"author":{"gitId":"darrenlsx"},"content":"        if (newTask[1].isBlank()) {","lastModifiedDate":"2023-02-06"},{"lineNumber":144,"author":{"gitId":"darrenlsx"},"content":"            throw new EmptyInputException();","lastModifiedDate":"2023-02-06"},{"lineNumber":145,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":146,"author":{"gitId":"darrenlsx"},"content":"        ToDo toDoTask \u003d new ToDo(newTask[1]);","lastModifiedDate":"2023-01-31"},{"lineNumber":147,"author":{"gitId":"darrenlsx"},"content":"        myList.add(toDoTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":148,"author":{"gitId":"darrenlsx"},"content":"        printTaskMessage(myList);","lastModifiedDate":"2023-01-31"},{"lineNumber":149,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":150,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":151,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":152,"author":{"gitId":"darrenlsx"},"content":"     * Adds the input text and marks the task as a Deadline","lastModifiedDate":"2023-01-31"},{"lineNumber":153,"author":{"gitId":"darrenlsx"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":154,"author":{"gitId":"darrenlsx"},"content":"     * @param s","lastModifiedDate":"2023-01-31"},{"lineNumber":155,"author":{"gitId":"darrenlsx"},"content":"     * @param myList","lastModifiedDate":"2023-01-31"},{"lineNumber":156,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":157,"author":{"gitId":"darrenlsx"},"content":"    public static void makeDeadlinesFunction(String s, ArrayList\u003cTask\u003e myList)","lastModifiedDate":"2023-02-06"},{"lineNumber":158,"author":{"gitId":"darrenlsx"},"content":"            throws EmptyInputException, IllegalInputException {","lastModifiedDate":"2023-02-06"},{"lineNumber":159,"author":{"gitId":"darrenlsx"},"content":"        if (s.contains(\"/by\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":160,"author":{"gitId":"darrenlsx"},"content":"            String[] newTask \u003d s.split(\" \", 2);","lastModifiedDate":"2023-02-06"},{"lineNumber":161,"author":{"gitId":"darrenlsx"},"content":"            if (newTask[1].isBlank()) {","lastModifiedDate":"2023-02-06"},{"lineNumber":162,"author":{"gitId":"darrenlsx"},"content":"                throw new EmptyInputException();","lastModifiedDate":"2023-02-06"},{"lineNumber":163,"author":{"gitId":"darrenlsx"},"content":"            }","lastModifiedDate":"2023-02-06"},{"lineNumber":164,"author":{"gitId":"darrenlsx"},"content":"            String[] split \u003d newTask[1].split(\" /by \");","lastModifiedDate":"2023-02-06"},{"lineNumber":165,"author":{"gitId":"darrenlsx"},"content":"            if (split[1].isBlank()) {","lastModifiedDate":"2023-02-06"},{"lineNumber":166,"author":{"gitId":"darrenlsx"},"content":"                throw new EmptyInputException();","lastModifiedDate":"2023-02-06"},{"lineNumber":167,"author":{"gitId":"darrenlsx"},"content":"            }","lastModifiedDate":"2023-02-06"},{"lineNumber":168,"author":{"gitId":"darrenlsx"},"content":"            Deadline deadlineTask \u003d new Deadline(split[0], split[1]);","lastModifiedDate":"2023-01-31"},{"lineNumber":169,"author":{"gitId":"darrenlsx"},"content":"            myList.add(deadlineTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":170,"author":{"gitId":"darrenlsx"},"content":"            printTaskMessage(myList);","lastModifiedDate":"2023-01-31"},{"lineNumber":171,"author":{"gitId":"darrenlsx"},"content":"        } else {","lastModifiedDate":"2023-02-06"},{"lineNumber":172,"author":{"gitId":"darrenlsx"},"content":"            throw new IllegalInputException();","lastModifiedDate":"2023-02-06"},{"lineNumber":173,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":174,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":175,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":176,"author":{"gitId":"darrenlsx"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":177,"author":{"gitId":"darrenlsx"},"content":"     * Adds the input text and marks the task as an Event","lastModifiedDate":"2023-01-31"},{"lineNumber":178,"author":{"gitId":"darrenlsx"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":179,"author":{"gitId":"darrenlsx"},"content":"     * @param s","lastModifiedDate":"2023-01-31"},{"lineNumber":180,"author":{"gitId":"darrenlsx"},"content":"     * @param myList","lastModifiedDate":"2023-01-31"},{"lineNumber":181,"author":{"gitId":"darrenlsx"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":182,"author":{"gitId":"darrenlsx"},"content":"    public static void makeEventFunction(String s, ArrayList\u003cTask\u003e myList)","lastModifiedDate":"2023-02-06"},{"lineNumber":183,"author":{"gitId":"darrenlsx"},"content":"            throws EmptyInputException, IllegalInputException {","lastModifiedDate":"2023-02-06"},{"lineNumber":184,"author":{"gitId":"darrenlsx"},"content":"        if (s.contains(\"/from\") \u0026\u0026 s.contains(\"/to\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":185,"author":{"gitId":"darrenlsx"},"content":"            String[] newTask \u003d s.split(\" \", 2);","lastModifiedDate":"2023-02-06"},{"lineNumber":186,"author":{"gitId":"darrenlsx"},"content":"            if (newTask[1].isBlank()) {","lastModifiedDate":"2023-02-06"},{"lineNumber":187,"author":{"gitId":"darrenlsx"},"content":"                throw new EmptyInputException();","lastModifiedDate":"2023-02-06"},{"lineNumber":188,"author":{"gitId":"darrenlsx"},"content":"            }","lastModifiedDate":"2023-02-06"},{"lineNumber":189,"author":{"gitId":"darrenlsx"},"content":"            String[] split \u003d newTask[1].split(\" /\");","lastModifiedDate":"2023-02-06"},{"lineNumber":190,"author":{"gitId":"darrenlsx"},"content":"            String timeFrom \u003d split[1].substring(5);","lastModifiedDate":"2023-01-31"},{"lineNumber":191,"author":{"gitId":"darrenlsx"},"content":"            String timeTo \u003d split[2].substring(3);","lastModifiedDate":"2023-01-31"},{"lineNumber":192,"author":{"gitId":"darrenlsx"},"content":"            Event eventTask \u003d new Event(split[0], timeFrom, timeTo);","lastModifiedDate":"2023-01-31"},{"lineNumber":193,"author":{"gitId":"darrenlsx"},"content":"            myList.add(eventTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":194,"author":{"gitId":"darrenlsx"},"content":"            printTaskMessage(myList);","lastModifiedDate":"2023-01-31"},{"lineNumber":195,"author":{"gitId":"darrenlsx"},"content":"        } else {","lastModifiedDate":"2023-02-06"},{"lineNumber":196,"author":{"gitId":"darrenlsx"},"content":"            throw new IllegalInputException();","lastModifiedDate":"2023-02-06"},{"lineNumber":197,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":198,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":199,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":200,"author":{"gitId":"darrenlsx"},"content":"    public static void handleMarkUnmark(String s, ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-02-06"},{"lineNumber":201,"author":{"gitId":"darrenlsx"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":202,"author":{"gitId":"darrenlsx"},"content":"            checkMarkUnmark(s);","lastModifiedDate":"2023-02-06"},{"lineNumber":203,"author":{"gitId":"darrenlsx"},"content":"            markDoneOrUndone(s, myList);","lastModifiedDate":"2023-02-06"},{"lineNumber":204,"author":{"gitId":"darrenlsx"},"content":"        } catch (EmptyInputException e) {","lastModifiedDate":"2023-02-06"},{"lineNumber":205,"author":{"gitId":"darrenlsx"},"content":"            printEmptyInputMessage(s);","lastModifiedDate":"2023-02-06"},{"lineNumber":206,"author":{"gitId":"darrenlsx"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-06"},{"lineNumber":207,"author":{"gitId":"darrenlsx"},"content":"            printIllegalInputMessage();","lastModifiedDate":"2023-02-06"},{"lineNumber":208,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":209,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":210,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":211,"author":{"gitId":"darrenlsx"},"content":"    public static void handleToDo(String s, ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-02-06"},{"lineNumber":212,"author":{"gitId":"darrenlsx"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":213,"author":{"gitId":"darrenlsx"},"content":"            makeToDoFunction(s, myList);","lastModifiedDate":"2023-02-06"},{"lineNumber":214,"author":{"gitId":"darrenlsx"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-06"},{"lineNumber":215,"author":{"gitId":"darrenlsx"},"content":"            printEmptyInputMessage(s);","lastModifiedDate":"2023-02-06"},{"lineNumber":216,"author":{"gitId":"darrenlsx"},"content":"        } catch (EmptyInputException e) {","lastModifiedDate":"2023-02-06"},{"lineNumber":217,"author":{"gitId":"darrenlsx"},"content":"            printEmptyInputMessage(s.trim());","lastModifiedDate":"2023-02-06"},{"lineNumber":218,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":219,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":220,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":221,"author":{"gitId":"darrenlsx"},"content":"    public static void handleDeadline(String s, ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-02-06"},{"lineNumber":222,"author":{"gitId":"darrenlsx"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":223,"author":{"gitId":"darrenlsx"},"content":"            makeDeadlinesFunction(s, myList);","lastModifiedDate":"2023-02-06"},{"lineNumber":224,"author":{"gitId":"darrenlsx"},"content":"        } catch (EmptyInputException e) {","lastModifiedDate":"2023-02-06"},{"lineNumber":225,"author":{"gitId":"darrenlsx"},"content":"            printEmptyInputMessage(s.trim());","lastModifiedDate":"2023-02-06"},{"lineNumber":226,"author":{"gitId":"darrenlsx"},"content":"        } catch (IllegalInputException e) {","lastModifiedDate":"2023-02-06"},{"lineNumber":227,"author":{"gitId":"darrenlsx"},"content":"            printIllegalInputMessage();","lastModifiedDate":"2023-02-06"},{"lineNumber":228,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":229,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":230,"author":{"gitId":"darrenlsx"},"content":"    public static void handleEvent(String s, ArrayList\u003cTask\u003e myList) {","lastModifiedDate":"2023-02-06"},{"lineNumber":231,"author":{"gitId":"darrenlsx"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":232,"author":{"gitId":"darrenlsx"},"content":"            makeEventFunction(s, myList);","lastModifiedDate":"2023-02-06"},{"lineNumber":233,"author":{"gitId":"darrenlsx"},"content":"        } catch (EmptyInputException e) {","lastModifiedDate":"2023-02-06"},{"lineNumber":234,"author":{"gitId":"darrenlsx"},"content":"            printEmptyInputMessage(s.trim());","lastModifiedDate":"2023-02-06"},{"lineNumber":235,"author":{"gitId":"darrenlsx"},"content":"        } catch (IllegalInputException e) {","lastModifiedDate":"2023-02-06"},{"lineNumber":236,"author":{"gitId":"darrenlsx"},"content":"            printIllegalInputMessage();","lastModifiedDate":"2023-02-06"},{"lineNumber":237,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":238,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":239,"author":{"gitId":"darrenlsx"},"content":"    public static void checkMarkUnmark(String s) throws EmptyInputException {","lastModifiedDate":"2023-02-06"},{"lineNumber":240,"author":{"gitId":"darrenlsx"},"content":"        String[] list \u003d s.split(\" \");","lastModifiedDate":"2023-02-06"},{"lineNumber":241,"author":{"gitId":"darrenlsx"},"content":"        if (list.length \u003c 2) {","lastModifiedDate":"2023-02-06"},{"lineNumber":242,"author":{"gitId":"darrenlsx"},"content":"            if (list[0].equals(\"mark\") || list[0].equals(\"unmark\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":243,"author":{"gitId":"darrenlsx"},"content":"                throw new EmptyInputException();","lastModifiedDate":"2023-02-06"},{"lineNumber":244,"author":{"gitId":"darrenlsx"},"content":"            }","lastModifiedDate":"2023-02-06"},{"lineNumber":245,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":246,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":247,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":249,"author":{"gitId":"darrenlsx"},"content":"        printGreetMessage();","lastModifiedDate":"2023-01-31"},{"lineNumber":250,"author":{"gitId":"darrenlsx"},"content":"        ArrayList\u003cTask\u003e myList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-31"},{"lineNumber":251,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":252,"author":{"gitId":"darrenlsx"},"content":"        while (!canExit) {","lastModifiedDate":"2023-01-27"},{"lineNumber":253,"author":{"gitId":"darrenlsx"},"content":"            Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-25"},{"lineNumber":254,"author":{"gitId":"darrenlsx"},"content":"            String s \u003d in.nextLine();","lastModifiedDate":"2023-01-25"},{"lineNumber":255,"author":{"gitId":"darrenlsx"},"content":"            if (s.toLowerCase().equals(\"bye\")) {","lastModifiedDate":"2023-01-25"},{"lineNumber":256,"author":{"gitId":"darrenlsx"},"content":"                printByeMessage();","lastModifiedDate":"2023-01-31"},{"lineNumber":257,"author":{"gitId":"darrenlsx"},"content":"                canExit \u003d true;","lastModifiedDate":"2023-01-27"},{"lineNumber":258,"author":{"gitId":"darrenlsx"},"content":"            } else if (s.toLowerCase().equals(\"list\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":259,"author":{"gitId":"darrenlsx"},"content":"                printList(myList);","lastModifiedDate":"2023-01-26"},{"lineNumber":260,"author":{"gitId":"darrenlsx"},"content":"            } else if (s.toLowerCase().startsWith(\"mark\") || s.toLowerCase().startsWith(\"unmark\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":261,"author":{"gitId":"darrenlsx"},"content":"                handleMarkUnmark(s, myList);","lastModifiedDate":"2023-02-06"},{"lineNumber":262,"author":{"gitId":"darrenlsx"},"content":"            } else if (s.toLowerCase().startsWith(\"todo\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":263,"author":{"gitId":"darrenlsx"},"content":"                handleToDo(s, myList);","lastModifiedDate":"2023-02-06"},{"lineNumber":264,"author":{"gitId":"darrenlsx"},"content":"            } else if (s.toLowerCase().startsWith(\"deadline\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":265,"author":{"gitId":"darrenlsx"},"content":"                handleDeadline(s, myList);","lastModifiedDate":"2023-02-06"},{"lineNumber":266,"author":{"gitId":"darrenlsx"},"content":"            } else if (s.toLowerCase().startsWith(\"event\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":267,"author":{"gitId":"darrenlsx"},"content":"                handleEvent(s, myList);","lastModifiedDate":"2023-02-06"},{"lineNumber":268,"author":{"gitId":"darrenlsx"},"content":"            } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":269,"author":{"gitId":"darrenlsx"},"content":"                //addList(s, myList);","lastModifiedDate":"2023-02-06"},{"lineNumber":270,"author":{"gitId":"darrenlsx"},"content":"                //printAddedTaskMessage(myList);","lastModifiedDate":"2023-02-06"},{"lineNumber":271,"author":{"gitId":"darrenlsx"},"content":"                printIllegalInputMessage();","lastModifiedDate":"2023-02-06"},{"lineNumber":272,"author":{"gitId":"darrenlsx"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":273,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"darrenlsx":271,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrenlsx"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"darrenlsx"},"content":"}","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"darrenlsx":2}},{"path":"src/main/java/EmptyInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrenlsx"},"content":"public class EmptyInputException extends DukeException {","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"darrenlsx"},"content":"}","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"darrenlsx":2}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrenlsx"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"darrenlsx"},"content":"    protected String from;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"darrenlsx"},"content":"    protected String to;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"darrenlsx"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"darrenlsx"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"darrenlsx"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"darrenlsx"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"darrenlsx"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"darrenlsx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"darrenlsx"},"content":"        return \"[E]\" + super.toString().substring(3)","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"darrenlsx"},"content":"                + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"darrenlsx"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"darrenlsx":16}},{"path":"src/main/java/IllegalInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrenlsx"},"content":"public class IllegalInputException extends DukeException {","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"darrenlsx"},"content":"}","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"darrenlsx":2}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrenlsx"},"content":"public class Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"darrenlsx"},"content":"    protected String description;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"darrenlsx"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"darrenlsx"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"darrenlsx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"darrenlsx"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"darrenlsx"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"darrenlsx"},"content":"        return description;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"darrenlsx"},"content":"    public void setDone() {","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"darrenlsx"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"darrenlsx"},"content":"    public void setUndone() {","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"darrenlsx"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"darrenlsx"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"darrenlsx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"darrenlsx"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"darrenlsx"},"content":"            return \"[ ][X] \" + description;","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"darrenlsx"},"content":"        } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"darrenlsx"},"content":"            return \"[ ][ ] \" + description;","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"darrenlsx"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"darrenlsx"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"darrenlsx":30}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrenlsx"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"darrenlsx"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"darrenlsx"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"darrenlsx"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"darrenlsx"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"darrenlsx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"darrenlsx"},"content":"        return \"[T]\" + super.toString().substring(3);","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"darrenlsx"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"darrenlsx"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"darrenlsx":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"darrenlsx"},"content":"todo borrow book","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"darrenlsx"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"darrenlsx"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"darrenlsx"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"darrenlsx"},"content":"mark 1","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"darrenlsx"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"darrenlsx"},"content":"unmark 1","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"darrenlsx"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"darrenlsx"},"content":"bye","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"darrenlsx":9}}]
