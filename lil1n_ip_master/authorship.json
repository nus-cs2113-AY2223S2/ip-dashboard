[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"# Duke User Guide","lastModifiedDate":"2023-02-27"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"Duke is a Command Line Interface (CLI) Personal Assistant Chatbot that helps you to keep track of tasks.","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"## Content Page","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"\u003c!-- TOC --\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"* [Duke User Guide](#duke-user-guide)","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"  * [Content Page](#content-page)","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"  * [Quick start](#quick-start)","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"  * [Features](#features)","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    * [Viewing help: `help`](#viewing-help--help)","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    * [Adding todo task: `todo` \\\u003ctask\u003e](#adding-todo-task--todo-task-)","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    * [Adding deadline task: `deadline` \\\u003ctask\u003e `/by` \\\u003cdate\u003e](#adding-deadline-task--deadline-task--by-date-)","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    * [Adding event task: `event` \\\u003ctask\u003e `/from` \\\u003cstart date\u003e `/to` \\\u003cend date\u003e](#adding-event-task--event-task--from-start-date--to-end-date-)","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    * [Delete a task: `delete` \\\u003ctask number\u003e](#delete-a-task--delete-task-number-)","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    * [Saving the task list and exiting the program: `bye`](#saving-the-task-list-and-exiting-the-program--bye)","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    * [Search task by date: `date` \\\u003cyyyy/mm/dd\u003e](#search-task-by-date--date-yyyymmdd-)","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    * [Find tasks by keyword(s): `find` \\\u003ckeyword(s)\u003e](#find-tasks-by-keyword--s---find-keyword--s--)","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    * [View all tasks: `list`](#view-all-tasks--list)","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"    * [Marking a task done: `mark` \\\u003ctask number\u003e](#marking-a-task-done--mark-task-number-)","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    * [Marking a task not done: `unmark` \\\u003ctask number\u003e](#marking-a-task-not-done--unmark-task-number-)","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"  * [An Example Walkthrough](#an-example-walkthrough)","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"  * [Command Summary](#command-summary)","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"\u003c!-- TOC --\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"## Quick start","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"1. Ensure that you have Java 11 or above installed in your computer \u003c/br\u003e Click [here](https://www.java.com/en/download/help/version_manual.html) for steps on how to check your Java version \u003c/br\u003e Click [here](https://docs.oracle.com/en/java/javase/11/install/overview-jdk-installation.html#GUID-8677A77F-231A-40F7-98B9-1FD0B48C346A) for the guide on installing Java 11","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"2. Download Duke [here](https://github.com/lil1n/ip/releases)","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"3. Move the Duke.jar file to the file directory of your choice \u003c/br\u003e You can move the jar file by right-clicking on Duke.jar, select cut, then go to the directory of choice and right-clicking and pasting it","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"4. Right-click on the directory with Duke.jar and select \"open in terminal\", type `java -jar Duke.jar` and press Enter on your keyboard to start the program","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"5. Start using the program by typing `help` and pressing Enter on your keyboard to get the list of commands supported","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"### Viewing help: `help`","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"Displays a message showing the commands available, and their usage.","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"### Adding todo task: `todo` \\\u003ctask\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"Adds a todo task to the task list. \u003c/br\u003e A task type of todo only keeps track of:","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"- Task name","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"- Status of task: done or not done","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"Example:","lastModifiedDate":"2023-02-27"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"- `todo go supermarket`","lastModifiedDate":"2023-02-27"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"- `todo charge phone`","lastModifiedDate":"2023-02-27"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"### Adding deadline task: `deadline` \\\u003ctask\u003e `/by` \\\u003cdate\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"Adds a deadline task to the task list. \u003c/br\u003e A task type of deadline only keeps track of:","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"- Task name","lastModifiedDate":"2023-02-27"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"- Status of task: done or not done","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"- Date to be tagged with task","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"Example:","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"- `deadline eat bread /by tomorrow`","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"- `deadline submit proposal /by 2023/01/30`","lastModifiedDate":"2023-02-27"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"- `deadline bread sale /by 2023/01/25 1800`","lastModifiedDate":"2023-02-27"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"Tip: Duke understands valid date in the format of yyyy/mm/dd, hence supplying a date in such format allows you to filter deadline tasks by the date","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"### Adding event task: `event` \\\u003ctask\u003e `/from` \\\u003cstart date\u003e `/to` \\\u003cend date\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"Adds an event task to the task list. \u003c/br\u003e A task type of event only keeps track of:","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"- Task name","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"- Status of task: done or not done","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"lil1n"},"content":"- Start date to be tagged with task","lastModifiedDate":"2023-02-27"},{"lineNumber":66,"author":{"gitId":"lil1n"},"content":"- End date to be tagged with task","lastModifiedDate":"2023-02-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":68,"author":{"gitId":"lil1n"},"content":"Example:","lastModifiedDate":"2023-02-27"},{"lineNumber":69,"author":{"gitId":"lil1n"},"content":"- `event visit friends /from today /to tomorrow`","lastModifiedDate":"2023-02-27"},{"lineNumber":70,"author":{"gitId":"lil1n"},"content":"- `event closing down sale /from today /to 2023/01/30`","lastModifiedDate":"2023-02-27"},{"lineNumber":71,"author":{"gitId":"lil1n"},"content":"- `event opera performance /from 2023/01/27 1600 /to 2023/01/27 1900`","lastModifiedDate":"2023-02-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":73,"author":{"gitId":"lil1n"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":74,"author":{"gitId":"lil1n"},"content":"Tip: Duke understands valid date in the format of yyyy/mm/dd, hence supplying a date in such format allows you to filter event tasks by the date","lastModifiedDate":"2023-02-27"},{"lineNumber":75,"author":{"gitId":"lil1n"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":77,"author":{"gitId":"lil1n"},"content":"### Delete a task: `delete` \\\u003ctask number\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":78,"author":{"gitId":"lil1n"},"content":"Deletes a task by the task number in the task list. \u003c/br\u003e Example:","lastModifiedDate":"2023-02-27"},{"lineNumber":79,"author":{"gitId":"lil1n"},"content":"- `delete 1`","lastModifiedDate":"2023-02-27"},{"lineNumber":80,"author":{"gitId":"lil1n"},"content":"- `delete 2`","lastModifiedDate":"2023-02-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":82,"author":{"gitId":"lil1n"},"content":"### Saving the task list and exiting the program: `bye`","lastModifiedDate":"2023-02-27"},{"lineNumber":83,"author":{"gitId":"lil1n"},"content":"Exits the program and saves the data in the list into a text file that is stored in a file named data that is stored in the file where Duke.jar is stored. \u003c/br\u003e Example:","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"lil1n"},"content":"- `bye`","lastModifiedDate":"2023-02-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":86,"author":{"gitId":"lil1n"},"content":"### Search task by date: `date` \\\u003cyyyy/mm/dd\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":87,"author":{"gitId":"lil1n"},"content":"Shows the tasks that contains the date in its task information. \u003c/br\u003e Example:","lastModifiedDate":"2023-02-27"},{"lineNumber":88,"author":{"gitId":"lil1n"},"content":"- `date 2023/01/25`","lastModifiedDate":"2023-02-27"},{"lineNumber":89,"author":{"gitId":"lil1n"},"content":"- `date 2023/02/01`","lastModifiedDate":"2023-02-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":91,"author":{"gitId":"lil1n"},"content":"### Find tasks by keyword(s): `find` \\\u003ckeyword(s)\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":92,"author":{"gitId":"lil1n"},"content":"Shows the tasks that contains the keyword(s) in the task name of the task. \u003c/br\u003e Example:","lastModifiedDate":"2023-02-27"},{"lineNumber":93,"author":{"gitId":"lil1n"},"content":"- `find bread`","lastModifiedDate":"2023-02-27"},{"lineNumber":94,"author":{"gitId":"lil1n"},"content":"- `find sale`","lastModifiedDate":"2023-02-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":96,"author":{"gitId":"lil1n"},"content":"### View all tasks: `list`","lastModifiedDate":"2023-02-27"},{"lineNumber":97,"author":{"gitId":"lil1n"},"content":"Shows all the tasks in the list. \u003c/br\u003e Example: ","lastModifiedDate":"2023-02-27"},{"lineNumber":98,"author":{"gitId":"lil1n"},"content":"- `list`","lastModifiedDate":"2023-02-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":100,"author":{"gitId":"lil1n"},"content":"### Marking a task done: `mark` \\\u003ctask number\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":101,"author":{"gitId":"lil1n"},"content":"Marks a task as done by the task number in the task list. \u003c/br\u003e Example:","lastModifiedDate":"2023-02-27"},{"lineNumber":102,"author":{"gitId":"lil1n"},"content":"- `mark 1`","lastModifiedDate":"2023-02-27"},{"lineNumber":103,"author":{"gitId":"lil1n"},"content":"- `mark 2`","lastModifiedDate":"2023-02-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":105,"author":{"gitId":"lil1n"},"content":"### Marking a task not done: `unmark` \\\u003ctask number\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":106,"author":{"gitId":"lil1n"},"content":"Marks a task as not done by the task number in the task list. \u003c/br\u003e Example:","lastModifiedDate":"2023-02-27"},{"lineNumber":107,"author":{"gitId":"lil1n"},"content":"- `unmark 1`","lastModifiedDate":"2023-02-27"},{"lineNumber":108,"author":{"gitId":"lil1n"},"content":"- `unmark 2`","lastModifiedDate":"2023-02-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":110,"author":{"gitId":"lil1n"},"content":"## An Example Walkthrough","lastModifiedDate":"2023-02-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":112,"author":{"gitId":"lil1n"},"content":"java -jar Duke.jar","lastModifiedDate":"2023-02-27"},{"lineNumber":113,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":114,"author":{"gitId":"lil1n"},"content":" Hello! I\u0027m Duke","lastModifiedDate":"2023-02-27"},{"lineNumber":115,"author":{"gitId":"lil1n"},"content":" What can I do for you?","lastModifiedDate":"2023-02-27"},{"lineNumber":116,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":117,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":118,"author":{"gitId":"lil1n"},"content":"todo go supermarket","lastModifiedDate":"2023-02-27"},{"lineNumber":119,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":120,"author":{"gitId":"lil1n"},"content":" The following task has been added:","lastModifiedDate":"2023-02-27"},{"lineNumber":121,"author":{"gitId":"lil1n"},"content":"   [T][ ] go supermarket","lastModifiedDate":"2023-02-27"},{"lineNumber":122,"author":{"gitId":"lil1n"},"content":" There is now 1 task(s) in total.","lastModifiedDate":"2023-02-27"},{"lineNumber":123,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":124,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":125,"author":{"gitId":"lil1n"},"content":"todo charge phone","lastModifiedDate":"2023-02-27"},{"lineNumber":126,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":127,"author":{"gitId":"lil1n"},"content":" The following task has been added:","lastModifiedDate":"2023-02-27"},{"lineNumber":128,"author":{"gitId":"lil1n"},"content":"   [T][ ] charge phone","lastModifiedDate":"2023-02-27"},{"lineNumber":129,"author":{"gitId":"lil1n"},"content":" There is now 2 task(s) in total.","lastModifiedDate":"2023-02-27"},{"lineNumber":130,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":131,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":132,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":133,"author":{"gitId":"lil1n"},"content":"deadline eat bread /by tomorrow","lastModifiedDate":"2023-02-27"},{"lineNumber":134,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":135,"author":{"gitId":"lil1n"},"content":" The following task has been added:","lastModifiedDate":"2023-02-27"},{"lineNumber":136,"author":{"gitId":"lil1n"},"content":"   [D][ ] eat bread (by: tomorrow)","lastModifiedDate":"2023-02-27"},{"lineNumber":137,"author":{"gitId":"lil1n"},"content":" There is now 3 task(s) in total.","lastModifiedDate":"2023-02-27"},{"lineNumber":138,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":139,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":140,"author":{"gitId":"lil1n"},"content":"deadline submit proposal /by 2023/01/30","lastModifiedDate":"2023-02-27"},{"lineNumber":141,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":142,"author":{"gitId":"lil1n"},"content":" The following task has been added:","lastModifiedDate":"2023-02-27"},{"lineNumber":143,"author":{"gitId":"lil1n"},"content":"   [D][ ] submit proposal (by: 30 Jan 2023)","lastModifiedDate":"2023-02-27"},{"lineNumber":144,"author":{"gitId":"lil1n"},"content":" There is now 4 task(s) in total.","lastModifiedDate":"2023-02-27"},{"lineNumber":145,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":146,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":147,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":148,"author":{"gitId":"lil1n"},"content":"deadline bread sale /by 2023/01/25 1800","lastModifiedDate":"2023-02-27"},{"lineNumber":149,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":150,"author":{"gitId":"lil1n"},"content":" The following task has been added:","lastModifiedDate":"2023-02-27"},{"lineNumber":151,"author":{"gitId":"lil1n"},"content":"   [D][ ] bread sale (by: 25 Jan 2023 1800)","lastModifiedDate":"2023-02-27"},{"lineNumber":152,"author":{"gitId":"lil1n"},"content":" There is now 5 task(s) in total.","lastModifiedDate":"2023-02-27"},{"lineNumber":153,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":154,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":155,"author":{"gitId":"lil1n"},"content":"event visit friends /from today /to tomorrow","lastModifiedDate":"2023-02-27"},{"lineNumber":156,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":157,"author":{"gitId":"lil1n"},"content":" The following task has been added:","lastModifiedDate":"2023-02-27"},{"lineNumber":158,"author":{"gitId":"lil1n"},"content":"   [E][ ] visit friends (from: today to: tomorrow)","lastModifiedDate":"2023-02-27"},{"lineNumber":159,"author":{"gitId":"lil1n"},"content":" There is now 6 task(s) in total.","lastModifiedDate":"2023-02-27"},{"lineNumber":160,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":161,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":162,"author":{"gitId":"lil1n"},"content":"event closing down sale /from today /to 2023/01/30","lastModifiedDate":"2023-02-27"},{"lineNumber":163,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":164,"author":{"gitId":"lil1n"},"content":" The following task has been added:","lastModifiedDate":"2023-02-27"},{"lineNumber":165,"author":{"gitId":"lil1n"},"content":"   [E][ ] closing down sale (from: today to: 30 Jan 2023)","lastModifiedDate":"2023-02-27"},{"lineNumber":166,"author":{"gitId":"lil1n"},"content":" There is now 7 task(s) in total.","lastModifiedDate":"2023-02-27"},{"lineNumber":167,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":168,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":169,"author":{"gitId":"lil1n"},"content":"event opera performance /from 2023/01/25 1600 /to 2023/01/25 1900","lastModifiedDate":"2023-02-27"},{"lineNumber":170,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":171,"author":{"gitId":"lil1n"},"content":" The following task has been added:","lastModifiedDate":"2023-02-27"},{"lineNumber":172,"author":{"gitId":"lil1n"},"content":"   [E][ ] opera performance (from: 25 Jan 2023 1600 to: 25 Jan 2023 1900)","lastModifiedDate":"2023-02-27"},{"lineNumber":173,"author":{"gitId":"lil1n"},"content":" There is now 8 task(s) in total.","lastModifiedDate":"2023-02-27"},{"lineNumber":174,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":175,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":176,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-02-27"},{"lineNumber":177,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":178,"author":{"gitId":"lil1n"},"content":" Here are the tasks in your lists:","lastModifiedDate":"2023-02-27"},{"lineNumber":179,"author":{"gitId":"lil1n"},"content":" 1.[T][ ] go supermarket","lastModifiedDate":"2023-02-27"},{"lineNumber":180,"author":{"gitId":"lil1n"},"content":" 2.[T][ ] charge phone","lastModifiedDate":"2023-02-27"},{"lineNumber":181,"author":{"gitId":"lil1n"},"content":" 3.[D][ ] eat bread (by: tomorrow)","lastModifiedDate":"2023-02-27"},{"lineNumber":182,"author":{"gitId":"lil1n"},"content":" 4.[D][ ] submit proposal (by: 30 Jan 2023)","lastModifiedDate":"2023-02-27"},{"lineNumber":183,"author":{"gitId":"lil1n"},"content":" 5.[D][ ] bread sale (by: 25 Jan 2023 1800)","lastModifiedDate":"2023-02-27"},{"lineNumber":184,"author":{"gitId":"lil1n"},"content":" 6.[E][ ] visit friends (from: today to: tomorrow)","lastModifiedDate":"2023-02-27"},{"lineNumber":185,"author":{"gitId":"lil1n"},"content":" 7.[E][ ] closing down sale (from: today to: 30 Jan 2023)","lastModifiedDate":"2023-02-27"},{"lineNumber":186,"author":{"gitId":"lil1n"},"content":" 8.[E][ ] opera performance (from: 25 Jan 2023 1600 to: 25 Jan 2023 1900)","lastModifiedDate":"2023-02-27"},{"lineNumber":187,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":188,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":189,"author":{"gitId":"lil1n"},"content":"delete 6","lastModifiedDate":"2023-02-27"},{"lineNumber":190,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":191,"author":{"gitId":"lil1n"},"content":" Noted. Task removed: ","lastModifiedDate":"2023-02-27"},{"lineNumber":192,"author":{"gitId":"lil1n"},"content":"   [E][ ] visit friends (from: today to: tomorrow)","lastModifiedDate":"2023-02-27"},{"lineNumber":193,"author":{"gitId":"lil1n"},"content":" You now have 7 task(s) in the list.","lastModifiedDate":"2023-02-27"},{"lineNumber":194,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":195,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":196,"author":{"gitId":"lil1n"},"content":"delete 2","lastModifiedDate":"2023-02-27"},{"lineNumber":197,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":198,"author":{"gitId":"lil1n"},"content":" Noted. Task removed: ","lastModifiedDate":"2023-02-27"},{"lineNumber":199,"author":{"gitId":"lil1n"},"content":"   [T][ ] charge phone","lastModifiedDate":"2023-02-27"},{"lineNumber":200,"author":{"gitId":"lil1n"},"content":" You now have 6 task(s) in the list.","lastModifiedDate":"2023-02-27"},{"lineNumber":201,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":202,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":203,"author":{"gitId":"lil1n"},"content":"delete 2","lastModifiedDate":"2023-02-27"},{"lineNumber":204,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":205,"author":{"gitId":"lil1n"},"content":" Noted. Task removed: ","lastModifiedDate":"2023-02-27"},{"lineNumber":206,"author":{"gitId":"lil1n"},"content":"   [T][ ] charge phone","lastModifiedDate":"2023-02-27"},{"lineNumber":207,"author":{"gitId":"lil1n"},"content":" You now have 6 task(s) in the list.","lastModifiedDate":"2023-02-27"},{"lineNumber":208,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":209,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":210,"author":{"gitId":"lil1n"},"content":"mark 1","lastModifiedDate":"2023-02-27"},{"lineNumber":211,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":212,"author":{"gitId":"lil1n"},"content":" Awesome! I\u0027ve marked this task as done:","lastModifiedDate":"2023-02-27"},{"lineNumber":213,"author":{"gitId":"lil1n"},"content":"   [T][X] go supermarket","lastModifiedDate":"2023-02-27"},{"lineNumber":214,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":215,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":216,"author":{"gitId":"lil1n"},"content":"mark 4","lastModifiedDate":"2023-02-27"},{"lineNumber":217,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":218,"author":{"gitId":"lil1n"},"content":" Awesome! I\u0027ve marked this task as done:","lastModifiedDate":"2023-02-27"},{"lineNumber":219,"author":{"gitId":"lil1n"},"content":"   [D][X] bread sale (by: 25 Jan 2023 1800)","lastModifiedDate":"2023-02-27"},{"lineNumber":220,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":221,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":222,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":223,"author":{"gitId":"lil1n"},"content":"unmark 1","lastModifiedDate":"2023-02-27"},{"lineNumber":224,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":225,"author":{"gitId":"lil1n"},"content":" OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-02-27"},{"lineNumber":226,"author":{"gitId":"lil1n"},"content":"   [T][ ] go supermarket","lastModifiedDate":"2023-02-27"},{"lineNumber":227,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":228,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":229,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-02-27"},{"lineNumber":230,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":231,"author":{"gitId":"lil1n"},"content":" Here are the tasks in your lists:","lastModifiedDate":"2023-02-27"},{"lineNumber":232,"author":{"gitId":"lil1n"},"content":" 1.[T][ ] go supermarket","lastModifiedDate":"2023-02-27"},{"lineNumber":233,"author":{"gitId":"lil1n"},"content":" 2.[D][ ] eat bread (by: tomorrow)","lastModifiedDate":"2023-02-27"},{"lineNumber":234,"author":{"gitId":"lil1n"},"content":" 3.[D][ ] submit proposal (by: 30 Jan 2023)","lastModifiedDate":"2023-02-27"},{"lineNumber":235,"author":{"gitId":"lil1n"},"content":" 4.[D][X] bread sale (by: 25 Jan 2023 1800)","lastModifiedDate":"2023-02-27"},{"lineNumber":236,"author":{"gitId":"lil1n"},"content":" 5.[E][ ] closing down sale (from: today to: 30 Jan 2023)","lastModifiedDate":"2023-02-27"},{"lineNumber":237,"author":{"gitId":"lil1n"},"content":" 6.[E][ ] opera performance (from: 25 Jan 2023 1600 to: 25 Jan 2023 1900)","lastModifiedDate":"2023-02-27"},{"lineNumber":238,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":239,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":240,"author":{"gitId":"lil1n"},"content":"date 2023/01/25","lastModifiedDate":"2023-02-27"},{"lineNumber":241,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":242,"author":{"gitId":"lil1n"},"content":" The following tasks are due on 25 Jan 2023:","lastModifiedDate":"2023-02-27"},{"lineNumber":243,"author":{"gitId":"lil1n"},"content":" 1. [D][X] bread sale (by: 25 Jan 2023 1800)","lastModifiedDate":"2023-02-27"},{"lineNumber":244,"author":{"gitId":"lil1n"},"content":" 2. [E][ ] opera performance (from: 25 Jan 2023 1600 to: 25 Jan 2023 1900)","lastModifiedDate":"2023-02-27"},{"lineNumber":245,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":246,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":247,"author":{"gitId":"lil1n"},"content":"date 2023/01/25","lastModifiedDate":"2023-02-27"},{"lineNumber":248,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":249,"author":{"gitId":"lil1n"},"content":" The following task(s) occur on 25 Jan 2023:","lastModifiedDate":"2023-02-27"},{"lineNumber":250,"author":{"gitId":"lil1n"},"content":" 1. [D][X] bread sale (by: 25 Jan 2023 1800)","lastModifiedDate":"2023-02-27"},{"lineNumber":251,"author":{"gitId":"lil1n"},"content":" 2. [E][ ] opera performance (from: 25 Jan 2023 1600 to: 25 Jan 2023 1900)","lastModifiedDate":"2023-02-27"},{"lineNumber":252,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":253,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":254,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":255,"author":{"gitId":"lil1n"},"content":"find sale","lastModifiedDate":"2023-02-27"},{"lineNumber":256,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":257,"author":{"gitId":"lil1n"},"content":" Here are the matching tasks in your list:","lastModifiedDate":"2023-02-27"},{"lineNumber":258,"author":{"gitId":"lil1n"},"content":" 1. [D][X] bread sale (by: 25 Jan 2023 1800)","lastModifiedDate":"2023-02-27"},{"lineNumber":259,"author":{"gitId":"lil1n"},"content":" 2. [E][ ] closing down sale (from: today to: 30 Jan 2023)","lastModifiedDate":"2023-02-27"},{"lineNumber":260,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":261,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":262,"author":{"gitId":"lil1n"},"content":"bye","lastModifiedDate":"2023-02-27"},{"lineNumber":263,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":264,"author":{"gitId":"lil1n"},"content":" Bye! Hope to see you again soon!","lastModifiedDate":"2023-02-27"},{"lineNumber":265,"author":{"gitId":"lil1n"},"content":"________________________________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":266,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":267,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":268,"author":{"gitId":"lil1n"},"content":"## Command Summary","lastModifiedDate":"2023-02-27"},{"lineNumber":269,"author":{"gitId":"lil1n"},"content":"| **Action**             | **Format\u003cbr/\u003eExample command**                                                                                          |","lastModifiedDate":"2023-02-27"},{"lineNumber":270,"author":{"gitId":"lil1n"},"content":"|------------------------|-------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-02-27"},{"lineNumber":271,"author":{"gitId":"lil1n"},"content":"| Add todo task          | `todo` task\u003cbr/\u003e**Example:** `todo buy bread`                                                                           |","lastModifiedDate":"2023-02-27"},{"lineNumber":272,"author":{"gitId":"lil1n"},"content":"| Add deadline task      | `deadline` task `/by` date\u003cbr/\u003e**Example:** `deadline submit proposal /by 2023/02/28`                                   |","lastModifiedDate":"2023-02-27"},{"lineNumber":273,"author":{"gitId":"lil1n"},"content":"| Add event task         | `event` task name `/from` date `/to` date\u003cbr/\u003e**Example:** `event make bread /from 2023/02/28 1400 /to 2023/02/28 1600` |","lastModifiedDate":"2023-02-27"},{"lineNumber":274,"author":{"gitId":"lil1n"},"content":"| Delete task            | `delete` task number\u003cbr/\u003e**Example:** `delete 1`                                                                        |","lastModifiedDate":"2023-02-27"},{"lineNumber":275,"author":{"gitId":"lil1n"},"content":"| Saving and exiting     | `bye`                                                                                                                   |","lastModifiedDate":"2023-02-27"},{"lineNumber":276,"author":{"gitId":"lil1n"},"content":"| Filter task given date | `date` date\u003cbr/\u003e**Example:** `date 2023/02/28`                                                                          |","lastModifiedDate":"2023-02-27"},{"lineNumber":277,"author":{"gitId":"lil1n"},"content":"| Find tasks             | `find` keyword(s)\u003cbr/\u003e**Example:** `find bread`                                                                         |","lastModifiedDate":"2023-02-27"},{"lineNumber":278,"author":{"gitId":"lil1n"},"content":"| Help                   | `help`                                                                                                                  |","lastModifiedDate":"2023-02-27"},{"lineNumber":279,"author":{"gitId":"lil1n"},"content":"| List                   | `list`                                                                                                                  |","lastModifiedDate":"2023-02-27"},{"lineNumber":280,"author":{"gitId":"lil1n"},"content":"| Mark task as done      | `mark` task number\u003cbr/\u003e**Example:** `mark 1`                                                                            |","lastModifiedDate":"2023-02-27"},{"lineNumber":281,"author":{"gitId":"lil1n"},"content":"| Mark task as not done  | `unmark` task number\u003cbr/\u003e**Example:** `unmark 1`                                                                        |","lastModifiedDate":"2023-02-27"}],"authorContributionMap":{"-":16,"lil1n":265}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.command.CommandResult;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import duke.data.Storage;","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"import java.io.File;","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    private final Ui ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    private final Storage storage;","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"     * Set up the required objects, loads up the data from the storage file","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"     * @param filePath a string representing the file path of data stored at","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"            storage.makeDirectory();","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"            File dataFile \u003d storage.openDataFile();","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"            taskList \u003d new TaskList(storage.importData(dataFile));","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"            // error from storage issues, exit","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"            ui.showStartingError();","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"            System.exit(1);","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"    /** Runs the program until termination */","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"    public void run() {","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"        ui.greetingMessage();","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"        runCommand();","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"        ExitCommand.exit(this.taskList, this.ui, this.storage);","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"    /** Reads the user command and executes it, until the exit command is received */","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"    public void runCommand() {","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"        Command command;","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"        String input \u003d ui.getUserCommand();","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"        while (!input.equals(ExitCommand.COMMAND_WORD)) {","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"            command \u003d new Parser().parseCommand(input);","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"            try {","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"                CommandResult outcome \u003d executeCommand(command);","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"                ui.showToUser(outcome.output);","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"                input \u003d ui.getUserCommand();","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"            } catch (NullPointerException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"                input \u003d ui.getUserCommand();","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"     * @param command command received from user","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"     * @return result of the command","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"lil1n"},"content":"    private CommandResult executeCommand(Command command) {","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"lil1n"},"content":"        command.setData(taskList);","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"lil1n"},"content":"        return command.execute();","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":71,"author":{"gitId":"lil1n"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-17"},{"lineNumber":72,"author":{"gitId":"lil1n"},"content":"        new Duke(Storage.FILE_PATH).run();","lastModifiedDate":"2023-02-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":3,"lil1n":71}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"/** Represents a command that adds task */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"public abstract class AddCommand extends Command {","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public static final String ADD_MESSAGE \u003d \" The following task has been added:\"","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"   %s\"","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \" There is now %d task(s) in total.\";","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    public static final String TODO_MESSAGE_USAGE \u003d \" \" + COMMAND_TODO + \": adds a todo task to the task list. \"","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Parameters: task name\"","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: \" + COMMAND_TODO + \" buy bread\";","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    public static final String DEADLINE_MESSAGE_USAGE \u003d \" \" + COMMAND_DEADLINE + \": adds a deadline task to the task list. \"","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Parameters: task name, deadline\"","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: \" + COMMAND_DEADLINE + \" eat bread /by today\";","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"    public static final String EVENT_MESSAGE_USAGE \u003d \" \" + COMMAND_EVENT + \": adds an event task to the task list. \"","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Parameters: task name, start date, end date\"","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: \" + COMMAND_EVENT + \" make bread /from today 3pm /to 5pm\";","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"    public String taskName;","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"    public AddCommand(String taskName) {","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"     * Generates the string to be shown to user when a task is added","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"     * @return string to be shown to user","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"    public String giveAddMessage() {","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"        String output \u003d Ui.SEGMENT_LINE;","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"        output \u003d String.join(Ui.NEW_LINE, output, AddCommand.ADD_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"        int taskCount \u003d taskList.getTaskCount();","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"        output \u003d output.replace(\"%s\", taskList.getTaskFullDetails(taskCount - 1));","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"        output \u003d output.replace(\"%d\", Integer.toString(taskCount));","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"        return output;","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":49}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"/** Represents an executable command */","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"    protected TaskList taskList;","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    public void setData(TaskList taskList) {","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    public abstract CommandResult execute();","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    public static String getFilteredTasksInformation(String output, TaskList taskList) {","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        for (int i \u003d 0; i \u003c taskList.getTaskCount(); i +\u003d 1) {","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"            int taskNumber \u003d i + 1;","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"            String taskInformation \u003d String.join(\"\", \" \", Integer.toString(taskNumber), \". \",","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"                    taskList.getTaskFullDetails(i));","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, output, taskInformation);","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"        return output;","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"lil1n":29}},{"path":"src/main/java/duke/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"/** Represents the result of a command execution */","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"public class CommandResult {","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"    public final String output;","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public CommandResult(String output) {","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"        this.output \u003d output;","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"lil1n":11}},{"path":"src/main/java/duke/command/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.task.DateTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"/** Finds tasks in task list that occurs on a given date */","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"public class DateCommand extends Command {","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_WORD \u003d \"date\";","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public static final String OUTPUT_MESSAGE \u003d \" The following task(s) occurs on %s:\";","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    public static final String NO_MENTIONED_TASK_DATE \u003d \" There are no tasks found with the date provided\";","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \" Invalid input! Valid input format: \\\"date \u003cyyyy/mm/dd\u003e\\\"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE_USAGE \u003d \" \" + COMMAND_WORD + \": shows tasks due on a given date. \"","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Parameters: date\"","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: \" + COMMAND_WORD + \" 2023/02/20\";","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    public LocalDate date;","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"    public DateCommand(LocalDate date) {","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"        String output \u003d Ui.SEGMENT_LINE;","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"        TaskList dueTasks \u003d taskList.getDueTasks(date);","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"        if (taskList.getTaskCount() \u003d\u003d 0) {","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, output, NO_MENTIONED_TASK_DATE);","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, output, OUTPUT_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"            output \u003d output.replace(\"%s\", date.format(DateTime.outDateFormatter));","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"            output \u003d getFilteredTasksInformation(output, dueTasks);","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"        return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"lil1n":47}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"/** Adds a deadline task */","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"public class DeadlineCommand extends AddCommand {","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"    public static final String MISSING_KEYWORD_MESSAGE \u003d","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"            \" Invalid input! Valid input format: \\\"deadline \u003ctask name\u003e /by \u003cdate\u003e\\\"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static final String INSUFFICIENT_FIELD_MESSAGE \u003d \" Invalid input! Please provide enough arguments! \"","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \" Valid input format: \\\"deadline \u003ctask name\u003e /by \u003cdate\u003e\\\"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    public String deadline;","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    public DeadlineCommand(String taskName, String deadline) {","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"        super(taskName);","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"        taskList.addTask(new Deadline(taskName, deadline));","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"        String output \u003d giveAddMessage();","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"        return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"lil1n":33}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"/** Deletes a task as referenced by a task number */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public static final String OUTPUT_MESSAGE \u003d \" Noted. Task removed: \";","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static final String REMAINING_TASK_MESSAGE \u003d \" You now have %d task(s) in the list.\";","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \" Invalid input! Valid input format: \\\"delete \u003cnumber\u003e\\\"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE_USAGE \u003d \" \" + COMMAND_WORD + \": deletes a task from the task list. \"","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Parameters: task number\"","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    public int taskNumber;","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    public DeleteCommand(int taskNumber) {","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"        String output \u003d Ui.SEGMENT_LINE;","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, output, OUTPUT_MESSAGE,","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"                    (\"   \" + taskList.getTaskFullDetails(taskNumber)), DeleteCommand.REMAINING_TASK_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"            int taskCount \u003d taskList.getTaskCount();","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"            output \u003d output.replace(\"%d\", Integer.toString(taskCount - 1));","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"            taskList.deleteTask(taskNumber);","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"            return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"            output \u003d Ui.craftExceedMessage(taskList.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"            return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":46}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"/** Adds an event task */","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"public class EventCommand extends AddCommand {","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public static final String INVALID_FORMAT_MESSAGE \u003d","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"            \" Invalid input! Valid input format: \\\"event \u003ctask name\u003e /from \u003cdate\u003e /to \u003cdate\u003e\\\"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public static final String INSUFFICIENT_FIELD_MESSAGE \u003d \" Invalid input! Please provide enough arguments! \"","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \" Valid input format: \\\"event \u003ctask name\u003e /from \u003cdate\u003e /to \u003cdate\u003e\\\"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public String startDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    public String endDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    public EventCommand(String taskName, String startDate, String endDate) {","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"        super(taskName);","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"        taskList.addTask(new Event(taskName, startDate, endDate));","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"        String output \u003d giveAddMessage();","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"        return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"lil1n":32}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.data.Storage;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"/** Terminates the program */","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"public class ExitCommand {","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static final String BYE_MESSAGE \u003d \" Bye! Hope to see you again soon!\";","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE_USAGE \u003d \" \" + COMMAND_WORD + \": exits the program. \"","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: \" + COMMAND_WORD;","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"     * Saves the data in task list into file and shows bye message","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"     * @param taskList task list containing the tasks","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"     * @param ui to be used for interaction with user","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"     * @param storage to be used for saving of tasks in task list into file","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    public static void exit(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"        storage.updateSavedData(taskList); // save data to file","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"        ui.byeMessage();","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":28}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"/** Finds tasks in task list that contains keyword[s] in the task name */","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    public static final String OUTPUT_MESSAGE \u003d \" Here are the matching tasks in your list:\";","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    public static final String NO_SIMILAR_TASK_MESSAGE \u003d","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"            \" There are no similar task in your list that matches the keyword[s] given\";","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE_USAGE \u003d \" find: find task[s] that contains keyword[s]\"","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Parameters: keyword\"","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: find bread\";","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    public String keyword;","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"        String output \u003d Ui.SEGMENT_LINE;","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"        TaskList matchingTasks \u003d taskList.findTasks(keyword);","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"        if (matchingTasks.getTaskCount() \u003d\u003d 0) {","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, output, NO_SIMILAR_TASK_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, output, OUTPUT_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"            output \u003d getFilteredTasksInformation(output, matchingTasks);","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"        return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"lil1n":43}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"/** sShows help instructions */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE_USAGE \u003d \" help: view all commands available. \"","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: help\";","lastModifiedDate":"2023-02-17"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"        String output \u003d Ui.SEGMENT_LINE;","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        output \u003d String.join(Ui.NEW_LINE, output, (AddCommand.TODO_MESSAGE_USAGE","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"                + Ui.NEW_LINE + Ui.NEW_LINE + AddCommand.DEADLINE_MESSAGE_USAGE","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"                + Ui.NEW_LINE + Ui.NEW_LINE + AddCommand.EVENT_MESSAGE_USAGE","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"                + Ui.NEW_LINE + Ui.NEW_LINE + ListCommand.MESSAGE_USAGE","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"                + Ui.NEW_LINE + Ui.NEW_LINE + MarkCommand.MESSAGE_USAGE","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"                + Ui.NEW_LINE + Ui.NEW_LINE + UnmarkCommand.MESSAGE_USAGE","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"                + Ui.NEW_LINE + Ui.NEW_LINE + DeleteCommand.MESSAGE_USAGE","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"                + Ui.NEW_LINE + Ui.NEW_LINE + FindCommand.MESSAGE_USAGE","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"                + Ui.NEW_LINE + Ui.NEW_LINE + DateCommand.MESSAGE_USAGE","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"                + Ui.NEW_LINE + Ui.NEW_LINE + HelpCommand.MESSAGE_USAGE","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"                + Ui.NEW_LINE + Ui.NEW_LINE + ExitCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"        return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":34}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.error.ErrorTypes;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"/** Represents an invalid command and feedback to user */","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE \u003d \" Invalid input! Please provide a valid input!\"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \" Type \\\"help\\\" for the list of commands supported\";","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public ErrorTypes error;","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public InvalidCommand(ErrorTypes error) {","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"        this.error \u003d error;","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"        String output;","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"        switch (error) {","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"        case INVALID_INPUT:","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, Ui.SEGMENT_LINE, MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"        case INVALID_DATE:","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, Ui.SEGMENT_LINE, DateCommand.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"        default:","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"            output \u003d \"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"        return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"lil1n":38}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"/** Shows all tasks and their information in the task list */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public static final String EMPTY_MESSAGE \u003d \" The list is empty!\";","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE \u003d \" Here are the tasks in your lists:\";","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE_USAGE \u003d \" list\" + \": view all tasks in the task list. \"","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: list\";","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"        String output \u003d Ui.SEGMENT_LINE;","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"        int taskCount \u003d taskList.getTaskCount();","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"        boolean isTaskCountZero \u003d (taskCount \u003d\u003d 0);","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"        if (isTaskCountZero) {","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, output, ListCommand.EMPTY_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, output, ListCommand.MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"            for (int i \u003d 0; i \u003c taskCount; i +\u003d 1) {","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"                output \u003d String.join(Ui.NEW_LINE, output, (\" \" + (i + 1) + \".\" + taskList.getTaskFullDetails(i)));","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"        return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":37}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"/** Marks a task as referenced by a task number */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE \u003d \" Awesome! I\u0027ve marked this task as done:\";","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \" Invalid input! Valid input format: \\\"mark \u003cnumber\u003e\\\"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE_USAGE \u003d \" \" + COMMAND_WORD + \": marks a task from the task list as done. \"","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Parameters: task number\"","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    public int taskNumber;","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    public MarkCommand(int taskNumber) { // todo error handling","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"        String output \u003d Ui.SEGMENT_LINE;","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"            taskList.markTaskDone(taskNumber);","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, output, MESSAGE,","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"                    (\"   \" + taskList.getTaskFullDetails(taskNumber)));","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"            return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"            output \u003d Ui.craftExceedMessage(taskList.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"            return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":42}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"/** Adds a todo task */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"public class TodoCommand extends AddCommand {","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \" Invalid input! Valid input format: \\\"todo \u003ctask name\u003e\\\"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public TodoCommand(String taskName) {","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"        super(taskName);","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        taskList.addTask(new Todo(taskName));","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"        String output \u003d giveAddMessage();","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"        return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"lil1n":25}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.command;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"/** Unmarks a task as referenced by a task number */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE \u003d \" OK, I\u0027ve marked this task as not done yet:\";","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \" Invalid input! Valid input format: \\\"unmark \u003cnumber\u003e\\\"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public static final String MESSAGE_USAGE \u003d \" \" + COMMAND_WORD + \": marks a task from the task list as not done. \"","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Parameters: task number\"","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"            + Ui.NEW_LINE + \"  Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    public int taskNumber;","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    public UnmarkCommand(int taskNumber) {","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"     * Executes the command and returns the result","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"     * @return CommandResult with the relevant output message as its parameter","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"    public CommandResult execute() {","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"        String output \u003d Ui.SEGMENT_LINE;","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"            taskList.markTaskNotDone(taskNumber);","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"            output \u003d String.join(Ui.NEW_LINE, output, MESSAGE,","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"                    (\"   \" + taskList.getTaskFullDetails(taskNumber)));","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"            return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"            output \u003d Ui.craftExceedMessage(taskList.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"            return new CommandResult(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":42}},{"path":"src/main/java/duke/data/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.data;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.error.DukeException;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.error.ErrorTypes;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import duke.error.Error;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"import duke.ui.ErrorMessages;","lastModifiedDate":"2023-02-17"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"import duke.ui.Symbols;","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"import java.io.File;","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"/** Deals with loading tasks from file and saving tasks in file */","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"public class Storage {","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"    public static final String DIRECTORY \u003d \"data\";","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"    public static final String FILE_PATH \u003d \"data\\\\duke.txt\";","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"    public final String path;","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"        path \u003d filePath;","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"     * Checks whether the specified directory is present and creates one if absent","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"     * @throws DukeException when directory does not exist and failed to create a directory","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"    public void makeDirectory() throws DukeException {","lastModifiedDate":"2023-02-17"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"        File dataDirectory \u003d new File(DIRECTORY);","lastModifiedDate":"2023-02-17"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"        if (!dataDirectory.exists() \u0026\u0026 !dataDirectory.mkdir()) {","lastModifiedDate":"2023-02-17"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"            Error.throwError(ErrorTypes.ERROR_WITH_DIRECTORY);","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"     * Tries to open the file specified by FILE_PATH by creating the file if it does not exist","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"     * @return the file opened","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"    public File openDataFile() {","lastModifiedDate":"2023-02-17"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"        File dataFile \u003d new File(FILE_PATH);","lastModifiedDate":"2023-02-17"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-17"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"            dataFile.createNewFile();","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"            System.out.println(ErrorMessages.CREATE_NEW_FILE_EXCEPTION_MESSAGE.MESSAGE);","lastModifiedDate":"2023-02-19"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":60,"author":{"gitId":"lil1n"},"content":"        return dataFile;","lastModifiedDate":"2023-02-17"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"     * Imports the task data from the file provided into an ArrayList","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"lil1n"},"content":"     * @param dataFile file storing the data","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"lil1n"},"content":"     * @return array list of task representing the task list","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"lil1n"},"content":"    public ArrayList\u003cTask\u003e importData(File dataFile) {","lastModifiedDate":"2023-02-17"},{"lineNumber":70,"author":{"gitId":"lil1n"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-17"},{"lineNumber":71,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-17"},{"lineNumber":72,"author":{"gitId":"lil1n"},"content":"            Scanner reader \u003d new Scanner(dataFile);","lastModifiedDate":"2023-02-17"},{"lineNumber":73,"author":{"gitId":"lil1n"},"content":"            while (reader.hasNext()) {","lastModifiedDate":"2023-02-17"},{"lineNumber":74,"author":{"gitId":"lil1n"},"content":"                String task \u003d reader.nextLine();","lastModifiedDate":"2023-02-17"},{"lineNumber":75,"author":{"gitId":"lil1n"},"content":"                decodeTaskData(task, taskList);","lastModifiedDate":"2023-02-17"},{"lineNumber":76,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-17"},{"lineNumber":77,"author":{"gitId":"lil1n"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-17"},{"lineNumber":78,"author":{"gitId":"lil1n"},"content":"            System.out.print(ErrorMessages.FILE_NOT_FOUND_EXCEPTION_MESSAGE.MESSAGE);","lastModifiedDate":"2023-02-19"},{"lineNumber":79,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":80,"author":{"gitId":"lil1n"},"content":"        return taskList;","lastModifiedDate":"2023-02-17"},{"lineNumber":81,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":82,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":83,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"lil1n"},"content":"     * Decodes the data from the file to be saved into Duke","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"lil1n"},"content":"     * @param task the line input from the data file containing the information of a task","lastModifiedDate":"2023-02-20"},{"lineNumber":87,"author":{"gitId":"lil1n"},"content":"     * @param taskList the task list to be used when Duke is running","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"lil1n"},"content":"    public void decodeTaskData(String task, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"lil1n"},"content":"        String[] taskInfo \u003d task.split(Symbols.DECODE_DATA_DELIMITER);","lastModifiedDate":"2023-02-19"},{"lineNumber":91,"author":{"gitId":"lil1n"},"content":"        if (taskInfo[0].equals(Symbols.TODO)) {","lastModifiedDate":"2023-02-17"},{"lineNumber":92,"author":{"gitId":"lil1n"},"content":"            taskList.add(new Todo(taskInfo[2]));","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"lil1n"},"content":"        } else if (taskInfo[0].equals(Symbols.DEADLINE)) {","lastModifiedDate":"2023-02-17"},{"lineNumber":94,"author":{"gitId":"lil1n"},"content":"            taskList.add(new Deadline(taskInfo[2], taskInfo[3]));","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-02-17"},{"lineNumber":96,"author":{"gitId":"lil1n"},"content":"            String[] timeInterval \u003d taskInfo[3].split(Symbols.DATA_EVENT_DATE_DELIMITER);","lastModifiedDate":"2023-02-17"},{"lineNumber":97,"author":{"gitId":"lil1n"},"content":"            taskList.add(new Event(taskInfo[2], timeInterval[0], timeInterval[1]));","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":99,"author":{"gitId":"lil1n"},"content":"        if (taskInfo[1].equals(Symbols.DATA_MARK)) {","lastModifiedDate":"2023-02-17"},{"lineNumber":100,"author":{"gitId":"lil1n"},"content":"            int taskPosition \u003d taskList.size() - 1;","lastModifiedDate":"2023-02-20"},{"lineNumber":101,"author":{"gitId":"lil1n"},"content":"            taskList.get(taskPosition).markAsDone();","lastModifiedDate":"2023-02-20"},{"lineNumber":102,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":103,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":104,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":105,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":106,"author":{"gitId":"lil1n"},"content":"     * Encodes the data from the task list to be saved into file","lastModifiedDate":"2023-02-20"},{"lineNumber":107,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":108,"author":{"gitId":"lil1n"},"content":"     * @param taskList task list containing the tasks to be saved into file","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"lil1n"},"content":"     * @param fileData FileWriter opened with the FILE_PATH","lastModifiedDate":"2023-02-20"},{"lineNumber":110,"author":{"gitId":"lil1n"},"content":"     * @throws IOException when I/O error occurs","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":112,"author":{"gitId":"lil1n"},"content":"    public void encodeAndWriteTask(TaskList taskList, FileWriter fileData) throws IOException {","lastModifiedDate":"2023-02-20"},{"lineNumber":113,"author":{"gitId":"lil1n"},"content":"        int taskCount \u003d taskList.getTaskCount();","lastModifiedDate":"2023-02-20"},{"lineNumber":114,"author":{"gitId":"lil1n"},"content":"        for (int i \u003d 0; i \u003c taskCount; i +\u003d 1) {","lastModifiedDate":"2023-02-20"},{"lineNumber":115,"author":{"gitId":"lil1n"},"content":"            String taskData \u003d taskList.getTaskEncoding(i);","lastModifiedDate":"2023-02-17"},{"lineNumber":116,"author":{"gitId":"lil1n"},"content":"            fileData.write(taskData + Ui.NEW_LINE);","lastModifiedDate":"2023-02-17"},{"lineNumber":117,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":118,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":119,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":120,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":121,"author":{"gitId":"lil1n"},"content":"     * Saves the data in task list into file","lastModifiedDate":"2023-02-20"},{"lineNumber":122,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":123,"author":{"gitId":"lil1n"},"content":"     * @param taskList task list containing the tasks to be saved into file","lastModifiedDate":"2023-02-20"},{"lineNumber":124,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":125,"author":{"gitId":"lil1n"},"content":"    public void updateSavedData(TaskList taskList) {","lastModifiedDate":"2023-02-20"},{"lineNumber":126,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-17"},{"lineNumber":127,"author":{"gitId":"lil1n"},"content":"            FileWriter fileData \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2023-02-17"},{"lineNumber":128,"author":{"gitId":"lil1n"},"content":"            encodeAndWriteTask(taskList, fileData);","lastModifiedDate":"2023-02-17"},{"lineNumber":129,"author":{"gitId":"lil1n"},"content":"            fileData.close();","lastModifiedDate":"2023-02-17"},{"lineNumber":130,"author":{"gitId":"lil1n"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-17"},{"lineNumber":131,"author":{"gitId":"lil1n"},"content":"            System.out.println(ErrorMessages.IO_EXCEPTION_MESSAGE.MESSAGE);","lastModifiedDate":"2023-02-19"},{"lineNumber":132,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":133,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":134,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":134}},{"path":"src/main/java/duke/error/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.error;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"/** Duke specific error */","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"lil1n":5}},{"path":"src/main/java/duke/error/Error.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.error;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"import duke.command.DateCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"import duke.command.InvalidCommand;","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"import duke.ui.ErrorMessages;","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"/** Feedback to user the relevant error message and throws error */","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"public class Error {","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"     * Shows error message to user and throws DukeException","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"     * @param e type of error to be shown to user","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"     * @throws DukeException thrown after displaying error message","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"    public static void throwError(ErrorTypes e) throws DukeException {","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"        switch (e) {","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"        case INVALID_MARK_COMMAND:","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"            Ui.showError(MarkCommand.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"        case INVALID_UNMARK_COMMAND:","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"            Ui.showError(UnmarkCommand.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"        case INVALID_TODO:","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"            Ui.showError(TodoCommand.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"        case INVALID_DEADLINE_COMMAND:","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"            Ui.showError(DeadlineCommand.MISSING_KEYWORD_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"        case INSUFFICIENT_DEADLINE_ARGUMENT:","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"            Ui.showError(DeadlineCommand.INSUFFICIENT_FIELD_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"        case INVALID_EVENT_COMMAND:","lastModifiedDate":"2023-02-17"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"            Ui.showError(EventCommand.INVALID_FORMAT_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-17"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"        case INSUFFICIENT_EVENT_ARGUMENT:","lastModifiedDate":"2023-02-17"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"            Ui.showError(EventCommand.INSUFFICIENT_FIELD_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"        case INVALID_DELETE_COMMAND:","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"            Ui.showError(DeleteCommand.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-19"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"        case ERROR_WITH_DIRECTORY:","lastModifiedDate":"2023-02-19"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"            Ui.showError(ErrorMessages.ERROR_IN_SETTING_UP.MESSAGE);","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-17"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"        case INVALID_FIND_COMMAND:","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"            Ui.showError(ErrorMessages.INVALID_FIND_MESSAGE.MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"        case INVALID_DATE:","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"            Ui.showError(DateCommand.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"        default:","lastModifiedDate":"2023-02-17"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"            Ui.showError(InvalidCommand.MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lil1n"},"content":"            break;","lastModifiedDate":"2023-02-17"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"        throw new DukeException();","lastModifiedDate":"2023-02-17"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":64}},{"path":"src/main/java/duke/error/ErrorTypes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.error;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"/** The possible errors used in Duke */","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"public enum ErrorTypes {","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"    INVALID_MARK_COMMAND,","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"    INVALID_UNMARK_COMMAND,","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"    INVALID_INPUT,","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    INVALID_TODO,","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"    INVALID_DEADLINE_COMMAND,","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    INSUFFICIENT_DEADLINE_ARGUMENT,","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    INVALID_EVENT_COMMAND,","lastModifiedDate":"2023-02-17"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    INSUFFICIENT_EVENT_ARGUMENT,","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    INVALID_DELETE_COMMAND,","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    ERROR_WITH_DIRECTORY,","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    INVALID_COMMAND,","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    INVALID_FIND_COMMAND,","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    INVALID_DATE","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"lil1n":18}},{"path":"src/main/java/duke/parser/InputValidity.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.parser;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"import duke.error.DukeException;","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"import duke.error.ErrorTypes;","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"import duke.error.Error;","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"/** Checks input validity */","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"public class InputValidity {","lastModifiedDate":"2023-02-17"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    private static final int MINIMUM_TODO_LENGTH \u003d 2;","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    private static final int MINIMUM_DEADLINE_LENGTH \u003d 4;","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    private static final int MINIMUM_EVENT_LENGTH \u003d 6;","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"    private static final int VALID_LENGTH_TWO \u003d 2;","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"    protected static final String DEADLINE_DELIMITER \u003d \" /by \";","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"    protected static final String EVENT_FROM_DELIMITER \u003d \" /from \";","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"    protected static final String EVENT_TO_DELIMITER \u003d \" /to \";","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"     * Checks whether the input given by user is a valid todo command","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"     * @param input input given by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"     * @throws DukeException when the input provided by user does not have sufficient parameters","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"    protected static void checkTodo(String input) throws DukeException {","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"        String[] arrayOfInput \u003d input.split(\" \");","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"        if (arrayOfInput.length \u003c MINIMUM_TODO_LENGTH) {","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"            Error.throwError(ErrorTypes.INVALID_TODO);","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"     * Checks whether the input given by user is a valid deadline command","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"     * @param input input given by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"     * @throws DukeException when the input provided by user is of incorrect format or does not have","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"     *         sufficient parameters","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"    protected static void checkDeadline(String input) throws DukeException {","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"        if (!input.contains(DEADLINE_DELIMITER)) {","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"            Error.throwError(ErrorTypes.INVALID_DEADLINE_COMMAND);","lastModifiedDate":"2023-02-17"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"        String[] arrayInput \u003d input.split(\" \");","lastModifiedDate":"2023-02-17"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"        if (arrayInput.length \u003c MINIMUM_DEADLINE_LENGTH) {","lastModifiedDate":"2023-02-17"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"            Error.throwError(ErrorTypes.INSUFFICIENT_DEADLINE_ARGUMENT);","lastModifiedDate":"2023-02-17"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"     * Checks whether the input given by user is a valid event command","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lil1n"},"content":"     * @param input input given by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"     * @throws DukeException when the input provided by user is of incorrect format or does not have","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"     *         sufficient parameters","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"    protected static void checkValidEvent(String input) throws DukeException {","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lil1n"},"content":"        if ((!input.contains(EVENT_FROM_DELIMITER) || !input.contains(EVENT_TO_DELIMITER))","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"lil1n"},"content":"                || (input.indexOf(EVENT_FROM_DELIMITER) \u003e input.indexOf(EVENT_TO_DELIMITER))) {","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"lil1n"},"content":"            Error.throwError(ErrorTypes.INVALID_EVENT_COMMAND);","lastModifiedDate":"2023-02-17"},{"lineNumber":68,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":69,"author":{"gitId":"lil1n"},"content":"        String[] arrayInput \u003d input.split(\" \");","lastModifiedDate":"2023-02-17"},{"lineNumber":70,"author":{"gitId":"lil1n"},"content":"        if (arrayInput.length \u003c MINIMUM_EVENT_LENGTH) {","lastModifiedDate":"2023-02-17"},{"lineNumber":71,"author":{"gitId":"lil1n"},"content":"            Error.throwError(ErrorTypes.INSUFFICIENT_EVENT_ARGUMENT);","lastModifiedDate":"2023-02-17"},{"lineNumber":72,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":73,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":74,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"lil1n"},"content":"     * Checks whether a given string only contains digit characters","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"lil1n"},"content":"     * @param input input given by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"lil1n"},"content":"     * @return true if input only contains digit characters, false otherwise","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"lil1n"},"content":"    private static boolean isStringOfInteger(String input) {","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"lil1n"},"content":"        // takes in a string and checks whether the string only contains digits characters","lastModifiedDate":"2023-02-17"},{"lineNumber":83,"author":{"gitId":"lil1n"},"content":"        input \u003d input.trim();","lastModifiedDate":"2023-02-17"},{"lineNumber":84,"author":{"gitId":"lil1n"},"content":"        char[] inputInArray \u003d input.toCharArray();","lastModifiedDate":"2023-02-17"},{"lineNumber":85,"author":{"gitId":"lil1n"},"content":"        for (char c : inputInArray) {","lastModifiedDate":"2023-02-17"},{"lineNumber":86,"author":{"gitId":"lil1n"},"content":"            if (!Character.isDigit(c)) {","lastModifiedDate":"2023-02-17"},{"lineNumber":87,"author":{"gitId":"lil1n"},"content":"                return false;","lastModifiedDate":"2023-02-17"},{"lineNumber":88,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-17"},{"lineNumber":89,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":90,"author":{"gitId":"lil1n"},"content":"        return true;","lastModifiedDate":"2023-02-17"},{"lineNumber":91,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":92,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":93,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"lil1n"},"content":"     * Checks whether the input provided by user for mark/unmark/delete is valid","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"lil1n"},"content":"     * @param input an array of the user input, separated by \" \"","lastModifiedDate":"2023-02-20"},{"lineNumber":97,"author":{"gitId":"lil1n"},"content":"     * @param command command word provided by user: mark/unmark/delete","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"lil1n"},"content":"     * @throws DukeException when insufficient parameters are provided or when wrong parameter format is given","lastModifiedDate":"2023-02-20"},{"lineNumber":99,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"lil1n"},"content":"     protected static void checkValid(String[] input, String command) throws DukeException {","lastModifiedDate":"2023-02-20"},{"lineNumber":101,"author":{"gitId":"lil1n"},"content":"        boolean isTwoWordInput \u003d (input.length \u003d\u003d VALID_LENGTH_TWO);","lastModifiedDate":"2023-02-17"},{"lineNumber":102,"author":{"gitId":"lil1n"},"content":"        if (!isTwoWordInput || !isStringOfInteger(input[1])) {","lastModifiedDate":"2023-02-17"},{"lineNumber":103,"author":{"gitId":"lil1n"},"content":"            switch (command) {","lastModifiedDate":"2023-02-17"},{"lineNumber":104,"author":{"gitId":"lil1n"},"content":"            case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-17"},{"lineNumber":105,"author":{"gitId":"lil1n"},"content":"                // user only provided \"mark\" || user provided \"mark \u003cnot digit chars\u003e\"","lastModifiedDate":"2023-02-17"},{"lineNumber":106,"author":{"gitId":"lil1n"},"content":"                Error.throwError(ErrorTypes.INVALID_MARK_COMMAND);","lastModifiedDate":"2023-02-17"},{"lineNumber":107,"author":{"gitId":"lil1n"},"content":"                break;","lastModifiedDate":"2023-02-17"},{"lineNumber":108,"author":{"gitId":"lil1n"},"content":"            case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-17"},{"lineNumber":109,"author":{"gitId":"lil1n"},"content":"                // user only provided \"unmark\" || user provided \"unmark \u003cnot digit chars\u003e\"","lastModifiedDate":"2023-02-17"},{"lineNumber":110,"author":{"gitId":"lil1n"},"content":"                Error.throwError(ErrorTypes.INVALID_UNMARK_COMMAND);","lastModifiedDate":"2023-02-17"},{"lineNumber":111,"author":{"gitId":"lil1n"},"content":"                break;","lastModifiedDate":"2023-02-17"},{"lineNumber":112,"author":{"gitId":"lil1n"},"content":"            case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-17"},{"lineNumber":113,"author":{"gitId":"lil1n"},"content":"                // user only provided \"delete\" || user provided \"delete \u003cnot digit chars\u003e\"","lastModifiedDate":"2023-02-17"},{"lineNumber":114,"author":{"gitId":"lil1n"},"content":"                Error.throwError(ErrorTypes.INVALID_DELETE_COMMAND);","lastModifiedDate":"2023-02-17"},{"lineNumber":115,"author":{"gitId":"lil1n"},"content":"                break;","lastModifiedDate":"2023-02-17"},{"lineNumber":116,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-17"},{"lineNumber":117,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":118,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":119,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":121,"author":{"gitId":"lil1n"},"content":"     * Checks whether the input provided by user for find command is valid","lastModifiedDate":"2023-02-21"},{"lineNumber":122,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":123,"author":{"gitId":"lil1n"},"content":"     * @param input input given by the user","lastModifiedDate":"2023-02-21"},{"lineNumber":124,"author":{"gitId":"lil1n"},"content":"     * @throws DukeException when the find command is invalid","lastModifiedDate":"2023-02-21"},{"lineNumber":125,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":126,"author":{"gitId":"lil1n"},"content":"    protected static void checkValidFind(String input) throws DukeException {","lastModifiedDate":"2023-02-20"},{"lineNumber":127,"author":{"gitId":"lil1n"},"content":"        String[] arrayOfInput \u003d input.split(\" \");","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"lil1n"},"content":"        boolean isAtLeastTwoWord \u003d (arrayOfInput.length \u003e\u003d VALID_LENGTH_TWO);","lastModifiedDate":"2023-02-20"},{"lineNumber":129,"author":{"gitId":"lil1n"},"content":"        if (!isAtLeastTwoWord) {","lastModifiedDate":"2023-02-20"},{"lineNumber":130,"author":{"gitId":"lil1n"},"content":"            Error.throwError(ErrorTypes.INVALID_FIND_COMMAND);","lastModifiedDate":"2023-02-20"},{"lineNumber":131,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":132,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":133,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":133}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.parser;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.command.*;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import duke.error.DukeException;","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import duke.error.ErrorTypes;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"import duke.task.DateTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"/** Parses user input  */","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"public class Parser {","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"     * Parses user input into command for execution","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"     * @param input input given by user","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"    public Command parseCommand(String input) {","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"        String[] arrayOfInput \u003d input.split(\" \");","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        arrayOfInput[0] \u003d arrayOfInput[0].trim();","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"        switch (arrayOfInput[0]) {","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"        case (ListCommand.COMMAND_WORD):","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"            return new ListCommand();","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"        case (HelpCommand.COMMAND_WORD):","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"        case (MarkCommand.COMMAND_WORD):","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"            return prepareMarkUnmarkDelete(arrayOfInput, MarkCommand.COMMAND_WORD);","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"        case (UnmarkCommand.COMMAND_WORD):","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"            return prepareMarkUnmarkDelete(arrayOfInput, UnmarkCommand.COMMAND_WORD);","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"        case (DeleteCommand.COMMAND_WORD):","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"            return prepareMarkUnmarkDelete(arrayOfInput, DeleteCommand.COMMAND_WORD);","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"        case (AddCommand.COMMAND_TODO):","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"            return prepareTodoCommand(input);","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"        case (AddCommand.COMMAND_DEADLINE):","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"            return prepareDeadlineCommand(input);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"        case (AddCommand.COMMAND_EVENT):","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"            return prepareEventCommand(input);","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"        case (FindCommand.COMMAND_WORD):","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"            return prepareFindCOmmand(input);","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"        case (DateCommand.COMMAND_WORD):","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"            return prepareDateCommand(input);","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"        default:","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"            return new InvalidCommand(ErrorTypes.INVALID_INPUT);","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"     * Checks and prepares the parameters required to initiate a new mark/unmark/delete command and creates the","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"     * relevant command","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"     * @param input an array of the user input, separated by \" \"","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"     * @param command command given by user: mark/unmark/delete","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"     * @return the command based on the input provided by user","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"     * @throws IndexOutOfBoundsException when task number provided by user \u003e total task count","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"    private Command prepareMarkUnmarkDelete(String[] input, String command) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"            int taskNumber;","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lil1n"},"content":"            switch (command) {","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"            case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"                taskNumber \u003d Integer.parseInt(parseMarkUnmarkDelete(input, MarkCommand.COMMAND_WORD)) - 1;","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"                return new MarkCommand(taskNumber);","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"            case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lil1n"},"content":"                taskNumber \u003d Integer.parseInt(parseMarkUnmarkDelete(input, UnmarkCommand.COMMAND_WORD)) - 1;","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"lil1n"},"content":"                return new UnmarkCommand(taskNumber);","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"lil1n"},"content":"            case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"lil1n"},"content":"                taskNumber \u003d Integer.parseInt(parseMarkUnmarkDelete(input, DeleteCommand.COMMAND_WORD)) - 1;","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"lil1n"},"content":"                return new DeleteCommand(taskNumber);","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"lil1n"},"content":"            default:","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"lil1n"},"content":"                return new InvalidCommand(ErrorTypes.INVALID_COMMAND);","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"lil1n"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"lil1n"},"content":"            return new InvalidCommand(ErrorTypes.INVALID_COMMAND);","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"lil1n"},"content":"     * Checks and prepares the parameters required to initiate a todo command and creates the relevant command","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"lil1n"},"content":"     * @param input input given by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"lil1n"},"content":"     * @return the command based on the input provided by user","lastModifiedDate":"2023-02-20"},{"lineNumber":83,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"lil1n"},"content":"    private Command prepareTodoCommand(String input) {","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"lil1n"},"content":"            InputValidity.checkTodo(input);","lastModifiedDate":"2023-02-17"},{"lineNumber":87,"author":{"gitId":"lil1n"},"content":"            String taskName \u003d input.replace(AddCommand.COMMAND_TODO, \"\").trim();","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"lil1n"},"content":"            return new TodoCommand(taskName);","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"lil1n"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"lil1n"},"content":"            return new InvalidCommand(ErrorTypes.INVALID_TODO);","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":93,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":94,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"lil1n"},"content":"     * Checks and prepares the parameters required to initiate a deadline command and creates the relevant command","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":97,"author":{"gitId":"lil1n"},"content":"     * @param input input given by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"lil1n"},"content":"     * @return the command based on the input provided by user","lastModifiedDate":"2023-02-20"},{"lineNumber":99,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"lil1n"},"content":"    private Command prepareDeadlineCommand(String input) {","lastModifiedDate":"2023-02-20"},{"lineNumber":101,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":102,"author":{"gitId":"lil1n"},"content":"            InputValidity.checkDeadline(input);","lastModifiedDate":"2023-02-17"},{"lineNumber":103,"author":{"gitId":"lil1n"},"content":"            input \u003d input.replace(AddCommand.COMMAND_DEADLINE, \"\").trim();","lastModifiedDate":"2023-02-20"},{"lineNumber":104,"author":{"gitId":"lil1n"},"content":"            String taskName \u003d input.split(InputValidity.DEADLINE_DELIMITER, 2)[0].trim();","lastModifiedDate":"2023-02-20"},{"lineNumber":105,"author":{"gitId":"lil1n"},"content":"            String deadline \u003d input.split(InputValidity.DEADLINE_DELIMITER, 2)[1].trim();","lastModifiedDate":"2023-02-20"},{"lineNumber":106,"author":{"gitId":"lil1n"},"content":"            return new DeadlineCommand(taskName, deadline);","lastModifiedDate":"2023-02-20"},{"lineNumber":107,"author":{"gitId":"lil1n"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":108,"author":{"gitId":"lil1n"},"content":"            return new InvalidCommand(ErrorTypes.INVALID_DEADLINE_COMMAND);","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":110,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":111,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":112,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":113,"author":{"gitId":"lil1n"},"content":"     * Checks and prepares the parameters required to initiate an event command and creates the relevant command","lastModifiedDate":"2023-02-20"},{"lineNumber":114,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":115,"author":{"gitId":"lil1n"},"content":"     * @param input input given by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":116,"author":{"gitId":"lil1n"},"content":"     * @return the command based on the input provided by user","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":118,"author":{"gitId":"lil1n"},"content":"    private Command prepareEventCommand(String input) {","lastModifiedDate":"2023-02-20"},{"lineNumber":119,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"lil1n"},"content":"            InputValidity.checkValidEvent(input);","lastModifiedDate":"2023-02-17"},{"lineNumber":121,"author":{"gitId":"lil1n"},"content":"            input \u003d input.replace(AddCommand.COMMAND_EVENT, \"\").trim();","lastModifiedDate":"2023-02-20"},{"lineNumber":122,"author":{"gitId":"lil1n"},"content":"            String taskName \u003d input.split(InputValidity.EVENT_FROM_DELIMITER, 2)[0].trim();","lastModifiedDate":"2023-02-20"},{"lineNumber":123,"author":{"gitId":"lil1n"},"content":"            input \u003d input.replace(taskName + InputValidity.EVENT_FROM_DELIMITER, \"\").trim();","lastModifiedDate":"2023-02-20"},{"lineNumber":124,"author":{"gitId":"lil1n"},"content":"            String startDate \u003d input.split(InputValidity.EVENT_TO_DELIMITER, 2)[0].trim();","lastModifiedDate":"2023-02-20"},{"lineNumber":125,"author":{"gitId":"lil1n"},"content":"            String endDate \u003d input.split(InputValidity.EVENT_TO_DELIMITER, 2)[1].trim();","lastModifiedDate":"2023-02-20"},{"lineNumber":126,"author":{"gitId":"lil1n"},"content":"            return new EventCommand(taskName, startDate, endDate);","lastModifiedDate":"2023-02-20"},{"lineNumber":127,"author":{"gitId":"lil1n"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"lil1n"},"content":"            return new InvalidCommand(ErrorTypes.INVALID_EVENT_COMMAND);","lastModifiedDate":"2023-02-20"},{"lineNumber":129,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":130,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":131,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":132,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":133,"author":{"gitId":"lil1n"},"content":"     * Checks whether the command provided by user is valid for mark, unmark and delete","lastModifiedDate":"2023-02-20"},{"lineNumber":134,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":135,"author":{"gitId":"lil1n"},"content":"     * @param userInput an array of the user input, separated by \" \"","lastModifiedDate":"2023-02-20"},{"lineNumber":136,"author":{"gitId":"lil1n"},"content":"     * @param command command word provided by user: mark/unmark/delete","lastModifiedDate":"2023-02-20"},{"lineNumber":137,"author":{"gitId":"lil1n"},"content":"     * @return string representing the task number","lastModifiedDate":"2023-02-20"},{"lineNumber":138,"author":{"gitId":"lil1n"},"content":"     * @throws DukeException when command provided by user is invalid","lastModifiedDate":"2023-02-20"},{"lineNumber":139,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":140,"author":{"gitId":"lil1n"},"content":"    private String parseMarkUnmarkDelete(String[] userInput, String command) throws DukeException {","lastModifiedDate":"2023-02-20"},{"lineNumber":141,"author":{"gitId":"lil1n"},"content":"        InputValidity.checkValid(userInput, command);","lastModifiedDate":"2023-02-20"},{"lineNumber":142,"author":{"gitId":"lil1n"},"content":"        return userInput[1].trim();","lastModifiedDate":"2023-02-17"},{"lineNumber":143,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":144,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":145,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":146,"author":{"gitId":"lil1n"},"content":"     * Checks and prepares the parameters required to initiate a date command and create the relevant command","lastModifiedDate":"2023-02-21"},{"lineNumber":147,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":148,"author":{"gitId":"lil1n"},"content":"     * @param input input given by the user","lastModifiedDate":"2023-02-21"},{"lineNumber":149,"author":{"gitId":"lil1n"},"content":"     * @return the command based on the input provided by user","lastModifiedDate":"2023-02-21"},{"lineNumber":150,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":151,"author":{"gitId":"lil1n"},"content":"    private Command prepareFindCOmmand(String input) {","lastModifiedDate":"2023-02-20"},{"lineNumber":152,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":153,"author":{"gitId":"lil1n"},"content":"            InputValidity.checkValidFind(input);","lastModifiedDate":"2023-02-20"},{"lineNumber":154,"author":{"gitId":"lil1n"},"content":"            String keyword \u003d input.replace(\"find \", \"\").trim();","lastModifiedDate":"2023-02-20"},{"lineNumber":155,"author":{"gitId":"lil1n"},"content":"            return new FindCommand(keyword);","lastModifiedDate":"2023-02-20"},{"lineNumber":156,"author":{"gitId":"lil1n"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":157,"author":{"gitId":"lil1n"},"content":"            return new InvalidCommand(ErrorTypes.INVALID_FIND_COMMAND);","lastModifiedDate":"2023-02-20"},{"lineNumber":158,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":159,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":160,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":161,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":162,"author":{"gitId":"lil1n"},"content":"    * Checks and prepares the parameters required to initiate a date command and creates the relevant command","lastModifiedDate":"2023-02-21"},{"lineNumber":163,"author":{"gitId":"lil1n"},"content":"    *","lastModifiedDate":"2023-02-20"},{"lineNumber":164,"author":{"gitId":"lil1n"},"content":"     * @param input input given by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":165,"author":{"gitId":"lil1n"},"content":"     * @return the command based on the input provided by user","lastModifiedDate":"2023-02-20"},{"lineNumber":166,"author":{"gitId":"lil1n"},"content":"    */","lastModifiedDate":"2023-02-20"},{"lineNumber":167,"author":{"gitId":"lil1n"},"content":"    private Command prepareDateCommand(String input) {","lastModifiedDate":"2023-02-20"},{"lineNumber":168,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":169,"author":{"gitId":"lil1n"},"content":"            input \u003d input.replace(DateCommand.COMMAND_WORD, \"\");","lastModifiedDate":"2023-02-20"},{"lineNumber":170,"author":{"gitId":"lil1n"},"content":"            LocalDate date \u003d LocalDate.parse(input.trim(), DateTime.inputDateFormat);","lastModifiedDate":"2023-02-20"},{"lineNumber":171,"author":{"gitId":"lil1n"},"content":"            return new DateCommand(date);","lastModifiedDate":"2023-02-20"},{"lineNumber":172,"author":{"gitId":"lil1n"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":173,"author":{"gitId":"lil1n"},"content":"            return new InvalidCommand(ErrorTypes.INVALID_DATE);","lastModifiedDate":"2023-02-20"},{"lineNumber":174,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":175,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":176,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":176}},{"path":"src/main/java/duke/task/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.task;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"/** Contains methods and variables used for the date and time */","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"public class DateTime {","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    public static DateTimeFormatter inputDateFormat \u003d DateTimeFormatter.ofPattern(\"uuuu/MM/dd\");","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static DateTimeFormatter inputDateTimeFormat \u003d DateTimeFormatter.ofPattern(\"uuuu/MM/dd HHmm\");","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    public static DateTimeFormatter outDateFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM uuuu\");","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public static DateTimeFormatter outDateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM uuuu HHmm\");","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"     * Generates a LocalDate variable given a date in string if possible","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"     * @param date string date to be converted into a LocalDate variable","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"     * @return LocalDate variable if date is in the correct format, else returns null","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    public static LocalDate storeLocalDate(String date) {","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"        String[] arrayDateTime \u003d date.split(\" \");","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"        if (arrayDateTime.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"            try {","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"                return LocalDate.parse(date.trim(), DateTime.inputDateFormat);","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"                return null;","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"        } else if (arrayDateTime.length \u003d\u003d 2) {","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"            try {","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"                return LocalDate.parse(arrayDateTime[0].trim(), DateTime.inputDateFormat);","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"                return null;","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"        return null;","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"     * Generates a LocalDateTime variable given a date in string if possible","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"     * @param dateTime string date to be converted into a LocalDate variable","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"     * @return LocalDateTime variable if date is in the correct format, else returns null","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"    public static LocalDateTime storeLocalDateTime(String dateTime) {","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"        String[] arrayDateTime \u003d dateTime.split(\" \");","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"        if (arrayDateTime.length \u003d\u003d 2) {","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"            try {","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"                return LocalDateTime.parse(dateTime.trim(), DateTime.inputDateTimeFormat);","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"                return null;","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"        return null;","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"lil1n":57}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.task;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.ui.Symbols;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"/** Task with a deadline */","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    public String deadline;","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public LocalDate date;","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    public LocalDateTime dateTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    public Deadline(String taskName, String deadline) {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"        super(taskName);","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"        this.date \u003d DateTime.storeLocalDate(deadline);","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"        this.dateTime \u003d DateTime.storeLocalDateTime(deadline);","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"     * Generates the task information to be shown to user","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"     * @return string containing the task information in the format: [T][] taskName (by: date)","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"    public String getFullTaskDetail() {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"        String taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"        String outputDeadline \u003d getOutDeadline();","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"        taskDetail \u003d \"[D][\" + getStatusIcon() + \"] \" + this.taskName + \" (by: \" + outputDeadline + \")\";","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"        return taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"     * Generates the most specific date format to be shown to user given the string date provided by user","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"     * @return the most specific date format in string","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"    private String getOutDeadline() {","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"        String outputDeadline;","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"        if (this.dateTime !\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"            outputDeadline \u003d DateTime.outDateTimeFormatter.format(this.dateTime);","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"        } else if (this.date !\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"            outputDeadline \u003d this.date.format(DateTime.outDateFormatter);","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"            outputDeadline \u003d this.deadline;","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"        return outputDeadline;","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"     * Checks whether a given date falls on the deadline","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"     * @param date date to be checked with","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"     * @return true if date falls on the deadline, false otherwise","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"    public boolean isDateOnDeadline(LocalDate date) {","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"        if (this.date \u003d\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lil1n"},"content":"            return false;","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"        return this.date.equals(date);","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"lil1n"},"content":"     * Generates the task information to be stored","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"lil1n"},"content":"     * @return string containing the encoded task information in the format: D | 0 | taskName | date","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"lil1n"},"content":"    public String getEncodedData() {","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"lil1n"},"content":"        String taskStatus;","lastModifiedDate":"2023-02-12"},{"lineNumber":73,"author":{"gitId":"lil1n"},"content":"        if (getStatusIcon().equals(Symbols.PROGRAM_MARK)) {","lastModifiedDate":"2023-02-17"},{"lineNumber":74,"author":{"gitId":"lil1n"},"content":"            taskStatus \u003d Symbols.DATA_MARK;","lastModifiedDate":"2023-02-17"},{"lineNumber":75,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"lil1n"},"content":"            taskStatus \u003d Symbols.DATA_UNMARK;","lastModifiedDate":"2023-02-17"},{"lineNumber":77,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"lil1n"},"content":"        return String.join(Symbols.ENCODE_DATA_DELIMITER, Symbols.DEADLINE, taskStatus, this.taskName, this.deadline);","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":80,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lil1n":80}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.task;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.ui.Symbols;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"/** Task with a start date and/or time and an end date and/or time */","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    public String stringStartDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public String stringEndDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    public LocalDate startDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public LocalDate endDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    public LocalDateTime startDateTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    public LocalDateTime endDateTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    public Event(String taskName, String startDateTime, String endDateTime) {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"        super(taskName);","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"        this.stringStartDate \u003d startDateTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        this.stringEndDate \u003d endDateTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"        this.startDate \u003d DateTime.storeLocalDate(startDateTime);","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"        this.startDateTime \u003d DateTime.storeLocalDateTime(startDateTime);","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"        this.endDate \u003d DateTime.storeLocalDate(endDateTime);","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"        this.endDateTime \u003d DateTime.storeLocalDateTime(endDateTime);","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"     * Generates the task information to be shown to user","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"     * @return string containing the task information in the format: [E][] taskName (from: date/time to: date/time)","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"    public String getFullTaskDetail() {","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"        String taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"        String outStartDate \u003d getOutStartDate();","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"        String outEndDate \u003d getOutEndDate();","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"        taskDetail \u003d \"[E][\" + getStatusIcon() + \"] \" + this.taskName + \" (from: \" + outStartDate + \" to: \"","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"                + outEndDate + \")\";","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"        return taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"     * Generates the most specific start date format to be shown to user given the string start date provided by user","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"     * @return the most specific date format in string","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"    private String getOutStartDate() {","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"        String outStartDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"        if (this.startDateTime !\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"            outStartDate \u003d DateTime.outDateTimeFormatter.format(this.startDateTime);","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"        } else if (this.startDate !\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"            outStartDate \u003d this.startDate.format(DateTime.outDateFormatter);","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"            outStartDate \u003d this.stringStartDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"        return outStartDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"     * Generates the most specific end date format to be shown to user given the string end date provided by user","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"     * @return the most specific date format in string","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lil1n"},"content":"    private String getOutEndDate() {","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"lil1n"},"content":"        String outEndDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"lil1n"},"content":"        if (this.endDateTime !\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"lil1n"},"content":"            outEndDate \u003d DateTime.outDateTimeFormatter.format(this.endDateTime);","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"lil1n"},"content":"        } else if (this.endDate !\u003d null) {","lastModifiedDate":"2023-02-22"},{"lineNumber":70,"author":{"gitId":"lil1n"},"content":"            outEndDate \u003d this.endDate.format(DateTime.outDateFormatter);","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"lil1n"},"content":"            outEndDate \u003d this.stringEndDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"lil1n"},"content":"        return outEndDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"lil1n"},"content":"     * Checks whether a given date falls between the task start date and end date","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"lil1n"},"content":"     * @param date date to be checked with","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"lil1n"},"content":"     * @return true if date falls between the start and end date, else otherwise","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":83,"author":{"gitId":"lil1n"},"content":"    public boolean isDateBetweenEvent(LocalDate date) {","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"lil1n"},"content":"        if (this.startDate \u003d\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"lil1n"},"content":"            return false;","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":87,"author":{"gitId":"lil1n"},"content":"        if (this.endDate \u003d\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"lil1n"},"content":"            return false;","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"lil1n"},"content":"        boolean dateIsAfterStart \u003d this.startDate.isBefore(date);","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"lil1n"},"content":"        boolean dateIsBeforeEnd \u003d this.endDate.isAfter(date);","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"lil1n"},"content":"        return dateIsAfterStart \u0026\u0026 dateIsBeforeEnd;","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"lil1n"},"content":"     * Checks whether a given date falls on the start date","lastModifiedDate":"2023-02-20"},{"lineNumber":97,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"lil1n"},"content":"     * @param date date to be checked with","lastModifiedDate":"2023-02-20"},{"lineNumber":99,"author":{"gitId":"lil1n"},"content":"     * @return true if date falls on the start date, false otherwise","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":101,"author":{"gitId":"lil1n"},"content":"    public boolean isDateOnStart(LocalDate date) {","lastModifiedDate":"2023-02-20"},{"lineNumber":102,"author":{"gitId":"lil1n"},"content":"        if (this.startDate \u003d\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":103,"author":{"gitId":"lil1n"},"content":"            return false;","lastModifiedDate":"2023-02-20"},{"lineNumber":104,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":105,"author":{"gitId":"lil1n"},"content":"        return this.startDate.equals(date);","lastModifiedDate":"2023-02-20"},{"lineNumber":106,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":107,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":108,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"lil1n"},"content":"     * Checks whether a given date falls on the end date","lastModifiedDate":"2023-02-20"},{"lineNumber":110,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"lil1n"},"content":"     * @param date date to be checked with","lastModifiedDate":"2023-02-20"},{"lineNumber":112,"author":{"gitId":"lil1n"},"content":"     * @return true if date falls on the end date, false otherwise","lastModifiedDate":"2023-02-20"},{"lineNumber":113,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":114,"author":{"gitId":"lil1n"},"content":"    public boolean isDateOnEnd(LocalDate date) {","lastModifiedDate":"2023-02-20"},{"lineNumber":115,"author":{"gitId":"lil1n"},"content":"        if (this.endDate \u003d\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":116,"author":{"gitId":"lil1n"},"content":"            return false;","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":118,"author":{"gitId":"lil1n"},"content":"        return this.endDate.equals(date);","lastModifiedDate":"2023-02-20"},{"lineNumber":119,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":121,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":122,"author":{"gitId":"lil1n"},"content":"     * Generates the task information to be stored","lastModifiedDate":"2023-02-20"},{"lineNumber":123,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":124,"author":{"gitId":"lil1n"},"content":"     * @return string containing the encoded task information in the format: E | 0 | taskName | date to date","lastModifiedDate":"2023-02-20"},{"lineNumber":125,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":126,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":127,"author":{"gitId":"lil1n"},"content":"    public String getEncodedData() {","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"lil1n"},"content":"        String taskStatus;","lastModifiedDate":"2023-02-12"},{"lineNumber":129,"author":{"gitId":"lil1n"},"content":"        if (getStatusIcon().equals(Symbols.PROGRAM_MARK)) {","lastModifiedDate":"2023-02-17"},{"lineNumber":130,"author":{"gitId":"lil1n"},"content":"            taskStatus \u003d Symbols.DATA_MARK;","lastModifiedDate":"2023-02-17"},{"lineNumber":131,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-02-12"},{"lineNumber":132,"author":{"gitId":"lil1n"},"content":"            taskStatus \u003d Symbols.DATA_UNMARK;","lastModifiedDate":"2023-02-17"},{"lineNumber":133,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":134,"author":{"gitId":"lil1n"},"content":"        String date \u003d String.join(Symbols.DATA_EVENT_DATE_DELIMITER, stringStartDate, stringEndDate);","lastModifiedDate":"2023-02-20"},{"lineNumber":135,"author":{"gitId":"lil1n"},"content":"        return String.join(Symbols.ENCODE_DATA_DELIMITER, Symbols.EVENT, taskStatus, this.taskName, date);","lastModifiedDate":"2023-02-20"},{"lineNumber":136,"author":{"gitId":"lil1n"},"content":"        // returns full details of task","lastModifiedDate":"2023-02-17"},{"lineNumber":137,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":138,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lil1n":138}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.task;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.ui.Symbols;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"/** Represents a task, contains task name and a status on completion */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public String taskName;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public boolean isDone;","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public Task(String taskName) {","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"     * Generates the symbol for the status of task","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"     * @return \u0027X\u0027 if task is done, else returns \u0027 \u0027","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"            return Symbols.PROGRAM_MARK;","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"        return Symbols.PROGRAM_UNMARK;","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"     * Generates the task information to be shown to user","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"     * @return string containing the task information","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"    public abstract String getFullTaskDetail();","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"    /** Marks a task to be done */","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"    /** Marks a task to be not done */","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"    /** Generates the task information to be stored */","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"    public abstract String getEncodedData();","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"lil1n":48}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.task;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"/** Represents the task list. Contains the date of the tasks */","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"public class TaskList {","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"     * Constructs a task list with the given data","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"     * @param taskList an array list containing the data to be added into task list","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"     * Gets the number of tasks in","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"     * @return the number of tasks in task list","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"    public int getTaskCount() {","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"        return taskList.size();","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"     * Adds a task into task list","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"     * @param toAdd task to be added into task list","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"    public void addTask(Task toAdd) {","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"        taskList.add(toAdd);","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"     * Deletes a task in the task list","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"     * @param taskNumber task number indicating the task in the task list","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"    public void deleteTask(int taskNumber) {","lastModifiedDate":"2023-02-17"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"        taskList.remove(taskList.get(taskNumber));","lastModifiedDate":"2023-02-17"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"     * Generates the task information of a task in the task list to be shown to user","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"     * @param taskNumber task number indicating the task in the task list","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"     * @return the string containing the full information of the task","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"    public String getTaskFullDetails(int taskNumber) {","lastModifiedDate":"2023-02-17"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"        return taskList.get(taskNumber).getFullTaskDetail();","lastModifiedDate":"2023-02-17"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"     * Marks the task in the task list to be done","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lil1n"},"content":"     * @param taskNumber task number indicating the task in the task list","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"    public void markTaskDone(int taskNumber) {","lastModifiedDate":"2023-02-17"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"        taskList.get(taskNumber).markAsDone();","lastModifiedDate":"2023-02-17"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":65,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":66,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"lil1n"},"content":"     * Marks the task in the task list to be not done","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"lil1n"},"content":"     * @param taskNumber task number indicating the task in the task list","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"lil1n"},"content":"    public void markTaskNotDone(int taskNumber) {","lastModifiedDate":"2023-02-17"},{"lineNumber":72,"author":{"gitId":"lil1n"},"content":"        taskList.get(taskNumber).markAsNotDone();","lastModifiedDate":"2023-02-17"},{"lineNumber":73,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":74,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":75,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"lil1n"},"content":"     * Generates the task information of a task in the task list to be stored","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"lil1n"},"content":"     * @return string containing the encoded task information","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"lil1n"},"content":"    public String getTaskEncoding(int taskNumber) {","lastModifiedDate":"2023-02-17"},{"lineNumber":81,"author":{"gitId":"lil1n"},"content":"        return taskList.get(taskNumber).getEncodedData();","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":83,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":85,"author":{"gitId":"lil1n"},"content":"     * Gets the tasks in the task list that contains the keyword in the task name","lastModifiedDate":"2023-02-21"},{"lineNumber":86,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":87,"author":{"gitId":"lil1n"},"content":"     * @param keyword sequence of characters to be filtered","lastModifiedDate":"2023-02-21"},{"lineNumber":88,"author":{"gitId":"lil1n"},"content":"     * @return task list with tasks that contains the keyword in the task name","lastModifiedDate":"2023-02-21"},{"lineNumber":89,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":90,"author":{"gitId":"lil1n"},"content":"    public TaskList findTasks(String keyword) {","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"lil1n"},"content":"        TaskList matchingTasks \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"lil1n"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"lil1n"},"content":"            if (t.taskName.contains(keyword)) {","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"lil1n"},"content":"                matchingTasks.addTask(t);","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":97,"author":{"gitId":"lil1n"},"content":"        return matchingTasks;","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":99,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":101,"author":{"gitId":"lil1n"},"content":"     * Gets the tasks in the task list that occurs on a date","lastModifiedDate":"2023-02-20"},{"lineNumber":102,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":103,"author":{"gitId":"lil1n"},"content":"     * @param date date of tasks to be filtered","lastModifiedDate":"2023-02-20"},{"lineNumber":104,"author":{"gitId":"lil1n"},"content":"     * @return task list containing the tasks tagged with the date given","lastModifiedDate":"2023-02-21"},{"lineNumber":105,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":106,"author":{"gitId":"lil1n"},"content":"    public TaskList getDueTasks(LocalDate date) {","lastModifiedDate":"2023-02-20"},{"lineNumber":107,"author":{"gitId":"lil1n"},"content":"        TaskList dueTasks \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-02-20"},{"lineNumber":108,"author":{"gitId":"lil1n"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"lil1n"},"content":"            if (task instanceof Deadline \u0026\u0026 ((Deadline) task).isDateOnDeadline(date)) {","lastModifiedDate":"2023-02-20"},{"lineNumber":110,"author":{"gitId":"lil1n"},"content":"                dueTasks.addTask(task);","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":112,"author":{"gitId":"lil1n"},"content":"            if (task instanceof Event \u0026\u0026 (((Event) task).isDateBetweenEvent(date)","lastModifiedDate":"2023-02-20"},{"lineNumber":113,"author":{"gitId":"lil1n"},"content":"                    || ((Event) task).isDateOnStart(date) || ((Event) task).isDateOnEnd(date))) {","lastModifiedDate":"2023-02-20"},{"lineNumber":114,"author":{"gitId":"lil1n"},"content":"                dueTasks.addTask(task);","lastModifiedDate":"2023-02-20"},{"lineNumber":115,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":116,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"lil1n"},"content":"        return dueTasks;","lastModifiedDate":"2023-02-20"},{"lineNumber":118,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":119,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":119}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.task;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.ui.Symbols;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"/** Task without any date/time attached to it */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"        super(taskName);","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"     * Generates the task information to be shown to user","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"     * @return string containing the task information in the format: [T][] taskName","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    public String getFullTaskDetail() {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"        String taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"        taskDetail \u003d \"[T][\" + getStatusIcon() + \"] \" + taskName;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        return taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"     * Generates the task information to be stored","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"     * @return string containing the encoded task information in the format: T | 0 | taskName","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"    public String getEncodedData() {","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"        String taskStatus;","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"        if (getStatusIcon().equals(Symbols.PROGRAM_MARK)) {","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"            taskStatus \u003d Symbols.DATA_MARK;","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"            taskStatus \u003d Symbols.DATA_UNMARK;","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"        return String.join(Symbols.ENCODE_DATA_DELIMITER, Symbols.TODO, taskStatus, taskName);","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lil1n":39}},{"path":"src/main/java/duke/ui/ErrorMessages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"/** Error messages for the error types */","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"public enum ErrorMessages {","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"    OVER_TASK_COUNT_MESSAGE(\" Invalid task number provided, please give a number \u003c\u003d %d\"),","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    ERROR_IN_SETTING_UP(\" Failed to set up, exiting\" + Ui.NEW_LINE + \" Duke exiting...\"),","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    CREATE_NEW_FILE_EXCEPTION_MESSAGE(\" Exception received from creating file\"),","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    FILE_NOT_FOUND_EXCEPTION_MESSAGE(\" File not found exception from trying to read data from file\"),","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    IO_EXCEPTION_MESSAGE(\" IO exception received from trying to update data\"),","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    INVALID_FIND_MESSAGE(\" Invalid input! Valid input format: \\\"find \u003ckeyword\u003e\\\"\");","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    public final String MESSAGE;","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    ErrorMessages(String message) {","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        MESSAGE \u003d message;","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":23}},{"path":"src/main/java/duke/ui/Symbols.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"/** Symbols used for printing and data encoding */","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"public class Symbols {","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"    public static final String TODO \u003d \"T\";","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public static final String DEADLINE \u003d \"D\";","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    public static final String EVENT \u003d \"E\";","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static final String PROGRAM_MARK \u003d \"X\";","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public static final String PROGRAM_UNMARK \u003d \" \";","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    public static final String DATA_MARK \u003d \"1\";","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    public static final String DATA_UNMARK \u003d \"0\";","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    public static final String DECODE_DATA_DELIMITER \u003d \" \\\\| \";","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    public static final String ENCODE_DATA_DELIMITER \u003d \" | \";","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    public static final String DATA_EVENT_DATE_DELIMITER \u003d \" to \";","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":25}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke.ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"/** deals with interactions with the user */","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"public class Ui {","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    public static final String SEGMENT_LINE \u003d \"_\".repeat(80);","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    /** platform independent line separator */","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    public static final String NEW_LINE \u003d System.lineSeparator();","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    private static final String START_MESSAGE \u003d \" Hello! I\u0027m Duke\" + NEW_LINE + \" What can I do for you?\";","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"    /** a separator to be used after every full output */","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    public static void endLine() {","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE + NEW_LINE);","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"    private final Scanner in;","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"    private final PrintStream out;","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"    public Ui() {","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"        this(System.in, System.out);","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"    public Ui(InputStream in, PrintStream out) {","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"        this.out \u003d out;","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"     * Reads the text entered by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"     * @return the string of text entered by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"    public String getUserCommand() {","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"        String input \u003d in.nextLine();","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"        while (input.trim().isEmpty()) {","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-22"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"        return input;","lastModifiedDate":"2023-02-22"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"    /** Generates and prints the output to be shown when the program faces an error on start up */","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"    public void showStartingError() {","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"        String output \u003d String.join(NEW_LINE, SEGMENT_LINE, ErrorMessages.ERROR_IN_SETTING_UP.MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"        showToUser(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"    /** Generates and prints the greeting message on start up */","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"    public void greetingMessage() {","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"        String output \u003d String.join(NEW_LINE, SEGMENT_LINE, START_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"        showToUser(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":60,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"    /** Generates and prints the greeting message on start up */","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"    public void byeMessage() {","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"        String output \u003d String.join(NEW_LINE, SEGMENT_LINE, ExitCommand.BYE_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"        showToUser(output);","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":66,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"lil1n"},"content":"     * Shows the user the message","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"lil1n"},"content":"     * @param message string describing the output to be shown to user","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"lil1n"},"content":"    public void showToUser(String message) {","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"lil1n"},"content":"        out.println(message);","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"lil1n"},"content":"        endLine();","lastModifiedDate":"2023-02-17"},{"lineNumber":75,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":76,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":77,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"lil1n"},"content":"     * Shows the user the error message","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"lil1n"},"content":"     * @param message an error message to be shown to user","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"lil1n"},"content":"    public static void showError(String message) {","lastModifiedDate":"2023-02-19"},{"lineNumber":83,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-17"},{"lineNumber":84,"author":{"gitId":"lil1n"},"content":"        System.out.print(message);","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":86,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":87,"author":{"gitId":"lil1n"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"lil1n"},"content":"     * Generates the error message when the number provided by user is \u003e the number of tasks present","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"lil1n"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"lil1n"},"content":"     * @param taskCount the number of tasks present in the program","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"lil1n"},"content":"     * @return the message stating task count exceeded and the number of tasks present","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"lil1n"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"lil1n"},"content":"    public static String craftExceedMessage(int taskCount) {","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"lil1n"},"content":"        String output \u003d String.join(Ui.NEW_LINE, SEGMENT_LINE, ErrorMessages.OVER_TASK_COUNT_MESSAGE.MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"lil1n"},"content":"        output \u003d output.replace(\"%d\", Integer.toString(taskCount));","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"lil1n"},"content":"        return output;","lastModifiedDate":"2023-02-20"},{"lineNumber":97,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":98,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lil1n":98}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"todo buy bread","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"todo read book","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"todo join sports club","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"todo borrow book","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"mark 1","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"mark 5","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"mark 4","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"mark 3","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"unmark 4","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"unmark 3","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"unmark 1","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"bye","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"lil1n":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\command\\*.java","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"lil1n":2}}]
