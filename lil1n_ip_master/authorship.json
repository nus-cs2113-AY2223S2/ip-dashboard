[{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"    // tasks that need to be done before a specific date/time","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"    protected String deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"    public Deadline(String taskName, String deadline) {","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"        super(taskName);","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"    public String getFullTaskDetail() {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"        String taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"        taskDetail \u003d \"[D][\" + getStatusIcon() + \"] \" + taskName + \" (by: \" + deadline + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"        return taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lil1n":18}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"    private static final String SEGMENT_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"    private static final int MAX_TASKS \u003d 100;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    private static final int VALID_MARK_LENGTH \u003d 2;","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"    private static final int VALID_UNMARK_LENGTH \u003d 2;","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    private static final int MINIMUM_TODO_LENGTH \u003d 2;","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    private static final int MINIMUM_DEADLINE_LENGTH \u003d 4;","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    private static final int MINIMUM_EVENT_LENGTH \u003d 6;","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    public static void printGreeting() {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"        System.out.println(\" Hello! I\u0027m Duke\" + System.lineSeparator()","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"                + \" What can I do for you?\");","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE + System.lineSeparator());","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"    public static void printBye() {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"        System.out.println(\" Bye! Hope to see you again soon!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"        System.out.print(SEGMENT_LINE + System.lineSeparator());","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"    public static void runCommand(String input, Task[] tasks) {","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"            String[] arrayOfInput \u003d input.split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"            boolean isInputList \u003d input.equals(\"list\");","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"            if (isInputList) {","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"                listTasks(tasks);","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"            } else if (isMark(arrayOfInput)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"                // if command is \"mark \u003cint\u003e\"","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"                markTask(tasks, arrayOfInput);","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"            } else if (isUnmark(arrayOfInput)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"                // if command is \"unmark \u003cint\u003e\"","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"                unmarkTask(tasks, arrayOfInput);","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"            } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"                // command is to add task","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"lil1n"},"content":"                decideTaskGroup(input, tasks, arrayOfInput);","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"lil1n"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":44,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE + System.lineSeparator());","lastModifiedDate":"2023-02-08"},{"lineNumber":45,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"lil1n"},"content":"    public static void listTasks(Task[] tasks) {","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"lil1n"},"content":"        boolean isTaskCountZero \u003d (Task.totalTasks \u003d\u003d 0);","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"lil1n"},"content":"        if (isTaskCountZero) {","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" The list is empty!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Here are the tasks in your lists:\");","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"lil1n"},"content":"            for (int i \u003d 0; i \u003c Task.totalTasks; i +\u003d 1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"lil1n"},"content":"                System.out.println(\" \" + (i + 1) + \".\" + tasks[i].getFullTaskDetail());","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE + System.lineSeparator());","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"lil1n"},"content":"    public static boolean isMark(String[] input) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":63,"author":{"gitId":"lil1n"},"content":"        boolean isTwoWordInput \u003d (input.length \u003d\u003d VALID_MARK_LENGTH);","lastModifiedDate":"2023-02-08"},{"lineNumber":64,"author":{"gitId":"lil1n"},"content":"        boolean isFirstWordMark \u003d input[0].equals(\"mark\");","lastModifiedDate":"2023-02-08"},{"lineNumber":65,"author":{"gitId":"lil1n"},"content":"        if (!isFirstWordMark) {","lastModifiedDate":"2023-02-08"},{"lineNumber":66,"author":{"gitId":"lil1n"},"content":"            return false;","lastModifiedDate":"2023-02-08"},{"lineNumber":67,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"lil1n"},"content":"        if (!isTwoWordInput) {","lastModifiedDate":"2023-02-08"},{"lineNumber":69,"author":{"gitId":"lil1n"},"content":"            // user only provided \"mark\"","lastModifiedDate":"2023-02-08"},{"lineNumber":70,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":71,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Valid input format: \\\"mark \u003cnumber\u003e\\\"!\");","lastModifiedDate":"2023-02-08"},{"lineNumber":72,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":73,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":74,"author":{"gitId":"lil1n"},"content":"        boolean isSecondWordNumber \u003d isStringOfInteger(input[1]);","lastModifiedDate":"2023-02-08"},{"lineNumber":75,"author":{"gitId":"lil1n"},"content":"        if (!isSecondWordNumber) {","lastModifiedDate":"2023-02-08"},{"lineNumber":76,"author":{"gitId":"lil1n"},"content":"            // user provided \"mark \u003cnon digit chara\u003e\"","lastModifiedDate":"2023-02-08"},{"lineNumber":77,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":78,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Valid input format: \\\"mark \u003cnumber\u003e\\\"!\");","lastModifiedDate":"2023-02-08"},{"lineNumber":79,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":80,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":81,"author":{"gitId":"lil1n"},"content":"        return true;","lastModifiedDate":"2023-02-08"},{"lineNumber":82,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"lil1n"},"content":"    public static boolean isUnmark(String[] input) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":85,"author":{"gitId":"lil1n"},"content":"        // if input length (separated by \" \") \u003d\u003d 2 \u0026\u0026 first word \u003d\u003d \"unmark\" \u0026\u0026 second word only contains numbers","lastModifiedDate":"2023-02-08"},{"lineNumber":86,"author":{"gitId":"lil1n"},"content":"        boolean isTwoWordInput \u003d (input.length \u003d\u003d VALID_UNMARK_LENGTH);","lastModifiedDate":"2023-02-08"},{"lineNumber":87,"author":{"gitId":"lil1n"},"content":"        boolean isFirstWordUnmark \u003d input[0].equals(\"unmark\");","lastModifiedDate":"2023-02-08"},{"lineNumber":88,"author":{"gitId":"lil1n"},"content":"        if (!isFirstWordUnmark) {","lastModifiedDate":"2023-02-08"},{"lineNumber":89,"author":{"gitId":"lil1n"},"content":"            return false;","lastModifiedDate":"2023-02-08"},{"lineNumber":90,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":91,"author":{"gitId":"lil1n"},"content":"        if (!isTwoWordInput) {","lastModifiedDate":"2023-02-08"},{"lineNumber":92,"author":{"gitId":"lil1n"},"content":"            // user only provided \"unmark\"","lastModifiedDate":"2023-02-08"},{"lineNumber":93,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":94,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Valid input format: \\\"unmark \u003cnumber\u003e\\\"!\");","lastModifiedDate":"2023-02-08"},{"lineNumber":95,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":96,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":97,"author":{"gitId":"lil1n"},"content":"        boolean isSecondWordNumber \u003d isStringOfInteger(input[1]);","lastModifiedDate":"2023-02-08"},{"lineNumber":98,"author":{"gitId":"lil1n"},"content":"        if (!isSecondWordNumber) {","lastModifiedDate":"2023-02-08"},{"lineNumber":99,"author":{"gitId":"lil1n"},"content":"            // user provided \"unmark \u003cnon digit chara\u003e\"","lastModifiedDate":"2023-02-08"},{"lineNumber":100,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":101,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Valid input format: \\\"unmark \u003cnumber\u003e\\\"!\");","lastModifiedDate":"2023-02-08"},{"lineNumber":102,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":103,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":104,"author":{"gitId":"lil1n"},"content":"        return true;","lastModifiedDate":"2023-02-08"},{"lineNumber":105,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":107,"author":{"gitId":"lil1n"},"content":"    public static boolean isStringOfInteger(String input) {","lastModifiedDate":"2023-02-08"},{"lineNumber":108,"author":{"gitId":"lil1n"},"content":"        // takes in a string and checks whether the string only contains digits characters","lastModifiedDate":"2023-02-08"},{"lineNumber":109,"author":{"gitId":"lil1n"},"content":"        char[] inputInArray \u003d input.toCharArray();","lastModifiedDate":"2023-01-31"},{"lineNumber":110,"author":{"gitId":"lil1n"},"content":"        for (char c : inputInArray) {","lastModifiedDate":"2023-01-31"},{"lineNumber":111,"author":{"gitId":"lil1n"},"content":"            if (!Character.isDigit(c)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":112,"author":{"gitId":"lil1n"},"content":"                return false;","lastModifiedDate":"2023-01-31"},{"lineNumber":113,"author":{"gitId":"lil1n"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":114,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":115,"author":{"gitId":"lil1n"},"content":"        return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":116,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":117,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":118,"author":{"gitId":"lil1n"},"content":"    public static void markTask(Task[] tasks, String[] arrayOfInput) {","lastModifiedDate":"2023-01-31"},{"lineNumber":119,"author":{"gitId":"lil1n"},"content":"        tasks[Integer.parseInt(arrayOfInput[1]) - 1].markAsDone();","lastModifiedDate":"2023-01-31"},{"lineNumber":120,"author":{"gitId":"lil1n"},"content":"        printMarkOrUnmark(tasks, Integer.parseInt(arrayOfInput[1]) - 1);","lastModifiedDate":"2023-02-08"},{"lineNumber":121,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":122,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":123,"author":{"gitId":"lil1n"},"content":"    public static void unmarkTask(Task[] tasks, String[] arrayOfInput) {","lastModifiedDate":"2023-01-31"},{"lineNumber":124,"author":{"gitId":"lil1n"},"content":"        tasks[Integer.parseInt(arrayOfInput[1]) - 1].markAsNotDone();","lastModifiedDate":"2023-01-31"},{"lineNumber":125,"author":{"gitId":"lil1n"},"content":"        printMarkOrUnmark(tasks, Integer.parseInt(arrayOfInput[1]) - 1);","lastModifiedDate":"2023-02-08"},{"lineNumber":126,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":127,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":128,"author":{"gitId":"lil1n"},"content":"    public static void printMarkOrUnmark(Task[] tasks, int taskIndex) {","lastModifiedDate":"2023-02-08"},{"lineNumber":129,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-01-31"},{"lineNumber":130,"author":{"gitId":"lil1n"},"content":"        if (tasks[taskIndex].isDone) {","lastModifiedDate":"2023-01-31"},{"lineNumber":131,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Awesome! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-01-31"},{"lineNumber":132,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":133,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-01-31"},{"lineNumber":134,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":135,"author":{"gitId":"lil1n"},"content":"        System.out.println(\"   \" + tasks[taskIndex].getFullTaskDetail());","lastModifiedDate":"2023-01-31"},{"lineNumber":136,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE + System.lineSeparator());","lastModifiedDate":"2023-01-31"},{"lineNumber":137,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":138,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":139,"author":{"gitId":"lil1n"},"content":"    public static void decideTaskGroup(String input, Task[] tasks, String[] arrayOfInput) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":140,"author":{"gitId":"lil1n"},"content":"        boolean isInputTodo \u003d arrayOfInput[0].equals(\"todo\");","lastModifiedDate":"2023-01-31"},{"lineNumber":141,"author":{"gitId":"lil1n"},"content":"        boolean isInputDeadline \u003d arrayOfInput[0].equals(\"deadline\");","lastModifiedDate":"2023-01-31"},{"lineNumber":142,"author":{"gitId":"lil1n"},"content":"        boolean isInputEvent \u003d arrayOfInput[0].equals(\"event\");","lastModifiedDate":"2023-01-31"},{"lineNumber":143,"author":{"gitId":"lil1n"},"content":"        if (isInputTodo) {","lastModifiedDate":"2023-01-31"},{"lineNumber":144,"author":{"gitId":"lil1n"},"content":"            String[] todoTaskNameArray \u003d input.split(\" \", 2);","lastModifiedDate":"2023-02-08"},{"lineNumber":145,"author":{"gitId":"lil1n"},"content":"            checkValidTodo(todoTaskNameArray);","lastModifiedDate":"2023-02-08"},{"lineNumber":146,"author":{"gitId":"lil1n"},"content":"            addTodoTask(tasks, todoTaskNameArray);","lastModifiedDate":"2023-02-08"},{"lineNumber":147,"author":{"gitId":"lil1n"},"content":"        } else if (isInputDeadline) {","lastModifiedDate":"2023-01-31"},{"lineNumber":148,"author":{"gitId":"lil1n"},"content":"            checkValidDeadline(input, arrayOfInput);","lastModifiedDate":"2023-02-08"},{"lineNumber":149,"author":{"gitId":"lil1n"},"content":"            addDeadlineTask(tasks, input);","lastModifiedDate":"2023-02-08"},{"lineNumber":150,"author":{"gitId":"lil1n"},"content":"        } else if (isInputEvent) {","lastModifiedDate":"2023-01-31"},{"lineNumber":151,"author":{"gitId":"lil1n"},"content":"            checkValidEvent(input, arrayOfInput);","lastModifiedDate":"2023-02-08"},{"lineNumber":152,"author":{"gitId":"lil1n"},"content":"            addEventTask(tasks, input);","lastModifiedDate":"2023-02-08"},{"lineNumber":153,"author":{"gitId":"lil1n"},"content":"        } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":154,"author":{"gitId":"lil1n"},"content":"            // if input doesn\u0027t contain any keywords","lastModifiedDate":"2023-02-08"},{"lineNumber":155,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":156,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Please provide a valid input!\");","lastModifiedDate":"2023-02-08"},{"lineNumber":157,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":158,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":159,"author":{"gitId":"lil1n"},"content":"        echoAddTasks(tasks);","lastModifiedDate":"2023-01-31"},{"lineNumber":160,"author":{"gitId":"lil1n"},"content":"        Task.incrementTotalTasks();","lastModifiedDate":"2023-01-31"},{"lineNumber":161,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":162,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":163,"author":{"gitId":"lil1n"},"content":"    public static void checkValidTodo(String[] input) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":164,"author":{"gitId":"lil1n"},"content":"        if (input.length \u003c MINIMUM_TODO_LENGTH) {","lastModifiedDate":"2023-02-08"},{"lineNumber":165,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":166,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Valid input format: \\\"todo \u003ctask name\u003e\\\"\");","lastModifiedDate":"2023-02-08"},{"lineNumber":167,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":168,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":169,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":170,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":171,"author":{"gitId":"lil1n"},"content":"    public static void addTodoTask(Task[] tasks, String[] input) {","lastModifiedDate":"2023-02-08"},{"lineNumber":172,"author":{"gitId":"lil1n"},"content":"        tasks[Task.totalTasks] \u003d new Todo(input[1]);","lastModifiedDate":"2023-02-08"},{"lineNumber":173,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":174,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":175,"author":{"gitId":"lil1n"},"content":"    public static void checkValidDeadline(String input, String[] arrayOfInput) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":176,"author":{"gitId":"lil1n"},"content":"        if (!input.contains(\"/by\")) {","lastModifiedDate":"2023-02-08"},{"lineNumber":177,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":178,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Valid input format: \\\"deadline \u003ctask name\u003e /by \u003cdate\u003e\\\"\");","lastModifiedDate":"2023-02-08"},{"lineNumber":179,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":180,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":181,"author":{"gitId":"lil1n"},"content":"        if ( arrayOfInput.length \u003c MINIMUM_DEADLINE_LENGTH) {","lastModifiedDate":"2023-02-08"},{"lineNumber":182,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":183,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Please provide enough arguments! \"","lastModifiedDate":"2023-02-08"},{"lineNumber":184,"author":{"gitId":"lil1n"},"content":"                    + System.lineSeparator() + \" Valid input format: \\\"deadline \u003ctask name\u003e /by \u003cdate\u003e\\\"\");","lastModifiedDate":"2023-02-08"},{"lineNumber":185,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":186,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":187,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":188,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":189,"author":{"gitId":"lil1n"},"content":"    public static void addDeadlineTask(Task[] tasks, String input) {","lastModifiedDate":"2023-02-08"},{"lineNumber":190,"author":{"gitId":"lil1n"},"content":"        String[] commandInformation \u003d input.split(\" \", 2);","lastModifiedDate":"2023-02-08"},{"lineNumber":191,"author":{"gitId":"lil1n"},"content":"        String[] taskNameAndDate \u003d commandInformation[1].split(\"/by\", 2);","lastModifiedDate":"2023-02-08"},{"lineNumber":192,"author":{"gitId":"lil1n"},"content":"        tasks[Task.totalTasks] \u003d new Deadline(taskNameAndDate[0].trim(), taskNameAndDate[1].trim());","lastModifiedDate":"2023-02-08"},{"lineNumber":193,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":194,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":195,"author":{"gitId":"lil1n"},"content":"    public static void checkValidEvent(String input, String[] arrayOfInput) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":196,"author":{"gitId":"lil1n"},"content":"        if (!input.contains(\"/from\") || !input.contains(\"/to\")) {","lastModifiedDate":"2023-02-08"},{"lineNumber":197,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":198,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Valid input format: \\\"event \u003ctask name\u003e /from \u003cdate\u003e /to \u003cdate\u003e\\\"\");","lastModifiedDate":"2023-02-08"},{"lineNumber":199,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":200,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":201,"author":{"gitId":"lil1n"},"content":"        if (input.indexOf(\"/from\") \u003e input.indexOf(\"/to\")) {","lastModifiedDate":"2023-02-08"},{"lineNumber":202,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":203,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Valid input format: \\\"event \u003ctask name\u003e /from \u003cdate\u003e /to \u003cdate\u003e\\\"\");","lastModifiedDate":"2023-02-08"},{"lineNumber":204,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":205,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":206,"author":{"gitId":"lil1n"},"content":"        if ( arrayOfInput.length \u003c MINIMUM_EVENT_LENGTH) {","lastModifiedDate":"2023-02-08"},{"lineNumber":207,"author":{"gitId":"lil1n"},"content":"            System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-02-08"},{"lineNumber":208,"author":{"gitId":"lil1n"},"content":"            System.out.println(\" Invalid input! Please provide enough arguments! \"","lastModifiedDate":"2023-02-08"},{"lineNumber":209,"author":{"gitId":"lil1n"},"content":"                    + System.lineSeparator() + \" Valid input format: \\\"event \u003ctask name\u003e /from \u003cdate\u003e /to \u003cdate\u003e\\\"\");","lastModifiedDate":"2023-02-08"},{"lineNumber":210,"author":{"gitId":"lil1n"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":211,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":212,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":213,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":214,"author":{"gitId":"lil1n"},"content":"    public static void addEventTask(Task[] tasks, String input) {","lastModifiedDate":"2023-02-08"},{"lineNumber":215,"author":{"gitId":"lil1n"},"content":"        String taskNameInformation \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2023-02-08"},{"lineNumber":216,"author":{"gitId":"lil1n"},"content":"        String[] taskNameAndDate \u003d taskNameInformation.split(\"/from\", 2); // name fromTo","lastModifiedDate":"2023-02-08"},{"lineNumber":217,"author":{"gitId":"lil1n"},"content":"        String[] fromAndTo \u003d taskNameAndDate[1].split(\"/to\", 2); // from to","lastModifiedDate":"2023-02-08"},{"lineNumber":218,"author":{"gitId":"lil1n"},"content":"        tasks[Task.totalTasks] \u003d new Event(taskNameAndDate[0].trim(), fromAndTo[0].trim(), fromAndTo[1].trim());","lastModifiedDate":"2023-02-08"},{"lineNumber":219,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":220,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":221,"author":{"gitId":"lil1n"},"content":"    public static void echoAddTasks(Task[] tasks) {","lastModifiedDate":"2023-01-31"},{"lineNumber":222,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE);","lastModifiedDate":"2023-01-29"},{"lineNumber":223,"author":{"gitId":"lil1n"},"content":"        int numberOfTasks \u003d Task.totalTasks + 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":224,"author":{"gitId":"lil1n"},"content":"        String output \u003d \" The following task has been added:\" + System.lineSeparator()","lastModifiedDate":"2023-01-29"},{"lineNumber":225,"author":{"gitId":"lil1n"},"content":"                + \"   \" + tasks[Task.totalTasks].getFullTaskDetail() + System.lineSeparator()","lastModifiedDate":"2023-01-29"},{"lineNumber":226,"author":{"gitId":"lil1n"},"content":"                + \" There is now \" + numberOfTasks + \" task[s] in total.\";","lastModifiedDate":"2023-01-29"},{"lineNumber":227,"author":{"gitId":"lil1n"},"content":"        System.out.println(output);","lastModifiedDate":"2023-01-29"},{"lineNumber":228,"author":{"gitId":"lil1n"},"content":"        System.out.println(SEGMENT_LINE + System.lineSeparator());","lastModifiedDate":"2023-01-29"},{"lineNumber":229,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":230,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":232,"author":{"gitId":"lil1n"},"content":"        printGreeting();","lastModifiedDate":"2023-01-29"},{"lineNumber":233,"author":{"gitId":"lil1n"},"content":"        Task[] tasks \u003d new Task[MAX_TASKS];","lastModifiedDate":"2023-01-29"},{"lineNumber":234,"author":{"gitId":"lil1n"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-31"},{"lineNumber":235,"author":{"gitId":"lil1n"},"content":"        String input \u003d in.nextLine();","lastModifiedDate":"2023-01-31"},{"lineNumber":236,"author":{"gitId":"lil1n"},"content":"        while (!input.equals(\"bye\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":237,"author":{"gitId":"lil1n"},"content":"            runCommand(input, tasks);","lastModifiedDate":"2023-01-31"},{"lineNumber":238,"author":{"gitId":"lil1n"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2023-01-31"},{"lineNumber":239,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":240,"author":{"gitId":"lil1n"},"content":"        printBye();","lastModifiedDate":"2023-01-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":4,"lil1n":238}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"lil1n":4}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"    // tasks that start at a specific date/time and ends at specific date/time","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"    protected String startDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"    protected String endDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public Event(String taskName, String startDateTime, String endDateTime) {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"        super(taskName);","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    public String getFullTaskDetail() {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"        String taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"        taskDetail \u003d \"[E][\" + getStatusIcon() + \"] \" + taskName + \" (from: \" + startDateTime + \" to: \"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"                + endDateTime + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"        return taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lil1n":21}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"public class Task {","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"    protected String taskName;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"    protected static int totalTasks \u003d 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    public Task() {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    public Task(String taskName) {","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"    public static void incrementTotalTasks() {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"        totalTasks +\u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"lil1n"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"lil1n"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"lil1n"},"content":"            return \"X\";","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"lil1n"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"lil1n"},"content":"        return \" \";","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"lil1n"},"content":"    public String getFullTaskDetail() {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"lil1n"},"content":"        String taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"lil1n"},"content":"        taskDetail \u003d \"[\" + getStatusIcon() + \"] \" + taskName;","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"lil1n"},"content":"        return taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"lil1n"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"lil1n"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"lil1n"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"lil1n"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"lil1n":40}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"package duke;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"    // tasks without any date/time attached to it","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"        super(taskName);","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"    public String getFullTaskDetail() {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"        String taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"        taskDetail \u003d \"[T][\" + getStatusIcon() + \"] \" + taskName;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"        return taskDetail;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lil1n":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lil1n"},"content":"todo buy bread","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"lil1n"},"content":"todo read book","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"lil1n"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"lil1n"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lil1n"},"content":"todo join sports club","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lil1n"},"content":"todo borrow book","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lil1n"},"content":"mark 1","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lil1n"},"content":"mark 5","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lil1n"},"content":"mark 4","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"lil1n"},"content":"mark 3","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"lil1n"},"content":"unmark 4","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lil1n"},"content":"unmark 3","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lil1n"},"content":"unmark 1","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lil1n"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"lil1n"},"content":"bye","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"lil1n":19}}]
