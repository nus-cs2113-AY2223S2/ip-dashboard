[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngkaiwen123"},"content":"import duke.command.DukeException;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"ngkaiwen123"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"ngkaiwen123"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"ngkaiwen123"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"ngkaiwen123"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"ngkaiwen123"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"ngkaiwen123"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ngkaiwen123"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"ngkaiwen123"},"content":"import java.io.File;","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"ngkaiwen123"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"ngkaiwen123"},"content":"    /**Constant to store location of the file used for writing/storing of data.*/","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"ngkaiwen123"},"content":"    public static final String FILE_LOCATION \u003d \"duke.txt\";","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"ngkaiwen123"},"content":"     * Executes the \"Duke\" program.","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"ngkaiwen123"},"content":"     * @param args The command line arguments.","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"ngkaiwen123"},"content":"        //Initialisation of ArrayList and taking of inputs.","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ngkaiwen123"},"content":"        String line \u003d \"start\";","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"ngkaiwen123"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ngkaiwen123"},"content":"        int listSize \u003d 0;","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"ngkaiwen123"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"ngkaiwen123"},"content":"            listSize \u003d readFileData(list);","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"ngkaiwen123"},"content":"        } catch (IOException ie) {","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"Failed to find or create a file.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"ngkaiwen123"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"ngkaiwen123"},"content":"        greetUser();","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"ngkaiwen123"},"content":"        //Get commands while user input is not \"bye\", handles errors due to user input.","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"ngkaiwen123"},"content":"        obtainUserInputs(line, list, listSize, input);","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"ngkaiwen123"},"content":"        //Transfer final ArrayList back into text file.","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"ngkaiwen123"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"ngkaiwen123"},"content":"            writeFileData(list);","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"ngkaiwen123"},"content":"        } catch (IOException ie) {","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"Unable to save tasks into database. Did you create a .txt file?\");","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"ngkaiwen123"},"content":"     * Obtains user inputs and push them into another function to process what the user has typed.","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"ngkaiwen123"},"content":"     * Stores or deletes tasks that are stores in the ArrayList \"list\", according to what the user","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"ngkaiwen123"},"content":"     * has typed.","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"ngkaiwen123"},"content":"     * @param line The single line of string inputted by the user.","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list The ArrayList containing all information about existing tasks and their completion status.","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"ngkaiwen123"},"content":"     * @param listSize The current number of tasks populating the \"list\" array.","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"ngkaiwen123"},"content":"     * @param input The user input typed in through the command prompt.","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"ngkaiwen123"},"content":"    private static void obtainUserInputs(String line, ArrayList\u003cTask\u003e list, int listSize, Scanner input) {","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"ngkaiwen123"},"content":"        while (!line.equals(\"bye\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"ngkaiwen123"},"content":"            line \u003d input.nextLine();","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"ngkaiwen123"},"content":"            try {","lastModifiedDate":"2023-02-07"},{"lineNumber":64,"author":{"gitId":"ngkaiwen123"},"content":"                listSize \u003d handleUserInputs(line, list, listSize);","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"ngkaiwen123"},"content":"            } catch (DukeException de) {","lastModifiedDate":"2023-02-07"},{"lineNumber":66,"author":{"gitId":"ngkaiwen123"},"content":"                handleException(line);","lastModifiedDate":"2023-02-07"},{"lineNumber":67,"author":{"gitId":"ngkaiwen123"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":68,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"ngkaiwen123"},"content":"     * Writes information stored on the ArrayList \"list\" into the .txt file, effectively saving the information","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"ngkaiwen123"},"content":"     * contained in the \"list\" for future use.","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list The ArrayList containing all information about existing tasks and their completion status.","lastModifiedDate":"2023-02-15"},{"lineNumber":76,"author":{"gitId":"ngkaiwen123"},"content":"     * @throws IOException Exception that is generated due to errors in input or output.","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"ngkaiwen123"},"content":"    private static void writeFileData(ArrayList\u003cTask\u003e list) throws IOException{","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"ngkaiwen123"},"content":"        FileWriter fileRewriter \u003d new FileWriter(FILE_LOCATION);","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"ngkaiwen123"},"content":"        for (Task task : list) {","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"ngkaiwen123"},"content":"            String taskType \u003d getTaskType(task);","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"ngkaiwen123"},"content":"            fileRewriter.write(taskType + \"/\" + task.getBooleanValueOfStatus() + \"/\" + task.getDescription());","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"ngkaiwen123"},"content":"            if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"ngkaiwen123"},"content":"                fileRewriter.write(\"/\" + ((Deadline) task).getBy());","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"ngkaiwen123"},"content":"            } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"ngkaiwen123"},"content":"                fileRewriter.write(\"/\" + ((Event) task).getFrom() + \"/\" + ((Event) task).getTo());","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"ngkaiwen123"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"ngkaiwen123"},"content":"            fileRewriter.write(System.lineSeparator());","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"ngkaiwen123"},"content":"        fileRewriter.close();","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":92,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":93,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":94,"author":{"gitId":"ngkaiwen123"},"content":"     * Retrieves the class of the object (ToDo, Event, Deadline etc.)","lastModifiedDate":"2023-02-15"},{"lineNumber":95,"author":{"gitId":"ngkaiwen123"},"content":"     * Generates a single-letter string to be used for writing to the .txt file.","lastModifiedDate":"2023-02-15"},{"lineNumber":96,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":97,"author":{"gitId":"ngkaiwen123"},"content":"     * @param task A specific task found in the ArrayList \"list\".","lastModifiedDate":"2023-02-15"},{"lineNumber":98,"author":{"gitId":"ngkaiwen123"},"content":"     * @return A single-letter string representing the different class types (e.g. T,D,E)","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":100,"author":{"gitId":"ngkaiwen123"},"content":"    private static String getTaskType(Task task) {","lastModifiedDate":"2023-02-15"},{"lineNumber":101,"author":{"gitId":"ngkaiwen123"},"content":"        if (task.getClass().toString().equals(\"class duke.task.ToDo\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":102,"author":{"gitId":"ngkaiwen123"},"content":"            return \"T\";","lastModifiedDate":"2023-02-15"},{"lineNumber":103,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":104,"author":{"gitId":"ngkaiwen123"},"content":"        if (task.getClass().toString().equals(\"class duke.task.Deadline\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":105,"author":{"gitId":"ngkaiwen123"},"content":"            return \"D\";","lastModifiedDate":"2023-02-15"},{"lineNumber":106,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":107,"author":{"gitId":"ngkaiwen123"},"content":"        return \"E\";","lastModifiedDate":"2023-02-15"},{"lineNumber":108,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":109,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":110,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":111,"author":{"gitId":"ngkaiwen123"},"content":"     * Reads the strings that are stored in the .txt file and converts them into editable data","lastModifiedDate":"2023-02-15"},{"lineNumber":112,"author":{"gitId":"ngkaiwen123"},"content":"     * within the program by storing them on an ArrayList.","lastModifiedDate":"2023-02-15"},{"lineNumber":113,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list The ArrayList used to store all the information found in the .txt file.","lastModifiedDate":"2023-02-15"},{"lineNumber":114,"author":{"gitId":"ngkaiwen123"},"content":"     * @return Returns the final size of the ArrayList \"list\" after populating the ArrayList.","lastModifiedDate":"2023-02-15"},{"lineNumber":115,"author":{"gitId":"ngkaiwen123"},"content":"     * @throws IOException Exception related to all input and output errors.","lastModifiedDate":"2023-02-15"},{"lineNumber":116,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":117,"author":{"gitId":"ngkaiwen123"},"content":"    private static int readFileData(ArrayList\u003cTask\u003e list) throws IOException {","lastModifiedDate":"2023-02-15"},{"lineNumber":118,"author":{"gitId":"ngkaiwen123"},"content":"        File database \u003d new File(FILE_LOCATION);","lastModifiedDate":"2023-02-15"},{"lineNumber":119,"author":{"gitId":"ngkaiwen123"},"content":"        if (database.exists()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":120,"author":{"gitId":"ngkaiwen123"},"content":"            Scanner fileReader \u003d new Scanner(database);","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"ngkaiwen123"},"content":"            while (fileReader.hasNext()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":122,"author":{"gitId":"ngkaiwen123"},"content":"                String fileLine \u003d fileReader.nextLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":123,"author":{"gitId":"ngkaiwen123"},"content":"                String[] fileData \u003d fileLine.split(\"/\");","lastModifiedDate":"2023-02-15"},{"lineNumber":124,"author":{"gitId":"ngkaiwen123"},"content":"                uploadDataToArrayList(fileData, list);","lastModifiedDate":"2023-02-15"},{"lineNumber":125,"author":{"gitId":"ngkaiwen123"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":126,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-02-15"},{"lineNumber":127,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"File found! Loading file from: \" + database.getAbsolutePath());","lastModifiedDate":"2023-02-15"},{"lineNumber":128,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"You currently have \" + list.size() + \" tasks in your database.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":129,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-02-15"},{"lineNumber":130,"author":{"gitId":"ngkaiwen123"},"content":"        } else {","lastModifiedDate":"2023-02-15"},{"lineNumber":131,"author":{"gitId":"ngkaiwen123"},"content":"            printMissingFileError();","lastModifiedDate":"2023-02-15"},{"lineNumber":132,"author":{"gitId":"ngkaiwen123"},"content":"            File newFile \u003d new File(\"docs\");","lastModifiedDate":"2023-02-15"},{"lineNumber":133,"author":{"gitId":"ngkaiwen123"},"content":"            newFile.mkdirs();","lastModifiedDate":"2023-02-15"},{"lineNumber":134,"author":{"gitId":"ngkaiwen123"},"content":"            database.createNewFile();","lastModifiedDate":"2023-02-15"},{"lineNumber":135,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":136,"author":{"gitId":"ngkaiwen123"},"content":"        return list.size();","lastModifiedDate":"2023-02-15"},{"lineNumber":137,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":138,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":139,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":140,"author":{"gitId":"ngkaiwen123"},"content":"     * Processes what is written in the first string of each line of the .txt file and decides","lastModifiedDate":"2023-02-15"},{"lineNumber":141,"author":{"gitId":"ngkaiwen123"},"content":"     * what is to be written into the ArrayList for storage.","lastModifiedDate":"2023-02-15"},{"lineNumber":142,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":143,"author":{"gitId":"ngkaiwen123"},"content":"     * @param fileData An array of strings that have been split into different indexes for arraylist","lastModifiedDate":"2023-02-15"},{"lineNumber":144,"author":{"gitId":"ngkaiwen123"},"content":"     *                 initialization.","lastModifiedDate":"2023-02-15"},{"lineNumber":145,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list The ArrayList to be populated with data coming from the .txt file.","lastModifiedDate":"2023-02-15"},{"lineNumber":146,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":147,"author":{"gitId":"ngkaiwen123"},"content":"    private static void uploadDataToArrayList(String[] fileData, ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-02-15"},{"lineNumber":148,"author":{"gitId":"ngkaiwen123"},"content":"        switch (fileData[0]) {","lastModifiedDate":"2023-02-15"},{"lineNumber":149,"author":{"gitId":"ngkaiwen123"},"content":"        case \"T\":","lastModifiedDate":"2023-02-15"},{"lineNumber":150,"author":{"gitId":"ngkaiwen123"},"content":"            transferToDo(fileData, list);","lastModifiedDate":"2023-02-15"},{"lineNumber":151,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-02-15"},{"lineNumber":152,"author":{"gitId":"ngkaiwen123"},"content":"        case \"D\":","lastModifiedDate":"2023-02-15"},{"lineNumber":153,"author":{"gitId":"ngkaiwen123"},"content":"            transferDeadline(fileData, list);","lastModifiedDate":"2023-02-15"},{"lineNumber":154,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-02-15"},{"lineNumber":155,"author":{"gitId":"ngkaiwen123"},"content":"        case \"E\":","lastModifiedDate":"2023-02-15"},{"lineNumber":156,"author":{"gitId":"ngkaiwen123"},"content":"            transferEvent(fileData, list);","lastModifiedDate":"2023-02-15"},{"lineNumber":157,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-02-15"},{"lineNumber":158,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":159,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":160,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":161,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":162,"author":{"gitId":"ngkaiwen123"},"content":"     * If line found in .txt file is determined to be a task of type \"Event\", this method","lastModifiedDate":"2023-02-15"},{"lineNumber":163,"author":{"gitId":"ngkaiwen123"},"content":"     * will be executed to populate the ArrayList \"list\".","lastModifiedDate":"2023-02-15"},{"lineNumber":164,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":165,"author":{"gitId":"ngkaiwen123"},"content":"     * @param fileData An array of strings that have been split into different indexes for arraylist","lastModifiedDate":"2023-02-15"},{"lineNumber":166,"author":{"gitId":"ngkaiwen123"},"content":"     *                 initialization.","lastModifiedDate":"2023-02-15"},{"lineNumber":167,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list The ArrayList to be populated with data coming from the .txt file.","lastModifiedDate":"2023-02-15"},{"lineNumber":168,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":169,"author":{"gitId":"ngkaiwen123"},"content":"    private static void transferEvent(String[] fileData, ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-02-15"},{"lineNumber":170,"author":{"gitId":"ngkaiwen123"},"content":"        Event newEventTask \u003d new Event(fileData[2], fileData[3], fileData[4]);","lastModifiedDate":"2023-02-15"},{"lineNumber":171,"author":{"gitId":"ngkaiwen123"},"content":"        if (fileData[1].equals(\"1\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":172,"author":{"gitId":"ngkaiwen123"},"content":"            newEventTask.markDone();","lastModifiedDate":"2023-02-15"},{"lineNumber":173,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":174,"author":{"gitId":"ngkaiwen123"},"content":"        list.add(newEventTask);","lastModifiedDate":"2023-02-15"},{"lineNumber":175,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":176,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":177,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":178,"author":{"gitId":"ngkaiwen123"},"content":"     * If line found in .txt file is determined to be a task of type \"Deadline\", this method","lastModifiedDate":"2023-02-15"},{"lineNumber":179,"author":{"gitId":"ngkaiwen123"},"content":"     * will be executed to populate the ArrayList \"list\".","lastModifiedDate":"2023-02-15"},{"lineNumber":180,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":181,"author":{"gitId":"ngkaiwen123"},"content":"     * @param fileData An array of strings that have been split into different indexes for arraylist","lastModifiedDate":"2023-02-15"},{"lineNumber":182,"author":{"gitId":"ngkaiwen123"},"content":"     *                 initialization.","lastModifiedDate":"2023-02-15"},{"lineNumber":183,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list The ArrayList to be populated with data coming from the .txt file.","lastModifiedDate":"2023-02-15"},{"lineNumber":184,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":185,"author":{"gitId":"ngkaiwen123"},"content":"    private static void transferDeadline(String[] fileData, ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-02-15"},{"lineNumber":186,"author":{"gitId":"ngkaiwen123"},"content":"        Deadline newDeadlineTask \u003d new Deadline (fileData[2], fileData[3]);","lastModifiedDate":"2023-02-15"},{"lineNumber":187,"author":{"gitId":"ngkaiwen123"},"content":"        if (fileData[1].equals(\"1\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":188,"author":{"gitId":"ngkaiwen123"},"content":"            newDeadlineTask.markDone();","lastModifiedDate":"2023-02-15"},{"lineNumber":189,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":190,"author":{"gitId":"ngkaiwen123"},"content":"        list.add(newDeadlineTask);","lastModifiedDate":"2023-02-15"},{"lineNumber":191,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":192,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":193,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":194,"author":{"gitId":"ngkaiwen123"},"content":"     * If line found in .txt file is determined to be a task of type \"ToDo\", this method","lastModifiedDate":"2023-02-15"},{"lineNumber":195,"author":{"gitId":"ngkaiwen123"},"content":"     * will be executed to populate the ArrayList \"list\".","lastModifiedDate":"2023-02-15"},{"lineNumber":196,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":197,"author":{"gitId":"ngkaiwen123"},"content":"     * @param fileData An array of strings that have been split into different indexes for arraylist","lastModifiedDate":"2023-02-15"},{"lineNumber":198,"author":{"gitId":"ngkaiwen123"},"content":"     *                 initialization.","lastModifiedDate":"2023-02-15"},{"lineNumber":199,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list The ArrayList to be populated with data coming from the .txt file.","lastModifiedDate":"2023-02-15"},{"lineNumber":200,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":201,"author":{"gitId":"ngkaiwen123"},"content":"    private static void transferToDo(String[] fileData, ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-02-15"},{"lineNumber":202,"author":{"gitId":"ngkaiwen123"},"content":"         ToDo newToDo \u003d new ToDo(fileData[2]);","lastModifiedDate":"2023-02-15"},{"lineNumber":203,"author":{"gitId":"ngkaiwen123"},"content":"         if (fileData[1].equals(\"1\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":204,"author":{"gitId":"ngkaiwen123"},"content":"             newToDo.markDone();","lastModifiedDate":"2023-02-15"},{"lineNumber":205,"author":{"gitId":"ngkaiwen123"},"content":"         }","lastModifiedDate":"2023-02-15"},{"lineNumber":206,"author":{"gitId":"ngkaiwen123"},"content":"         list.add(newToDo);","lastModifiedDate":"2023-02-15"},{"lineNumber":207,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":208,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":209,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":210,"author":{"gitId":"ngkaiwen123"},"content":"     * Returns the number of tasks found in the list, after handling the commands given by the","lastModifiedDate":"2023-01-30"},{"lineNumber":211,"author":{"gitId":"ngkaiwen123"},"content":"     * user in the form of a line of string.","lastModifiedDate":"2023-01-30"},{"lineNumber":212,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":213,"author":{"gitId":"ngkaiwen123"},"content":"     * @param line     The single line of string inputted by the user.","lastModifiedDate":"2023-01-30"},{"lineNumber":214,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list     The ArrayList containing all information about existing tasks and their completion status.","lastModifiedDate":"2023-02-13"},{"lineNumber":215,"author":{"gitId":"ngkaiwen123"},"content":"     * @param listSize The current number of tasks populating the \"list\" array.","lastModifiedDate":"2023-01-30"},{"lineNumber":216,"author":{"gitId":"ngkaiwen123"},"content":"     * @return Returns the current size of the list populated by tasks created by the user.","lastModifiedDate":"2023-01-30"},{"lineNumber":217,"author":{"gitId":"ngkaiwen123"},"content":"     * @throws DukeException The custom defined exception relating to all errors specific to the Duke program.","lastModifiedDate":"2023-02-07"},{"lineNumber":218,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":219,"author":{"gitId":"ngkaiwen123"},"content":"    private static int handleUserInputs(String line, ArrayList\u003cTask\u003e list, int listSize) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":220,"author":{"gitId":"ngkaiwen123"},"content":"        String[] command \u003d line.split(\" \");","lastModifiedDate":"2023-01-25"},{"lineNumber":221,"author":{"gitId":"ngkaiwen123"},"content":"        //Check the first word in the line of strings (list, mark, unmark, event, etc.)","lastModifiedDate":"2023-01-30"},{"lineNumber":222,"author":{"gitId":"ngkaiwen123"},"content":"        switch (command[0]) {","lastModifiedDate":"2023-01-25"},{"lineNumber":223,"author":{"gitId":"ngkaiwen123"},"content":"        case \"list\":","lastModifiedDate":"2023-01-25"},{"lineNumber":224,"author":{"gitId":"ngkaiwen123"},"content":"            printList(list, listSize, command);","lastModifiedDate":"2023-01-30"},{"lineNumber":225,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":226,"author":{"gitId":"ngkaiwen123"},"content":"        case \"mark\":","lastModifiedDate":"2023-01-30"},{"lineNumber":227,"author":{"gitId":"ngkaiwen123"},"content":"            markAsDone(list, listSize, command);","lastModifiedDate":"2023-01-30"},{"lineNumber":228,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":229,"author":{"gitId":"ngkaiwen123"},"content":"        case \"unmark\":","lastModifiedDate":"2023-01-30"},{"lineNumber":230,"author":{"gitId":"ngkaiwen123"},"content":"            markAsUndone(list, listSize, command);","lastModifiedDate":"2023-01-30"},{"lineNumber":231,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":232,"author":{"gitId":"ngkaiwen123"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-13"},{"lineNumber":233,"author":{"gitId":"ngkaiwen123"},"content":"            listSize \u003d printNewlyRemovedTask(list, listSize, command);","lastModifiedDate":"2023-02-13"},{"lineNumber":234,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-02-13"},{"lineNumber":235,"author":{"gitId":"ngkaiwen123"},"content":"        case \"todo\":","lastModifiedDate":"2023-01-30"},{"lineNumber":236,"author":{"gitId":"ngkaiwen123"},"content":"            if (command.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-07"},{"lineNumber":237,"author":{"gitId":"ngkaiwen123"},"content":"                throw new DukeException();","lastModifiedDate":"2023-02-07"},{"lineNumber":238,"author":{"gitId":"ngkaiwen123"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":239,"author":{"gitId":"ngkaiwen123"},"content":"            list.add(new ToDo(line.substring(line.indexOf(\u0027 \u0027) + 1)));","lastModifiedDate":"2023-02-13"},{"lineNumber":240,"author":{"gitId":"ngkaiwen123"},"content":"            listSize \u003d printNewlyAddedTask(list, listSize);","lastModifiedDate":"2023-01-30"},{"lineNumber":241,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":242,"author":{"gitId":"ngkaiwen123"},"content":"        case \"deadline\":","lastModifiedDate":"2023-01-30"},{"lineNumber":243,"author":{"gitId":"ngkaiwen123"},"content":"            createNewDeadline(line, list);","lastModifiedDate":"2023-02-13"},{"lineNumber":244,"author":{"gitId":"ngkaiwen123"},"content":"            listSize \u003d printNewlyAddedTask(list, listSize);","lastModifiedDate":"2023-01-30"},{"lineNumber":245,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":246,"author":{"gitId":"ngkaiwen123"},"content":"        case \"event\":","lastModifiedDate":"2023-01-30"},{"lineNumber":247,"author":{"gitId":"ngkaiwen123"},"content":"            createNewEvent(line, list);","lastModifiedDate":"2023-02-13"},{"lineNumber":248,"author":{"gitId":"ngkaiwen123"},"content":"            listSize \u003d printNewlyAddedTask(list, listSize);","lastModifiedDate":"2023-01-30"},{"lineNumber":249,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":250,"author":{"gitId":"ngkaiwen123"},"content":"        case \"bye\":","lastModifiedDate":"2023-01-30"},{"lineNumber":251,"author":{"gitId":"ngkaiwen123"},"content":"            goodbyeMessage(command);","lastModifiedDate":"2023-02-06"},{"lineNumber":252,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":253,"author":{"gitId":"ngkaiwen123"},"content":"        default:","lastModifiedDate":"2023-01-30"},{"lineNumber":254,"author":{"gitId":"ngkaiwen123"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-07"},{"lineNumber":255,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":256,"author":{"gitId":"ngkaiwen123"},"content":"        return listSize;","lastModifiedDate":"2023-01-30"},{"lineNumber":257,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":258,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":259,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":260,"author":{"gitId":"ngkaiwen123"},"content":"     * Prints the \"list\" array, which contains a series of user-created tasks. The tasks will be printed","lastModifiedDate":"2023-01-30"},{"lineNumber":261,"author":{"gitId":"ngkaiwen123"},"content":"     * in entry order, starting from the task that was entered into the list first.","lastModifiedDate":"2023-01-30"},{"lineNumber":262,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":263,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list     The ArrayList containing all information about existing tasks and their completion status.","lastModifiedDate":"2023-02-13"},{"lineNumber":264,"author":{"gitId":"ngkaiwen123"},"content":"     * @param listSize The current number of tasks populating the \"list\" array.","lastModifiedDate":"2023-01-30"},{"lineNumber":265,"author":{"gitId":"ngkaiwen123"},"content":"     * @param command  The string array containing all individual strings separated by a space (\" \") character in","lastModifiedDate":"2023-01-30"},{"lineNumber":266,"author":{"gitId":"ngkaiwen123"},"content":"     *                 the user inputted string.","lastModifiedDate":"2023-01-30"},{"lineNumber":267,"author":{"gitId":"ngkaiwen123"},"content":"     * @throws DukeException The custom defined exception relating to all errors specific to the Duke program.","lastModifiedDate":"2023-02-07"},{"lineNumber":268,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":269,"author":{"gitId":"ngkaiwen123"},"content":"    private static void printList(ArrayList\u003cTask\u003e list, int listSize, String[] command) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":270,"author":{"gitId":"ngkaiwen123"},"content":"        if (command.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-25"},{"lineNumber":271,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":272,"author":{"gitId":"ngkaiwen123"},"content":"            for (int increment \u003d 0; increment \u003c listSize; increment +\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":273,"author":{"gitId":"ngkaiwen123"},"content":"                System.out.println((increment + 1) + \". \" + list.get(increment).toString());","lastModifiedDate":"2023-02-13"},{"lineNumber":274,"author":{"gitId":"ngkaiwen123"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":275,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":276,"author":{"gitId":"ngkaiwen123"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":277,"author":{"gitId":"ngkaiwen123"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-07"},{"lineNumber":278,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":279,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":280,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":281,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":282,"author":{"gitId":"ngkaiwen123"},"content":"     * Creates a new \"deadline\" task in the \"list\" array by determining the position of the \"/by","lastModifiedDate":"2023-01-30"},{"lineNumber":283,"author":{"gitId":"ngkaiwen123"},"content":"     * string in the entire string, in order to retrieve the strings representing the name/description","lastModifiedDate":"2023-01-30"},{"lineNumber":284,"author":{"gitId":"ngkaiwen123"},"content":"     * of the \"deadline\" task and the due date of the task.","lastModifiedDate":"2023-01-30"},{"lineNumber":285,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":286,"author":{"gitId":"ngkaiwen123"},"content":"     * @param line     The single line of string inputted by the user.","lastModifiedDate":"2023-01-30"},{"lineNumber":287,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list     The ArrayList containing all information about existing tasks and their completion status.","lastModifiedDate":"2023-02-13"},{"lineNumber":288,"author":{"gitId":"ngkaiwen123"},"content":"     * @throws DukeException The custom defined exception relating to all errors specific to the Duke program.","lastModifiedDate":"2023-02-07"},{"lineNumber":289,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":290,"author":{"gitId":"ngkaiwen123"},"content":"    private static void createNewDeadline(String line, ArrayList\u003cTask\u003e list) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":291,"author":{"gitId":"ngkaiwen123"},"content":"        int byIndex \u003d line.indexOf(\"/by\");","lastModifiedDate":"2023-01-30"},{"lineNumber":292,"author":{"gitId":"ngkaiwen123"},"content":"        if (byIndex \u003d\u003d -1) {","lastModifiedDate":"2023-02-07"},{"lineNumber":293,"author":{"gitId":"ngkaiwen123"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-07"},{"lineNumber":294,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":295,"author":{"gitId":"ngkaiwen123"},"content":"        String deadline \u003d line.substring(line.indexOf(\"deadline\") + 9, byIndex - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":296,"author":{"gitId":"ngkaiwen123"},"content":"        list.add(new Deadline(deadline, line.substring(byIndex + 4)));","lastModifiedDate":"2023-02-13"},{"lineNumber":297,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":298,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":299,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":300,"author":{"gitId":"ngkaiwen123"},"content":"     * Creates a new \"event\" task in the \"list\" array by determining the position of the \"/from\" and \"/to\"","lastModifiedDate":"2023-01-30"},{"lineNumber":301,"author":{"gitId":"ngkaiwen123"},"content":"     * strings in the entire string, in order to retrieve the strings representing the name/description (event)","lastModifiedDate":"2023-01-30"},{"lineNumber":302,"author":{"gitId":"ngkaiwen123"},"content":"     * of the event, the starting date (startDate) and ending date (endDate).","lastModifiedDate":"2023-01-30"},{"lineNumber":303,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":304,"author":{"gitId":"ngkaiwen123"},"content":"     * @param line     The single line of string inputted by the user.","lastModifiedDate":"2023-01-30"},{"lineNumber":305,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list     The ArrayList containing all information about existing tasks and their completion status.","lastModifiedDate":"2023-02-13"},{"lineNumber":306,"author":{"gitId":"ngkaiwen123"},"content":"     * @throws DukeException The custom defined exception relating to all errors specific to the Duke program.","lastModifiedDate":"2023-02-07"},{"lineNumber":307,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":308,"author":{"gitId":"ngkaiwen123"},"content":"    private static void createNewEvent(String line, ArrayList\u003cTask\u003e list) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":309,"author":{"gitId":"ngkaiwen123"},"content":"        int fromIndex \u003d line.indexOf(\"/from\");","lastModifiedDate":"2023-01-30"},{"lineNumber":310,"author":{"gitId":"ngkaiwen123"},"content":"        int toIndex \u003d line.indexOf(\"/to\");","lastModifiedDate":"2023-01-30"},{"lineNumber":311,"author":{"gitId":"ngkaiwen123"},"content":"        if (fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1) {","lastModifiedDate":"2023-02-07"},{"lineNumber":312,"author":{"gitId":"ngkaiwen123"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-07"},{"lineNumber":313,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":314,"author":{"gitId":"ngkaiwen123"},"content":"        String event;","lastModifiedDate":"2023-01-30"},{"lineNumber":315,"author":{"gitId":"ngkaiwen123"},"content":"        String startDate;","lastModifiedDate":"2023-01-30"},{"lineNumber":316,"author":{"gitId":"ngkaiwen123"},"content":"        String endDate;","lastModifiedDate":"2023-01-30"},{"lineNumber":317,"author":{"gitId":"ngkaiwen123"},"content":"        if (fromIndex \u003c toIndex) {","lastModifiedDate":"2023-01-30"},{"lineNumber":318,"author":{"gitId":"ngkaiwen123"},"content":"            //If user typed \"/from\" before \"/to\".","lastModifiedDate":"2023-01-30"},{"lineNumber":319,"author":{"gitId":"ngkaiwen123"},"content":"            event \u003d line.substring(line.indexOf(\"event\") + 5, fromIndex - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":320,"author":{"gitId":"ngkaiwen123"},"content":"            startDate \u003d line.substring(fromIndex + 6, toIndex - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":321,"author":{"gitId":"ngkaiwen123"},"content":"            endDate \u003d line.substring(toIndex + 4);","lastModifiedDate":"2023-01-30"},{"lineNumber":322,"author":{"gitId":"ngkaiwen123"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":323,"author":{"gitId":"ngkaiwen123"},"content":"            //If user typed \"/to\" before \"/from\".","lastModifiedDate":"2023-01-30"},{"lineNumber":324,"author":{"gitId":"ngkaiwen123"},"content":"            event \u003d line.substring(line.indexOf(\"event\") + 5, toIndex - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":325,"author":{"gitId":"ngkaiwen123"},"content":"            startDate \u003d line.substring(toIndex + 4, fromIndex - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":326,"author":{"gitId":"ngkaiwen123"},"content":"            endDate \u003d line.substring(fromIndex + 6);","lastModifiedDate":"2023-01-30"},{"lineNumber":327,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":328,"author":{"gitId":"ngkaiwen123"},"content":"        list.add(new Event(event, startDate, endDate));","lastModifiedDate":"2023-02-13"},{"lineNumber":329,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":330,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":331,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":332,"author":{"gitId":"ngkaiwen123"},"content":"     * Prints a series of strings to inform the user that the task has been added to the list of tasks, while","lastModifiedDate":"2023-01-30"},{"lineNumber":333,"author":{"gitId":"ngkaiwen123"},"content":"     * incrementing the \"listSize\" variable used to track the total tasks in the list by one.","lastModifiedDate":"2023-01-30"},{"lineNumber":334,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":335,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list     The ArrayList containing all information about existing tasks and their completion status.","lastModifiedDate":"2023-02-13"},{"lineNumber":336,"author":{"gitId":"ngkaiwen123"},"content":"     * @param listSize The current number of tasks populating the \"list\" array.","lastModifiedDate":"2023-01-30"},{"lineNumber":337,"author":{"gitId":"ngkaiwen123"},"content":"     * @return Returns the new total number of tasks found in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":338,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":339,"author":{"gitId":"ngkaiwen123"},"content":"    private static int printNewlyAddedTask(ArrayList\u003cTask\u003e list, int listSize) {","lastModifiedDate":"2023-02-13"},{"lineNumber":340,"author":{"gitId":"ngkaiwen123"},"content":"        lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":341,"author":{"gitId":"ngkaiwen123"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-01-30"},{"lineNumber":342,"author":{"gitId":"ngkaiwen123"},"content":"        System.out.println(\"  \" + list.get(listSize));","lastModifiedDate":"2023-02-13"},{"lineNumber":343,"author":{"gitId":"ngkaiwen123"},"content":"        listSize +\u003d 1;","lastModifiedDate":"2023-01-30"},{"lineNumber":344,"author":{"gitId":"ngkaiwen123"},"content":"        System.out.println(\"Now you have \" + listSize + \" tasks in the list.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":345,"author":{"gitId":"ngkaiwen123"},"content":"        lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":346,"author":{"gitId":"ngkaiwen123"},"content":"        return listSize;","lastModifiedDate":"2023-01-30"},{"lineNumber":347,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":348,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":349,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":350,"author":{"gitId":"ngkaiwen123"},"content":"     * Removes one task from the list of tasks based on the index number of the task inputted by the user, and","lastModifiedDate":"2023-02-13"},{"lineNumber":351,"author":{"gitId":"ngkaiwen123"},"content":"     * informs the user of the removal of the selected task from the list.","lastModifiedDate":"2023-02-13"},{"lineNumber":352,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":353,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list The ArrayList containing all information about existing tasks and their completion status.","lastModifiedDate":"2023-02-13"},{"lineNumber":354,"author":{"gitId":"ngkaiwen123"},"content":"     * @param listSize The current number of tasks populating the \"list\" array.","lastModifiedDate":"2023-02-13"},{"lineNumber":355,"author":{"gitId":"ngkaiwen123"},"content":"     * @param command The string array containing all individual strings separated by a space (\" \") character in","lastModifiedDate":"2023-02-13"},{"lineNumber":356,"author":{"gitId":"ngkaiwen123"},"content":"     *                the user inputted string.","lastModifiedDate":"2023-02-13"},{"lineNumber":357,"author":{"gitId":"ngkaiwen123"},"content":"     * @return Returns the size of the \"list\" ArrayList after the removal of one task from the list.","lastModifiedDate":"2023-02-13"},{"lineNumber":358,"author":{"gitId":"ngkaiwen123"},"content":"     * @throws DukeException The custom defined exception relating to all errors specific to the Duke program.","lastModifiedDate":"2023-02-13"},{"lineNumber":359,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":360,"author":{"gitId":"ngkaiwen123"},"content":"    private static int printNewlyRemovedTask(ArrayList\u003cTask\u003e list, int listSize, String[] command) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":361,"author":{"gitId":"ngkaiwen123"},"content":"        if (command.length \u003d\u003d 2 \u0026\u0026 isNumeric(command[1])) {","lastModifiedDate":"2023-02-13"},{"lineNumber":362,"author":{"gitId":"ngkaiwen123"},"content":"            int taskNumber \u003d Integer.parseInt(command[1]);","lastModifiedDate":"2023-02-13"},{"lineNumber":363,"author":{"gitId":"ngkaiwen123"},"content":"            if (taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d listSize) {","lastModifiedDate":"2023-02-13"},{"lineNumber":364,"author":{"gitId":"ngkaiwen123"},"content":"                //If valid task number is given.","lastModifiedDate":"2023-02-13"},{"lineNumber":365,"author":{"gitId":"ngkaiwen123"},"content":"                lineSeparator();","lastModifiedDate":"2023-02-13"},{"lineNumber":366,"author":{"gitId":"ngkaiwen123"},"content":"                System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-02-13"},{"lineNumber":367,"author":{"gitId":"ngkaiwen123"},"content":"                System.out.println(\"  \" + list.get(taskNumber - 1).toString());","lastModifiedDate":"2023-02-13"},{"lineNumber":368,"author":{"gitId":"ngkaiwen123"},"content":"                listSize -\u003d 1;","lastModifiedDate":"2023-02-13"},{"lineNumber":369,"author":{"gitId":"ngkaiwen123"},"content":"                System.out.println(\"Now you have \" + listSize + \" tasks in the list.\");","lastModifiedDate":"2023-02-13"},{"lineNumber":370,"author":{"gitId":"ngkaiwen123"},"content":"                lineSeparator();","lastModifiedDate":"2023-02-13"},{"lineNumber":371,"author":{"gitId":"ngkaiwen123"},"content":"                list.remove(taskNumber - 1);","lastModifiedDate":"2023-02-13"},{"lineNumber":372,"author":{"gitId":"ngkaiwen123"},"content":"            } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":373,"author":{"gitId":"ngkaiwen123"},"content":"                //If task number given exceeds total tasks.","lastModifiedDate":"2023-02-13"},{"lineNumber":374,"author":{"gitId":"ngkaiwen123"},"content":"                throw new DukeException();","lastModifiedDate":"2023-02-13"},{"lineNumber":375,"author":{"gitId":"ngkaiwen123"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":376,"author":{"gitId":"ngkaiwen123"},"content":"        } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":377,"author":{"gitId":"ngkaiwen123"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-13"},{"lineNumber":378,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":379,"author":{"gitId":"ngkaiwen123"},"content":"        return listSize;","lastModifiedDate":"2023-02-13"},{"lineNumber":380,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":381,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":382,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":383,"author":{"gitId":"ngkaiwen123"},"content":"     * Changes the completion status of the user-created task to done, and prints a series of strings","lastModifiedDate":"2023-01-30"},{"lineNumber":384,"author":{"gitId":"ngkaiwen123"},"content":"     * to inform the user about the update to the task completion status.","lastModifiedDate":"2023-01-30"},{"lineNumber":385,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":386,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list     The ArrayList containing all information about existing tasks and their completion status.","lastModifiedDate":"2023-02-13"},{"lineNumber":387,"author":{"gitId":"ngkaiwen123"},"content":"     * @param listSize The current number of tasks populating the \"list\" array.","lastModifiedDate":"2023-01-30"},{"lineNumber":388,"author":{"gitId":"ngkaiwen123"},"content":"     * @param command  The string array containing all individual strings separated by a space (\" \") character in","lastModifiedDate":"2023-01-30"},{"lineNumber":389,"author":{"gitId":"ngkaiwen123"},"content":"     *                 the user inputted string.","lastModifiedDate":"2023-01-30"},{"lineNumber":390,"author":{"gitId":"ngkaiwen123"},"content":"     * @throws DukeException The custom defined exception relating to all errors specific to the Duke program.","lastModifiedDate":"2023-02-07"},{"lineNumber":391,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":392,"author":{"gitId":"ngkaiwen123"},"content":"    private static void markAsDone(ArrayList\u003cTask\u003e list, int listSize, String[] command) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":393,"author":{"gitId":"ngkaiwen123"},"content":"        if (command.length \u003d\u003d 2 \u0026\u0026 isNumeric(command[1])) {","lastModifiedDate":"2023-01-25"},{"lineNumber":394,"author":{"gitId":"ngkaiwen123"},"content":"            //If user wants to mark task as done and second input after \"mark\" is a valid number.","lastModifiedDate":"2023-01-30"},{"lineNumber":395,"author":{"gitId":"ngkaiwen123"},"content":"            int taskNumber \u003d Integer.parseInt(command[1]);","lastModifiedDate":"2023-01-25"},{"lineNumber":396,"author":{"gitId":"ngkaiwen123"},"content":"            if (taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d listSize) {","lastModifiedDate":"2023-01-26"},{"lineNumber":397,"author":{"gitId":"ngkaiwen123"},"content":"                //If valid task number is given.","lastModifiedDate":"2023-01-26"},{"lineNumber":398,"author":{"gitId":"ngkaiwen123"},"content":"                list.get(taskNumber - 1).markDone();","lastModifiedDate":"2023-02-13"},{"lineNumber":399,"author":{"gitId":"ngkaiwen123"},"content":"                lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":400,"author":{"gitId":"ngkaiwen123"},"content":"                System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-01-25"},{"lineNumber":401,"author":{"gitId":"ngkaiwen123"},"content":"                System.out.println(\"  \" + list.get(taskNumber - 1).toString());","lastModifiedDate":"2023-02-13"},{"lineNumber":402,"author":{"gitId":"ngkaiwen123"},"content":"                lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":403,"author":{"gitId":"ngkaiwen123"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":404,"author":{"gitId":"ngkaiwen123"},"content":"                //If task number given exceeds total tasks.","lastModifiedDate":"2023-01-26"},{"lineNumber":405,"author":{"gitId":"ngkaiwen123"},"content":"                throw new DukeException();","lastModifiedDate":"2023-02-07"},{"lineNumber":406,"author":{"gitId":"ngkaiwen123"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":407,"author":{"gitId":"ngkaiwen123"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":408,"author":{"gitId":"ngkaiwen123"},"content":"            //If user types non-integer inputs after \"mark\".","lastModifiedDate":"2023-01-30"},{"lineNumber":409,"author":{"gitId":"ngkaiwen123"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-07"},{"lineNumber":410,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":411,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":412,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":413,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":414,"author":{"gitId":"ngkaiwen123"},"content":"     * Changes the completion status of the user-created task to NOT done, and prints a series of strings","lastModifiedDate":"2023-01-30"},{"lineNumber":415,"author":{"gitId":"ngkaiwen123"},"content":"     * to inform the user about the update to the task completion status.","lastModifiedDate":"2023-01-30"},{"lineNumber":416,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":417,"author":{"gitId":"ngkaiwen123"},"content":"     * @param list     The ArrayList containing all information about existing tasks and their completion status.","lastModifiedDate":"2023-02-13"},{"lineNumber":418,"author":{"gitId":"ngkaiwen123"},"content":"     * @param listSize The current number of tasks populating the \"list\" array.","lastModifiedDate":"2023-01-30"},{"lineNumber":419,"author":{"gitId":"ngkaiwen123"},"content":"     * @param command  The string array containing all individual strings separated by a space (\" \") character in","lastModifiedDate":"2023-01-30"},{"lineNumber":420,"author":{"gitId":"ngkaiwen123"},"content":"     *                 the user inputted string.","lastModifiedDate":"2023-01-30"},{"lineNumber":421,"author":{"gitId":"ngkaiwen123"},"content":"     * @throws DukeException The custom defined exception relating to all errors specific to the Duke program.","lastModifiedDate":"2023-02-07"},{"lineNumber":422,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":423,"author":{"gitId":"ngkaiwen123"},"content":"    private static void markAsUndone(ArrayList\u003cTask\u003e list, int listSize, String[] command) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":424,"author":{"gitId":"ngkaiwen123"},"content":"        if (command.length \u003d\u003d 2 \u0026\u0026 isNumeric(command[1])) {","lastModifiedDate":"2023-01-25"},{"lineNumber":425,"author":{"gitId":"ngkaiwen123"},"content":"            //If user wants to mark task as not done and second input after \"unmark\" is a valid number.","lastModifiedDate":"2023-01-30"},{"lineNumber":426,"author":{"gitId":"ngkaiwen123"},"content":"            int taskNumber \u003d Integer.parseInt(command[1]);","lastModifiedDate":"2023-01-25"},{"lineNumber":427,"author":{"gitId":"ngkaiwen123"},"content":"            if (taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d listSize) {","lastModifiedDate":"2023-01-26"},{"lineNumber":428,"author":{"gitId":"ngkaiwen123"},"content":"                //If valid task number is given.","lastModifiedDate":"2023-01-26"},{"lineNumber":429,"author":{"gitId":"ngkaiwen123"},"content":"                list.get(taskNumber - 1).unmarkDone();","lastModifiedDate":"2023-02-13"},{"lineNumber":430,"author":{"gitId":"ngkaiwen123"},"content":"                lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":431,"author":{"gitId":"ngkaiwen123"},"content":"                System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-01-25"},{"lineNumber":432,"author":{"gitId":"ngkaiwen123"},"content":"                System.out.println(\"  \" + list.get(taskNumber - 1).toString());","lastModifiedDate":"2023-02-13"},{"lineNumber":433,"author":{"gitId":"ngkaiwen123"},"content":"                lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":434,"author":{"gitId":"ngkaiwen123"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":435,"author":{"gitId":"ngkaiwen123"},"content":"                //If task number given exceeds total tasks in the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":436,"author":{"gitId":"ngkaiwen123"},"content":"                throw new DukeException();","lastModifiedDate":"2023-02-07"},{"lineNumber":437,"author":{"gitId":"ngkaiwen123"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":438,"author":{"gitId":"ngkaiwen123"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":439,"author":{"gitId":"ngkaiwen123"},"content":"            //If user types non-integer inputs after \"unmark\".","lastModifiedDate":"2023-01-29"},{"lineNumber":440,"author":{"gitId":"ngkaiwen123"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-07"},{"lineNumber":441,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":442,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":443,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":444,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":445,"author":{"gitId":"ngkaiwen123"},"content":"     * Prints a string to inform the user that the program is terminating.","lastModifiedDate":"2023-01-30"},{"lineNumber":446,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-06"},{"lineNumber":447,"author":{"gitId":"ngkaiwen123"},"content":"     * @param command The string array containing all individual strings separated by a space (\" \") character in","lastModifiedDate":"2023-02-06"},{"lineNumber":448,"author":{"gitId":"ngkaiwen123"},"content":"     *                the user inputted string.","lastModifiedDate":"2023-02-06"},{"lineNumber":449,"author":{"gitId":"ngkaiwen123"},"content":"     * @throws DukeException The custom defined exception relating to all errors specific to the Duke program.","lastModifiedDate":"2023-02-07"},{"lineNumber":450,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":451,"author":{"gitId":"ngkaiwen123"},"content":"    private static void goodbyeMessage(String[] command) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":452,"author":{"gitId":"ngkaiwen123"},"content":"        if (command.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-06"},{"lineNumber":453,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":454,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":455,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":456,"author":{"gitId":"ngkaiwen123"},"content":"        } else {","lastModifiedDate":"2023-02-06"},{"lineNumber":457,"author":{"gitId":"ngkaiwen123"},"content":"            //If \u0027bye\u0027 is not the only thing typed.","lastModifiedDate":"2023-02-07"},{"lineNumber":458,"author":{"gitId":"ngkaiwen123"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-07"},{"lineNumber":459,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":460,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":461,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":462,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":463,"author":{"gitId":"ngkaiwen123"},"content":"     * Prints a series of error message strings depending on the wrong or partially wrong input by the user.","lastModifiedDate":"2023-02-07"},{"lineNumber":464,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":465,"author":{"gitId":"ngkaiwen123"},"content":"     * @param line The single line of string inputted by the user.","lastModifiedDate":"2023-02-07"},{"lineNumber":466,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":467,"author":{"gitId":"ngkaiwen123"},"content":"    private static void handleException(String line) {","lastModifiedDate":"2023-02-07"},{"lineNumber":468,"author":{"gitId":"ngkaiwen123"},"content":"        String[] command \u003d line.split(\" \");","lastModifiedDate":"2023-02-07"},{"lineNumber":469,"author":{"gitId":"ngkaiwen123"},"content":"        switch (command[0]) {","lastModifiedDate":"2023-02-07"},{"lineNumber":470,"author":{"gitId":"ngkaiwen123"},"content":"        case \"list\":","lastModifiedDate":"2023-02-07"},{"lineNumber":471,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-02-07"},{"lineNumber":472,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"OOPS!!! A \u0027list\u0027 command cannot contain a second word!\");","lastModifiedDate":"2023-02-07"},{"lineNumber":473,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-02-07"},{"lineNumber":474,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-02-07"},{"lineNumber":475,"author":{"gitId":"ngkaiwen123"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-07"},{"lineNumber":476,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-02-07"},{"lineNumber":477,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"OOPS!!! A description of a \u0027todo\u0027 cannot be empty. Please follow this format below:\");","lastModifiedDate":"2023-02-07"},{"lineNumber":478,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"    todo \u003cINSERT TASK NAME\u003e\");","lastModifiedDate":"2023-02-07"},{"lineNumber":479,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-02-07"},{"lineNumber":480,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-02-07"},{"lineNumber":481,"author":{"gitId":"ngkaiwen123"},"content":"        case \"event\":","lastModifiedDate":"2023-02-07"},{"lineNumber":482,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-02-07"},{"lineNumber":483,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"OOPS!!! Did you declare your \u0027event\u0027 properly? Please follow this format below:\");","lastModifiedDate":"2023-02-07"},{"lineNumber":484,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"    event \u003cINSERT TASK NAME\u003e /from \u003cINSERT START DATE\u003e /to \u003cINSERT END DATE\u003e\");","lastModifiedDate":"2023-02-07"},{"lineNumber":485,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-02-07"},{"lineNumber":486,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-02-07"},{"lineNumber":487,"author":{"gitId":"ngkaiwen123"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-07"},{"lineNumber":488,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-02-07"},{"lineNumber":489,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"OOPS!!! Did you declare your \u0027deadline\u0027 properly? Please follow this format below:\");","lastModifiedDate":"2023-02-07"},{"lineNumber":490,"author":{"gitId":"ngkaiwen123"},"content":"            System.out.println(\"    deadline \u003cINSERT TASK NAME\u003e /by \u003cINSERT END DATE\u003e\");","lastModifiedDate":"2023-02-07"},{"lineNumber":491,"author":{"gitId":"ngkaiwen123"},"content":"            lineSeparator();","lastModifiedDate":"2023-02-07"},{"lineNumber":492,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-02-07"},{"lineNumber":493,"author":{"gitId":"ngkaiwen123"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-07"},{"lineNumber":494,"author":{"gitId":"ngkaiwen123"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-07"},{"lineNumber":495,"author":{"gitId":"ngkaiwen123"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-13"},{"lineNumber":496,"author":{"gitId":"ngkaiwen123"},"content":"            printInvalidInputError();","lastModifiedDate":"2023-02-07"},{"lineNumber":497,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-02-07"},{"lineNumber":498,"author":{"gitId":"ngkaiwen123"},"content":"        default:","lastModifiedDate":"2023-02-07"},{"lineNumber":499,"author":{"gitId":"ngkaiwen123"},"content":"            printInvalidCommandError();","lastModifiedDate":"2023-02-06"},{"lineNumber":500,"author":{"gitId":"ngkaiwen123"},"content":"            break;","lastModifiedDate":"2023-02-07"},{"lineNumber":501,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":502,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":503,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":504,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":505,"author":{"gitId":"ngkaiwen123"},"content":"     * Prints a string to inform the user about an invalid command entered as the input.","lastModifiedDate":"2023-01-30"},{"lineNumber":506,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":507,"author":{"gitId":"ngkaiwen123"},"content":"    private static void printInvalidCommandError() {","lastModifiedDate":"2023-01-30"},{"lineNumber":508,"author":{"gitId":"ngkaiwen123"},"content":"        lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":509,"author":{"gitId":"ngkaiwen123"},"content":"        System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-02-07"},{"lineNumber":510,"author":{"gitId":"ngkaiwen123"},"content":"        lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":511,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":512,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":513,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":514,"author":{"gitId":"ngkaiwen123"},"content":"     * Prints a string to inform the user to retype a valid task number.","lastModifiedDate":"2023-01-30"},{"lineNumber":515,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":516,"author":{"gitId":"ngkaiwen123"},"content":"    private static void printInvalidInputError() {","lastModifiedDate":"2023-01-30"},{"lineNumber":517,"author":{"gitId":"ngkaiwen123"},"content":"        lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":518,"author":{"gitId":"ngkaiwen123"},"content":"        System.out.println(\"OOPS!!! Please key in a valid task number!\");","lastModifiedDate":"2023-02-07"},{"lineNumber":519,"author":{"gitId":"ngkaiwen123"},"content":"        lineSeparator();","lastModifiedDate":"2023-01-29"},{"lineNumber":520,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":521,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":522,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":523,"author":{"gitId":"ngkaiwen123"},"content":"     * Prints a string to inform the user that file used to retrieve and store data does not","lastModifiedDate":"2023-02-15"},{"lineNumber":524,"author":{"gitId":"ngkaiwen123"},"content":"     * exist, and that the program will attempt to create a file for this exact purpose.","lastModifiedDate":"2023-02-15"},{"lineNumber":525,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":526,"author":{"gitId":"ngkaiwen123"},"content":"    private static void printMissingFileError() {","lastModifiedDate":"2023-02-15"},{"lineNumber":527,"author":{"gitId":"ngkaiwen123"},"content":"        lineSeparator();","lastModifiedDate":"2023-02-15"},{"lineNumber":528,"author":{"gitId":"ngkaiwen123"},"content":"        System.out.println(\"File cannot be found! Creating new file for data storage...\");","lastModifiedDate":"2023-02-15"},{"lineNumber":529,"author":{"gitId":"ngkaiwen123"},"content":"        lineSeparator();","lastModifiedDate":"2023-02-15"},{"lineNumber":530,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":531,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":532,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":533,"author":{"gitId":"ngkaiwen123"},"content":"     * Generates strings to greet the user and welcome them to the program.","lastModifiedDate":"2023-02-15"},{"lineNumber":534,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":535,"author":{"gitId":"ngkaiwen123"},"content":"    private static void greetUser() {","lastModifiedDate":"2023-02-15"},{"lineNumber":536,"author":{"gitId":"ngkaiwen123"},"content":"        lineSeparator();","lastModifiedDate":"2023-02-15"},{"lineNumber":537,"author":{"gitId":"ngkaiwen123"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-02-15"},{"lineNumber":538,"author":{"gitId":"ngkaiwen123"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-02-15"},{"lineNumber":539,"author":{"gitId":"ngkaiwen123"},"content":"        lineSeparator();","lastModifiedDate":"2023-02-15"},{"lineNumber":540,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":541,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":542,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":543,"author":{"gitId":"ngkaiwen123"},"content":"     * Prints a long string of lines (\"___\") to separate the outputs.","lastModifiedDate":"2023-01-30"},{"lineNumber":544,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":545,"author":{"gitId":"ngkaiwen123"},"content":"    public static void lineSeparator() {","lastModifiedDate":"2023-01-30"},{"lineNumber":546,"author":{"gitId":"ngkaiwen123"},"content":"        System.out.println(\"___________________________________________________________________________________\");","lastModifiedDate":"2023-01-30"},{"lineNumber":547,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":548,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":549,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":550,"author":{"gitId":"ngkaiwen123"},"content":"     * Returns false if the second string in the input cannot be converted into a numeric type, true if it","lastModifiedDate":"2023-01-30"},{"lineNumber":551,"author":{"gitId":"ngkaiwen123"},"content":"     * can be converted.","lastModifiedDate":"2023-01-30"},{"lineNumber":552,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":553,"author":{"gitId":"ngkaiwen123"},"content":"     * @param strNum The second string found in the user input.","lastModifiedDate":"2023-01-30"},{"lineNumber":554,"author":{"gitId":"ngkaiwen123"},"content":"     * @return Boolean for whether string can be converted into a numeric type (int, double etc.).","lastModifiedDate":"2023-01-30"},{"lineNumber":555,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":556,"author":{"gitId":"-"},"content":"    //@@author ngkaiwen123-reused","lastModifiedDate":"2023-01-30"},{"lineNumber":557,"author":{"gitId":"-"},"content":"    //Reused from https://www.baeldung.com/java-check-string-number","lastModifiedDate":"2023-01-30"},{"lineNumber":558,"author":{"gitId":"-"},"content":"    public static boolean isNumeric(String strNum) {","lastModifiedDate":"2023-01-30"},{"lineNumber":559,"author":{"gitId":"-"},"content":"        if (strNum \u003d\u003d null) {","lastModifiedDate":"2023-01-30"},{"lineNumber":560,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-01-30"},{"lineNumber":561,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":562,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":563,"author":{"gitId":"-"},"content":"            Double.parseDouble(strNum);","lastModifiedDate":"2023-01-30"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2023-01-30"},{"lineNumber":565,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-01-30"},{"lineNumber":566,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":567,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2023-01-30"},{"lineNumber":568,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":569,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2023-01-30"},{"lineNumber":570,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ngkaiwen123":552,"-":18}},{"path":"src/main/java/duke/command/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngkaiwen123"},"content":"package duke.command;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"ngkaiwen123"},"content":"/**","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"ngkaiwen123"},"content":" * Custom exception made, used for processing exceptions in the \u0027Duke\u0027 program.","lastModifiedDate":"2023-02-09"},{"lineNumber":5,"author":{"gitId":"ngkaiwen123"},"content":" */","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"ngkaiwen123"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"ngkaiwen123"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"ngkaiwen123":8}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngkaiwen123"},"content":"package duke.task;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"ngkaiwen123"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"ngkaiwen123"},"content":"    /** The end date of the task inputted by the user. */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"ngkaiwen123"},"content":"    protected String by;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"ngkaiwen123"},"content":"     * Creates a new \"deadline\" task containing the name of the task and its respective due date.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"ngkaiwen123"},"content":"     * @param description The name/description of the \"deadline\" task.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"ngkaiwen123"},"content":"     * @param by The due date of the \"deadline\" task as defined by the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ngkaiwen123"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ngkaiwen123"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ngkaiwen123"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ngkaiwen123"},"content":"     * Returns a string for output printing, containing information about the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ngkaiwen123"},"content":"     * @return String containing the category label of the task, completion status, description of task","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ngkaiwen123"},"content":"     * and dates (if any).","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ngkaiwen123"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ngkaiwen123"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ngkaiwen123"},"content":"        return \"[D][\" + super.getStatusIcon() + \"] \" + super.getDescription() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"ngkaiwen123"},"content":"     * Retrieves the due date of the \"deadline\" task type.","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"ngkaiwen123"},"content":"     * @return The ending date of the \"deadline\" task type in question.","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"ngkaiwen123"},"content":"    public String getBy() {","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"ngkaiwen123"},"content":"        return by;","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"ngkaiwen123"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"ngkaiwen123":38}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngkaiwen123"},"content":"package duke.task;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"ngkaiwen123"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"ngkaiwen123"},"content":"    /** The starting date of the \"event\" task. */","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"ngkaiwen123"},"content":"    protected String from;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"ngkaiwen123"},"content":"    /** The ending date of the \"event\" task. */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"ngkaiwen123"},"content":"    protected String to;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"ngkaiwen123"},"content":"     * Creates an duke.task.Event and stores information about the \"event\" task.","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ngkaiwen123"},"content":"     * @param description The name/description of the \"event\" task.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ngkaiwen123"},"content":"     * @param from The start date of the \"event\" task.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ngkaiwen123"},"content":"     * @param to The end date of the \"event\" task.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ngkaiwen123"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ngkaiwen123"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ngkaiwen123"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ngkaiwen123"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ngkaiwen123"},"content":"     * Returns a string for output printing, containing information about the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ngkaiwen123"},"content":"     * @return String containing the category label of the task, completion status, description of task","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ngkaiwen123"},"content":"     * and dates (if any).","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"ngkaiwen123"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"ngkaiwen123"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"ngkaiwen123"},"content":"        return \"[E][\" + super.getStatusIcon() + \"]\" + super.getDescription() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"ngkaiwen123"},"content":"     * Retrieves the start date of the task of type \"Event\".","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"ngkaiwen123"},"content":"     * @return The starting date of the \"event\" task type.","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"ngkaiwen123"},"content":"    public String getFrom() {","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"ngkaiwen123"},"content":"        return from;","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"ngkaiwen123"},"content":"     * Retrieves the end date of the task of type \"Event\".","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"ngkaiwen123"},"content":"     * @return The ending date of the \"event\" task type.","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"ngkaiwen123"},"content":"    public String getTo() {","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"ngkaiwen123"},"content":"        return to;","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"ngkaiwen123"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"ngkaiwen123":51}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngkaiwen123"},"content":"package duke.task;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"ngkaiwen123"},"content":"public class Task {","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"ngkaiwen123"},"content":"     * The description or name of the task added.","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"ngkaiwen123"},"content":"    protected String description;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"ngkaiwen123"},"content":"     * Records whether tasking is marked as done or not done.","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"ngkaiwen123"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"ngkaiwen123"},"content":"     * Creates a new task by recording the user inputted description and setting the status of the task to undone","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"ngkaiwen123"},"content":"     * by default.","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"ngkaiwen123"},"content":"     * @param description The name or description of the new task added.","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"ngkaiwen123"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"ngkaiwen123"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"ngkaiwen123"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"ngkaiwen123"},"content":"     * Returns a string that represents the \"done\" or \"not done\" status of the task in question.","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"ngkaiwen123"},"content":"     * @return A string \"X\" if isDone() is true, \" \" if isDone() is false.","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"ngkaiwen123"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"ngkaiwen123"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"ngkaiwen123"},"content":"     * Returns the description or the name of the task in question.","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"ngkaiwen123"},"content":"     * @return Name/Description of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"ngkaiwen123"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"ngkaiwen123"},"content":"        return this.description;","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"ngkaiwen123"},"content":"     * Marks the task in question as done by changing the boolean isDone() to true.","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"ngkaiwen123"},"content":"    public void markDone() {","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"ngkaiwen123"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"ngkaiwen123"},"content":"     * Marks the task in question as not done by changing the boolean isDone() to false.","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"ngkaiwen123"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"ngkaiwen123"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"ngkaiwen123"},"content":"     * Retrieves the true/false value of the completion status of the task in question.","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"ngkaiwen123"},"content":"     * @return The boolean value (1 or 0) of the completion status. Returns 0 if false/uncompleted,","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"ngkaiwen123"},"content":"     * 1 if task is completed/true.","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"ngkaiwen123"},"content":"    public int getBooleanValueOfStatus() {","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"ngkaiwen123"},"content":"        if (isDone) {","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"ngkaiwen123"},"content":"            return 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"ngkaiwen123"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"ngkaiwen123"},"content":"        return 0;","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"ngkaiwen123"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"ngkaiwen123":69}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngkaiwen123"},"content":"package duke.task;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"ngkaiwen123"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"ngkaiwen123"},"content":"     * Create a new \"todo\" task.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"ngkaiwen123"},"content":"     * @param description The description/name of the \"todo\" task.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"ngkaiwen123"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"ngkaiwen123"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ngkaiwen123"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ngkaiwen123"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ngkaiwen123"},"content":"     * Returns a string for output printing, containing information about the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ngkaiwen123"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ngkaiwen123"},"content":"     * @return String containing the category label of the task, completion status, description of task","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ngkaiwen123"},"content":"     * and dates (if any).","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ngkaiwen123"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ngkaiwen123"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ngkaiwen123"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ngkaiwen123"},"content":"        return \"[T][\" + super.getStatusIcon() + \"] \" + super.getDescription();","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ngkaiwen123"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ngkaiwen123"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"ngkaiwen123":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ngkaiwen123"},"content":"todo","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"ngkaiwen123"},"content":"list 5","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"ngkaiwen123"},"content":"event","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"ngkaiwen123"},"content":"event /from","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"ngkaiwen123"},"content":"deadline sample","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"ngkaiwen123"},"content":"bye duke!","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"ngkaiwen123"},"content":"wrong input","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"ngkaiwen123"},"content":"todo task","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"ngkaiwen123"},"content":"event task2 /from 2 /to 4","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"ngkaiwen123"},"content":"deadline task3 /by 2pm","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"ngkaiwen123"},"content":"list","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"ngkaiwen123"},"content":"mark 1","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"ngkaiwen123"},"content":"mark 5","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"ngkaiwen123"},"content":"unmark 2","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"ngkaiwen123"},"content":"list","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"ngkaiwen123"},"content":"unmark 1","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"ngkaiwen123"},"content":"delete 2","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ngkaiwen123"},"content":"delete 3","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ngkaiwen123"},"content":"list","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"ngkaiwen123"},"content":"bye","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"ngkaiwen123":20}}]
