[{"path":"src/main/java/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the command to exit the program.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the execute method to print the goodbye message.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It also contains the isExit method to return true.","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @param execute method to execute the command","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param isExit method to return true if the command is an exit command","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"    //constructor","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"    public ByeCommand(){","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"        ","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"     * This method executes the command to exit the program.","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"     * @param ui the user interface","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    public void execute(TaskList tasks, Ui ui) throws DukeException{","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"        //print the message","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"        ui.printGoodbyeMessage();","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"     * This method checks if the command is an exit command.","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"     * @return true if the command is an exit command","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"        return true;","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"Dadevchia":35}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents all commands.","lastModifiedDate":"2023-02-22"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is the parent class of all the other command classes.","lastModifiedDate":"2023-02-22"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It is created by the Parser class if the command is invalid.","lastModifiedDate":"2023-02-22"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It contains the execute method to throw an exception since it is an invalid command.","lastModifiedDate":"2023-02-22"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * It also contains the isExit method to return false.","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param execute method to execute the command","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param isExit method to return false if the command is not an exit command","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if it is an invalid command","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"public class Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"    //constructor","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"    public Command(){","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"        ","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"     * This method executes the command.","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"     * @param ui the user interface","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"     * @throws DukeException if it is an invalid command","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"    public void execute(TaskList tasks, Ui ui) throws DukeException{","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"        //throw invalid command exception","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"        throw new DukeException(\"Invalid command\");","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"     * This method checks if the command is an exit command.","lastModifiedDate":"2023-02-22"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"     * @return false if the command is not an exit command","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"        //return false","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"Dadevchia":40}},{"path":"src/main/java/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the command to add a deadline task to the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the execute method to add the deadline task to the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It also contains the isExit method to return false.","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @param taskName the name of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param deadline the deadline of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param execute method to execute the command","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @param isExit method to return false if the command is not an exit command","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"    protected String taskName;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"    protected String deadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"     * This constructor takes in the task name and deadline.","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"     * @param taskName the name of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"     * @param deadline the deadline of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    public DeadlineCommand(String taskName, String deadline){","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"     * This method executes the deadline command.","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"     * @param ui the user interface","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"     * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-22"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"    public void execute(TaskList tasks, Ui ui) throws DukeException{","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"        Deadline deadline \u003d new Deadline(taskName, this.deadline);","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"        tasks.add(deadline);","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"        ui.printAddedTask(deadline, tasks.size());","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"     * This method checks if the command is an exit command.","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"     * @return false if the command is not an exit command","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"Dadevchia":47}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the command to delete a task from the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the execute method to delete the task from the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It also contains the isExit method to return false.","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @param taskNumber the number of the task to be deleted","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param execute method to execute the command","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param isExit method to return false if the command is not an exit command","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"    //the task number to be deleted","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"    private int taskNumber;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"     * This is the constructor for the DeleteCommand class.","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"     * @param taskNumber the number of the task to be deleted","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"    public DeleteCommand(int taskNumber){","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"     * This method executes the command to delete a task from the task list.","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"     * @param ui the user interface","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"     * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"    public void execute(TaskList tasks, Ui ui) throws DukeException{","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"        //print the message","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"        ui.printDeletedTask(tasks.get(taskNumber), tasks.size()-1);","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"        //delete the task from the task list","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"        tasks.delete(taskNumber);","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"     * This method checks if the command is an exit command.","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"     * @return false if the command is not an exit command","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"Dadevchia":45}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":"    //Define the file path","lastModifiedDate":"2023-02-22"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":"    public static final String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":"    //Initialize the storage, tasklist and ui","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"     * Constructor for the Duke class.","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"     * @param filePath the file path of the file to be read","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"     * @throws DukeException if there is an error reading the file","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"     * @throws IOException if there is an error reading the file","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"     * @throws FileNotFoundException if there is an error reading the file","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"            tasks \u003d new TaskList(storage.readFile(filePath));","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"            ui.printErrorMessage(e.getMessage());","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"     * This method runs the Duke program.","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"     * It prints the welcome message.","lastModifiedDate":"2023-02-22"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"     * It reads the command from the user.","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"     * It parses the command and executes it.","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"     * It checks if the command is an exit command.","lastModifiedDate":"2023-02-22"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"     * It writes the tasks to the file.","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"     * @param fullCommand the command entered by the user","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"     * @param isExit boolean to check if the command is an exit command","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"     * @param c the command to be executed","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"     * @throws DukeException if there is an error executing the command","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"    public void run() {","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"        ui.printWelcomeMessage();","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"        while (!isExit) {","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"Dadevchia"},"content":"            try {","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"Dadevchia"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"Dadevchia"},"content":"                ui.printLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"Dadevchia"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"Dadevchia"},"content":"                c.execute(tasks, ui);","lastModifiedDate":"2023-02-22"},{"lineNumber":51,"author":{"gitId":"Dadevchia"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"Dadevchia"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"Dadevchia"},"content":"                ui.printErrorMessage(e.getMessage());","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"Dadevchia"},"content":"            } finally {","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"Dadevchia"},"content":"                ui.printLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"Dadevchia"},"content":"        //Write the tasks to the file using the writeToFile method","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"Dadevchia"},"content":"        storage.writeFile(tasks.getTasks(), FILE_PATH);","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":63,"author":{"gitId":"Dadevchia"},"content":"     * This method runs the Duke program.","lastModifiedDate":"2023-02-22"},{"lineNumber":64,"author":{"gitId":"Dadevchia"},"content":"     * @param args the arguments","lastModifiedDate":"2023-02-22"},{"lineNumber":65,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":67,"author":{"gitId":"Dadevchia"},"content":"        new Duke(FILE_PATH).run();","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Dadevchia":66,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the exception that is thrown when the user inputs an invalid command.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Exception class.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the printError method to print the error message.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * @param printError method to print the error message","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-06"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"     * This is the constructor for the DukeException class.","lastModifiedDate":"2023-02-22"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"     * @param message the error message","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"     * @param cause the cause of the error","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"       super(message);","lastModifiedDate":"2023-02-06"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"    // Constructor that accepts a message and a cause","lastModifiedDate":"2023-02-06"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"    public DukeException(String message, Throwable cause) {","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"       super(message, cause);","lastModifiedDate":"2023-02-06"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"    // Constructor that accepts a cause","lastModifiedDate":"2023-02-06"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    public DukeException(Throwable cause) {","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"       super(cause);","lastModifiedDate":"2023-02-06"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the error message.","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"     * @param message the error message","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"     * @param command the command that caused the error","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"    public void printError(){","lastModifiedDate":"2023-02-06"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-02-06"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"    public void printError(String message){","lastModifiedDate":"2023-02-06"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"☹ OOPS!!! \" + message);","lastModifiedDate":"2023-02-06"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"    public void printError(String message, String command){","lastModifiedDate":"2023-02-06"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"☹ OOPS!!! \" + message + \" \" + command);","lastModifiedDate":"2023-02-06"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"Dadevchia":45}},{"path":"src/main/java/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the command to add an event task to the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the execute method to add the event task to the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It also contains the isExit method to return false.","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @param taskName the name of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param eventTime the event time of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param execute method to execute the command","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @param isExit method to return false if the command is not an exit command","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the event time is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"    protected String taskName;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"    protected String eventTime;","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"     * This constructor takes in the task name and event time.","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"     * @param taskName the name of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"     * @param eventTime the event time of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    public EventCommand(String taskName, String eventTime){","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"     * This method executes the event command.","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"     * @param ui the user interface","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"     * @throws DukeException if the event time is not in the correct format","lastModifiedDate":"2023-02-22"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"    public void execute(TaskList tasks, Ui ui) throws DukeException{","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"        Event event \u003d new Event(taskName, eventTime);","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"        tasks.add(event);","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"        ui.printAddedTask(event, tasks.size());","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"     * This method checks if the command is an exit command.","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"     * @return false if the command is not an exit command","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"Dadevchia":47}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-22"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the find command.","lastModifiedDate":"2023-02-22"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-02-22"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the execute method to find the tasks that match the keyword.","lastModifiedDate":"2023-02-22"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It also contains the isExit method to return false.","lastModifiedDate":"2023-02-22"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-22"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":"//FindCommand class that extends Command","lastModifiedDate":"2023-02-16"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"    protected String keyword;","lastModifiedDate":"2023-02-16"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"    protected ArrayList\u003cTask\u003e matchingTasks;","lastModifiedDate":"2023-02-16"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"     * This constructor takes in the keyword.","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"     * @param keyword the keyword to be matched","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"    public FindCommand(String keyword){","lastModifiedDate":"2023-02-16"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    //method that executes the find command","lastModifiedDate":"2023-02-16"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"     * This method executes the find command.","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"     * @param ui the user interface","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"    public void execute(TaskList tasks, Ui ui) throws DukeException{","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"        matchingTasks \u003d tasks.find(keyword);","lastModifiedDate":"2023-02-16"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"        ui.printMatchingTasks(matchingTasks);","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"    //method that checks if the command is an exit command","lastModifiedDate":"2023-02-16"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-02-16"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"        return false;","lastModifiedDate":"2023-02-16"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"Dadevchia":37}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the command to list all the tasks in the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the execute method to list all the tasks in the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It also contains the isExit method to return false.","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @param execute method to execute the command","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param isExit method to return false if the command is not an exit command","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"    //constructor","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"    public ListCommand(){","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"        ","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"     * This method executes the list command.","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"     * @param ui the user interface","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    public void execute(TaskList tasks, Ui ui) throws DukeException{","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"        //print the message","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"        ui.printTaskList(tasks.getTasks());","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"     * This method checks if the command is an exit command.","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"     * @return false if the command is not an exit command","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"Dadevchia":35}},{"path":"src/main/java/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the command to mark a task as done.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the execute method to mark the task as done.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It also contains the isExit method to return false.","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @param taskNumber the number of the task to be marked","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param execute method to execute the command","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param isExit method to return false if the command is not an exit command","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"    //the task number to be marked","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"    private int taskNumber;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"     * This is the constructor for the MarkCommand class.","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"     * @param taskNumber the number of the task to be marked","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"    public MarkCommand(int taskNumber){","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"     * This method executes the command to mark a task as done.","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"     * @param ui the user interface","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"     * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"    public void execute(TaskList tasks, Ui ui) throws DukeException{","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"        //mark the task from the task list","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"        tasks.markTask(taskNumber);","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"        //print the message","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"        ui.printDoneTask(tasks.get(taskNumber));","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"     * This method checks if the command is an exit command.","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"     * @return false if the command is not an exit command","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"Dadevchia":45}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the parser that parses the input command and returns a command.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * @param parse method to parse the input command and return a command","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * @param input the input command","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * @param command the command to be returned","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the input command is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":"public class Parser {","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"     * This method parses the input command and returns a command.","lastModifiedDate":"2023-02-22"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"     * @param input the input command","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"     * @return command the command to be returned","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"     * @throws DukeException if the input command is not in the correct format","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"     * @throws NumberFormatException if the input command is not in the correct format","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"     * @throws ArrayIndexOutOfBoundsException if the input command is not in the correct format","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"    public static Command parse(String input) throws DukeException{","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"        //split the input string","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"        String[] inputSplit \u003d input.split(\" \");","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"        //if the input is bye","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"        if(input.equals(\"bye\")){","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"            //return a bye command","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"            return new ByeCommand();","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"        //if the input is list","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"        else if(input.equals(\"list\")){","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"            //return a list command","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"            return new ListCommand();","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"        //if the input is done","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"        else if(inputSplit[0].equals(\"mark\")){","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"            //if the input is not done followed by a number","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"            if(inputSplit.length \u003d\u003d 1){","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"                //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"                throw new DukeException(\"OOPS!!! The description of a done cannot be empty.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"            //if the input is done followed by a number","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"            else{","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"                //try to parse the number","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"                try{","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"                    //parse the number","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"                    int taskNumber \u003d Integer.parseInt(inputSplit[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"                    //return a done command","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"                    return new MarkCommand(taskNumber);","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"Dadevchia"},"content":"                } catch(NumberFormatException e){","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"Dadevchia"},"content":"                    //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"Dadevchia"},"content":"                    throw new DukeException(\"OOPS!!! The description of a done must be a number.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"Dadevchia"},"content":"        //if the input is unmark","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"Dadevchia"},"content":"        else if(inputSplit[0].equals(\"unmark\")){","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"Dadevchia"},"content":"            //if the input is not unmark followed by a number","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"Dadevchia"},"content":"            if(inputSplit.length \u003d\u003d 1){","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"Dadevchia"},"content":"                //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"Dadevchia"},"content":"                throw new DukeException(\"OOPS!!! The description of a unmark cannot be empty.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"Dadevchia"},"content":"            //if the input is unmark followed by a number","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"Dadevchia"},"content":"            else{","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"Dadevchia"},"content":"                //try to parse the number","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"Dadevchia"},"content":"                try{","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"Dadevchia"},"content":"                    //parse the number","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"Dadevchia"},"content":"                    int taskNumber \u003d Integer.parseInt(inputSplit[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"Dadevchia"},"content":"                    //return a unmark command","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"Dadevchia"},"content":"                    return new UnmarkCommand(taskNumber);","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"Dadevchia"},"content":"                } catch(NumberFormatException e){","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"Dadevchia"},"content":"                    //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"Dadevchia"},"content":"                    throw new DukeException(\"OOPS!!! The description of a unmark must be a number.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"Dadevchia"},"content":"        //if the input is delete","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"Dadevchia"},"content":"        else if(inputSplit[0].equals(\"delete\")){","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"Dadevchia"},"content":"            //if the input is not delete followed by a number","lastModifiedDate":"2023-02-15"},{"lineNumber":76,"author":{"gitId":"Dadevchia"},"content":"            if(inputSplit.length \u003d\u003d 1){","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"Dadevchia"},"content":"                //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"Dadevchia"},"content":"                throw new DukeException(\"OOPS!!! The description of a delete cannot be empty.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"Dadevchia"},"content":"            //if the input is delete followed by a number","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"Dadevchia"},"content":"            else{","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"Dadevchia"},"content":"                //try to parse the number","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"Dadevchia"},"content":"                try{","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"Dadevchia"},"content":"                    //parse the number","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"Dadevchia"},"content":"                    int taskNumber \u003d Integer.parseInt(inputSplit[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"Dadevchia"},"content":"                    //return a delete command","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"Dadevchia"},"content":"                    return new DeleteCommand(taskNumber);","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"Dadevchia"},"content":"                } catch(NumberFormatException e){","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"Dadevchia"},"content":"                    //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"Dadevchia"},"content":"                    throw new DukeException(\"OOPS!!! The description of a delete must be a number.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":92,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":93,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":94,"author":{"gitId":"Dadevchia"},"content":"        //if the input is todo","lastModifiedDate":"2023-02-15"},{"lineNumber":95,"author":{"gitId":"Dadevchia"},"content":"        else if(inputSplit[0].equals(\"todo\")){","lastModifiedDate":"2023-02-15"},{"lineNumber":96,"author":{"gitId":"Dadevchia"},"content":"            //if the input is not todo followed by a description","lastModifiedDate":"2023-02-15"},{"lineNumber":97,"author":{"gitId":"Dadevchia"},"content":"            if(inputSplit.length \u003d\u003d 1){","lastModifiedDate":"2023-02-15"},{"lineNumber":98,"author":{"gitId":"Dadevchia"},"content":"                //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"Dadevchia"},"content":"                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":100,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":101,"author":{"gitId":"Dadevchia"},"content":"            //if the input is todo followed by a description","lastModifiedDate":"2023-02-15"},{"lineNumber":102,"author":{"gitId":"Dadevchia"},"content":"            else{","lastModifiedDate":"2023-02-15"},{"lineNumber":103,"author":{"gitId":"Dadevchia"},"content":"                //get the description","lastModifiedDate":"2023-02-15"},{"lineNumber":104,"author":{"gitId":"Dadevchia"},"content":"                String description \u003d input.substring(5);","lastModifiedDate":"2023-02-15"},{"lineNumber":105,"author":{"gitId":"Dadevchia"},"content":"                //return a todo command","lastModifiedDate":"2023-02-15"},{"lineNumber":106,"author":{"gitId":"Dadevchia"},"content":"                return new TodoCommand(description);","lastModifiedDate":"2023-02-15"},{"lineNumber":107,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":108,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":109,"author":{"gitId":"Dadevchia"},"content":"        //if the input is deadline","lastModifiedDate":"2023-02-15"},{"lineNumber":110,"author":{"gitId":"Dadevchia"},"content":"        else if(inputSplit[0].equals(\"deadline\")){","lastModifiedDate":"2023-02-15"},{"lineNumber":111,"author":{"gitId":"Dadevchia"},"content":"            //if the input is not deadline followed by a description","lastModifiedDate":"2023-02-15"},{"lineNumber":112,"author":{"gitId":"Dadevchia"},"content":"            if(inputSplit.length \u003d\u003d 1){","lastModifiedDate":"2023-02-15"},{"lineNumber":113,"author":{"gitId":"Dadevchia"},"content":"                //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":114,"author":{"gitId":"Dadevchia"},"content":"                throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":115,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":116,"author":{"gitId":"Dadevchia"},"content":"            //if the input is deadline followed by a description","lastModifiedDate":"2023-02-15"},{"lineNumber":117,"author":{"gitId":"Dadevchia"},"content":"            else{","lastModifiedDate":"2023-02-15"},{"lineNumber":118,"author":{"gitId":"Dadevchia"},"content":"                //get the description","lastModifiedDate":"2023-02-15"},{"lineNumber":119,"author":{"gitId":"Dadevchia"},"content":"                String description \u003d input.substring(9);","lastModifiedDate":"2023-02-15"},{"lineNumber":120,"author":{"gitId":"Dadevchia"},"content":"                //if the description does not contain a /by","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"Dadevchia"},"content":"                if(!description.contains(\"/by\")){","lastModifiedDate":"2023-02-15"},{"lineNumber":122,"author":{"gitId":"Dadevchia"},"content":"                    //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":123,"author":{"gitId":"Dadevchia"},"content":"                    throw new DukeException(\"OOPS!!! The description of a deadline must contain a /by.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":124,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":125,"author":{"gitId":"Dadevchia"},"content":"                //if the description contains a /by","lastModifiedDate":"2023-02-15"},{"lineNumber":126,"author":{"gitId":"Dadevchia"},"content":"                else{","lastModifiedDate":"2023-02-15"},{"lineNumber":127,"author":{"gitId":"Dadevchia"},"content":"                    //get the description and the date","lastModifiedDate":"2023-02-15"},{"lineNumber":128,"author":{"gitId":"Dadevchia"},"content":"                    String[] descriptionSplit \u003d description.split(\"/by\");","lastModifiedDate":"2023-02-15"},{"lineNumber":129,"author":{"gitId":"Dadevchia"},"content":"                    //return a deadline command","lastModifiedDate":"2023-02-15"},{"lineNumber":130,"author":{"gitId":"Dadevchia"},"content":"                    return new DeadlineCommand(descriptionSplit[0], descriptionSplit[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":131,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":132,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":133,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":134,"author":{"gitId":"Dadevchia"},"content":"        //if the input is event","lastModifiedDate":"2023-02-15"},{"lineNumber":135,"author":{"gitId":"Dadevchia"},"content":"        else if(inputSplit[0].equals(\"event\")){","lastModifiedDate":"2023-02-15"},{"lineNumber":136,"author":{"gitId":"Dadevchia"},"content":"            //if the input is not event followed by a description","lastModifiedDate":"2023-02-15"},{"lineNumber":137,"author":{"gitId":"Dadevchia"},"content":"            if(inputSplit.length \u003d\u003d 1){","lastModifiedDate":"2023-02-15"},{"lineNumber":138,"author":{"gitId":"Dadevchia"},"content":"                //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":139,"author":{"gitId":"Dadevchia"},"content":"                throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":140,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":141,"author":{"gitId":"Dadevchia"},"content":"            //if the input is event followed by a description","lastModifiedDate":"2023-02-15"},{"lineNumber":142,"author":{"gitId":"Dadevchia"},"content":"            else{","lastModifiedDate":"2023-02-15"},{"lineNumber":143,"author":{"gitId":"Dadevchia"},"content":"                //get the description","lastModifiedDate":"2023-02-15"},{"lineNumber":144,"author":{"gitId":"Dadevchia"},"content":"                String description \u003d input.substring(6);","lastModifiedDate":"2023-02-15"},{"lineNumber":145,"author":{"gitId":"Dadevchia"},"content":"                //if the description does not contain a /at","lastModifiedDate":"2023-02-15"},{"lineNumber":146,"author":{"gitId":"Dadevchia"},"content":"                if(!description.contains(\"/at\")){","lastModifiedDate":"2023-02-15"},{"lineNumber":147,"author":{"gitId":"Dadevchia"},"content":"                    //throw an exception","lastModifiedDate":"2023-02-15"},{"lineNumber":148,"author":{"gitId":"Dadevchia"},"content":"                    throw new DukeException(\"OOPS!!! The description of a event must contain a /at.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":149,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":150,"author":{"gitId":"Dadevchia"},"content":"                //if the description contains a /at","lastModifiedDate":"2023-02-15"},{"lineNumber":151,"author":{"gitId":"Dadevchia"},"content":"                else{","lastModifiedDate":"2023-02-15"},{"lineNumber":152,"author":{"gitId":"Dadevchia"},"content":"                    //get the description and the date","lastModifiedDate":"2023-02-15"},{"lineNumber":153,"author":{"gitId":"Dadevchia"},"content":"                    String[] descriptionSplit \u003d description.split(\"/at\");","lastModifiedDate":"2023-02-15"},{"lineNumber":154,"author":{"gitId":"Dadevchia"},"content":"                    //return a event command","lastModifiedDate":"2023-02-15"},{"lineNumber":155,"author":{"gitId":"Dadevchia"},"content":"                    return new EventCommand(descriptionSplit[0], descriptionSplit[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":156,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":157,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":158,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":159,"author":{"gitId":"Dadevchia"},"content":"        //if the input is find","lastModifiedDate":"2023-02-16"},{"lineNumber":160,"author":{"gitId":"Dadevchia"},"content":"        else if(inputSplit[0].equals(\"find\")){","lastModifiedDate":"2023-02-16"},{"lineNumber":161,"author":{"gitId":"Dadevchia"},"content":"            //if the input is not find followed by a keyword","lastModifiedDate":"2023-02-16"},{"lineNumber":162,"author":{"gitId":"Dadevchia"},"content":"            if(inputSplit.length \u003d\u003d 1){","lastModifiedDate":"2023-02-16"},{"lineNumber":163,"author":{"gitId":"Dadevchia"},"content":"                //throw an exception","lastModifiedDate":"2023-02-16"},{"lineNumber":164,"author":{"gitId":"Dadevchia"},"content":"                throw new DukeException(\"OOPS!!! The description of a find cannot be empty.\");","lastModifiedDate":"2023-02-16"},{"lineNumber":165,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":166,"author":{"gitId":"Dadevchia"},"content":"            //if the input is find followed by a keyword","lastModifiedDate":"2023-02-16"},{"lineNumber":167,"author":{"gitId":"Dadevchia"},"content":"            else{","lastModifiedDate":"2023-02-16"},{"lineNumber":168,"author":{"gitId":"Dadevchia"},"content":"                //get the keyword","lastModifiedDate":"2023-02-16"},{"lineNumber":169,"author":{"gitId":"Dadevchia"},"content":"                String keyword \u003d input.substring(5);","lastModifiedDate":"2023-02-16"},{"lineNumber":170,"author":{"gitId":"Dadevchia"},"content":"                //return a find command","lastModifiedDate":"2023-02-16"},{"lineNumber":171,"author":{"gitId":"Dadevchia"},"content":"                return new FindCommand(keyword);","lastModifiedDate":"2023-02-16"},{"lineNumber":172,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":173,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":174,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":175,"author":{"gitId":"Dadevchia"},"content":"        //return a invalid command of the input is not any of the above","lastModifiedDate":"2023-02-15"},{"lineNumber":176,"author":{"gitId":"Dadevchia"},"content":"        else{","lastModifiedDate":"2023-02-15"},{"lineNumber":177,"author":{"gitId":"Dadevchia"},"content":"            return new Command();","lastModifiedDate":"2023-02-15"},{"lineNumber":178,"author":{"gitId":"Dadevchia"},"content":"        }     ","lastModifiedDate":"2023-02-15"},{"lineNumber":179,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":180,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":181,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":182,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"Dadevchia":182}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the storage of the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It contains the file path of the file that stores the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the constructor that takes in the file path and creates a new file if it does not exist.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It contains the readFile method that reads the file and returns an arraylist of tasks.","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * It contains the writeFile method that takes in input tasks and taskCount and writes the tasks into the file.","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param filePath the file path of the file that stores the task list","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param readFile method that reads the file and returns an arraylist of tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @param writeFile method that takes in input tasks and taskCount and writes the tasks into the file","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" * @throws IOException if there is an error reading the file","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"import java.util.Scanner;  // Import the Scanner class","lastModifiedDate":"2023-02-09"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"import java.io.File; // Import the File class","lastModifiedDate":"2023-02-09"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"import java.io.FileWriter; // Import the FileWriter class","lastModifiedDate":"2023-02-09"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"import java.io.BufferedWriter; // Import the BufferedWriter class","lastModifiedDate":"2023-02-09"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"import java.io.IOException; // Import the IOException class to handle errors","lastModifiedDate":"2023-02-09"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"import java.util.ArrayList; // Import the ArrayList class","lastModifiedDate":"2023-02-09"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"public class Storage {","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"    //file path","lastModifiedDate":"2023-02-14"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    protected String filePath;","lastModifiedDate":"2023-02-14"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"     * This is the constructor for the Storage class.","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"     * It takes in the file path and creates a new file if it does not exist.","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"     * @param filePath the file path of the file that stores the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"     * @throws IOException if there is an error reading the file","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"     * @throws IOException if there is an error creating the file","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"    public Storage(String filePath){","lastModifiedDate":"2023-02-14"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"        //set the file path","lastModifiedDate":"2023-02-14"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-02-14"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"        //check if there is a file to read from","lastModifiedDate":"2023-02-14"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"        try{","lastModifiedDate":"2023-02-14"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-02-14"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"            Scanner fileScan \u003d new Scanner(file);","lastModifiedDate":"2023-02-14"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"            fileScan.close();","lastModifiedDate":"2023-02-14"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"        //otherwise create a new file","lastModifiedDate":"2023-02-14"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"        } catch(IOException e){","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"            //Create a new file and directory","lastModifiedDate":"2023-02-14"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"            try{","lastModifiedDate":"2023-02-14"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"                File file \u003d new File(filePath);","lastModifiedDate":"2023-02-14"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2023-02-14"},{"lineNumber":46,"author":{"gitId":"Dadevchia"},"content":"                file.createNewFile();","lastModifiedDate":"2023-02-14"},{"lineNumber":47,"author":{"gitId":"Dadevchia"},"content":"            } catch (IOException e1){","lastModifiedDate":"2023-02-22"},{"lineNumber":48,"author":{"gitId":"Dadevchia"},"content":"                e1.printStackTrace();","lastModifiedDate":"2023-02-14"},{"lineNumber":49,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-14"},{"lineNumber":50,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":51,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":52,"author":{"gitId":"Dadevchia"},"content":"   ","lastModifiedDate":"2023-02-14"},{"lineNumber":53,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":54,"author":{"gitId":"Dadevchia"},"content":"     * This method reads the file and returns an arraylist of tasks.","lastModifiedDate":"2023-02-22"},{"lineNumber":55,"author":{"gitId":"Dadevchia"},"content":"     * @param filePath the file path of the file that stores the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":56,"author":{"gitId":"Dadevchia"},"content":"     * @return tasks the arraylist of tasks","lastModifiedDate":"2023-02-22"},{"lineNumber":57,"author":{"gitId":"Dadevchia"},"content":"     * @throws IOException if there is an error reading the file","lastModifiedDate":"2023-02-22"},{"lineNumber":58,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":59,"author":{"gitId":"Dadevchia"},"content":"    public static ArrayList\u003cTask\u003e readFile(String filePath){","lastModifiedDate":"2023-02-14"},{"lineNumber":60,"author":{"gitId":"Dadevchia"},"content":"        //new arraylist of tasks","lastModifiedDate":"2023-02-09"},{"lineNumber":61,"author":{"gitId":"Dadevchia"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-09"},{"lineNumber":62,"author":{"gitId":"Dadevchia"},"content":"  ","lastModifiedDate":"2023-02-14"},{"lineNumber":63,"author":{"gitId":"Dadevchia"},"content":"        //File object","lastModifiedDate":"2023-02-14"},{"lineNumber":64,"author":{"gitId":"Dadevchia"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-02-14"},{"lineNumber":65,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":66,"author":{"gitId":"Dadevchia"},"content":"        //try to read the file","lastModifiedDate":"2023-02-14"},{"lineNumber":67,"author":{"gitId":"Dadevchia"},"content":"        try{","lastModifiedDate":"2023-02-09"},{"lineNumber":68,"author":{"gitId":"Dadevchia"},"content":"            //Create a scanner","lastModifiedDate":"2023-02-14"},{"lineNumber":69,"author":{"gitId":"Dadevchia"},"content":"            Scanner fileScan \u003d new Scanner(file);","lastModifiedDate":"2023-02-09"},{"lineNumber":70,"author":{"gitId":"Dadevchia"},"content":"            //Read the file","lastModifiedDate":"2023-02-14"},{"lineNumber":71,"author":{"gitId":"Dadevchia"},"content":"            while(fileScan.hasNextLine()){","lastModifiedDate":"2023-02-09"},{"lineNumber":72,"author":{"gitId":"Dadevchia"},"content":"                //Read the line","lastModifiedDate":"2023-02-14"},{"lineNumber":73,"author":{"gitId":"Dadevchia"},"content":"                String line \u003d fileScan.nextLine();","lastModifiedDate":"2023-02-09"},{"lineNumber":74,"author":{"gitId":"Dadevchia"},"content":"                //Split the line","lastModifiedDate":"2023-02-14"},{"lineNumber":75,"author":{"gitId":"Dadevchia"},"content":"                String[] lineSplit \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-02-09"},{"lineNumber":76,"author":{"gitId":"Dadevchia"},"content":"                //if the task is a todo","lastModifiedDate":"2023-02-14"},{"lineNumber":77,"author":{"gitId":"Dadevchia"},"content":"                if(lineSplit[0].equals(\"T\")){","lastModifiedDate":"2023-02-09"},{"lineNumber":78,"author":{"gitId":"Dadevchia"},"content":"                    //create a new todo","lastModifiedDate":"2023-02-14"},{"lineNumber":79,"author":{"gitId":"Dadevchia"},"content":"                    Todo todo \u003d new Todo(lineSplit[2]);","lastModifiedDate":"2023-02-14"},{"lineNumber":80,"author":{"gitId":"Dadevchia"},"content":"                    //if the task is done","lastModifiedDate":"2023-02-14"},{"lineNumber":81,"author":{"gitId":"Dadevchia"},"content":"                    if(lineSplit[1].equals(\"1\")){","lastModifiedDate":"2023-02-14"},{"lineNumber":82,"author":{"gitId":"Dadevchia"},"content":"                        //mark the task as done","lastModifiedDate":"2023-02-14"},{"lineNumber":83,"author":{"gitId":"Dadevchia"},"content":"                        todo.markAsDone();","lastModifiedDate":"2023-02-14"},{"lineNumber":84,"author":{"gitId":"Dadevchia"},"content":"                    }","lastModifiedDate":"2023-02-09"},{"lineNumber":85,"author":{"gitId":"Dadevchia"},"content":"                    //add the task to the arraylist","lastModifiedDate":"2023-02-14"},{"lineNumber":86,"author":{"gitId":"Dadevchia"},"content":"                    tasks.add(todo);","lastModifiedDate":"2023-02-14"},{"lineNumber":87,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-09"},{"lineNumber":88,"author":{"gitId":"Dadevchia"},"content":"                //if the task is a deadline","lastModifiedDate":"2023-02-14"},{"lineNumber":89,"author":{"gitId":"Dadevchia"},"content":"                else if(lineSplit[0].equals(\"D\")){","lastModifiedDate":"2023-02-14"},{"lineNumber":90,"author":{"gitId":"Dadevchia"},"content":"                    //create a new deadline","lastModifiedDate":"2023-02-14"},{"lineNumber":91,"author":{"gitId":"Dadevchia"},"content":"                    Deadline deadline \u003d new Deadline(lineSplit[2], lineSplit[3]);","lastModifiedDate":"2023-02-14"},{"lineNumber":92,"author":{"gitId":"Dadevchia"},"content":"                    //if the task is done","lastModifiedDate":"2023-02-14"},{"lineNumber":93,"author":{"gitId":"Dadevchia"},"content":"                    if(lineSplit[1].equals(\"1\")){","lastModifiedDate":"2023-02-14"},{"lineNumber":94,"author":{"gitId":"Dadevchia"},"content":"                        //mark the task as done","lastModifiedDate":"2023-02-14"},{"lineNumber":95,"author":{"gitId":"Dadevchia"},"content":"                        deadline.markAsDone();","lastModifiedDate":"2023-02-14"},{"lineNumber":96,"author":{"gitId":"Dadevchia"},"content":"                    }","lastModifiedDate":"2023-02-09"},{"lineNumber":97,"author":{"gitId":"Dadevchia"},"content":"                    //add the task to the arraylist","lastModifiedDate":"2023-02-14"},{"lineNumber":98,"author":{"gitId":"Dadevchia"},"content":"                    tasks.add(deadline);","lastModifiedDate":"2023-02-14"},{"lineNumber":99,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-09"},{"lineNumber":100,"author":{"gitId":"Dadevchia"},"content":"                //if the task is an event","lastModifiedDate":"2023-02-14"},{"lineNumber":101,"author":{"gitId":"Dadevchia"},"content":"                else if(lineSplit[0].equals(\"E\")){","lastModifiedDate":"2023-02-14"},{"lineNumber":102,"author":{"gitId":"Dadevchia"},"content":"                    //create a new event","lastModifiedDate":"2023-02-14"},{"lineNumber":103,"author":{"gitId":"Dadevchia"},"content":"                    Event event \u003d new Event(lineSplit[2], lineSplit[3]);","lastModifiedDate":"2023-02-14"},{"lineNumber":104,"author":{"gitId":"Dadevchia"},"content":"                    //if the task is done","lastModifiedDate":"2023-02-14"},{"lineNumber":105,"author":{"gitId":"Dadevchia"},"content":"                    if(lineSplit[1].equals(\"1\")){","lastModifiedDate":"2023-02-14"},{"lineNumber":106,"author":{"gitId":"Dadevchia"},"content":"                        //mark the task as done","lastModifiedDate":"2023-02-14"},{"lineNumber":107,"author":{"gitId":"Dadevchia"},"content":"                        event.markAsDone();","lastModifiedDate":"2023-02-14"},{"lineNumber":108,"author":{"gitId":"Dadevchia"},"content":"                    }","lastModifiedDate":"2023-02-09"},{"lineNumber":109,"author":{"gitId":"Dadevchia"},"content":"                    //add the task to the arraylist","lastModifiedDate":"2023-02-14"},{"lineNumber":110,"author":{"gitId":"Dadevchia"},"content":"                    tasks.add(event);","lastModifiedDate":"2023-02-14"},{"lineNumber":111,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-09"},{"lineNumber":112,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-09"},{"lineNumber":113,"author":{"gitId":"Dadevchia"},"content":"            //close the scanner","lastModifiedDate":"2023-02-14"},{"lineNumber":114,"author":{"gitId":"Dadevchia"},"content":"            fileScan.close();","lastModifiedDate":"2023-02-09"},{"lineNumber":115,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":116,"author":{"gitId":"Dadevchia"},"content":"        } catch(IOException e){","lastModifiedDate":"2023-02-14"},{"lineNumber":117,"author":{"gitId":"Dadevchia"},"content":"            System.out.println(\"Error reading file.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":118,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":119,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":120,"author":{"gitId":"Dadevchia"},"content":"        return tasks;","lastModifiedDate":"2023-02-09"},{"lineNumber":121,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":122,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":123,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":124,"author":{"gitId":"Dadevchia"},"content":"     * This method takes in input tasks and taskCount and writes the tasks into the file.","lastModifiedDate":"2023-02-22"},{"lineNumber":125,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the arraylist of tasks","lastModifiedDate":"2023-02-22"},{"lineNumber":126,"author":{"gitId":"Dadevchia"},"content":"     * @param filePath the file path of the file that stores the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":127,"author":{"gitId":"Dadevchia"},"content":"     * @throws IOException if there is an error writing to the file","lastModifiedDate":"2023-02-22"},{"lineNumber":128,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":129,"author":{"gitId":"Dadevchia"},"content":"    public static void writeFile(ArrayList\u003cTask\u003e tasks, String filePath){","lastModifiedDate":"2023-02-14"},{"lineNumber":130,"author":{"gitId":"Dadevchia"},"content":"        //Write the tasks to the file","lastModifiedDate":"2023-02-09"},{"lineNumber":131,"author":{"gitId":"Dadevchia"},"content":"         try{","lastModifiedDate":"2023-02-09"},{"lineNumber":132,"author":{"gitId":"Dadevchia"},"content":"            //Create a file writer","lastModifiedDate":"2023-02-09"},{"lineNumber":133,"author":{"gitId":"Dadevchia"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-02-14"},{"lineNumber":134,"author":{"gitId":"Dadevchia"},"content":"            //Erase the file","lastModifiedDate":"2023-02-09"},{"lineNumber":135,"author":{"gitId":"Dadevchia"},"content":"            fw.write(\"\");","lastModifiedDate":"2023-02-09"},{"lineNumber":136,"author":{"gitId":"Dadevchia"},"content":"            //Create a buffered writer","lastModifiedDate":"2023-02-09"},{"lineNumber":137,"author":{"gitId":"Dadevchia"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);","lastModifiedDate":"2023-02-09"},{"lineNumber":138,"author":{"gitId":"Dadevchia"},"content":"            //Write the tasks to the file","lastModifiedDate":"2023-02-09"},{"lineNumber":139,"author":{"gitId":"Dadevchia"},"content":"            for(int i\u003d0;i\u003ctasks.size();i++){","lastModifiedDate":"2023-02-14"},{"lineNumber":140,"author":{"gitId":"Dadevchia"},"content":"                //if the task is a todo","lastModifiedDate":"2023-02-09"},{"lineNumber":141,"author":{"gitId":"Dadevchia"},"content":"                if(tasks.get(i) instanceof Todo){","lastModifiedDate":"2023-02-09"},{"lineNumber":142,"author":{"gitId":"Dadevchia"},"content":"                    //write the task to the file","lastModifiedDate":"2023-02-09"},{"lineNumber":143,"author":{"gitId":"Dadevchia"},"content":"                    bw.write(\"T | \" + tasks.get(i).isDone + \" | \" + tasks.get(i).taskName);","lastModifiedDate":"2023-02-09"},{"lineNumber":144,"author":{"gitId":"Dadevchia"},"content":"                    bw.newLine();","lastModifiedDate":"2023-02-09"},{"lineNumber":145,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-09"},{"lineNumber":146,"author":{"gitId":"Dadevchia"},"content":"                //if the task is a deadline","lastModifiedDate":"2023-02-09"},{"lineNumber":147,"author":{"gitId":"Dadevchia"},"content":"                else if(tasks.get(i) instanceof Deadline){","lastModifiedDate":"2023-02-09"},{"lineNumber":148,"author":{"gitId":"Dadevchia"},"content":"                    //write the task to the file","lastModifiedDate":"2023-02-09"},{"lineNumber":149,"author":{"gitId":"Dadevchia"},"content":"                    bw.write(\"D | \" + tasks.get(i).isDone + \" | \" + tasks.get(i).taskName + \" | \" + ((Deadline) tasks.get(i)).deadline);","lastModifiedDate":"2023-02-09"},{"lineNumber":150,"author":{"gitId":"Dadevchia"},"content":"                    bw.newLine();","lastModifiedDate":"2023-02-09"},{"lineNumber":151,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-09"},{"lineNumber":152,"author":{"gitId":"Dadevchia"},"content":"                //if the task is an event","lastModifiedDate":"2023-02-09"},{"lineNumber":153,"author":{"gitId":"Dadevchia"},"content":"                else if(tasks.get(i) instanceof Event){","lastModifiedDate":"2023-02-09"},{"lineNumber":154,"author":{"gitId":"Dadevchia"},"content":"                    //write the task to the file","lastModifiedDate":"2023-02-09"},{"lineNumber":155,"author":{"gitId":"Dadevchia"},"content":"                    bw.write(\"E | \" + tasks.get(i).isDone + \" | \" + tasks.get(i).taskName + \" | \" + ((Event) tasks.get(i)).eventTime);","lastModifiedDate":"2023-02-09"},{"lineNumber":156,"author":{"gitId":"Dadevchia"},"content":"                    bw.newLine();","lastModifiedDate":"2023-02-09"},{"lineNumber":157,"author":{"gitId":"Dadevchia"},"content":"                }","lastModifiedDate":"2023-02-09"},{"lineNumber":158,"author":{"gitId":"Dadevchia"},"content":"            } ","lastModifiedDate":"2023-02-09"},{"lineNumber":159,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":160,"author":{"gitId":"Dadevchia"},"content":"            //Close the buffered writer","lastModifiedDate":"2023-02-09"},{"lineNumber":161,"author":{"gitId":"Dadevchia"},"content":"            bw.close();","lastModifiedDate":"2023-02-09"},{"lineNumber":162,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-09"},{"lineNumber":163,"author":{"gitId":"Dadevchia"},"content":"            //Close the file writer","lastModifiedDate":"2023-02-09"},{"lineNumber":164,"author":{"gitId":"Dadevchia"},"content":"            fw.close();","lastModifiedDate":"2023-02-09"},{"lineNumber":165,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":166,"author":{"gitId":"Dadevchia"},"content":"        } catch(IOException e){","lastModifiedDate":"2023-02-09"},{"lineNumber":167,"author":{"gitId":"Dadevchia"},"content":"            System.out.println(\"Error writing to file.\");","lastModifiedDate":"2023-02-09"},{"lineNumber":168,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":169,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":170,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":171,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":172,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"Dadevchia":172}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents a task.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It contains the task name and the status of the task.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It also contains methods to mark the task as done and not done.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It also contains a toString method to print the status of the task followed by the task name.","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * It is the parent class of the Todo, Deadline and Event classes that inherits from it.","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param taskName the name of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param isDone the status of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @param markAsDone method to mark the task as done","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" * @param markAsNotDone method to mark the task as not done","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":" * @param toString method to print the status of the task followed by the task name","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":" * ","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"public class Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"    protected String taskName;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"     * This constructor takes in the task name.","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"     * @param taskName the name of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    public Task(String taskName){","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"     * This method marks the task as done.","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"    public void markAsDone(){","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"     * This method marks the task as not done.","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"    public void markAsNotDone(){","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the status of the task followed by the task name.","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"     * @return the status of the task followed by the task name","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":46,"author":{"gitId":"Dadevchia"},"content":"    public String toString(){","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Dadevchia"},"content":"        if(this.isDone){","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Dadevchia"},"content":"            return \"[X] \" + this.taskName;","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Dadevchia"},"content":"        }else{","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Dadevchia"},"content":"            return \"[ ] \" + this.taskName;","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Dadevchia"},"content":"    //method to get the task name","lastModifiedDate":"2023-02-16"},{"lineNumber":54,"author":{"gitId":"Dadevchia"},"content":"    public String getTaskname(){","lastModifiedDate":"2023-02-16"},{"lineNumber":55,"author":{"gitId":"Dadevchia"},"content":"        return this.taskName;","lastModifiedDate":"2023-02-16"},{"lineNumber":56,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":57,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-22"},{"lineNumber":60,"author":{"gitId":"Dadevchia"},"content":" * This class represents a todo task.","lastModifiedDate":"2023-02-22"},{"lineNumber":61,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Task class.","lastModifiedDate":"2023-02-22"},{"lineNumber":62,"author":{"gitId":"Dadevchia"},"content":" * It contains the constructor to create a todo task.","lastModifiedDate":"2023-02-22"},{"lineNumber":63,"author":{"gitId":"Dadevchia"},"content":" * It also contains a toString method to print the status of the task followed by the task name.","lastModifiedDate":"2023-02-22"},{"lineNumber":64,"author":{"gitId":"Dadevchia"},"content":" * @param taskName the name of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":65,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-22"},{"lineNumber":66,"author":{"gitId":"Dadevchia"},"content":"class Todo extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Dadevchia"},"content":"    protected Todo(String taskName){","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"Dadevchia"},"content":"        super(taskName);","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":71,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":72,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the status of the task followed by the task name.","lastModifiedDate":"2023-02-22"},{"lineNumber":73,"author":{"gitId":"Dadevchia"},"content":"     * @return the status of the task followed by the task name","lastModifiedDate":"2023-02-22"},{"lineNumber":74,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":75,"author":{"gitId":"Dadevchia"},"content":"    @Override","lastModifiedDate":"2023-02-21"},{"lineNumber":76,"author":{"gitId":"Dadevchia"},"content":"    public String toString(){","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Dadevchia"},"content":"        if(this.isDone){","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Dadevchia"},"content":"            return \"[T][X] \" + this.taskName;","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Dadevchia"},"content":"        }else{","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Dadevchia"},"content":"            return \"[T][ ] \" + this.taskName;","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-22"},{"lineNumber":86,"author":{"gitId":"Dadevchia"},"content":" * This class represents a deadline task.","lastModifiedDate":"2023-02-22"},{"lineNumber":87,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Task class.","lastModifiedDate":"2023-02-22"},{"lineNumber":88,"author":{"gitId":"Dadevchia"},"content":" * It contains the constructor to create a deadline task.","lastModifiedDate":"2023-02-22"},{"lineNumber":89,"author":{"gitId":"Dadevchia"},"content":" * It also contains a toString method to print the status of the task followed by the task name.","lastModifiedDate":"2023-02-22"},{"lineNumber":90,"author":{"gitId":"Dadevchia"},"content":" * @param taskName the name of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":91,"author":{"gitId":"Dadevchia"},"content":" * @param deadline the deadline of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":92,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-22"},{"lineNumber":93,"author":{"gitId":"Dadevchia"},"content":"class Deadline extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"Dadevchia"},"content":"    protected String deadline;","lastModifiedDate":"2023-02-08"},{"lineNumber":95,"author":{"gitId":"Dadevchia"},"content":"    public Deadline(String taskName, String deadline){","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"Dadevchia"},"content":"        super(taskName);","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"Dadevchia"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":100,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":101,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the status of the task followed by the task name.","lastModifiedDate":"2023-02-22"},{"lineNumber":102,"author":{"gitId":"Dadevchia"},"content":"     * @return the status of the task followed by the task name","lastModifiedDate":"2023-02-22"},{"lineNumber":103,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":104,"author":{"gitId":"Dadevchia"},"content":"    @Override","lastModifiedDate":"2023-02-21"},{"lineNumber":105,"author":{"gitId":"Dadevchia"},"content":"    public String toString(){","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"Dadevchia"},"content":"        if(this.isDone){","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"Dadevchia"},"content":"            return \"[D][X] \" + this.taskName + \" (\" + this.deadline + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"Dadevchia"},"content":"        }else{","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"Dadevchia"},"content":"            return \"[D][ ] \" + this.taskName + \" (\" + this.deadline + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-01-29"},{"lineNumber":113,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":114,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-22"},{"lineNumber":115,"author":{"gitId":"Dadevchia"},"content":" * This class represents an event task.","lastModifiedDate":"2023-02-22"},{"lineNumber":116,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Task class.","lastModifiedDate":"2023-02-22"},{"lineNumber":117,"author":{"gitId":"Dadevchia"},"content":" * It contains the constructor to create an event task.","lastModifiedDate":"2023-02-22"},{"lineNumber":118,"author":{"gitId":"Dadevchia"},"content":" * It also contains a toString method to print the status of the task followed by the task name.","lastModifiedDate":"2023-02-22"},{"lineNumber":119,"author":{"gitId":"Dadevchia"},"content":" * @param taskName the name of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":120,"author":{"gitId":"Dadevchia"},"content":" * @param eventTime the time of the event","lastModifiedDate":"2023-02-22"},{"lineNumber":121,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-22"},{"lineNumber":122,"author":{"gitId":"Dadevchia"},"content":"class Event extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"Dadevchia"},"content":"    protected String eventTime;","lastModifiedDate":"2023-02-08"},{"lineNumber":124,"author":{"gitId":"Dadevchia"},"content":"    public Event(String taskName, String eventTime){","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"Dadevchia"},"content":"        super(taskName);","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"Dadevchia"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":128,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":129,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":130,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the status of the task followed by the task name.","lastModifiedDate":"2023-02-22"},{"lineNumber":131,"author":{"gitId":"Dadevchia"},"content":"     * @return the status of the task followed by the task name","lastModifiedDate":"2023-02-22"},{"lineNumber":132,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":133,"author":{"gitId":"Dadevchia"},"content":"    @Override","lastModifiedDate":"2023-02-21"},{"lineNumber":134,"author":{"gitId":"Dadevchia"},"content":"    public String toString(){","lastModifiedDate":"2023-01-29"},{"lineNumber":135,"author":{"gitId":"Dadevchia"},"content":"        if(this.isDone){","lastModifiedDate":"2023-01-29"},{"lineNumber":136,"author":{"gitId":"Dadevchia"},"content":"            return \"[E][X] \" + this.taskName + \" (\" + this.eventTime + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":137,"author":{"gitId":"Dadevchia"},"content":"        }else{","lastModifiedDate":"2023-01-29"},{"lineNumber":138,"author":{"gitId":"Dadevchia"},"content":"            return \"[E][ ] \" + this.taskName + \" (\" + this.eventTime + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":139,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":140,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":141,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Dadevchia":141}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the list of tasks.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It contains an arraylist of tasks.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains methods to add, delete, mark and unmark tasks.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * @param tasks the arraylist of tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @param add method to add a task to the arraylist","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param delete method to delete a task from the arraylist","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param markTask method to mark a task as done","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @param unmarkTask method to mark a task as undone","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" * @param get method to get a task from the arraylist","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":" * @param size method to get the size of the arraylist","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":" * @param getTasks method to get the arraylist of tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the task number is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"public class TaskList{","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"    protected ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"     * This is the constructor for the TaskList class.","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"     * It takes in an arraylist of tasks.","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"     * If the arraylist is empty, it creates a new arraylist.","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the arraylist of tasks","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks){","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"    public TaskList(){","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"     * This method adds a task to the arraylist.","lastModifiedDate":"2023-02-22"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"     * @param task the task to be added","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"    public void add(Task task){","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"        tasks.add(task);","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"     * This method deletes a task from the arraylist.","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"     * @param taskNumber the number of the task to be deleted","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":46,"author":{"gitId":"Dadevchia"},"content":"    public void delete(int taskNumber){","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"Dadevchia"},"content":"        tasks.remove(taskNumber - 1);","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":50,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":51,"author":{"gitId":"Dadevchia"},"content":"     * This method marks a task as done.","lastModifiedDate":"2023-02-22"},{"lineNumber":52,"author":{"gitId":"Dadevchia"},"content":"     * @param taskNumber the number of the task to be marked as done","lastModifiedDate":"2023-02-22"},{"lineNumber":53,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":54,"author":{"gitId":"Dadevchia"},"content":"    public void markTask(int taskNumber){","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"Dadevchia"},"content":"        tasks.get(taskNumber - 1).markAsDone();","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":58,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":59,"author":{"gitId":"Dadevchia"},"content":"     * This method marks a task as not done.","lastModifiedDate":"2023-02-22"},{"lineNumber":60,"author":{"gitId":"Dadevchia"},"content":"     * @param taskNumber the number of the task to be marked as not done","lastModifiedDate":"2023-02-22"},{"lineNumber":61,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":62,"author":{"gitId":"Dadevchia"},"content":"    public void unmarkTask(int taskNumber){","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"Dadevchia"},"content":"        tasks.get(taskNumber - 1).markAsNotDone();","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":65,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":66,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":67,"author":{"gitId":"Dadevchia"},"content":"     * This method returns the arraylist of tasks.","lastModifiedDate":"2023-02-22"},{"lineNumber":68,"author":{"gitId":"Dadevchia"},"content":"     * @return the arraylist of tasks","lastModifiedDate":"2023-02-22"},{"lineNumber":69,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":70,"author":{"gitId":"Dadevchia"},"content":"    public ArrayList\u003cTask\u003e getTasks(){","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"Dadevchia"},"content":"        return tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":72,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":73,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":74,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":75,"author":{"gitId":"Dadevchia"},"content":"     * This method returns the size of the arraylist.","lastModifiedDate":"2023-02-22"},{"lineNumber":76,"author":{"gitId":"Dadevchia"},"content":"     * @return the size of the arraylist","lastModifiedDate":"2023-02-22"},{"lineNumber":77,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":78,"author":{"gitId":"Dadevchia"},"content":"    public int size(){","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"Dadevchia"},"content":"        return tasks.size();","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":82,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":83,"author":{"gitId":"Dadevchia"},"content":"     * This method returns a task from the arraylist.","lastModifiedDate":"2023-02-22"},{"lineNumber":84,"author":{"gitId":"Dadevchia"},"content":"     * @param taskNumber the number of the task to be returned","lastModifiedDate":"2023-02-22"},{"lineNumber":85,"author":{"gitId":"Dadevchia"},"content":"     * @return the task","lastModifiedDate":"2023-02-22"},{"lineNumber":86,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":87,"author":{"gitId":"Dadevchia"},"content":"    public Task get(int taskNumber){","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"Dadevchia"},"content":"        return tasks.get(taskNumber - 1);","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":91,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":92,"author":{"gitId":"Dadevchia"},"content":"     * This method returns the tasks that contain the keyword.","lastModifiedDate":"2023-02-22"},{"lineNumber":93,"author":{"gitId":"Dadevchia"},"content":"     * @param keyword the keyword to be matched","lastModifiedDate":"2023-02-22"},{"lineNumber":94,"author":{"gitId":"Dadevchia"},"content":"     * @return the arraylist of matching tasks","lastModifiedDate":"2023-02-22"},{"lineNumber":95,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":96,"author":{"gitId":"Dadevchia"},"content":"    public ArrayList\u003cTask\u003e find(String keyword){","lastModifiedDate":"2023-02-16"},{"lineNumber":97,"author":{"gitId":"Dadevchia"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-16"},{"lineNumber":98,"author":{"gitId":"Dadevchia"},"content":"        for (Task task : tasks){","lastModifiedDate":"2023-02-16"},{"lineNumber":99,"author":{"gitId":"Dadevchia"},"content":"            if (task.getTaskname().contains(keyword)){","lastModifiedDate":"2023-02-16"},{"lineNumber":100,"author":{"gitId":"Dadevchia"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2023-02-16"},{"lineNumber":101,"author":{"gitId":"Dadevchia"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":102,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":103,"author":{"gitId":"Dadevchia"},"content":"        return matchingTasks;","lastModifiedDate":"2023-02-16"},{"lineNumber":104,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":105,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":106,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-15"},{"lineNumber":107,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":108,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"Dadevchia":108}},{"path":"src/main/java/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the command to add a todo task to the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the execute method to add the todo task to the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It also contains the isExit method to return false.","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @param taskName the name of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param execute method to execute the command","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param isExit method to return false if the command is not an exit command","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"    protected String taskName;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"     * This constructor takes in the task name.","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"     * @param taskName the name of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"    public TodoCommand(String taskName){","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"     * This method executes the todo command.","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"     * @param ui the user interface","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"     * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"    public void execute(TaskList tasks, Ui ui) throws DukeException{","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"        Todo todo \u003d new Todo(taskName);","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"        tasks.add(todo);","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"        ui.printAddedTask(todo, tasks.size());","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"     * This method checks if the command is an exit command.","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"     * @return false if the command is not an exit command","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"Dadevchia":43}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class handles the user interface of the program.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It contains methods to print the welcome message, goodbye message, list of tasks, added task, deleted task, and marked task as done.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It also contains a scanner object to read the user input.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * @param scan the scanner object to read the user input","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @param printWelcomeMessage method to print the welcome message","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param printGoodbyeMessage method to print the goodbye message","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param printTaskList method to print the list of tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @param printAddedTask method to print the added task","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" * @param printDeletedTask method to print the deleted task","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":" * @param printDoneTask method to print the marked task as done","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"public class Ui {","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"    //scanner object","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"    private Scanner scan;","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"    //constructor that creates a new scanner object","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"    public Ui(){","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"        scan \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the welcome message.","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"    public static void printWelcomeMessage(){","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the goodbye message.","lastModifiedDate":"2023-02-22"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"    public static void printGoodbyeMessage(){","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the list of tasks.","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"    public static void printTaskList(ArrayList\u003cTask\u003e tasks){","lastModifiedDate":"2023-02-14"},{"lineNumber":46,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"Dadevchia"},"content":"        for(int i\u003d0;i\u003ctasks.size();i++){","lastModifiedDate":"2023-02-14"},{"lineNumber":48,"author":{"gitId":"Dadevchia"},"content":"            System.out.println((i+1) + \".\" + tasks.get(i));","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":52,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":53,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the added task.","lastModifiedDate":"2023-02-22"},{"lineNumber":54,"author":{"gitId":"Dadevchia"},"content":"     * @param task the task that has been added","lastModifiedDate":"2023-02-22"},{"lineNumber":55,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":56,"author":{"gitId":"Dadevchia"},"content":"    public static void printAddedTask(Task task, int taskCount){","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(task);","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-22"},{"lineNumber":62,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":63,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the marked task as done.","lastModifiedDate":"2023-02-22"},{"lineNumber":64,"author":{"gitId":"Dadevchia"},"content":"     * @param task the task that has been marked as done","lastModifiedDate":"2023-02-22"},{"lineNumber":65,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":66,"author":{"gitId":"Dadevchia"},"content":"    public static void printDoneTask(Task task){","lastModifiedDate":"2023-02-12"},{"lineNumber":67,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-02-12"},{"lineNumber":68,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(task);","lastModifiedDate":"2023-02-12"},{"lineNumber":69,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":70,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":71,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":72,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the marked task as undone.","lastModifiedDate":"2023-02-22"},{"lineNumber":73,"author":{"gitId":"Dadevchia"},"content":"     * @param task the task that has been marked as undone","lastModifiedDate":"2023-02-22"},{"lineNumber":74,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":75,"author":{"gitId":"Dadevchia"},"content":"    public static void printUndoneTask(Task task){","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"Noted. I\u0027ve marked this task as undone:\");","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(task);","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":79,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":80,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":81,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the deleted task.","lastModifiedDate":"2023-02-22"},{"lineNumber":82,"author":{"gitId":"Dadevchia"},"content":"     * @param task the task that has been deleted","lastModifiedDate":"2023-02-22"},{"lineNumber":83,"author":{"gitId":"Dadevchia"},"content":"     * @param taskCount the number of tasks in the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":84,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":85,"author":{"gitId":"Dadevchia"},"content":"    public static void printDeletedTask(Task task, int taskCount){","lastModifiedDate":"2023-02-12"},{"lineNumber":86,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-02-12"},{"lineNumber":87,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(task);","lastModifiedDate":"2023-02-12"},{"lineNumber":88,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");","lastModifiedDate":"2023-02-12"},{"lineNumber":89,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":91,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":92,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the tasks that match the keyword.","lastModifiedDate":"2023-02-22"},{"lineNumber":93,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the list of tasks that match the keyword","lastModifiedDate":"2023-02-22"},{"lineNumber":94,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":95,"author":{"gitId":"Dadevchia"},"content":"    public static void printMatchingTasks(ArrayList\u003cTask\u003e tasks){","lastModifiedDate":"2023-02-16"},{"lineNumber":96,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-02-12"},{"lineNumber":97,"author":{"gitId":"Dadevchia"},"content":"        for(int i\u003d0;i\u003ctasks.size();i++){","lastModifiedDate":"2023-02-16"},{"lineNumber":98,"author":{"gitId":"Dadevchia"},"content":"            System.out.println((i+1) + \".\" + tasks.get(i));","lastModifiedDate":"2023-02-12"},{"lineNumber":99,"author":{"gitId":"Dadevchia"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":100,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":101,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":102,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":103,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the error message.","lastModifiedDate":"2023-02-22"},{"lineNumber":104,"author":{"gitId":"Dadevchia"},"content":"     * @param errorMessage the error message","lastModifiedDate":"2023-02-22"},{"lineNumber":105,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":106,"author":{"gitId":"Dadevchia"},"content":"    public static void printLine(){","lastModifiedDate":"2023-02-15"},{"lineNumber":107,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-15"},{"lineNumber":108,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":109,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":110,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":111,"author":{"gitId":"Dadevchia"},"content":"     * This method prints the error message.","lastModifiedDate":"2023-02-22"},{"lineNumber":112,"author":{"gitId":"Dadevchia"},"content":"     * @param errorMessage the error message","lastModifiedDate":"2023-02-22"},{"lineNumber":113,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":114,"author":{"gitId":"Dadevchia"},"content":"    public static void printErrorMessage(String errorMessage){","lastModifiedDate":"2023-02-12"},{"lineNumber":115,"author":{"gitId":"Dadevchia"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2023-02-12"},{"lineNumber":116,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":117,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":118,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":119,"author":{"gitId":"Dadevchia"},"content":"     * This method reads the user input.","lastModifiedDate":"2023-02-22"},{"lineNumber":120,"author":{"gitId":"Dadevchia"},"content":"     * @return the user input","lastModifiedDate":"2023-02-22"},{"lineNumber":121,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":122,"author":{"gitId":"Dadevchia"},"content":"    public String readCommand(){","lastModifiedDate":"2023-02-15"},{"lineNumber":123,"author":{"gitId":"Dadevchia"},"content":"        return scan.nextLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":124,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":125,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":126,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"Dadevchia":126}},{"path":"src/main/java/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Dadevchia"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"Dadevchia"},"content":" * This class represents the command to unmark a task from the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"Dadevchia"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"Dadevchia"},"content":" * It contains the execute method to unmark the task from the task list.","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"Dadevchia"},"content":" * It also contains the isExit method to return false.","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"Dadevchia"},"content":" * @param taskNumber the number of the task to be unmarked","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"Dadevchia"},"content":" * @param execute method to execute the command","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"Dadevchia"},"content":" * @param isExit method to return false if the command is not an exit command","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"Dadevchia"},"content":" * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"Dadevchia"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"Dadevchia"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"Dadevchia"},"content":"    ","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"Dadevchia"},"content":"    //the task number to be unmarked","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"Dadevchia"},"content":"    private int taskNumber;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"Dadevchia"},"content":"     * This is the constructor for the UnmarkCommand class.","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"Dadevchia"},"content":"     * @param taskNumber the number of the task to be unmarked","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"Dadevchia"},"content":"    public UnmarkCommand(int taskNumber){","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"Dadevchia"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"Dadevchia"},"content":"     * This method executes the command to unmark a task from the task list.","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"Dadevchia"},"content":"     * @param tasks the task list","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"Dadevchia"},"content":"     * @param ui the user interface","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"Dadevchia"},"content":"     * @throws DukeException if the deadline is not in the correct format","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"Dadevchia"},"content":"    public void execute(TaskList tasks, Ui ui) throws DukeException{","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"Dadevchia"},"content":"        //unmark the task from the task list","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"Dadevchia"},"content":"        tasks.unmarkTask(taskNumber);","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"Dadevchia"},"content":"        //print the message","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"Dadevchia"},"content":"        ui.printUndoneTask(tasks.get(taskNumber));","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"Dadevchia"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"Dadevchia"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"Dadevchia"},"content":"     * This method checks if the command is an exit command.","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"Dadevchia"},"content":"     * @return false if the command is not an exit command","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"Dadevchia"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"Dadevchia"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"Dadevchia"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"Dadevchia"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"Dadevchia"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"Dadevchia":45}}]
