[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"import duke.exceptions.DukeCreateDatabaseException;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"import duke.exceptions.DukeLoadDatabaseException;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"import duke.exceptions.DukeSaveDatabaseException;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"jaredoong"},"content":"import duke.exceptions.DukeWrongArgsException;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"jaredoong"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"jaredoong"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"jaredoong"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"jaredoong"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"jaredoong"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"jaredoong"},"content":"    public static boolean isCompleted \u003d false;","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"jaredoong"},"content":"    private static final Ui ui \u003d new Ui();","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"jaredoong"},"content":"    private static final Storage storage \u003d new Storage();","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"jaredoong"},"content":"    private static final TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"jaredoong"},"content":"     * Checks input from user and executes the appropriate command.","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"jaredoong"},"content":"     * @param inputMessage Raw input string from user","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"jaredoong"},"content":"    public static void checkInput(String inputMessage) {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jaredoong"},"content":"        String cleanInput \u003d inputMessage.trim();","lastModifiedDate":"2023-02-06"},{"lineNumber":29,"author":{"gitId":"jaredoong"},"content":"        String[] message \u003d cleanInput.split(\" \");","lastModifiedDate":"2023-02-06"},{"lineNumber":30,"author":{"gitId":"jaredoong"},"content":"        if (message[0].equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":31,"author":{"gitId":"jaredoong"},"content":"            isCompleted \u003d true;","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"jaredoong"},"content":"        } else if (message[0].equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":33,"author":{"gitId":"jaredoong"},"content":"            displayList(tasks);","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"jaredoong"},"content":"        } else if (message[0].equalsIgnoreCase(\"mark\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":35,"author":{"gitId":"jaredoong"},"content":"            markItem(message);","lastModifiedDate":"2023-02-06"},{"lineNumber":36,"author":{"gitId":"jaredoong"},"content":"        } else if (message[0].equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":37,"author":{"gitId":"jaredoong"},"content":"            unmarkItem(message);","lastModifiedDate":"2023-02-06"},{"lineNumber":38,"author":{"gitId":"jaredoong"},"content":"        } else if (message[0].equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":39,"author":{"gitId":"jaredoong"},"content":"            addTodo(cleanInput);","lastModifiedDate":"2023-02-06"},{"lineNumber":40,"author":{"gitId":"jaredoong"},"content":"        } else if (message[0].equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":41,"author":{"gitId":"jaredoong"},"content":"            addDeadline(message);","lastModifiedDate":"2023-02-06"},{"lineNumber":42,"author":{"gitId":"jaredoong"},"content":"        } else if (message[0].equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2023-02-06"},{"lineNumber":43,"author":{"gitId":"jaredoong"},"content":"            addEvent(message);","lastModifiedDate":"2023-02-06"},{"lineNumber":44,"author":{"gitId":"jaredoong"},"content":"        } else if (message[0].equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"jaredoong"},"content":"            deleteTask(message);","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"jaredoong"},"content":"        } else if (message[0].equalsIgnoreCase(\"find\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"jaredoong"},"content":"            findTask(cleanInput);","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"jaredoong"},"content":"        } else {","lastModifiedDate":"2023-02-06"},{"lineNumber":49,"author":{"gitId":"jaredoong"},"content":"            unknownCommand();","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"jaredoong"},"content":"     * Marks the task in the task-list based on the numbering specified by the user. Prints out an appropriate","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"jaredoong"},"content":"     * error message whenever it receives an invalid input.","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"jaredoong"},"content":"     * @param message Input string from user separated by spaces.","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"jaredoong"},"content":"    public static void markItem(String[] message) {","lastModifiedDate":"2023-02-06"},{"lineNumber":60,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":62,"author":{"gitId":"jaredoong"},"content":"            int itemIndex \u003d tasks.markItem(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"jaredoong"},"content":"            String outputMessage \u003d String.format(\"Nice! I\u0027ve marked task %d as done:\", itemIndex + 1);","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(outputMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(tasks.get(itemIndex).toString());","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"jaredoong"},"content":"        } catch (DukeWrongArgsException error) {","lastModifiedDate":"2023-02-06"},{"lineNumber":67,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d String.format(\"Wrong number of arguments. Expected 2, received %d\",","lastModifiedDate":"2023-02-06"},{"lineNumber":68,"author":{"gitId":"jaredoong"},"content":"                    message.length);","lastModifiedDate":"2023-02-06"},{"lineNumber":69,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"jaredoong"},"content":"        } catch (NumberFormatException error) {","lastModifiedDate":"2023-02-06"},{"lineNumber":71,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d \"Expected a valid number for second argument.\";","lastModifiedDate":"2023-02-06"},{"lineNumber":72,"author":{"gitId":"jaredoong"},"content":"            String errorMessageEcho \u003d String.format(\"You entered %s, which is invalid!\", message[1]);","lastModifiedDate":"2023-02-06"},{"lineNumber":73,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessageEcho);","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"jaredoong"},"content":"        } catch (IndexOutOfBoundsException error) {","lastModifiedDate":"2023-02-06"},{"lineNumber":76,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d \"Out of bounds value provided.\";","lastModifiedDate":"2023-02-06"},{"lineNumber":77,"author":{"gitId":"jaredoong"},"content":"            String errorMessageEcho \u003d String.format(\"List only has %d items!\", tasks.size());","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessageEcho);","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"jaredoong"},"content":"        } finally {","lastModifiedDate":"2023-02-06"},{"lineNumber":81,"author":{"gitId":"jaredoong"},"content":"            ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":83,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":84,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":85,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"jaredoong"},"content":"     * Unmarks the task in the task-list based on the numbering specified by the user. Prints out an","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"jaredoong"},"content":"     * appropriate error message whenever it receives an invalid input.","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"jaredoong"},"content":"     * @param message Input string from user separated by spaces.","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"jaredoong"},"content":"    public static void unmarkItem(String[] message) {","lastModifiedDate":"2023-02-06"},{"lineNumber":92,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":94,"author":{"gitId":"jaredoong"},"content":"            int itemIndex \u003d tasks.unmarkItem(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":95,"author":{"gitId":"jaredoong"},"content":"            String outputMessage \u003d String.format(\"OK, I\u0027ve marked task %d as not done yet:\", itemIndex + 1);","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(outputMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":97,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(tasks.get(itemIndex).toString());","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"jaredoong"},"content":"        } catch (DukeWrongArgsException error) {","lastModifiedDate":"2023-02-06"},{"lineNumber":99,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d String.format(\"Wrong number of arguments. Expected 2, received %d\",","lastModifiedDate":"2023-02-06"},{"lineNumber":100,"author":{"gitId":"jaredoong"},"content":"                    message.length);","lastModifiedDate":"2023-02-06"},{"lineNumber":101,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"jaredoong"},"content":"        } catch (NumberFormatException error) {","lastModifiedDate":"2023-02-06"},{"lineNumber":103,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d \"Expected a valid number for second argument.\";","lastModifiedDate":"2023-02-06"},{"lineNumber":104,"author":{"gitId":"jaredoong"},"content":"            String errorMessageEcho \u003d String.format(\"You entered %s, which is invalid!\", message[1]);","lastModifiedDate":"2023-02-06"},{"lineNumber":105,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessageEcho);","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"jaredoong"},"content":"        } catch (IndexOutOfBoundsException error) {","lastModifiedDate":"2023-02-06"},{"lineNumber":108,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d \"Out of bounds value provided.\";","lastModifiedDate":"2023-02-06"},{"lineNumber":109,"author":{"gitId":"jaredoong"},"content":"            String errorMessageEcho \u003d String.format(\"List only has %d items!\", tasks.size());","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":111,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessageEcho);","lastModifiedDate":"2023-02-23"},{"lineNumber":112,"author":{"gitId":"jaredoong"},"content":"        } finally {","lastModifiedDate":"2023-02-06"},{"lineNumber":113,"author":{"gitId":"jaredoong"},"content":"            ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":114,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":115,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":116,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":117,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":118,"author":{"gitId":"jaredoong"},"content":"     * Adds a Todo task to the task-list. Prints an error message if insufficient arguments are provided.","lastModifiedDate":"2023-02-23"},{"lineNumber":119,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":120,"author":{"gitId":"jaredoong"},"content":"     * @param cleanInput Input string from user that has been trimmed.","lastModifiedDate":"2023-02-23"},{"lineNumber":121,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":122,"author":{"gitId":"jaredoong"},"content":"    public static void addTodo(String cleanInput) {","lastModifiedDate":"2023-02-06"},{"lineNumber":123,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":124,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":125,"author":{"gitId":"jaredoong"},"content":"        // Check if second argument was provided","lastModifiedDate":"2023-02-06"},{"lineNumber":126,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":127,"author":{"gitId":"jaredoong"},"content":"            Todo todo \u003d tasks.addTodo(cleanInput);","lastModifiedDate":"2023-02-23"},{"lineNumber":128,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(\"Got it. I\u0027ve added this todo:\");","lastModifiedDate":"2023-02-23"},{"lineNumber":129,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(String.format(\" %s\", todo));","lastModifiedDate":"2023-02-23"},{"lineNumber":130,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(String.format(\"Now you have %d tasks in the list.\", tasks.size()));","lastModifiedDate":"2023-02-23"},{"lineNumber":131,"author":{"gitId":"jaredoong"},"content":"        } catch (StringIndexOutOfBoundsException error) {","lastModifiedDate":"2023-02-06"},{"lineNumber":132,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d \"Expected 2 arguments, only 1 provided.\";","lastModifiedDate":"2023-02-06"},{"lineNumber":133,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":134,"author":{"gitId":"jaredoong"},"content":"        } finally {","lastModifiedDate":"2023-02-06"},{"lineNumber":135,"author":{"gitId":"jaredoong"},"content":"            ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":136,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":137,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":138,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":139,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":140,"author":{"gitId":"jaredoong"},"content":"     * Adds a Deadline task to the task-list. Prints an error message if insufficient arguments are provided.","lastModifiedDate":"2023-02-23"},{"lineNumber":141,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":142,"author":{"gitId":"jaredoong"},"content":"     * @param message Input string from user separated by spaces.","lastModifiedDate":"2023-02-23"},{"lineNumber":143,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":144,"author":{"gitId":"jaredoong"},"content":"    public static void addDeadline(String[] message) {","lastModifiedDate":"2023-02-06"},{"lineNumber":145,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":146,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":147,"author":{"gitId":"jaredoong"},"content":"        // Check if task and deadline given","lastModifiedDate":"2023-02-06"},{"lineNumber":148,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":149,"author":{"gitId":"jaredoong"},"content":"            Deadline deadline \u003d tasks.addDeadline(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":150,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(\"Got it. I\u0027ve added this deadline:\");","lastModifiedDate":"2023-02-23"},{"lineNumber":151,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(String.format(\" %s\", deadline));","lastModifiedDate":"2023-02-23"},{"lineNumber":152,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(String.format(\"Now you have %d tasks in the list.\", tasks.size()));","lastModifiedDate":"2023-02-23"},{"lineNumber":153,"author":{"gitId":"jaredoong"},"content":"        } catch (DukeWrongArgsException error) {","lastModifiedDate":"2023-02-06"},{"lineNumber":154,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d \"Command to enter new deadline entered wrongly.\";","lastModifiedDate":"2023-02-06"},{"lineNumber":155,"author":{"gitId":"jaredoong"},"content":"            String errorMessageExample \u003d \"Example command: \\\"deadline \u003ctask\u003e /by \u003cendDate\u003e\\\"\";","lastModifiedDate":"2023-02-06"},{"lineNumber":156,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":157,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessageExample);","lastModifiedDate":"2023-02-23"},{"lineNumber":158,"author":{"gitId":"jaredoong"},"content":"        } finally {","lastModifiedDate":"2023-02-06"},{"lineNumber":159,"author":{"gitId":"jaredoong"},"content":"            ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":160,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":161,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":162,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":163,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":164,"author":{"gitId":"jaredoong"},"content":"     * Adds a Deadline task to the task-list. Prints an error message if insufficient arguments are provided.","lastModifiedDate":"2023-02-23"},{"lineNumber":165,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":166,"author":{"gitId":"jaredoong"},"content":"     * @param message Input string from user separated by spaces.","lastModifiedDate":"2023-02-23"},{"lineNumber":167,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":168,"author":{"gitId":"jaredoong"},"content":"    public static void addEvent(String[] message) {","lastModifiedDate":"2023-02-06"},{"lineNumber":169,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":170,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":171,"author":{"gitId":"jaredoong"},"content":"        // Check if task, start and end date given","lastModifiedDate":"2023-02-06"},{"lineNumber":172,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":173,"author":{"gitId":"jaredoong"},"content":"            Event event \u003d tasks.addEvent(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":174,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(\"Got it. I\u0027ve added this event:\");","lastModifiedDate":"2023-02-23"},{"lineNumber":175,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(String.format(\" %s\", event));","lastModifiedDate":"2023-02-23"},{"lineNumber":176,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(String.format(\"Now you have %d tasks in the list.\", tasks.size()));","lastModifiedDate":"2023-02-23"},{"lineNumber":177,"author":{"gitId":"jaredoong"},"content":"        } catch (DukeWrongArgsException error) {","lastModifiedDate":"2023-02-06"},{"lineNumber":178,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d \"Command to enter new event entered wrongly.\";","lastModifiedDate":"2023-02-06"},{"lineNumber":179,"author":{"gitId":"jaredoong"},"content":"            String errorMessageExample \u003d","lastModifiedDate":"2023-02-06"},{"lineNumber":180,"author":{"gitId":"jaredoong"},"content":"                    \"Example command: \\\"event \u003ctask\u003e /from \u003cstartDate\u003e /to \" + \"\u003cendDate\u003e\\\"\";","lastModifiedDate":"2023-02-06"},{"lineNumber":181,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":182,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessageExample);","lastModifiedDate":"2023-02-23"},{"lineNumber":183,"author":{"gitId":"jaredoong"},"content":"        } finally {","lastModifiedDate":"2023-02-06"},{"lineNumber":184,"author":{"gitId":"jaredoong"},"content":"            ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":185,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":186,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":187,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":188,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":189,"author":{"gitId":"jaredoong"},"content":"     * Displays all the tasks currently in the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":190,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":191,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":192,"author":{"gitId":"jaredoong"},"content":"    public static void displayList(TaskList tasks) {","lastModifiedDate":"2023-02-23"},{"lineNumber":193,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":194,"author":{"gitId":"jaredoong"},"content":"        ui.printTaskList(tasks);","lastModifiedDate":"2023-02-23"},{"lineNumber":195,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":196,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":197,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":198,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":199,"author":{"gitId":"jaredoong"},"content":"     * Deletes a task from the task-list. Prints an appropriate error message when command is called by user","lastModifiedDate":"2023-02-23"},{"lineNumber":200,"author":{"gitId":"jaredoong"},"content":"     * incorrectly.","lastModifiedDate":"2023-02-23"},{"lineNumber":201,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":202,"author":{"gitId":"jaredoong"},"content":"     * @param message Input string from user separated by spaces.","lastModifiedDate":"2023-02-23"},{"lineNumber":203,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":204,"author":{"gitId":"jaredoong"},"content":"    public static void deleteTask(String[] message) {","lastModifiedDate":"2023-02-11"},{"lineNumber":205,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":206,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":207,"author":{"gitId":"jaredoong"},"content":"            Task deletedTask \u003d tasks.deleteTask(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":208,"author":{"gitId":"jaredoong"},"content":"            String outputMessage \u003d \"Noted. I\u0027ve removed this task:\";","lastModifiedDate":"2023-02-11"},{"lineNumber":209,"author":{"gitId":"jaredoong"},"content":"            String outputRemaining \u003d String.format(\"Now you have %d tasks in the list.\", tasks.size());","lastModifiedDate":"2023-02-23"},{"lineNumber":210,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(outputMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":211,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(deletedTask.toString());","lastModifiedDate":"2023-02-23"},{"lineNumber":212,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(outputRemaining);","lastModifiedDate":"2023-02-23"},{"lineNumber":213,"author":{"gitId":"jaredoong"},"content":"        } catch (DukeWrongArgsException error) {","lastModifiedDate":"2023-02-11"},{"lineNumber":214,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d String.format(\"Wrong number of arguments. Expected 2, received %d\",","lastModifiedDate":"2023-02-11"},{"lineNumber":215,"author":{"gitId":"jaredoong"},"content":"                    message.length);","lastModifiedDate":"2023-02-11"},{"lineNumber":216,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":217,"author":{"gitId":"jaredoong"},"content":"        } catch (NumberFormatException error) {","lastModifiedDate":"2023-02-11"},{"lineNumber":218,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d \"Expected a valid number for second argument.\";","lastModifiedDate":"2023-02-11"},{"lineNumber":219,"author":{"gitId":"jaredoong"},"content":"            String errorMessageEcho \u003d String.format(\"You entered %s, which is invalid!\", message[1]);","lastModifiedDate":"2023-02-11"},{"lineNumber":220,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":221,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessageEcho);","lastModifiedDate":"2023-02-23"},{"lineNumber":222,"author":{"gitId":"jaredoong"},"content":"        } catch (IndexOutOfBoundsException error) {","lastModifiedDate":"2023-02-11"},{"lineNumber":223,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d \"Out of bounds value provided.\";","lastModifiedDate":"2023-02-11"},{"lineNumber":224,"author":{"gitId":"jaredoong"},"content":"            String errorMessageEcho \u003d String.format(\"List only has %d items!\", tasks.size());","lastModifiedDate":"2023-02-23"},{"lineNumber":225,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":226,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessageEcho);","lastModifiedDate":"2023-02-23"},{"lineNumber":227,"author":{"gitId":"jaredoong"},"content":"        } finally {","lastModifiedDate":"2023-02-11"},{"lineNumber":228,"author":{"gitId":"jaredoong"},"content":"            ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":229,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":230,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":231,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":232,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":233,"author":{"gitId":"jaredoong"},"content":"     * Finds and displays all task in the current task-list that contain the keyword specified by the user in","lastModifiedDate":"2023-02-23"},{"lineNumber":234,"author":{"gitId":"jaredoong"},"content":"     * the task description.","lastModifiedDate":"2023-02-23"},{"lineNumber":235,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":236,"author":{"gitId":"jaredoong"},"content":"     * @param message Input from user that has been trimmed.","lastModifiedDate":"2023-02-23"},{"lineNumber":237,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":238,"author":{"gitId":"jaredoong"},"content":"    public static void findTask(String message) {","lastModifiedDate":"2023-02-23"},{"lineNumber":239,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":240,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":241,"author":{"gitId":"jaredoong"},"content":"            TaskList tasksFound \u003d tasks.findTask(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":242,"author":{"gitId":"jaredoong"},"content":"            if (tasksFound.isEmpty()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":243,"author":{"gitId":"jaredoong"},"content":"                ui.printMessage(\"No tasks found!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":244,"author":{"gitId":"jaredoong"},"content":"            } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":245,"author":{"gitId":"jaredoong"},"content":"                ui.printMessage(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-02-23"},{"lineNumber":246,"author":{"gitId":"jaredoong"},"content":"                ui.printTaskList(tasksFound);","lastModifiedDate":"2023-02-23"},{"lineNumber":247,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":248,"author":{"gitId":"jaredoong"},"content":"        } catch (StringIndexOutOfBoundsException error) {","lastModifiedDate":"2023-02-23"},{"lineNumber":249,"author":{"gitId":"jaredoong"},"content":"            String errorMessage \u003d \"Expected 2 arguments, only 1 provided.\";","lastModifiedDate":"2023-02-23"},{"lineNumber":250,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":251,"author":{"gitId":"jaredoong"},"content":"        } finally {","lastModifiedDate":"2023-02-23"},{"lineNumber":252,"author":{"gitId":"jaredoong"},"content":"            ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":253,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":254,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":255,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":256,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":257,"author":{"gitId":"jaredoong"},"content":"     * Greets user and loads previously created database file. If past database file does not exist, new","lastModifiedDate":"2023-02-23"},{"lineNumber":258,"author":{"gitId":"jaredoong"},"content":"     * database file will be created.","lastModifiedDate":"2023-02-23"},{"lineNumber":259,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":260,"author":{"gitId":"jaredoong"},"content":"    public static void startDuke() {","lastModifiedDate":"2023-02-23"},{"lineNumber":261,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":262,"author":{"gitId":"jaredoong"},"content":"        ui.printMessage(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-02-23"},{"lineNumber":263,"author":{"gitId":"jaredoong"},"content":"        ui.printMessage(\"Let me check the current list of tasks\");","lastModifiedDate":"2023-02-23"},{"lineNumber":264,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":265,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":266,"author":{"gitId":"jaredoong"},"content":"            String fileContent \u003d storage.loadDatabase();","lastModifiedDate":"2023-02-23"},{"lineNumber":267,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":268,"author":{"gitId":"jaredoong"},"content":"            if (!fileContent.isEmpty()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":269,"author":{"gitId":"jaredoong"},"content":"                ui.printMessage(\"Loading previous task list...\");","lastModifiedDate":"2023-02-23"},{"lineNumber":270,"author":{"gitId":"jaredoong"},"content":"                tasks.loadTaskList(fileContent);","lastModifiedDate":"2023-02-23"},{"lineNumber":271,"author":{"gitId":"jaredoong"},"content":"                ui.printLoadedTaskList(tasks);","lastModifiedDate":"2023-02-23"},{"lineNumber":272,"author":{"gitId":"jaredoong"},"content":"            } else {","lastModifiedDate":"2023-02-11"},{"lineNumber":273,"author":{"gitId":"jaredoong"},"content":"                ui.printMessage(\"Database file does not exist, creating one now!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":274,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":275,"author":{"gitId":"jaredoong"},"content":"        } catch (DukeCreateDatabaseException error) {","lastModifiedDate":"2023-02-23"},{"lineNumber":276,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(\"Unable to create database file!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":277,"author":{"gitId":"jaredoong"},"content":"        } catch (DukeLoadDatabaseException error) {","lastModifiedDate":"2023-02-23"},{"lineNumber":278,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(\"Unable to load database file!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":279,"author":{"gitId":"jaredoong"},"content":"        } finally {","lastModifiedDate":"2023-02-23"},{"lineNumber":280,"author":{"gitId":"jaredoong"},"content":"            ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":281,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":282,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":283,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":284,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":285,"author":{"gitId":"jaredoong"},"content":"     * Saves current task-list into database and then exits the program.","lastModifiedDate":"2023-02-23"},{"lineNumber":286,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":287,"author":{"gitId":"jaredoong"},"content":"    public static void endDuke() {","lastModifiedDate":"2023-02-23"},{"lineNumber":288,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":289,"author":{"gitId":"jaredoong"},"content":"        ui.printMessage(\"Saving current list of data into database...\");","lastModifiedDate":"2023-02-23"},{"lineNumber":290,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":291,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":292,"author":{"gitId":"jaredoong"},"content":"            storage.saveDatabase(tasks);","lastModifiedDate":"2023-02-23"},{"lineNumber":293,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(\"Done saving list of tasks.\");","lastModifiedDate":"2023-02-23"},{"lineNumber":294,"author":{"gitId":"jaredoong"},"content":"        } catch (DukeSaveDatabaseException error) {","lastModifiedDate":"2023-02-23"},{"lineNumber":295,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(\"Unable to save database file!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":296,"author":{"gitId":"jaredoong"},"content":"        } finally {","lastModifiedDate":"2023-02-23"},{"lineNumber":297,"author":{"gitId":"jaredoong"},"content":"            ui.printMessage(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":298,"author":{"gitId":"jaredoong"},"content":"            ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":299,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":300,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":301,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":302,"author":{"gitId":"jaredoong"},"content":"    private static void unknownCommand() {","lastModifiedDate":"2023-02-23"},{"lineNumber":303,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":304,"author":{"gitId":"jaredoong"},"content":"        ui.printMessage(\"Unknown command entered, please enter a proper command!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":305,"author":{"gitId":"jaredoong"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":306,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":307,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":308,"author":{"gitId":"jaredoong"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-20"},{"lineNumber":309,"author":{"gitId":"jaredoong"},"content":"        startDuke();","lastModifiedDate":"2023-02-11"},{"lineNumber":310,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":311,"author":{"gitId":"jaredoong"},"content":"        String line;","lastModifiedDate":"2023-01-20"},{"lineNumber":312,"author":{"gitId":"jaredoong"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-20"},{"lineNumber":313,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":314,"author":{"gitId":"jaredoong"},"content":"        do {","lastModifiedDate":"2023-01-20"},{"lineNumber":315,"author":{"gitId":"jaredoong"},"content":"            line \u003d in.nextLine();","lastModifiedDate":"2023-01-20"},{"lineNumber":316,"author":{"gitId":"jaredoong"},"content":"            checkInput(line);","lastModifiedDate":"2023-01-29"},{"lineNumber":317,"author":{"gitId":"jaredoong"},"content":"        } while (!isCompleted);","lastModifiedDate":"2023-01-20"},{"lineNumber":318,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":319,"author":{"gitId":"jaredoong"},"content":"        endDuke();","lastModifiedDate":"2023-02-11"},{"lineNumber":320,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":321,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"-":1,"jaredoong":320}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"import duke.exceptions.DukeWrongArgsException;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"jaredoong"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"jaredoong"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"jaredoong"},"content":"public class Parser {","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"jaredoong"},"content":"     * Parses an input that is expected to be a Todo task. Checks for errors early on, otherwise it returns a","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"jaredoong"},"content":"     * Todo task to be saved into the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"jaredoong"},"content":"     * @param message Input from the user.","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"jaredoong"},"content":"     * @return Todo This task is to be saved into the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"jaredoong"},"content":"     * @throws StringIndexOutOfBoundsException On input of insufficient length.","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"jaredoong"},"content":"    public static Todo parseTodo(String message) throws StringIndexOutOfBoundsException {","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"jaredoong"},"content":"        int secondArgStartIndex \u003d 5;","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"jaredoong"},"content":"        if (message.length() \u003c secondArgStartIndex) {","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"jaredoong"},"content":"            throw new StringIndexOutOfBoundsException();","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"jaredoong"},"content":"        } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"jaredoong"},"content":"            return new Todo(message.substring(secondArgStartIndex));","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"jaredoong"},"content":"     * Parses an input that is expected to be a Deadline task. Checks for errors early on, otherwise it","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"jaredoong"},"content":"     * returns a Deadline task to be saved into the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"jaredoong"},"content":"     * @param message Input from user.","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"jaredoong"},"content":"     * @return Deadline This task is to be saved into the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"jaredoong"},"content":"     * @throws DukeWrongArgsException On incorrect number of input arguments.","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"jaredoong"},"content":"    public static Deadline parseDeadline(String[] message) throws DukeWrongArgsException {","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"jaredoong"},"content":"        int descriptionStartIndex \u003d 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"jaredoong"},"content":"        int descriptionEndIndex \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"jaredoong"},"content":"        int endDateStartIndex \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"jaredoong"},"content":"        int endDateEndIndex \u003d message.length;","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"jaredoong"},"content":"        for (int i \u003d 2; i \u003c message.length; i++) {","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"jaredoong"},"content":"            if (message[i].equalsIgnoreCase(\"/by\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"jaredoong"},"content":"                descriptionEndIndex \u003d i;","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"jaredoong"},"content":"                endDateStartIndex \u003d i + 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"jaredoong"},"content":"                break;","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"jaredoong"},"content":"        // Checks if correct argument is provided","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"jaredoong"},"content":"        if (endDateStartIndex \u003d\u003d 0) {","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"jaredoong"},"content":"            throw new DukeWrongArgsException();","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"jaredoong"},"content":"        String[] descriptionArray \u003d Arrays.copyOfRange(message, descriptionStartIndex, descriptionEndIndex);","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"jaredoong"},"content":"        String[] endDateArray \u003d Arrays.copyOfRange(message, endDateStartIndex, endDateEndIndex);","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"jaredoong"},"content":"        String[] deadlineArray \u003d new String[2];","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"jaredoong"},"content":"        deadlineArray[0] \u003d String.join(\" \", descriptionArray);","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"jaredoong"},"content":"        deadlineArray[1] \u003d String.join(\" \", endDateArray);","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"jaredoong"},"content":"        return new Deadline(deadlineArray[0], deadlineArray[1]);","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"jaredoong"},"content":"     * Parses an input that is expected to be an Event task. Checks for errors early on, otherwise it returns","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"jaredoong"},"content":"     * an Event task to be saved into the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"jaredoong"},"content":"     * @param message Input from user.","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"jaredoong"},"content":"     * @return Event This task is to be saved into the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"jaredoong"},"content":"     * @throws DukeWrongArgsException On incorrect number of input arguments.","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"jaredoong"},"content":"    public static Event parseEvent(String[] message) throws DukeWrongArgsException {","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"jaredoong"},"content":"        int descriptionStartIndex \u003d 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"jaredoong"},"content":"        int descriptionEndIndex \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"jaredoong"},"content":"        int startDateStartIndex \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"jaredoong"},"content":"        int startDateEndIndex \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"jaredoong"},"content":"        int endDateStartIndex \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"jaredoong"},"content":"        int endDateEndIndex \u003d message.length;","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"jaredoong"},"content":"        for (int i \u003d 1; i \u003c message.length; i++) {","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"jaredoong"},"content":"            if (message[i].equalsIgnoreCase(\"/from\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"jaredoong"},"content":"                descriptionEndIndex \u003d i;","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"jaredoong"},"content":"                startDateStartIndex \u003d i + 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"jaredoong"},"content":"            if (message[i].equalsIgnoreCase(\"/to\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"jaredoong"},"content":"                startDateEndIndex \u003d i;","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"jaredoong"},"content":"                endDateStartIndex \u003d i + 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"jaredoong"},"content":"                break;","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"jaredoong"},"content":"        if (startDateStartIndex \u003d\u003d 0 || startDateEndIndex \u003d\u003d 0) {","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"jaredoong"},"content":"            throw new DukeWrongArgsException();","lastModifiedDate":"2023-02-23"},{"lineNumber":95,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":97,"author":{"gitId":"jaredoong"},"content":"        String[] descriptionArray \u003d Arrays.copyOfRange(message, descriptionStartIndex, descriptionEndIndex);","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"jaredoong"},"content":"        String[] startDateArray \u003d Arrays.copyOfRange(message, startDateStartIndex, startDateEndIndex);","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"jaredoong"},"content":"        String[] endDateArray \u003d Arrays.copyOfRange(message, endDateStartIndex, endDateEndIndex);","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"jaredoong"},"content":"        String[] eventArray \u003d new String[3];","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"jaredoong"},"content":"        eventArray[0] \u003d String.join(\" \", descriptionArray);","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"jaredoong"},"content":"        eventArray[1] \u003d String.join(\" \", startDateArray);","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"jaredoong"},"content":"        eventArray[2] \u003d String.join(\" \", endDateArray);","lastModifiedDate":"2023-02-23"},{"lineNumber":105,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"jaredoong"},"content":"        return new Event(eventArray[0], eventArray[1], eventArray[2]);","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":108,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":109,"author":{"gitId":"jaredoong"},"content":"    public static String parseKeyword(String message) throws StringIndexOutOfBoundsException {","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"jaredoong"},"content":"        int keywordStartIndex \u003d 5;","lastModifiedDate":"2023-02-23"},{"lineNumber":111,"author":{"gitId":"jaredoong"},"content":"        if (message.length() \u003c keywordStartIndex) {","lastModifiedDate":"2023-02-23"},{"lineNumber":112,"author":{"gitId":"jaredoong"},"content":"            throw new StringIndexOutOfBoundsException();","lastModifiedDate":"2023-02-23"},{"lineNumber":113,"author":{"gitId":"jaredoong"},"content":"        } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":114,"author":{"gitId":"jaredoong"},"content":"            String keyword \u003d message.substring(keywordStartIndex);","lastModifiedDate":"2023-02-23"},{"lineNumber":115,"author":{"gitId":"jaredoong"},"content":"            keyword \u003d keyword.trim();","lastModifiedDate":"2023-02-23"},{"lineNumber":116,"author":{"gitId":"jaredoong"},"content":"            return keyword;","lastModifiedDate":"2023-02-23"},{"lineNumber":117,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":118,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":119,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"jaredoong":119}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"import duke.exceptions.DukeCreateDatabaseException;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"import duke.exceptions.DukeLoadDatabaseException;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"import duke.exceptions.DukeSaveDatabaseException;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"jaredoong"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"jaredoong"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"jaredoong"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"jaredoong"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"jaredoong"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"jaredoong"},"content":"import java.io.File;","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"jaredoong"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"jaredoong"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"jaredoong"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"jaredoong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"jaredoong"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"jaredoong"},"content":"public class Storage {","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"jaredoong"},"content":"     * Checks for database file on local filesystem. Create parent directory and database file if it does not","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"jaredoong"},"content":"     * exist, otherwise reads the data in the database file","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"jaredoong"},"content":"     * @return String This returns the data in database in the form of a String. If database did not exist,","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"jaredoong"},"content":"     * returns empty String.","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"jaredoong"},"content":"     * @throws DukeCreateDatabaseException On failure to create new database file.","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"jaredoong"},"content":"     * @throws DukeLoadDatabaseException   On failure to load past database file.","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"jaredoong"},"content":"    protected String loadDatabase() throws DukeCreateDatabaseException, DukeLoadDatabaseException {","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"jaredoong"},"content":"        String fileContent;","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"jaredoong"},"content":"        Path filepath \u003d Paths.get(\"data\", \"duke.txt\");","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"jaredoong"},"content":"        File databaseFile \u003d filepath.toFile();","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"jaredoong"},"content":"        if (!databaseFile.exists()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"jaredoong"},"content":"            fileContent \u003d createDatabaseFile(databaseFile);","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"jaredoong"},"content":"        } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"jaredoong"},"content":"            fileContent \u003d loadDatabaseFile(databaseFile);","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"jaredoong"},"content":"        return fileContent;","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"jaredoong"},"content":"     * Saves all the items in the task-list into a local file used as the database. Tasks are saved in a","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"jaredoong"},"content":"     * format that can be easily read in order to load the task-list from the database file.","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"jaredoong"},"content":"     * @param tasks Task-list to be saved into the database","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"jaredoong"},"content":"     * @throws DukeSaveDatabaseException On failure to save task-list into database.","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"jaredoong"},"content":"    protected void saveDatabase(TaskList tasks) throws DukeSaveDatabaseException {","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"jaredoong"},"content":"            Path filepath \u003d Paths.get(\"data\", \"duke.txt\");","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"jaredoong"},"content":"            File databaseFile \u003d filepath.toFile();","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"jaredoong"},"content":"            FileWriter databaseFileWriter \u003d new FileWriter(databaseFile);","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"jaredoong"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"jaredoong"},"content":"                String taskInfo \u003d \"\";","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"jaredoong"},"content":"                if (task instanceof Todo) {","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"jaredoong"},"content":"                    taskInfo \u003d \"T\" + \"|\" + task.getStatusIcon() + \"|\" + task.getDescription()","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"jaredoong"},"content":"                            + System.lineSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"jaredoong"},"content":"                } else if (task instanceof Deadline) {","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"jaredoong"},"content":"                    taskInfo \u003d \"D\" + \"|\" + task.getStatusIcon() + \"|\" + task.getDescription() + \"|\"","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"jaredoong"},"content":"                            + task.getEndDate() + System.lineSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"jaredoong"},"content":"                } else if (task instanceof Event) {","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"jaredoong"},"content":"                    taskInfo \u003d \"E\" + \"|\" + task.getStatusIcon() + \"|\" + task.getDescription() + \"|\"","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"jaredoong"},"content":"                            + task.getEndDate() + \"|\" + task.getStartDate() + System.lineSeparator();","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"jaredoong"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"jaredoong"},"content":"                databaseFileWriter.write(taskInfo);","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"jaredoong"},"content":"            databaseFileWriter.close();","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"jaredoong"},"content":"        } catch (IOException error) {","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"jaredoong"},"content":"            throw new DukeSaveDatabaseException();","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"jaredoong"},"content":"    private String createDatabaseFile(File databaseFile) throws DukeCreateDatabaseException {","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"jaredoong"},"content":"            boolean canCreateDirectory \u003d databaseFile.getParentFile().mkdirs();","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"jaredoong"},"content":"            boolean canCreateFile \u003d databaseFile.createNewFile();","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"jaredoong"},"content":"            if (!canCreateFile | !canCreateDirectory) {","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"jaredoong"},"content":"                throw new DukeCreateDatabaseException();","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"jaredoong"},"content":"        } catch (IOException error) {","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"jaredoong"},"content":"            throw new DukeCreateDatabaseException();","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"jaredoong"},"content":"        return \"\";","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"jaredoong"},"content":"    private String loadDatabaseFile(File databaseFile) throws DukeLoadDatabaseException {","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"jaredoong"},"content":"            FileReader fileReader \u003d new FileReader(databaseFile);","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"jaredoong"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"jaredoong"},"content":"            StringBuilder fileContent \u003d new StringBuilder();","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"jaredoong"},"content":"            String line;","lastModifiedDate":"2023-02-23"},{"lineNumber":95,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"jaredoong"},"content":"            while ((line \u003d bufferedReader.readLine()) !\u003d null) {","lastModifiedDate":"2023-02-23"},{"lineNumber":97,"author":{"gitId":"jaredoong"},"content":"                fileContent.append(line).append(\"\\n\");","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"jaredoong"},"content":"            bufferedReader.close();","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"jaredoong"},"content":"            fileReader.close();","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"jaredoong"},"content":"            return fileContent.toString();","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"jaredoong"},"content":"        } catch (IOException error) {","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"jaredoong"},"content":"            throw new DukeLoadDatabaseException();","lastModifiedDate":"2023-02-23"},{"lineNumber":105,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"jaredoong":107}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"public class Ui {","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"jaredoong"},"content":"    private static final int BOX_WIDTH \u003d 100;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"     * Prints a simple line of \u0027----\u0027 for neater look.","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"jaredoong"},"content":"    protected void printSeparator() {","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"jaredoong"},"content":"        String separatorLine \u003d \"-\".repeat(BOX_WIDTH);","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"jaredoong"},"content":"        System.out.println(separatorLine);","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"jaredoong"},"content":"     * Formats display message to be left-justified with vertical bars at both ends","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"jaredoong"},"content":"     * @param message Message to be display to the user on the terminal","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"jaredoong"},"content":"    protected void printMessage(String message) {","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"jaredoong"},"content":"        String outputMessage \u003d String.format(\"| %-97s|\", message);","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"jaredoong"},"content":"        System.out.println(outputMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"jaredoong"},"content":"     * Prints out task-list onto the terminal.","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"jaredoong"},"content":"     * @param tasks Task-list to be printed.","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"jaredoong"},"content":"    protected void printLoadedTaskList(TaskList tasks) {","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"jaredoong"},"content":"        printMessage(\"Done loading previous task list:\");","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"jaredoong"},"content":"        String outputMessage \u003d String.format(\"Loaded a total of %d tasks!\", tasks.size());","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"jaredoong"},"content":"        printMessage(outputMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"jaredoong"},"content":"    protected void printTaskList(TaskList tasks) {","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"jaredoong"},"content":"        int numItems \u003d tasks.size();","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"jaredoong"},"content":"        if (numItems \u003d\u003d 0) {","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"jaredoong"},"content":"            printMessage(\"List is empty!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"jaredoong"},"content":"        } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"jaredoong"},"content":"            printMessage(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"jaredoong"},"content":"            for (int i \u003d 0; i \u003c numItems; i++) {","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"jaredoong"},"content":"                String item \u003d tasks.get(i).toString();","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"jaredoong"},"content":"                String outputMessage \u003d String.format(\"%d.%s\", i + 1, item);","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"jaredoong"},"content":"                printMessage(outputMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"jaredoong":51}},{"path":"src/main/java/duke/exceptions/DukeCreateDatabaseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke.exceptions;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"public class DukeCreateDatabaseException extends Exception {","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"jaredoong":5}},{"path":"src/main/java/duke/exceptions/DukeLoadDatabaseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke.exceptions;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"public class DukeLoadDatabaseException extends Exception {","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"jaredoong":5}},{"path":"src/main/java/duke/exceptions/DukeSaveDatabaseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke.exceptions;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"public class DukeSaveDatabaseException extends Exception {","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"jaredoong":5}},{"path":"src/main/java/duke/exceptions/DukeWrongArgsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke.exceptions;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"public class DukeWrongArgsException extends Exception {","lastModifiedDate":"2023-02-06"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"jaredoong":5}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke.task;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"    public Deadline(String description, String endDate) {","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jaredoong"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jaredoong"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jaredoong"},"content":"        String taskOutput \u003d super.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jaredoong"},"content":"        return String.format(\"[D]%s (by: %s)\", taskOutput, endDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jaredoong":14}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke.task;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"    public Event(String description, String startDate, String endDate) {","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jaredoong"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jaredoong"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jaredoong"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jaredoong"},"content":"        String taskOutput \u003d super.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jaredoong"},"content":"        return String.format(\"[E]%s (by: %s to: %s)\", taskOutput, startDate, endDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jaredoong":15}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke.task;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"    protected final String MARKED \u003d \"X\";","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"jaredoong"},"content":"    protected final String UNMARKED \u003d \" \";","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"jaredoong"},"content":"    protected String description;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jaredoong"},"content":"    protected String startDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jaredoong"},"content":"    protected String endDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"jaredoong"},"content":"     * Base template for Task objects. Consists of a description, startDate, endDate and isDone to keep track","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"jaredoong"},"content":"     * whether task is marked as complete.","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"jaredoong"},"content":"     * @param description Description of task to be added.","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"jaredoong"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jaredoong"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jaredoong"},"content":"        this.startDate \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jaredoong"},"content":"        this.endDate \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jaredoong"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"jaredoong"},"content":"     * Returns the status icon of a task, for display to the user.","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"jaredoong"},"content":"     * @return String Returns \u0027X\u0027 if tasks is marked, otherwise returns \u0027 \u0027.","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"jaredoong"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"jaredoong"},"content":"        return ((this.isDone) ? MARKED : UNMARKED);","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"jaredoong"},"content":"     * Returns the description of a task, for display to the user.","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"jaredoong"},"content":"     * @return String Returns the description of the task.","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"jaredoong"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"jaredoong"},"content":"        return this.description;","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"jaredoong"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"jaredoong"},"content":"    public void setAsDone() {","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"jaredoong"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"jaredoong"},"content":"     * Marks the task as undone.","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"jaredoong"},"content":"    public void setAsNotDone() {","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"jaredoong"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"jaredoong"},"content":"     * Returns the start date of the task, for display to the user.","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"jaredoong"},"content":"     * @return String Returns the start date of the task.","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"jaredoong"},"content":"    public String getStartDate() {","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"jaredoong"},"content":"        return this.startDate;","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"jaredoong"},"content":"     * Returns the end date of the task, for display to the user.","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"jaredoong"},"content":"     * @return String Returns the end date of the task.","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"jaredoong"},"content":"    public String getEndDate() {","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"jaredoong"},"content":"        return this.endDate;","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"jaredoong"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"jaredoong"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"jaredoong"},"content":"        String itemStatus \u003d this.getStatusIcon();","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"jaredoong"},"content":"        String itemDescription \u003d this.getDescription();","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"jaredoong"},"content":"        return String.format(\"[%s] %s\", itemStatus, itemDescription);","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jaredoong":81}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke.task;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"import duke.exceptions.DukeWrongArgsException;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"jaredoong"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"jaredoong"},"content":"     * Adds a Todo task into the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"jaredoong"},"content":"     * @param cleanInput Input from user that has whitespaces trimmed off.","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"jaredoong"},"content":"     * @return Todo Returns the task that has been just added the the task-list","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"jaredoong"},"content":"     * @throws StringIndexOutOfBoundsException On input of insufficient length.","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"jaredoong"},"content":"    public Todo addTodo(String cleanInput) throws StringIndexOutOfBoundsException {","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"jaredoong"},"content":"        Todo todo \u003d duke.Parser.parseTodo(cleanInput);","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"jaredoong"},"content":"        this.add(todo);","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"jaredoong"},"content":"        return todo;","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"jaredoong"},"content":"     * Adds a Deadline task into the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"jaredoong"},"content":"     * @param message Input from the user split by spaces.","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"jaredoong"},"content":"     * @return Deadline Returns the task that has been just added the task-list","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"jaredoong"},"content":"     * @throws DukeWrongArgsException On wrong number of arguments provided.","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"jaredoong"},"content":"    public Deadline addDeadline(String[] message) throws DukeWrongArgsException {","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"jaredoong"},"content":"        Deadline deadline \u003d duke.Parser.parseDeadline(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"jaredoong"},"content":"        this.add(deadline);","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"jaredoong"},"content":"        return deadline;","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"jaredoong"},"content":"     * Adds an Event task into the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"jaredoong"},"content":"     * @param message Input from the user split by spaces.","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"jaredoong"},"content":"     * @return Event Returns the task that has been just added the task-list","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"jaredoong"},"content":"     * @throws DukeWrongArgsException On wrong number of arguments provided.","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"jaredoong"},"content":"    public Event addEvent(String[] message) throws DukeWrongArgsException {","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"jaredoong"},"content":"        Event event \u003d duke.Parser.parseEvent(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"jaredoong"},"content":"        this.add(event);","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"jaredoong"},"content":"        return event;","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"jaredoong"},"content":"     * Marks the task in the task-list as done.","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"jaredoong"},"content":"     * @param message Input from the user split by spaces.","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"jaredoong"},"content":"     * @return int Index of task in task-list that got marked as done.","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"jaredoong"},"content":"     * @throws DukeWrongArgsException On wrong number of arguments provided.","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"jaredoong"},"content":"     * @throws NumberFormatException  On invalid index of task to be marked.","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"jaredoong"},"content":"    public int markItem(String[] message) throws DukeWrongArgsException, NumberFormatException {","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"jaredoong"},"content":"        int taskNumber \u003d getTaskNumber(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"jaredoong"},"content":"        this.get(taskNumber - 1).setAsDone();","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"jaredoong"},"content":"        return taskNumber - 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"jaredoong"},"content":"     * Marks the task in the task-list as not done.","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"jaredoong"},"content":"     * @param message Input from the user split by spaces.","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"jaredoong"},"content":"     * @return int Index of task in task-list that got marked as not done.","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"jaredoong"},"content":"     * @throws DukeWrongArgsException On wrong number of arguments provided.","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"jaredoong"},"content":"     * @throws NumberFormatException  On invalid index of task to be marked.","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"jaredoong"},"content":"    public int unmarkItem(String[] message) throws DukeWrongArgsException, NumberFormatException {","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"jaredoong"},"content":"        int taskNumber \u003d getTaskNumber(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"jaredoong"},"content":"        this.get(taskNumber - 1).setAsNotDone();","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"jaredoong"},"content":"        return taskNumber - 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"jaredoong"},"content":"     * Deletes the task in the task-list.","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"jaredoong"},"content":"     * @param message Input from the user split by spaces.","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"jaredoong"},"content":"     * @return Task Returns tasks that just got deleted.","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"jaredoong"},"content":"     * @throws DukeWrongArgsException On wrong number of arguments provided.","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"jaredoong"},"content":"    public Task deleteTask(String[] message) throws DukeWrongArgsException {","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"jaredoong"},"content":"        int taskNumber \u003d getTaskNumber(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"jaredoong"},"content":"        Task deletedTask \u003d get(taskNumber - 1);","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"jaredoong"},"content":"        remove(taskNumber - 1);","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"jaredoong"},"content":"        return deletedTask;","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"jaredoong"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"jaredoong"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"jaredoong"},"content":"     * Loads the previous task-list saved in the database file.","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"jaredoong"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"jaredoong"},"content":"     * @param fileContent Database file concatenated into a String.","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"jaredoong"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":95,"author":{"gitId":"jaredoong"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"jaredoong"},"content":"    public TaskList findTask(String message) {","lastModifiedDate":"2023-02-23"},{"lineNumber":97,"author":{"gitId":"jaredoong"},"content":"        TaskList tasksFound \u003d new TaskList();","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"jaredoong"},"content":"        String keyword \u003d duke.Parser.parseKeyword(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"jaredoong"},"content":"        for (Task task : this) {","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"jaredoong"},"content":"            String taskDescription \u003d task.getDescription();","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"jaredoong"},"content":"            if (taskDescription.contains(keyword)) {","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"jaredoong"},"content":"                tasksFound.add(task);","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":105,"author":{"gitId":"jaredoong"},"content":"        return tasksFound;","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":108,"author":{"gitId":"jaredoong"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e master","lastModifiedDate":"2023-02-23"},{"lineNumber":109,"author":{"gitId":"jaredoong"},"content":"    public void loadTaskList(String fileContent) {","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"jaredoong"},"content":"        String[] lines \u003d fileContent.split(\"\\n\");","lastModifiedDate":"2023-02-23"},{"lineNumber":111,"author":{"gitId":"jaredoong"},"content":"        for (String line : lines) {","lastModifiedDate":"2023-02-23"},{"lineNumber":112,"author":{"gitId":"jaredoong"},"content":"            String[] taskInfo \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-02-23"},{"lineNumber":113,"author":{"gitId":"jaredoong"},"content":"            switch (taskInfo[0]) {","lastModifiedDate":"2023-02-23"},{"lineNumber":114,"author":{"gitId":"jaredoong"},"content":"            case \"T\":","lastModifiedDate":"2023-02-23"},{"lineNumber":115,"author":{"gitId":"jaredoong"},"content":"                Todo todo \u003d new Todo(taskInfo[2]);","lastModifiedDate":"2023-02-23"},{"lineNumber":116,"author":{"gitId":"jaredoong"},"content":"                if (taskInfo[1].equals(\"X\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":117,"author":{"gitId":"jaredoong"},"content":"                    todo.setAsDone();","lastModifiedDate":"2023-02-23"},{"lineNumber":118,"author":{"gitId":"jaredoong"},"content":"                } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":119,"author":{"gitId":"jaredoong"},"content":"                    todo.setAsNotDone();","lastModifiedDate":"2023-02-23"},{"lineNumber":120,"author":{"gitId":"jaredoong"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":121,"author":{"gitId":"jaredoong"},"content":"                this.add(todo);","lastModifiedDate":"2023-02-23"},{"lineNumber":122,"author":{"gitId":"jaredoong"},"content":"                break;","lastModifiedDate":"2023-02-23"},{"lineNumber":123,"author":{"gitId":"jaredoong"},"content":"            case \"D\":","lastModifiedDate":"2023-02-23"},{"lineNumber":124,"author":{"gitId":"jaredoong"},"content":"                Deadline deadline \u003d new Deadline(taskInfo[2], taskInfo[3]);","lastModifiedDate":"2023-02-23"},{"lineNumber":125,"author":{"gitId":"jaredoong"},"content":"                if (taskInfo[1].equals(\"X\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":126,"author":{"gitId":"jaredoong"},"content":"                    deadline.setAsDone();","lastModifiedDate":"2023-02-23"},{"lineNumber":127,"author":{"gitId":"jaredoong"},"content":"                } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":128,"author":{"gitId":"jaredoong"},"content":"                    deadline.setAsNotDone();","lastModifiedDate":"2023-02-23"},{"lineNumber":129,"author":{"gitId":"jaredoong"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":130,"author":{"gitId":"jaredoong"},"content":"                this.add(deadline);","lastModifiedDate":"2023-02-23"},{"lineNumber":131,"author":{"gitId":"jaredoong"},"content":"                break;","lastModifiedDate":"2023-02-23"},{"lineNumber":132,"author":{"gitId":"jaredoong"},"content":"            case \"E\":","lastModifiedDate":"2023-02-23"},{"lineNumber":133,"author":{"gitId":"jaredoong"},"content":"                Event event \u003d new Event(taskInfo[2], taskInfo[4], taskInfo[3]);","lastModifiedDate":"2023-02-23"},{"lineNumber":134,"author":{"gitId":"jaredoong"},"content":"                if (taskInfo[1].equals(\"X\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":135,"author":{"gitId":"jaredoong"},"content":"                    event.setAsDone();","lastModifiedDate":"2023-02-23"},{"lineNumber":136,"author":{"gitId":"jaredoong"},"content":"                } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":137,"author":{"gitId":"jaredoong"},"content":"                    event.setAsNotDone();","lastModifiedDate":"2023-02-23"},{"lineNumber":138,"author":{"gitId":"jaredoong"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":139,"author":{"gitId":"jaredoong"},"content":"                this.add(event);","lastModifiedDate":"2023-02-23"},{"lineNumber":140,"author":{"gitId":"jaredoong"},"content":"                break;","lastModifiedDate":"2023-02-23"},{"lineNumber":141,"author":{"gitId":"jaredoong"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":142,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":143,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":144,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":145,"author":{"gitId":"jaredoong"},"content":"    private static int getTaskNumber(String[] message) throws DukeWrongArgsException, NumberFormatException {","lastModifiedDate":"2023-02-23"},{"lineNumber":146,"author":{"gitId":"jaredoong"},"content":"        // Check for correct number of arguments","lastModifiedDate":"2023-02-23"},{"lineNumber":147,"author":{"gitId":"jaredoong"},"content":"        if (message.length !\u003d 2) {","lastModifiedDate":"2023-02-23"},{"lineNumber":148,"author":{"gitId":"jaredoong"},"content":"            throw new DukeWrongArgsException();","lastModifiedDate":"2023-02-23"},{"lineNumber":149,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":150,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":151,"author":{"gitId":"jaredoong"},"content":"        // Check that second argument provided is a valid number","lastModifiedDate":"2023-02-23"},{"lineNumber":152,"author":{"gitId":"jaredoong"},"content":"        try {","lastModifiedDate":"2023-02-23"},{"lineNumber":153,"author":{"gitId":"jaredoong"},"content":"            return Integer.parseInt(message[1]);","lastModifiedDate":"2023-02-23"},{"lineNumber":154,"author":{"gitId":"jaredoong"},"content":"        } catch (NumberFormatException error) {","lastModifiedDate":"2023-02-23"},{"lineNumber":155,"author":{"gitId":"jaredoong"},"content":"            throw new NumberFormatException();","lastModifiedDate":"2023-02-23"},{"lineNumber":156,"author":{"gitId":"jaredoong"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":157,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":158,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"jaredoong":158}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"package duke.task;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jaredoong"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jaredoong"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jaredoong"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"        String taskOutput \u003d super.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jaredoong"},"content":"        return String.format(\"[T]%s\", taskOutput);","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jaredoong"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jaredoong"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jaredoong":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jaredoong"},"content":"list","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"jaredoong"},"content":"mark 1","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"jaredoong"},"content":"list","lastModifiedDate":"2023-02-06"},{"lineNumber":4,"author":{"gitId":"jaredoong"},"content":"unmark 1","lastModifiedDate":"2023-02-06"},{"lineNumber":5,"author":{"gitId":"jaredoong"},"content":"list","lastModifiedDate":"2023-02-06"},{"lineNumber":6,"author":{"gitId":"jaredoong"},"content":"todo borrow book","lastModifiedDate":"2023-02-06"},{"lineNumber":7,"author":{"gitId":"jaredoong"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-02-06"},{"lineNumber":8,"author":{"gitId":"jaredoong"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-02-06"},{"lineNumber":9,"author":{"gitId":"jaredoong"},"content":"mark 5","lastModifiedDate":"2023-02-06"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"list","lastModifiedDate":"2023-02-06"},{"lineNumber":11,"author":{"gitId":"jaredoong"},"content":"unmark 5","lastModifiedDate":"2023-02-06"},{"lineNumber":12,"author":{"gitId":"jaredoong"},"content":"list","lastModifiedDate":"2023-02-06"},{"lineNumber":13,"author":{"gitId":"jaredoong"},"content":"mark 6","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"jaredoong"},"content":"mark abc","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"jaredoong"},"content":"mark","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"jaredoong"},"content":"unmark 7","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"jaredoong"},"content":"unmark def","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"jaredoong"},"content":"unmark 2 zzz","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"jaredoong"},"content":"deadline return book Sunday","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"jaredoong"},"content":"deadline","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"jaredoong"},"content":"event","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"jaredoong"},"content":"delete","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"jaredoong"},"content":"delete 999","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"jaredoong"},"content":"delete abc","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"jaredoong"},"content":"delete 2","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"jaredoong"},"content":"list","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"jaredoong"},"content":"bye","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"jaredoong":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"jaredoong"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"jaredoong"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"jaredoong":2}}]
