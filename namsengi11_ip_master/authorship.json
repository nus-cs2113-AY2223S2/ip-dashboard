[{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"namsengi11"},"content":"todo eat /done done","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"namsengi11"},"content":"deadline exam /by saturday /done done","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"namsengi11"},"content":"event weekend /from sat /to sun /done done","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"namsengi11":3}},{"path":"src/main/java/Duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"namsengi11"},"content":"package Duke;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"namsengi11"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"namsengi11"},"content":" * Represents deadlines, one subtype of task.","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"namsengi11"},"content":" * It contains deadline information, as well as the duedate.","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"namsengi11"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"namsengi11"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"namsengi11"},"content":"    private String dueDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"namsengi11"},"content":"    public Deadline(String content, String dueDate) {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"namsengi11"},"content":"        super(content);","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"namsengi11"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"namsengi11"},"content":"     * Creates new deadline.","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"namsengi11"},"content":"     * @param commandByWord String array the contains deadline data.","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"namsengi11"},"content":"     * @return New deadline made according to informations provided.","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"namsengi11"},"content":"     * @throws IllegalArgumentException When information given in insufficient.","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"namsengi11"},"content":"     * @throws ArrayIndexOutOfBoundsException When information given in insufficient.","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"namsengi11"},"content":"    static Deadline createDeadline(String[] commandByWord) throws IllegalArgumentException, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"namsengi11"},"content":"        if (commandByWord.length \u003c 2) {","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"namsengi11"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"namsengi11"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"namsengi11"},"content":"        String taskToDo \u003d \"\";","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"namsengi11"},"content":"        String dueDate \u003d \"\";","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"namsengi11"},"content":"        // traverse array until /by is found","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"namsengi11"},"content":"        while (commandByWord[index].charAt(0) !\u003d \u0027/\u0027) {","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"namsengi11"},"content":"            // add space between words","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"namsengi11"},"content":"            if (index !\u003d 1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"namsengi11"},"content":"                taskToDo +\u003d \" \";","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"namsengi11"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"namsengi11"},"content":"            taskToDo +\u003d commandByWord[index];","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"namsengi11"},"content":"            ++index;","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"namsengi11"},"content":"        for (int i \u003d index + 1; i \u003c commandByWord.length; ++i) {","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"namsengi11"},"content":"            // add space between words","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"namsengi11"},"content":"            if (i !\u003d index + 1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"namsengi11"},"content":"                dueDate +\u003d \" \";","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"namsengi11"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"namsengi11"},"content":"            dueDate +\u003d commandByWord[i];","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"namsengi11"},"content":"        return new Deadline(taskToDo, dueDate);","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"namsengi11"},"content":"     * @return type of task. i.e. deadline","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"namsengi11"},"content":"    String getType() {","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"namsengi11"},"content":"        return \"deadline\";","lastModifiedDate":"2023-02-16"},{"lineNumber":59,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":60,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":61,"author":{"gitId":"namsengi11"},"content":"    boolean contains(String keyword) {","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"namsengi11"},"content":"        return (this.content.contains(keyword) | this.dueDate.contains(keyword));","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"namsengi11"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"namsengi11"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"namsengi11"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.dueDate + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"namsengi11"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"namsengi11":69}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"namsengi11"},"content":"package Duke;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"namsengi11"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"namsengi11"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"namsengi11"},"content":" * Main class that represents the UI of the chatbot.","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"namsengi11"},"content":" * Responsible for communicating with the user via the command line.","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"namsengi11"},"content":" * This class is responsible for the IO of the chatbot.","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"namsengi11"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"namsengi11"},"content":"    private final static String LINE_BREAK \u003d \" ____________________________________________________________\";","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"namsengi11"},"content":"    private final static String GREETING \u003d \"Hello! I\u0027m Duke\\n  What can I do for you?\";","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"namsengi11"},"content":"    private final static String EXITING \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"namsengi11"},"content":"    private final static String ERR_MESSAGE \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"namsengi11"},"content":"    private final static Tasks tasks \u003d Tasks.loadTasks();","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"namsengi11"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"namsengi11"},"content":"        speak(GREETING);","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"namsengi11"},"content":"        boolean running \u003d true;","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"namsengi11"},"content":"        while (running) {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"namsengi11"},"content":"            String command \u003d scanner.nextLine();","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"namsengi11"},"content":"            String[] commandByWord \u003d command.split(\" \");","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"namsengi11"},"content":"            switch (commandByWord[0]) {","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"namsengi11"},"content":"            case (\"bye\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"namsengi11"},"content":"                speak(EXITING);","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"namsengi11"},"content":"                running \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"namsengi11"},"content":"                break;","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"namsengi11"},"content":"            case (\"list\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"namsengi11"},"content":"                speak(tasks.listTasks(\"list\"));","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"namsengi11"},"content":"                break;","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"namsengi11"},"content":"            case (\"mark\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"namsengi11"},"content":"                speak(tasks.mark(Integer.parseInt(commandByWord[1])));","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"namsengi11"},"content":"                break;","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"namsengi11"},"content":"            case (\"unmark\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"namsengi11"},"content":"                speak(tasks.unmark(Integer.parseInt(commandByWord[1])));","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"namsengi11"},"content":"                break;","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"namsengi11"},"content":"            case (\"deadline\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"namsengi11"},"content":"            case (\"event\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"namsengi11"},"content":"            case (\"todo\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"namsengi11"},"content":"                speak(tasks.addTask(commandByWord));","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"namsengi11"},"content":"                break;","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"namsengi11"},"content":"            case (\"delete\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"namsengi11"},"content":"                speak(tasks.deleteTask(commandByWord));","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"namsengi11"},"content":"                break;","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"namsengi11"},"content":"            case (\"find\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"namsengi11"},"content":"                speak(tasks.findTask(commandByWord));","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"namsengi11"},"content":"                break;","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"namsengi11"},"content":"            default:","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"namsengi11"},"content":"                speak(ERR_MESSAGE);","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"namsengi11"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"namsengi11"},"content":"     * Void method responsible for generating System.out messages to the command line.","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"namsengi11"},"content":"     * @param message Message that has to be communicated to the user.","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"namsengi11"},"content":"    static void speak(String message) {","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"namsengi11"},"content":"        System.out.println(LINE_BREAK);","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"namsengi11"},"content":"        System.out.println(\"  \" + message);","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"namsengi11"},"content":"        System.out.println(LINE_BREAK);","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"namsengi11"},"content":"        System.out.println();","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"namsengi11":64,"-":4}},{"path":"src/main/java/Duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"namsengi11"},"content":"package Duke;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"namsengi11"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"namsengi11"},"content":" * Represents events, one subtype of task.","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"namsengi11"},"content":" * It contains event information, as well as the start date and end date.","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"namsengi11"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"namsengi11"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"namsengi11"},"content":"    private String startDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"namsengi11"},"content":"    private String endDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"namsengi11"},"content":"    static String TYPE \u003d \"event\";","lastModifiedDate":"2023-02-16"},{"lineNumber":10,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"namsengi11"},"content":"    public Event(String content, String startDate, String endDate) {","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"namsengi11"},"content":"        super(content);","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"namsengi11"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"namsengi11"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"namsengi11"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"namsengi11"},"content":" * Creates new event.","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"namsengi11"},"content":" *","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"namsengi11"},"content":" * @param commandByWord String array the contains deadline data.","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"namsengi11"},"content":" * @return New event made according to informations provided.","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"namsengi11"},"content":" * @throws IllegalArgumentException When information given in insufficient.","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"namsengi11"},"content":" * @throws ArrayIndexOutOfBoundsException When information given in insufficient.","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"namsengi11"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"namsengi11"},"content":"    static Event createEvent(String[] commandByWord)","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"namsengi11"},"content":"            throws IllegalArgumentException, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"namsengi11"},"content":"        if (commandByWord.length \u003c 2) {","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"namsengi11"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"namsengi11"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"namsengi11"},"content":"        String taskToDo \u003d \"\";","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"namsengi11"},"content":"        String startDate \u003d \"\";","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"namsengi11"},"content":"        String endDate \u003d \"\";","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"namsengi11"},"content":"        // traverse array until /from is found","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"namsengi11"},"content":"        while (commandByWord[index].charAt(0) !\u003d \u0027/\u0027) {","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"namsengi11"},"content":"            // add space between words","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"namsengi11"},"content":"            if (index !\u003d 1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"namsengi11"},"content":"                taskToDo +\u003d \" \";","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"namsengi11"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"namsengi11"},"content":"            taskToDo +\u003d commandByWord[index];","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"namsengi11"},"content":"            ++index;","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"namsengi11"},"content":"        ++index; // move past the /from","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"namsengi11"},"content":"        int indexOfFrom \u003d index;","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"namsengi11"},"content":"        while (commandByWord[index].charAt(0) !\u003d \u0027/\u0027) {","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"namsengi11"},"content":"            if (index !\u003d indexOfFrom) {","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"namsengi11"},"content":"                startDate +\u003d \" \";","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"namsengi11"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"namsengi11"},"content":"            startDate +\u003d commandByWord[index];","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"namsengi11"},"content":"            ++index;","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"namsengi11"},"content":"        for (int i \u003d index + 1; i \u003c commandByWord.length; ++i) {","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"namsengi11"},"content":"            // add space between words","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"namsengi11"},"content":"            if (i !\u003d index + 1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"namsengi11"},"content":"                endDate +\u003d \" \";","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"namsengi11"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"namsengi11"},"content":"            endDate +\u003d commandByWord[i];","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"namsengi11"},"content":"        return new Event(taskToDo, startDate, endDate);","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"namsengi11"},"content":"    String getType() {","lastModifiedDate":"2023-02-16"},{"lineNumber":70,"author":{"gitId":"namsengi11"},"content":"        return \"event\";","lastModifiedDate":"2023-02-16"},{"lineNumber":71,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":72,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":73,"author":{"gitId":"namsengi11"},"content":"    boolean contains(String keyword) {","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"namsengi11"},"content":"        return (this.content.contains(keyword)","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"namsengi11"},"content":"                | this.startDate.contains(keyword)","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"namsengi11"},"content":"                | this.endDate.contains(keyword));","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"namsengi11"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"namsengi11"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"namsengi11"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"namsengi11"},"content":"                + \" (from: \" + this.startDate","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"namsengi11"},"content":"                + \" to: \" + this.endDate + \")\";","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"namsengi11"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"namsengi11":85}},{"path":"src/main/java/Duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"namsengi11"},"content":"package Duke;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"namsengi11"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"namsengi11"},"content":" * Abstract class that represents each task set by user","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"namsengi11"},"content":" * Keeps track of the task information, as well as the task\u0027s current status.","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"namsengi11"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"namsengi11"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-16"},{"lineNumber":8,"author":{"gitId":"namsengi11"},"content":"    protected String content;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"namsengi11"},"content":"    private boolean isCompleted;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"namsengi11"},"content":"    Task(String content) {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"namsengi11"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"namsengi11"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"namsengi11"},"content":"     * Returns task\u0027s completion status.","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"namsengi11"},"content":"     * @return Completion status of task.","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"namsengi11"},"content":"    boolean isCompleted() {","lastModifiedDate":"2023-02-16"},{"lineNumber":22,"author":{"gitId":"namsengi11"},"content":"        return isCompleted;","lastModifiedDate":"2023-02-16"},{"lineNumber":23,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":24,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":25,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"namsengi11"},"content":"     * Changes task\u0027s completion status to complete.","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"namsengi11"},"content":"     * @return Complete verison of the current task.","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"namsengi11"},"content":"    Task markAsComplete() {","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"namsengi11"},"content":"        this.isCompleted \u003d true;","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"namsengi11"},"content":"        return this;","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"namsengi11"},"content":"     * Changes task\u0027s completion status to incomplete.","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"namsengi11"},"content":"     * @return Incomplete verison of the current task.","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"namsengi11"},"content":"    Task markAsIncomplete() {","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"namsengi11"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"namsengi11"},"content":"        return this;","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"namsengi11"},"content":"    abstract boolean contains(String keyword);","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"namsengi11"},"content":"    abstract String getType();","lastModifiedDate":"2023-02-16"},{"lineNumber":47,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":48,"author":{"gitId":"namsengi11"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"namsengi11"},"content":"        return (this.isCompleted ? \"[X] \" : \"[ ] \") + this.content;","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"namsengi11"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"namsengi11":51}},{"path":"src/main/java/Duke/TaskCreator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"namsengi11"},"content":"package Duke;","lastModifiedDate":"2023-02-16"},{"lineNumber":2,"author":{"gitId":"namsengi11"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"namsengi11"},"content":" * Responsible for allocating the task creation to according task subclasses.","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"namsengi11"},"content":" * Can create tasks from commands input by user, as well as tasks stored in the text file.","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"namsengi11"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"namsengi11"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-16"},{"lineNumber":8,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"namsengi11"},"content":"public class TaskCreator {","lastModifiedDate":"2023-02-16"},{"lineNumber":10,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"namsengi11"},"content":"     * Creates tasks from command entered by user.","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"namsengi11"},"content":"     * @param commandByWord Contains information on task.","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"namsengi11"},"content":"     * @return New task.","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"namsengi11"},"content":"     * @throws IllegalArgumentException When insufficient information is provided.","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"namsengi11"},"content":"     * @throws ArrayIndexOutOfBoundsException When insufficient information is provided.","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"namsengi11"},"content":"    public static Task createNewTask(String[] commandByWord)","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"namsengi11"},"content":"            throws IllegalArgumentException, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-02-16"},{"lineNumber":20,"author":{"gitId":"namsengi11"},"content":"        String type \u003d commandByWord[0];","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"namsengi11"},"content":"        if (type.equals(\"todo\")) {","lastModifiedDate":"2023-02-16"},{"lineNumber":22,"author":{"gitId":"namsengi11"},"content":"            return ToDo.createToDo(commandByWord);","lastModifiedDate":"2023-02-16"},{"lineNumber":23,"author":{"gitId":"namsengi11"},"content":"        } else if (type.equals(\"deadline\")) {","lastModifiedDate":"2023-02-16"},{"lineNumber":24,"author":{"gitId":"namsengi11"},"content":"            return Deadline.createDeadline(commandByWord);","lastModifiedDate":"2023-02-16"},{"lineNumber":25,"author":{"gitId":"namsengi11"},"content":"        } else {","lastModifiedDate":"2023-02-16"},{"lineNumber":26,"author":{"gitId":"namsengi11"},"content":"            return Event.createEvent(commandByWord);","lastModifiedDate":"2023-02-16"},{"lineNumber":27,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":29,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"namsengi11"},"content":"     * Creates tasks from task saved in text file.","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"namsengi11"},"content":"     * @param commandByWord Contains information on task.","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"namsengi11"},"content":"     * @return New task.","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"namsengi11"},"content":"     * @throws IllegalArgumentException When insufficient information is provided.","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"namsengi11"},"content":"     * @throws ArrayIndexOutOfBoundsException When insufficient information is provided.","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"namsengi11"},"content":"    public static Task createSavedTask(String[] commandByWord)","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"namsengi11"},"content":"            throws IllegalArgumentException, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"namsengi11"},"content":"        Task task \u003d createNewTask(Arrays.copyOf(commandByWord, commandByWord.length - 2));","lastModifiedDate":"2023-02-16"},{"lineNumber":41,"author":{"gitId":"namsengi11"},"content":"        if (commandByWord[commandByWord.length - 1].equals(\"done\")) task.markAsComplete();","lastModifiedDate":"2023-02-16"},{"lineNumber":42,"author":{"gitId":"namsengi11"},"content":"        return task;","lastModifiedDate":"2023-02-16"},{"lineNumber":43,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"namsengi11"},"content":"}","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"namsengi11":44}},{"path":"src/main/java/Duke/TaskSaver.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"namsengi11"},"content":"package Duke;","lastModifiedDate":"2023-02-16"},{"lineNumber":2,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"namsengi11"},"content":"import java.io.File;","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"namsengi11"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"namsengi11"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"namsengi11"},"content":"import java.util.LinkedList;","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"namsengi11"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-16"},{"lineNumber":8,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"namsengi11"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"namsengi11"},"content":" *  Responsible for writing and reading data from the duke.txt text file, where all tasks are saved.","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"namsengi11"},"content":" *  Uses java.io classes and Scanner to read/write on the text file.","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"namsengi11"},"content":" *  Responsible for keeping the text file up to date with the Task List.","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"namsengi11"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"namsengi11"},"content":"public class TaskSaver {","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"namsengi11"},"content":"    static File txtFile \u003d new File(\"duke.txt\");","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"namsengi11"},"content":"    static FileWriter FW;","lastModifiedDate":"2023-02-16"},{"lineNumber":17,"author":{"gitId":"namsengi11"},"content":"    static Scanner SC;","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"namsengi11"},"content":"     * Sets up reader and writer for the class.","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"namsengi11"},"content":"     * Ran initially when loading the tasks from the text file.","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"namsengi11"},"content":"    static void setUpReadWrite() {","lastModifiedDate":"2023-02-16"},{"lineNumber":24,"author":{"gitId":"namsengi11"},"content":"        try {","lastModifiedDate":"2023-02-16"},{"lineNumber":25,"author":{"gitId":"namsengi11"},"content":"            txtFile \u003d new File(\"duke.txt\");","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"namsengi11"},"content":"            FW \u003d new FileWriter(txtFile, true);","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"namsengi11"},"content":"            SC \u003d new Scanner(txtFile);","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"namsengi11"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":29,"author":{"gitId":"namsengi11"},"content":"            System.out.println(\"Error Occurred\");","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"namsengi11"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-16"},{"lineNumber":31,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"namsengi11"},"content":"     * Loads tasks from the text file.","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"namsengi11"},"content":"     * Uses scanner to read from the file, then generate Task classes accordingly.","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"namsengi11"},"content":"     * @return LinkedList\u003cTask\u003e that contains tasks loaded from the text file.","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"namsengi11"},"content":"    static LinkedList\u003cTask\u003e loadTasks() {","lastModifiedDate":"2023-02-16"},{"lineNumber":41,"author":{"gitId":"namsengi11"},"content":"        setUpReadWrite();","lastModifiedDate":"2023-02-16"},{"lineNumber":42,"author":{"gitId":"namsengi11"},"content":"        LinkedList\u003cTask\u003e tasks \u003d new LinkedList\u003cTask\u003e();","lastModifiedDate":"2023-02-16"},{"lineNumber":43,"author":{"gitId":"namsengi11"},"content":"        while (SC.hasNextLine()) {","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"namsengi11"},"content":"            String[] taskInfo \u003d SC.nextLine().split(\" \");","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"namsengi11"},"content":"            Task task \u003d TaskCreator.createSavedTask(taskInfo);","lastModifiedDate":"2023-02-16"},{"lineNumber":46,"author":{"gitId":"namsengi11"},"content":"            tasks.add(task);","lastModifiedDate":"2023-02-16"},{"lineNumber":47,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":48,"author":{"gitId":"namsengi11"},"content":"        return tasks;","lastModifiedDate":"2023-02-16"},{"lineNumber":49,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":50,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":51,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"namsengi11"},"content":"     * Adds new task to the text file to keep it up to date.","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"namsengi11"},"content":"     * @param newTask Task to be added to the text file.","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"namsengi11"},"content":"    static void addTask(Task newTask) {","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"namsengi11"},"content":"        try {","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"namsengi11"},"content":"            String command \u003d TaskToStringConverter.convertTaskToCommandString(newTask);","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"namsengi11"},"content":"            FW \u003d new FileWriter(\"duke.txt\", true);","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"namsengi11"},"content":"            FW.append(command + \u0027\\n\u0027);","lastModifiedDate":"2023-02-16"},{"lineNumber":61,"author":{"gitId":"namsengi11"},"content":"            FW.close();","lastModifiedDate":"2023-02-16"},{"lineNumber":62,"author":{"gitId":"namsengi11"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":63,"author":{"gitId":"namsengi11"},"content":"            System.out.println(\"Error Occurred\");","lastModifiedDate":"2023-02-16"},{"lineNumber":64,"author":{"gitId":"namsengi11"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-16"},{"lineNumber":65,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":66,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":67,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":68,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"namsengi11"},"content":"     * Takes in list of current tasks as String form","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"namsengi11"},"content":"     * Updates the text file according to the most recent version of tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":71,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"namsengi11"},"content":"     * @param taskList List of current tasks, in String form.","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"namsengi11"},"content":"    static void updateTask(String taskList) {","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"namsengi11"},"content":"        try {","lastModifiedDate":"2023-02-17"},{"lineNumber":76,"author":{"gitId":"namsengi11"},"content":"            FW \u003d new FileWriter(\"duke.txt\");","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"namsengi11"},"content":"            FW.write(taskList);","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"namsengi11"},"content":"            FW.close();","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"namsengi11"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":80,"author":{"gitId":"namsengi11"},"content":"            System.out.println(\"Error occurred\");","lastModifiedDate":"2023-02-16"},{"lineNumber":81,"author":{"gitId":"namsengi11"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-16"},{"lineNumber":82,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":83,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":84,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":85,"author":{"gitId":"namsengi11"},"content":"}","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"namsengi11":85}},{"path":"src/main/java/Duke/TaskToStringConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"namsengi11"},"content":"package Duke;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"namsengi11"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"namsengi11"},"content":" * Responsible for converting tasks to string form.","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"namsengi11"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"namsengi11"},"content":"public class TaskToStringConverter {","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"namsengi11"},"content":"     * Converts task to string command.","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"namsengi11"},"content":"     * @param task Task that is to be converted into a string.","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"namsengi11"},"content":"     * @return A string command that represents the input task.","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"namsengi11"},"content":"    static String convertTaskToCommandString(Task task) {","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"namsengi11"},"content":"        String[] info \u003d task.toString().split(\" \");","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"namsengi11"},"content":"        for (int i \u003d 0; i \u003c info.length; ++i) {","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"namsengi11"},"content":"            if (info[i].equals(\"(by:\")) {","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"namsengi11"},"content":"                info[i] \u003d \"/by\";","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"namsengi11"},"content":"            } else if (info[i].equals(\"(from:\")) {","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"namsengi11"},"content":"                info[i] \u003d \"/from\";","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"namsengi11"},"content":"            } else if (info[i].equals(\"to:\")) {","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"namsengi11"},"content":"                info[i] \u003d \"/to\";","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"namsengi11"},"content":"            } else if (info[i].charAt(0) \u003d\u003d \u0027[\u0027) {","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"namsengi11"},"content":"                info[i] \u003d \"\";","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"namsengi11"},"content":"            } else if (info[i].equals(\"]\")) {","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"namsengi11"},"content":"                info[i] \u003d \"\";","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"namsengi11"},"content":"            } else if (info[i].charAt(info[i].length() - 1) \u003d\u003d \u0027]\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"namsengi11"},"content":"                    || info[i].charAt(info[i].length() - 1) \u003d\u003d \u0027)\u0027) {","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"namsengi11"},"content":"                info[i] \u003d info[i].substring(0, info[i].length() - 1);","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"namsengi11"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"namsengi11"},"content":"        String command \u003d task.getType() + \" \";","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"namsengi11"},"content":"        for (String word : info) {","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"namsengi11"},"content":"            if (!word.equals(\"\")) command +\u003d word + \" \";","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"namsengi11"},"content":"        command +\u003d \"/done \" + (task.isCompleted() ? \"done\" : \"notdone\");","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"namsengi11"},"content":"        return command;","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"namsengi11"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"namsengi11":39}},{"path":"src/main/java/Duke/Tasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"namsengi11"},"content":"package Duke;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"namsengi11"},"content":"import java.lang.reflect.Array;","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"namsengi11"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"namsengi11"},"content":"import java.util.LinkedList;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"namsengi11"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"namsengi11"},"content":" * Represents the list of tasks saved in Duke.","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"namsengi11"},"content":" * Keeps an LinkedList of all tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"namsengi11"},"content":" * Responsible for operations done on the tasks, such as adding, deleting, and searching for keyword.","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"namsengi11"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"namsengi11"},"content":"public class Tasks {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"namsengi11"},"content":"    private LinkedList\u003cTask\u003e taskList;","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"namsengi11"},"content":"    Tasks() {","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"namsengi11"},"content":"        this.taskList \u003d new LinkedList\u003cTask\u003e();","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"namsengi11"},"content":"    static Tasks loadTasks() {","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"namsengi11"},"content":"        Tasks newTasks \u003d new Tasks();","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"namsengi11"},"content":"        newTasks.taskList \u003d TaskSaver.loadTasks();","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"namsengi11"},"content":"        return newTasks;","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"namsengi11"},"content":"     * Adds new task to the list.","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"namsengi11"},"content":"     * @param commandByWord Contains information on task.","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"namsengi11"},"content":"     * @return String command that is to be shown to the user that indicates successful insertion or any error.","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"namsengi11"},"content":"    String addTask(String[] commandByWord) {","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"namsengi11"},"content":"        String type \u003d commandByWord[0];","lastModifiedDate":"2023-02-16"},{"lineNumber":33,"author":{"gitId":"namsengi11"},"content":"        try {","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"namsengi11"},"content":"            Task task \u003d TaskCreator.createNewTask(commandByWord);","lastModifiedDate":"2023-02-16"},{"lineNumber":35,"author":{"gitId":"namsengi11"},"content":"            taskList.add(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"namsengi11"},"content":"            TaskSaver.addTask(task);","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"namsengi11"},"content":"            return \"Got it. I\u0027ve added this task:\\n    \" +","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"namsengi11"},"content":"                    task + \"\\n\" +","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"namsengi11"},"content":"                    \"  Now you have \" + taskList.size() + \" tasks in the list.\";","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"namsengi11"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-02-09"},{"lineNumber":42,"author":{"gitId":"namsengi11"},"content":"            return \"☹ OOPS!!! The description of a \" + type + \" cannot be empty.\";","lastModifiedDate":"2023-02-09"},{"lineNumber":43,"author":{"gitId":"namsengi11"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"namsengi11"},"content":"            return \"☹ OOPS!!! The date information of the \" + type + \" is invalid!\" +","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"namsengi11"},"content":"                    \"\\n  Use the command /by for deadlines, and /from, /to for events!\" +","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"namsengi11"},"content":"                    \"\\n  Please try again.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":48,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"namsengi11"},"content":"    private void addTaskClass(Task task) {","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"namsengi11"},"content":"        this.taskList.add(task);","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"namsengi11"},"content":"     * Deletes task from the list.","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"namsengi11"},"content":"     * @param commandByWord Contains information on task.","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"namsengi11"},"content":"     * @return String command that is to be shown to the user that indicates successful deletion or any error.","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"namsengi11"},"content":"    String deleteTask(String[] commandByWord) {","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"namsengi11"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"namsengi11"},"content":"            if (commandByWord.length !\u003d 2) {","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"namsengi11"},"content":"                return \"☹ OOPS!!! The delete command is invalid\\n\" +","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"namsengi11"},"content":"                        \"  Please use the format \\\"delete {task number}\\\"\";","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"namsengi11"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"namsengi11"},"content":"            int index \u003d Integer.parseInt(commandByWord[1]) - 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"namsengi11"},"content":"            Task removedTask \u003d taskList.get(index);","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"namsengi11"},"content":"            taskList.remove(index);","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"namsengi11"},"content":"            TaskSaver.updateTask(this.toStringList());","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"namsengi11"},"content":"            return \"Noted. I\u0027ve removed this task:\\n    \" +","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"namsengi11"},"content":"                    removedTask.toString() + \"\\n  \" +","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"namsengi11"},"content":"                    \"Now you have \" + taskList.size() + \" tasks in the list.\";","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":74,"author":{"gitId":"namsengi11"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"namsengi11"},"content":"            return \"☹ OOPS!!! The task number is invalid!\" +","lastModifiedDate":"2023-02-15"},{"lineNumber":76,"author":{"gitId":"namsengi11"},"content":"                    \"\\n  Please try again.\";","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":79,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"namsengi11"},"content":"     * Marks specific task in the list as complete.","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"namsengi11"},"content":"     * @param index index of the task in the list that is to be marked as complete.","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"namsengi11"},"content":"     * @return String command that is to be shown to the user that indicates successful marking or any error.","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"namsengi11"},"content":"    String mark(int index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"namsengi11"},"content":"        try {","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"namsengi11"},"content":"            Task newTask \u003d taskList.get(index - 1).markAsComplete();","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"namsengi11"},"content":"            this.taskList.set(index - 1, newTask);","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"namsengi11"},"content":"            TaskSaver.updateTask(this.toStringList());","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"namsengi11"},"content":"            return \"Nice! I\u0027ve marked this task as done:\\n  \"","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"namsengi11"},"content":"                    + taskList.get(index - 1).toString();","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"namsengi11"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":94,"author":{"gitId":"namsengi11"},"content":"            return \"☹ OOPS!!! The task number is invalid!\" +","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"namsengi11"},"content":"                    \"\\n  Please try again.\";","lastModifiedDate":"2023-03-03"},{"lineNumber":96,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":98,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":99,"author":{"gitId":"namsengi11"},"content":"     * Marks specific task in the list as incomplete.","lastModifiedDate":"2023-03-03"},{"lineNumber":100,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":101,"author":{"gitId":"namsengi11"},"content":"     * @param index index of the task in the list that is to be marked as incomplete.","lastModifiedDate":"2023-03-03"},{"lineNumber":102,"author":{"gitId":"namsengi11"},"content":"     * @return String command that is to be shown to the user that indicates successful unmarking or any error.","lastModifiedDate":"2023-03-03"},{"lineNumber":103,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":104,"author":{"gitId":"namsengi11"},"content":"    String unmark(int index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":105,"author":{"gitId":"namsengi11"},"content":"        try {","lastModifiedDate":"2023-03-03"},{"lineNumber":106,"author":{"gitId":"namsengi11"},"content":"            Task newTask \u003d taskList.get(index - 1).markAsIncomplete();","lastModifiedDate":"2023-03-03"},{"lineNumber":107,"author":{"gitId":"namsengi11"},"content":"            this.taskList.set(index - 1, newTask);","lastModifiedDate":"2023-03-03"},{"lineNumber":108,"author":{"gitId":"namsengi11"},"content":"            TaskSaver.updateTask(this.toStringList());","lastModifiedDate":"2023-03-03"},{"lineNumber":109,"author":{"gitId":"namsengi11"},"content":"            return \"OK, I\u0027ve marked this task as not done yet:\\n  \"","lastModifiedDate":"2023-03-03"},{"lineNumber":110,"author":{"gitId":"namsengi11"},"content":"                    + taskList.get(index - 1).toString();","lastModifiedDate":"2023-03-03"},{"lineNumber":111,"author":{"gitId":"namsengi11"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":112,"author":{"gitId":"namsengi11"},"content":"            return \"☹ OOPS!!! The task number is invalid!\" +","lastModifiedDate":"2023-03-03"},{"lineNumber":113,"author":{"gitId":"namsengi11"},"content":"                    \"\\n  Please try again.\";","lastModifiedDate":"2023-03-03"},{"lineNumber":114,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":115,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":116,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":117,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":118,"author":{"gitId":"namsengi11"},"content":"    String listTasks(String type) {","lastModifiedDate":"2023-03-03"},{"lineNumber":119,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":120,"author":{"gitId":"namsengi11"},"content":"     * Lists tasks stored in the task list in string format, which is shown to the user.","lastModifiedDate":"2023-03-03"},{"lineNumber":121,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":122,"author":{"gitId":"namsengi11"},"content":"     * @return String of all tasks saved, tasks written line by line.","lastModifiedDate":"2023-03-03"},{"lineNumber":123,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":124,"author":{"gitId":"namsengi11"},"content":"        String list \u003d (type.equals(\"list\")) ? \"Here are the tasks in your list:\\n\"","lastModifiedDate":"2023-03-03"},{"lineNumber":125,"author":{"gitId":"namsengi11"},"content":"                : \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-03-03"},{"lineNumber":126,"author":{"gitId":"namsengi11"},"content":"        int counter \u003d 1;","lastModifiedDate":"2023-01-25"},{"lineNumber":127,"author":{"gitId":"namsengi11"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-01-25"},{"lineNumber":128,"author":{"gitId":"namsengi11"},"content":"            list +\u003d \"  \" + Integer.toString(counter) + \". \";","lastModifiedDate":"2023-01-25"},{"lineNumber":129,"author":{"gitId":"namsengi11"},"content":"            list +\u003d task;","lastModifiedDate":"2023-01-25"},{"lineNumber":130,"author":{"gitId":"namsengi11"},"content":"            list +\u003d \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":131,"author":{"gitId":"namsengi11"},"content":"            ++counter;","lastModifiedDate":"2023-01-25"},{"lineNumber":132,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":133,"author":{"gitId":"namsengi11"},"content":"        return list;","lastModifiedDate":"2023-01-25"},{"lineNumber":134,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":135,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":136,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":137,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":138,"author":{"gitId":"namsengi11"},"content":"    String findTask(String[] commandByWord) {","lastModifiedDate":"2023-03-03"},{"lineNumber":139,"author":{"gitId":"namsengi11"},"content":"        if (commandByWord.length \u003e 2) return \"☹ OOPS!!! Please enter a single keyword\\n\";","lastModifiedDate":"2023-03-03"},{"lineNumber":140,"author":{"gitId":"namsengi11"},"content":"        Tasks tasksWithKeyword \u003d new Tasks();","lastModifiedDate":"2023-03-03"},{"lineNumber":141,"author":{"gitId":"namsengi11"},"content":"        for (Task task : this.taskList) {","lastModifiedDate":"2023-03-03"},{"lineNumber":142,"author":{"gitId":"namsengi11"},"content":"            if (task.contains(commandByWord[1])) {","lastModifiedDate":"2023-03-03"},{"lineNumber":143,"author":{"gitId":"namsengi11"},"content":"                tasksWithKeyword.addTaskClass(task);","lastModifiedDate":"2023-03-03"},{"lineNumber":144,"author":{"gitId":"namsengi11"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":145,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":146,"author":{"gitId":"namsengi11"},"content":"        return tasksWithKeyword.listTasks(\"find\");","lastModifiedDate":"2023-03-03"},{"lineNumber":147,"author":{"gitId":"namsengi11"},"content":"    };","lastModifiedDate":"2023-03-03"},{"lineNumber":148,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":149,"author":{"gitId":"namsengi11"},"content":"    String toStringList() {","lastModifiedDate":"2023-03-03"},{"lineNumber":150,"author":{"gitId":"namsengi11"},"content":"        String TaskListAsString \u003d \"\";","lastModifiedDate":"2023-03-03"},{"lineNumber":151,"author":{"gitId":"namsengi11"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-03-03"},{"lineNumber":152,"author":{"gitId":"namsengi11"},"content":"            TaskListAsString +\u003d TaskToStringConverter.convertTaskToCommandString(task) + \"\\n\";","lastModifiedDate":"2023-03-03"},{"lineNumber":153,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":154,"author":{"gitId":"namsengi11"},"content":"        return TaskListAsString;","lastModifiedDate":"2023-03-03"},{"lineNumber":155,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":156,"author":{"gitId":"namsengi11"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"namsengi11":156}},{"path":"src/main/java/Duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"namsengi11"},"content":"package Duke;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"namsengi11"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"namsengi11"},"content":" * Represents ToDo subtype of tasks","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"namsengi11"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"namsengi11"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"namsengi11"},"content":"    private ToDo(String content) {","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"namsengi11"},"content":"        super(content);","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"namsengi11"},"content":"    static String TYPE \u003d \"todo\";","lastModifiedDate":"2023-02-16"},{"lineNumber":11,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"namsengi11"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"namsengi11"},"content":"     * creates new ToDo","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"namsengi11"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"namsengi11"},"content":"     * @param commandByWord String array the contains deadline data.","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"namsengi11"},"content":"     * @return New ToDo made according to informations provided.","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"namsengi11"},"content":"     * @throws IllegalArgumentException When information given in insufficient.","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"namsengi11"},"content":"     * @throws ArrayIndexOutOfBoundsException When information given in insufficient.","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"namsengi11"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"namsengi11"},"content":"    static ToDo createToDo(String[] commandByWord) throws IllegalArgumentException, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"namsengi11"},"content":"        String task \u003d \"\";","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":23,"author":{"gitId":"namsengi11"},"content":"        if (commandByWord.length \u003c 2) {","lastModifiedDate":"2023-02-09"},{"lineNumber":24,"author":{"gitId":"namsengi11"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"namsengi11"},"content":"        for (int i \u003d 1; i \u003c commandByWord.length; ++i) {","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"namsengi11"},"content":"            if (i !\u003d 1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"namsengi11"},"content":"                task +\u003d \" \";","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"namsengi11"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"namsengi11"},"content":"            task +\u003d commandByWord[i];","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"namsengi11"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"namsengi11"},"content":"        return new ToDo(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"namsengi11"},"content":"    String getType() {","lastModifiedDate":"2023-02-16"},{"lineNumber":37,"author":{"gitId":"namsengi11"},"content":"        return \"todo\";","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"namsengi11"},"content":"    boolean contains(String keyword) {","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"namsengi11"},"content":"        return (this.content.contains(keyword));","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"namsengi11"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"namsengi11"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":45,"author":{"gitId":"namsengi11"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"namsengi11"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"namsengi11"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"namsengi11"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"namsengi11":48}}]
