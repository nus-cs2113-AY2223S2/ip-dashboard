[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"# User Guide For Duke Task Manager App","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"### App Summary","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"MuxPotato"},"content":"Duke Task Manger App is a command-line interface app that users can use to keep track","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"MuxPotato"},"content":"of various types of tasks.","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"MuxPotato"},"content":"## Feature 1: Adding Tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"MuxPotato"},"content":"There are 3 types of tasks that are available to be added to the task list ","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"MuxPotato"},"content":"### 1. Todo Tasks ","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"MuxPotato"},"content":"Todo tasks are tasks that do not contain any deadlines","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"MuxPotato"},"content":"\u003e Syntax: **todo** *[Name of Task]*","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"MuxPotato"},"content":"_Example of adding Todo Task_","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"MuxPotato"},"content":"**Input:** ","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"MuxPotato"},"content":"`todo CS2113 Quiz 7`","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"MuxPotato"},"content":"**Output:** ","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"MuxPotato"},"content":"`Got it. I\u0027ve added this task:`","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"MuxPotato"},"content":"`[T][ ] CS2113 Quiz 7`","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"MuxPotato"},"content":"`Now you have 1 in the list.`","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"MuxPotato"},"content":"### 2. Deadline ","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"MuxPotato"},"content":"Deadline tasks are tasks contain a deadline","lastModifiedDate":"2023-02-27"},{"lineNumber":32,"author":{"gitId":"MuxPotato"},"content":"\u003e Syntax: **deadline** *[Name of Task]* **/by** *[Deadline Of Task]*","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"MuxPotato"},"content":"_Example of adding Deadline Task_","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"MuxPotato"},"content":"**Input:**","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"MuxPotato"},"content":"`deadline EE2026 Graded Lab /by Fri 2359`","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"MuxPotato"},"content":"**Output:**","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"MuxPotato"},"content":"`Got it. I\u0027ve added this task:`","lastModifiedDate":"2023-02-27"},{"lineNumber":43,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":44,"author":{"gitId":"MuxPotato"},"content":"`[D][ ] EE2026 Graded Lab (by: Fri 2359)`","lastModifiedDate":"2023-02-27"},{"lineNumber":45,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"MuxPotato"},"content":"`Now you have 1 in the list.`","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"MuxPotato"},"content":"### 3. Event ","lastModifiedDate":"2023-02-27"},{"lineNumber":49,"author":{"gitId":"MuxPotato"},"content":"Event tasks are tasks which contains a start time and an end time","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"MuxPotato"},"content":"\u003e Syntax: **event** *[Name of Task]* **/from** *[start time]* **/to** *[end time]*","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"MuxPotato"},"content":"_Example of adding Event Task_","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"MuxPotato"},"content":"**Input:** ","lastModifiedDate":"2023-02-27"},{"lineNumber":55,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"MuxPotato"},"content":"`event EE2211 Mid Terms /from Sat 2pm /to Sat 4pm`","lastModifiedDate":"2023-02-27"},{"lineNumber":57,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"MuxPotato"},"content":"**Output:** ","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"MuxPotato"},"content":"`Got it. I\u0027ve added this task:`","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"MuxPotato"},"content":"`[E][ ] EE2211 Mid Terms (from: Sat 2pm to: Sat 4pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"MuxPotato"},"content":"`Now you have 1 in the list.`","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"MuxPotato"},"content":"## Feature 2: Listing current tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":67,"author":{"gitId":"MuxPotato"},"content":"List out all current tasks, displaying associated task information","lastModifiedDate":"2023-02-27"},{"lineNumber":68,"author":{"gitId":"MuxPotato"},"content":"\u003e Syntax: **list**","lastModifiedDate":"2023-02-27"},{"lineNumber":69,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"MuxPotato"},"content":"_Example of listing out tasks:_","lastModifiedDate":"2023-02-27"},{"lineNumber":71,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"MuxPotato"},"content":"**Input:**","lastModifiedDate":"2023-02-27"},{"lineNumber":73,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"MuxPotato"},"content":"`list`","lastModifiedDate":"2023-02-27"},{"lineNumber":75,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"MuxPotato"},"content":"**Output:** ","lastModifiedDate":"2023-02-27"},{"lineNumber":77,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":78,"author":{"gitId":"MuxPotato"},"content":"`1. [E][ ] EE2211 Mid Terms (from: Sat 2pm to: Sat 4pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":79,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":80,"author":{"gitId":"MuxPotato"},"content":"`2. [T][ ] CS2113 Quiz 7`","lastModifiedDate":"2023-02-27"},{"lineNumber":81,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":82,"author":{"gitId":"MuxPotato"},"content":"`3. [D][ ] EE2026 Graded Lab (by: Fri 2359)`","lastModifiedDate":"2023-02-27"},{"lineNumber":83,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"MuxPotato"},"content":"## Feature 3: Deleting tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":85,"author":{"gitId":"MuxPotato"},"content":"Deletes task according to task index","lastModifiedDate":"2023-02-27"},{"lineNumber":86,"author":{"gitId":"MuxPotato"},"content":"\u003e Syntax: **delete** *[index]*","lastModifiedDate":"2023-02-27"},{"lineNumber":87,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":88,"author":{"gitId":"MuxPotato"},"content":"_Example of deleting task:_","lastModifiedDate":"2023-02-27"},{"lineNumber":89,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":90,"author":{"gitId":"MuxPotato"},"content":"Before Input: ","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"MuxPotato"},"content":"`1. [E][ ] EE2211 Mid Terms (from: Sat 2pm to: Sat 4pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":93,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":94,"author":{"gitId":"MuxPotato"},"content":"`2. [T][ ] CS2113 Quiz 7`","lastModifiedDate":"2023-02-27"},{"lineNumber":95,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":96,"author":{"gitId":"MuxPotato"},"content":"`3. [E][ ] CG2023 Lecture (from: Mon 2pm to: Mon 4pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":97,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":98,"author":{"gitId":"MuxPotato"},"content":"**Input:** ","lastModifiedDate":"2023-02-27"},{"lineNumber":99,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":100,"author":{"gitId":"MuxPotato"},"content":"`delete 2`","lastModifiedDate":"2023-02-27"},{"lineNumber":101,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":102,"author":{"gitId":"MuxPotato"},"content":"**Output:**","lastModifiedDate":"2023-02-27"},{"lineNumber":103,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":104,"author":{"gitId":"MuxPotato"},"content":"`Noted. I\u0027ve removed this task:`","lastModifiedDate":"2023-02-27"},{"lineNumber":105,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":106,"author":{"gitId":"MuxPotato"},"content":"`[T][ ] CS2113 Quiz 7`","lastModifiedDate":"2023-02-27"},{"lineNumber":107,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":108,"author":{"gitId":"MuxPotato"},"content":"`Now you have 2 in the list.`","lastModifiedDate":"2023-02-27"},{"lineNumber":109,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":110,"author":{"gitId":"MuxPotato"},"content":"_list command to see task list_","lastModifiedDate":"2023-02-27"},{"lineNumber":111,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":112,"author":{"gitId":"MuxPotato"},"content":"`list `","lastModifiedDate":"2023-02-27"},{"lineNumber":113,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":114,"author":{"gitId":"MuxPotato"},"content":"`1. [E][ ] EE2211 Mid Terms (from: Sat 2pm to: Sat 4pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":115,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":116,"author":{"gitId":"MuxPotato"},"content":"`2. [E][ ] CG2023 Lecture (from: Mon 2pm to: Mon 4pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":117,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":118,"author":{"gitId":"MuxPotato"},"content":"## Feature 4: Marking and Unmarking tasks as completed","lastModifiedDate":"2023-02-27"},{"lineNumber":119,"author":{"gitId":"MuxPotato"},"content":"Users can mark task as done or undone according to task index","lastModifiedDate":"2023-02-27"},{"lineNumber":120,"author":{"gitId":"MuxPotato"},"content":"\u003e Syntax: **mark** *[index]* OR **unmark** *[index]*","lastModifiedDate":"2023-02-27"},{"lineNumber":121,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":122,"author":{"gitId":"MuxPotato"},"content":"_Current Task List_","lastModifiedDate":"2023-02-27"},{"lineNumber":123,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":124,"author":{"gitId":"MuxPotato"},"content":"`1. [E][ ] EE2211 Mid Terms (from: Sat 2pm to: Sat 4pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":125,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":126,"author":{"gitId":"MuxPotato"},"content":"`2. [T][ ] CS2113 Quiz 7`","lastModifiedDate":"2023-02-27"},{"lineNumber":127,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":128,"author":{"gitId":"MuxPotato"},"content":"**Input:** ","lastModifiedDate":"2023-02-27"},{"lineNumber":129,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":130,"author":{"gitId":"MuxPotato"},"content":"`mark 2` ","lastModifiedDate":"2023-02-27"},{"lineNumber":131,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":132,"author":{"gitId":"MuxPotato"},"content":"**Output:**","lastModifiedDate":"2023-02-27"},{"lineNumber":133,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":134,"author":{"gitId":"MuxPotato"},"content":"`1. [E][ ] EE2211 Mid Terms (from: Sat 2pm to: Sat 4pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":135,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":136,"author":{"gitId":"MuxPotato"},"content":"`2. [T][X] CS2113 Quiz 7`","lastModifiedDate":"2023-02-27"},{"lineNumber":137,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":138,"author":{"gitId":"MuxPotato"},"content":"**Input:**","lastModifiedDate":"2023-02-27"},{"lineNumber":139,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":140,"author":{"gitId":"MuxPotato"},"content":"`unmark 2`","lastModifiedDate":"2023-02-27"},{"lineNumber":141,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":142,"author":{"gitId":"MuxPotato"},"content":"**Output:**","lastModifiedDate":"2023-02-27"},{"lineNumber":143,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":144,"author":{"gitId":"MuxPotato"},"content":"`1. [E][ ] EE2211 Mid Terms (from: Sat 2pm to: Sat 4pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":145,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":146,"author":{"gitId":"MuxPotato"},"content":"`2. [T][ ] CS2113 Quiz 7`","lastModifiedDate":"2023-02-27"},{"lineNumber":147,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":148,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":149,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":150,"author":{"gitId":"MuxPotato"},"content":"## Feature 5: Finding tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":151,"author":{"gitId":"MuxPotato"},"content":"Users can find tasks according to a given keyword","lastModifiedDate":"2023-02-27"},{"lineNumber":152,"author":{"gitId":"MuxPotato"},"content":"\u003e Syntax: **find** *[keyword]*","lastModifiedDate":"2023-02-27"},{"lineNumber":153,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":154,"author":{"gitId":"MuxPotato"},"content":"_Before Input:_ ","lastModifiedDate":"2023-02-27"},{"lineNumber":155,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":156,"author":{"gitId":"MuxPotato"},"content":"_Current Task List_ ","lastModifiedDate":"2023-02-27"},{"lineNumber":157,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":158,"author":{"gitId":"MuxPotato"},"content":"`1. [T][ ] CS2113 Quiz`","lastModifiedDate":"2023-02-27"},{"lineNumber":159,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":160,"author":{"gitId":"MuxPotato"},"content":"`2. [T][ ] CS2113 IP assignment`","lastModifiedDate":"2023-02-27"},{"lineNumber":161,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":162,"author":{"gitId":"MuxPotato"},"content":"`3. [T][ ] EE2026 Tutorial 2`","lastModifiedDate":"2023-02-27"},{"lineNumber":163,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":164,"author":{"gitId":"MuxPotato"},"content":"`4. [T][ ] EE2026 Lecture 2`","lastModifiedDate":"2023-02-27"},{"lineNumber":165,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":166,"author":{"gitId":"MuxPotato"},"content":"**Input:** ","lastModifiedDate":"2023-02-27"},{"lineNumber":167,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":168,"author":{"gitId":"MuxPotato"},"content":"`find CS2113`","lastModifiedDate":"2023-02-27"},{"lineNumber":169,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":170,"author":{"gitId":"MuxPotato"},"content":"**Output:** ","lastModifiedDate":"2023-02-27"},{"lineNumber":171,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":172,"author":{"gitId":"MuxPotato"},"content":"`1. [T][ ] CS2113 Quiz`","lastModifiedDate":"2023-02-27"},{"lineNumber":173,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":174,"author":{"gitId":"MuxPotato"},"content":"`2. [T][ ] CS2113 IP Assignment`","lastModifiedDate":"2023-02-27"},{"lineNumber":175,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":176,"author":{"gitId":"MuxPotato"},"content":"## Feature 6: Exiting Program","lastModifiedDate":"2023-02-27"},{"lineNumber":177,"author":{"gitId":"MuxPotato"},"content":"Exiting the program automatically saves given tasks.","lastModifiedDate":"2023-02-27"},{"lineNumber":178,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":179,"author":{"gitId":"MuxPotato"},"content":"The tasks saved will automatically be registered into user tasks upon reopening app.","lastModifiedDate":"2023-02-27"},{"lineNumber":180,"author":{"gitId":"MuxPotato"},"content":"\u003e Syntax: **bye**","lastModifiedDate":"2023-02-27"},{"lineNumber":181,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":182,"author":{"gitId":"MuxPotato"},"content":"_Current Task List_","lastModifiedDate":"2023-02-27"},{"lineNumber":183,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":184,"author":{"gitId":"MuxPotato"},"content":"`1. [T][ ] CS2113 Quiz 7`","lastModifiedDate":"2023-02-27"},{"lineNumber":185,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":186,"author":{"gitId":"MuxPotato"},"content":"`2. [D][ ] EE2026 Graded Lab (by: Friday 6pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":187,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":188,"author":{"gitId":"MuxPotato"},"content":"`3. [E][ ] CG2023 Mid Terms (from: Thursday 2 pm to: Thursday 3 pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":189,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":190,"author":{"gitId":"MuxPotato"},"content":"**Input:**","lastModifiedDate":"2023-02-27"},{"lineNumber":191,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":192,"author":{"gitId":"MuxPotato"},"content":"`bye`","lastModifiedDate":"2023-02-27"},{"lineNumber":193,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":194,"author":{"gitId":"MuxPotato"},"content":"**Output:**","lastModifiedDate":"2023-02-27"},{"lineNumber":195,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":196,"author":{"gitId":"MuxPotato"},"content":"`Bye. Hope to see you again soon!`","lastModifiedDate":"2023-02-27"},{"lineNumber":197,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":198,"author":{"gitId":"MuxPotato"},"content":"_Reopen App_","lastModifiedDate":"2023-02-27"},{"lineNumber":199,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":200,"author":{"gitId":"MuxPotato"},"content":"**Output:**","lastModifiedDate":"2023-02-27"},{"lineNumber":201,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":202,"author":{"gitId":"MuxPotato"},"content":"`Hello! I\u0027m Duke`","lastModifiedDate":"2023-02-27"},{"lineNumber":203,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":204,"author":{"gitId":"MuxPotato"},"content":"`What can I do for you?`","lastModifiedDate":"2023-02-27"},{"lineNumber":205,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":206,"author":{"gitId":"MuxPotato"},"content":"`File Found and successfully read`","lastModifiedDate":"2023-02-27"},{"lineNumber":207,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":208,"author":{"gitId":"MuxPotato"},"content":"`1. [T][ ] CS2113 Quiz 7`","lastModifiedDate":"2023-02-27"},{"lineNumber":209,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":210,"author":{"gitId":"MuxPotato"},"content":"`2. [D][ ] EE2026 Graded Lab (by: Friday 6pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":211,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":212,"author":{"gitId":"MuxPotato"},"content":"`3. [E][ ] CG2023 Mid Terms (from: Thursday 2 pm to: Thursday 3 pm)`","lastModifiedDate":"2023-02-27"},{"lineNumber":213,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":214,"author":{"gitId":"MuxPotato"},"content":" ","lastModifiedDate":"2023-02-27"},{"lineNumber":215,"author":{"gitId":"MuxPotato"},"content":"Note: Duke Task Bot saves the given tasks as a .txt file in a \"data\" file as \"duke.txt\" in the ","lastModifiedDate":"2023-02-27"},{"lineNumber":216,"author":{"gitId":"MuxPotato"},"content":"current directory the command line prompt is currently in.","lastModifiedDate":"2023-02-27"},{"lineNumber":217,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":218,"author":{"gitId":"MuxPotato"},"content":"If either the directory of the .txt file does not exist, one will be created. ","lastModifiedDate":"2023-02-27"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"-":13,"MuxPotato":211}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MuxPotato"},"content":"    protected String deadline;","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"MuxPotato"},"content":"     * Constructor for Deadline task.","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"MuxPotato"},"content":"     * @param taskName name of Deadline task.","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"MuxPotato"},"content":"     * @param deadline deadline date of task.","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"MuxPotato"},"content":"    public Deadline(String taskName, String deadline) {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MuxPotato"},"content":"        super(taskName);","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"MuxPotato"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"MuxPotato"},"content":"     * Overrides toString() of Object class.","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"MuxPotato"},"content":"     * @return String indication of task type + whether task is done + task name.","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"MuxPotato"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MuxPotato"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"MuxPotato"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline + \")\";","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"MuxPotato"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MuxPotato":24}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"MuxPotato"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"MuxPotato"},"content":"    final static String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"MuxPotato"},"content":"    private static Ui ui \u003d new Ui();","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"MuxPotato"},"content":"    private static TaskList taskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"MuxPotato"},"content":"        String userInput;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"MuxPotato"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"MuxPotato"},"content":"        try {","lastModifiedDate":"2023-02-16"},{"lineNumber":14,"author":{"gitId":"MuxPotato"},"content":"            taskList \u003d Storage.retrieveExistingTasksFromFile(FILE_PATH);","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"File Found and successfully read\");","lastModifiedDate":"2023-02-16"},{"lineNumber":16,"author":{"gitId":"MuxPotato"},"content":"            ui.executeListCommand(taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"MuxPotato"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"File not found\");","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"MuxPotato"},"content":"            ArrayList\u003cTask\u003e emptyUserTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"MuxPotato"},"content":"            taskList \u003d new TaskList(emptyUserTasks);","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":22,"author":{"gitId":"MuxPotato"},"content":"        boolean isContinue \u003d true;","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"MuxPotato"},"content":"        while (isContinue) {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"MuxPotato"},"content":"            userInput \u003d in.nextLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"MuxPotato"},"content":"            isContinue \u003d ui.executeUserCommand(taskList, userInput);","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":31,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"-":4,"MuxPotato":29}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"MuxPotato"},"content":"    //no other code needed","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"MuxPotato":3}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"    String startTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MuxPotato"},"content":"    String endTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"MuxPotato"},"content":"     * Constructor for Event task.","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"MuxPotato"},"content":"     * @param taskName name of Event task.","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"MuxPotato"},"content":"     * @param startTime start time of event task.","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"MuxPotato"},"content":"     * @param endTime end time of event task.","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"MuxPotato"},"content":"    public Event(String taskName, String startTime, String endTime) {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"MuxPotato"},"content":"        super(taskName);","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"MuxPotato"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"MuxPotato"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"MuxPotato"},"content":"     * Overrides toString() of Object class.","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"MuxPotato"},"content":"     * @return String indication of task type + whether task is done + task name.","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"MuxPotato"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MuxPotato"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"MuxPotato"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + startTime + \" to: \" + endTime + \")\";","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"MuxPotato"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MuxPotato":28}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"public class Parser {","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"MuxPotato"},"content":"    final static int ZERO_INDEX \u003d 0;","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"    final static int ONE_INDEX \u003d 1;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"MuxPotato"},"content":"    final static int ERROR_NEGATIVE_ONE_RETURNED \u003d -1;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"MuxPotato"},"content":"     * Returns the task name for the Todo task type.","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"MuxPotato"},"content":"     * @param taskString Task description extracted from the userinput excluding the user command keyword.","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"MuxPotato"},"content":"     * @return Task name of Todo task.","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException If taskString is an empty string.","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"MuxPotato"},"content":"    public static String getTodoTaskName(String taskString) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"MuxPotato"},"content":"        if (taskString.isEmpty()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"MuxPotato"},"content":"        } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"MuxPotato"},"content":"            return taskString;","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"MuxPotato"},"content":"     * Returns the task name for the Todo task type.","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"MuxPotato"},"content":"     * @param userInput Line of String containing the user input.","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"MuxPotato"},"content":"     * @param userCommandKeyword Command keyword given by user, etc. mark, unmark, find etc.","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"MuxPotato"},"content":"     * @return Task name of Todo task","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException Thrown by getTaskString or getTodoTaskName.","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"MuxPotato"},"content":"     * getTaskString: If the task description extracted is empty, length of userInput \u003c\u003d length of userCommand.","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"MuxPotato"},"content":"     * getTodoTaskName: If taskString is an empty string.","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"MuxPotato"},"content":"    public static Todo getNewTodoTask (String userInput, String userCommandKeyword) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"MuxPotato"},"content":"        String taskString \u003d getTaskString(userInput, userCommandKeyword);","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"MuxPotato"},"content":"        String taskName \u003d getTodoTaskName(taskString);","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"MuxPotato"},"content":"        Todo newTodoTask \u003d new Todo(taskName);","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"MuxPotato"},"content":"        return newTodoTask;","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"MuxPotato"},"content":"     * Returns the task name for the Deadline task type.","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"MuxPotato"},"content":"     * String for task name is trimmed using .trim() function.","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"MuxPotato"},"content":"     * @param taskString Task description extracted from the userinput excluding the user command keyword.","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"MuxPotato"},"content":"     * @return Task name of Deadline task.","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException If taskString does not contain \"/by\" format keyword OR If task name extracted is empty string","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"MuxPotato"},"content":"    public static String getDeadlineTaskName(String taskString) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"MuxPotato"},"content":"        int slashIndex \u003d taskString.indexOf(\"/by\");","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"MuxPotato"},"content":"        if (slashIndex \u003d\u003d ERROR_NEGATIVE_ONE_RETURNED) {","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Invalid Deadline String formatting: /by is missing\");","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"MuxPotato"},"content":"        String taskName \u003d taskString.substring(ZERO_INDEX, slashIndex);","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"MuxPotato"},"content":"        if (taskName.isEmpty()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Task needs to have a name!!!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"MuxPotato"},"content":"        taskName \u003d taskName.trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"MuxPotato"},"content":"        return taskName;","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"MuxPotato"},"content":"     * Returns the task name for the Event task type.","lastModifiedDate":"2023-02-26"},{"lineNumber":63,"author":{"gitId":"MuxPotato"},"content":"     * String for task name is trimmed using .trim() function.","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"MuxPotato"},"content":"     * @param taskString Task description extracted from the userinput excluding the user command keyword.","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"MuxPotato"},"content":"     * @return Task name of Event task.","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException If taskString does not contain \"/from\" format keyword OR If task name extracted is empty string","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"MuxPotato"},"content":"    public static String getEventTaskName(String taskString) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"MuxPotato"},"content":"        int slashIndex \u003d taskString.indexOf(\"/from\");","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"MuxPotato"},"content":"        if (slashIndex \u003d\u003d ERROR_NEGATIVE_ONE_RETURNED) {","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Invalid Event String formatting: /from is missing\");","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"MuxPotato"},"content":"        String taskName \u003d taskString.substring(ZERO_INDEX, slashIndex);","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"MuxPotato"},"content":"        if (taskName.isEmpty()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Task needs to have a name!!!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"MuxPotato"},"content":"        taskName \u003d taskName.trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"MuxPotato"},"content":"        return taskName;","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"MuxPotato"},"content":"     * Returns the start date extracted from a task description for the Event task type.","lastModifiedDate":"2023-02-26"},{"lineNumber":86,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":87,"author":{"gitId":"MuxPotato"},"content":"     * @param taskString Task description extracted from the userinput excluding the user command keyword.","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"MuxPotato"},"content":"     * @return start date of Event task in String form.","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException If taskString is missing /from or /to (detected from looking at length of String[] taskStringPartsSplitByTo)","lastModifiedDate":"2023-02-25"},{"lineNumber":90,"author":{"gitId":"MuxPotato"},"content":"     * OR If start date extracted is empty","lastModifiedDate":"2023-02-25"},{"lineNumber":91,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":92,"author":{"gitId":"MuxPotato"},"content":"    public static String getEventStartDate(String taskString) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":93,"author":{"gitId":"MuxPotato"},"content":"        String[] taskStringPartsSplitByFrom \u003d taskString.split(\"/from\");","lastModifiedDate":"2023-02-25"},{"lineNumber":94,"author":{"gitId":"MuxPotato"},"content":"        if (taskStringPartsSplitByFrom.length \u003c\u003d 1) {","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Invalid Event String formatting\");","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":98,"author":{"gitId":"MuxPotato"},"content":"        String[] taskStringPartsSplitByTo \u003d taskStringPartsSplitByFrom[ONE_INDEX].split(\"/to\");","lastModifiedDate":"2023-02-25"},{"lineNumber":99,"author":{"gitId":"MuxPotato"},"content":"        if (taskStringPartsSplitByTo.length \u003c\u003d 1) {","lastModifiedDate":"2023-02-25"},{"lineNumber":100,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Invalid Event String formatting\");","lastModifiedDate":"2023-02-25"},{"lineNumber":101,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":103,"author":{"gitId":"MuxPotato"},"content":"        String eventFromDate \u003d taskStringPartsSplitByTo[ZERO_INDEX].trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"MuxPotato"},"content":"        if (eventFromDate.isEmpty()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Invalid Event String formatting\");","lastModifiedDate":"2023-02-25"},{"lineNumber":106,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":107,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"MuxPotato"},"content":"        return eventFromDate;","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"MuxPotato"},"content":"     * Returns the end date extracted from a task description for the Event task type.","lastModifiedDate":"2023-02-26"},{"lineNumber":113,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":114,"author":{"gitId":"MuxPotato"},"content":"     * @param taskString Task description extracted from the userinput excluding the user command keyword.","lastModifiedDate":"2023-02-25"},{"lineNumber":115,"author":{"gitId":"MuxPotato"},"content":"     * @return end date of Event task in String form.","lastModifiedDate":"2023-02-25"},{"lineNumber":116,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException If taskString is missing /from or /to (detected from looking at length of String[] taskStringPartsSplitByTo)","lastModifiedDate":"2023-02-25"},{"lineNumber":117,"author":{"gitId":"MuxPotato"},"content":"     * OR If end date extracted is empty.","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"MuxPotato"},"content":"    public static String getEventEndDate(String taskString) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":120,"author":{"gitId":"MuxPotato"},"content":"        String[] taskStringPartsSplitByFrom \u003d taskString.split(\"/from\");","lastModifiedDate":"2023-02-25"},{"lineNumber":121,"author":{"gitId":"MuxPotato"},"content":"        if (taskStringPartsSplitByFrom.length \u003c\u003d 1) {","lastModifiedDate":"2023-02-26"},{"lineNumber":122,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Invalid Event String formatting\");","lastModifiedDate":"2023-02-26"},{"lineNumber":123,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-26"},{"lineNumber":124,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":125,"author":{"gitId":"MuxPotato"},"content":"        String[] taskStringPartsSplitByTo \u003d taskStringPartsSplitByFrom[ONE_INDEX].split(\"/to\");","lastModifiedDate":"2023-02-25"},{"lineNumber":126,"author":{"gitId":"MuxPotato"},"content":"        if (taskStringPartsSplitByTo.length \u003c\u003d 1) {","lastModifiedDate":"2023-02-25"},{"lineNumber":127,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Invalid Event String formatting: Either /to is missing or no description after /to\");","lastModifiedDate":"2023-02-25"},{"lineNumber":128,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":129,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"MuxPotato"},"content":"        String eventDueDate \u003d taskStringPartsSplitByTo[ONE_INDEX].trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":131,"author":{"gitId":"MuxPotato"},"content":"        if (eventDueDate.isEmpty()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":132,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Invalid Event String formatting\");","lastModifiedDate":"2023-02-25"},{"lineNumber":133,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":134,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":135,"author":{"gitId":"MuxPotato"},"content":"        return eventDueDate;","lastModifiedDate":"2023-02-25"},{"lineNumber":136,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":137,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":138,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":139,"author":{"gitId":"MuxPotato"},"content":"     * Returns the deadline date extracted from a task description for the Deadline task type.","lastModifiedDate":"2023-02-26"},{"lineNumber":140,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":141,"author":{"gitId":"MuxPotato"},"content":"     * @param taskString Task description extracted from the userinput excluding the user command keyword.","lastModifiedDate":"2023-02-25"},{"lineNumber":142,"author":{"gitId":"MuxPotato"},"content":"     * @return deadline date of Deadline task in a form of a string.","lastModifiedDate":"2023-02-25"},{"lineNumber":143,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException If taskString is missing /by (detected from looking at length of String[] taskStringParts)","lastModifiedDate":"2023-02-25"},{"lineNumber":144,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":145,"author":{"gitId":"MuxPotato"},"content":"    public static String getDeadlineDueDateString(String taskString) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":146,"author":{"gitId":"MuxPotato"},"content":"        String[] taskStringParts \u003d taskString.split(\"/by\");","lastModifiedDate":"2023-02-25"},{"lineNumber":147,"author":{"gitId":"MuxPotato"},"content":"        if (taskStringParts.length !\u003d 2) {","lastModifiedDate":"2023-02-25"},{"lineNumber":148,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Invalid Deadline String formatting: Description after /by is missing\");","lastModifiedDate":"2023-02-25"},{"lineNumber":149,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":150,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":151,"author":{"gitId":"MuxPotato"},"content":"        return taskStringParts[ONE_INDEX].trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":152,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":153,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":154,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":155,"author":{"gitId":"MuxPotato"},"content":"     * Returns Task description, extracted from userInput with the knowledge of knowing the user command keyword.","lastModifiedDate":"2023-02-25"},{"lineNumber":156,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":157,"author":{"gitId":"MuxPotato"},"content":"     * @param userInput Line inputted from user.","lastModifiedDate":"2023-02-25"},{"lineNumber":158,"author":{"gitId":"MuxPotato"},"content":"     * @param userCommand user command keyword inputted from user.","lastModifiedDate":"2023-02-25"},{"lineNumber":159,"author":{"gitId":"MuxPotato"},"content":"     * @return taskString Task description extracted from the userinput excluding the user command keyword.","lastModifiedDate":"2023-02-25"},{"lineNumber":160,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException If the task description extracted is empty, length of userInput \u003c\u003d length of userCommand","lastModifiedDate":"2023-02-25"},{"lineNumber":161,"author":{"gitId":"MuxPotato"},"content":"     * Note that the case of user input not containing a valid command is handled by UI","lastModifiedDate":"2023-02-25"},{"lineNumber":162,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":163,"author":{"gitId":"MuxPotato"},"content":"    public static String getTaskString(String userInput, String userCommand) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":164,"author":{"gitId":"MuxPotato"},"content":"        int userInputLength \u003d userInput.trim().length();","lastModifiedDate":"2023-02-25"},{"lineNumber":165,"author":{"gitId":"MuxPotato"},"content":"        int userCommandLength \u003d userCommand.length();","lastModifiedDate":"2023-02-25"},{"lineNumber":166,"author":{"gitId":"MuxPotato"},"content":"        if (userInputLength \u003c\u003d userCommandLength) {","lastModifiedDate":"2023-02-25"},{"lineNumber":167,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Task Description cannot be empty!!!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":168,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":169,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":170,"author":{"gitId":"MuxPotato"},"content":"        return userInput.substring(userCommand.length() + ONE_INDEX);","lastModifiedDate":"2023-02-25"},{"lineNumber":171,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":172,"author":{"gitId":"MuxPotato"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"MuxPotato":172}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"import java.io.File;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"MuxPotato"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"MuxPotato"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"MuxPotato"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"MuxPotato"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"MuxPotato"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"MuxPotato"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"MuxPotato"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"MuxPotato"},"content":"public class Storage {","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"MuxPotato"},"content":"    final static String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"MuxPotato"},"content":"    final static String DIRECTORY_PATH \u003d \"data\";","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"MuxPotato"},"content":"    final static int TASK_TYPE_INDEX \u003d 0;","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"MuxPotato"},"content":"    final static int TASK_NAME_INDEX \u003d 1;","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"MuxPotato"},"content":"    final static int TASK_IS_DONE_INDEX \u003d 2;","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"MuxPotato"},"content":"    final static int TASK_DEADLINE_INDEX \u003d 3;","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"MuxPotato"},"content":"    final static int TASK_EVENT_START_TIME_INDEX \u003d 3;","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"MuxPotato"},"content":"    final static int TASK_EVENT_END_TIME_INDEX \u003d 4;","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"MuxPotato"},"content":"    final static int EMPTY_FILE \u003d 0;","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"MuxPotato"},"content":"     * Saves the userTasks in taskList to a given directory and file.","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"MuxPotato"},"content":"     * Each task is saved according to the following format","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"MuxPotato"},"content":"     * [TaskType],TaskName,Boolean (whether task is done),date information.","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"MuxPotato"},"content":"     * @throws IOException If directory path or file path is not present, and program fails","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"MuxPotato"},"content":"     * to create a new directory or file path.","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"MuxPotato"},"content":"    public static void saveExistingTasksToFile(TaskList taskList) throws IOException {","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"MuxPotato"},"content":"        ArrayList\u003cTask\u003e userTasks \u003d taskList.getUserTasksArrayList();","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"MuxPotato"},"content":"        String saveFilePath \u003d FILE_PATH;","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"MuxPotato"},"content":"        if (userTasks.size() \u003d\u003d EMPTY_FILE) { // fixs the bug that the last task in the file cannot be deleted","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"MuxPotato"},"content":"            writeToFile(saveFilePath, \"\", false);","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"MuxPotato"},"content":"        for (int i \u003d 0; i \u003c userTasks.size(); i++) {","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"MuxPotato"},"content":"            Task currentTask \u003d userTasks.get(i);","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"MuxPotato"},"content":"            Boolean isAppendMode \u003d true;","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"MuxPotato"},"content":"            if (i \u003d\u003d 0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"MuxPotato"},"content":"                isAppendMode \u003d false;","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"MuxPotato"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"MuxPotato"},"content":"            if (currentTask instanceof Todo) {","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"MuxPotato"},"content":"                writeToFile(saveFilePath, \"T , \" + currentTask.getTaskName() + \" , \" + currentTask.getisDone() + System.lineSeparator(), isAppendMode);","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"MuxPotato"},"content":"            } else if (currentTask instanceof Deadline) {","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"MuxPotato"},"content":"                writeToFile(saveFilePath, \"D , \" + currentTask.getTaskName() + \" , \" + currentTask.getisDone() + \" , \" + ((Deadline) currentTask).deadline +","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"MuxPotato"},"content":"                        System.lineSeparator(), isAppendMode);","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"MuxPotato"},"content":"            } else { // current task is instance of event","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"MuxPotato"},"content":"                writeToFile(saveFilePath, \"E , \" + currentTask.getTaskName() + \" , \" + currentTask.getisDone() + \" , \" + ((Event) currentTask).startTime +","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"MuxPotato"},"content":"                        \" , \" + ((Event) currentTask).endTime + System.lineSeparator(), isAppendMode);","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"MuxPotato"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"MuxPotato"},"content":"     * Writes given string to a given file location.","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"MuxPotato"},"content":"     * @param filePath file path of save file relative to project location.","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"MuxPotato"},"content":"     * @param textToAdd string of text to be added to save file.","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"MuxPotato"},"content":"     * @param isAppendMode Boolean variable to use to indicate whether appendmode for FileWriter is used to overwrite existing data.","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"MuxPotato"},"content":"     * @throws IOException If file does not exist in the given file path, or FileWriter fails to write to given save file.","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"MuxPotato"},"content":"    public static void writeToFile(String filePath, String textToAdd, Boolean isAppendMode) throws IOException {","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"MuxPotato"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath, isAppendMode);","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"MuxPotato"},"content":"        fileWriter.write(textToAdd);","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"MuxPotato"},"content":"        fileWriter.close();","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"MuxPotato"},"content":"     * Retrieve existing user tasks in the form of a TaskList object from a given save file.","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"MuxPotato"},"content":"     * Reads and processes user tasks from save file according to the following format:","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"MuxPotato"},"content":"     * [TaskType],TaskName,Boolean (whether task is done),date information.","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"MuxPotato"},"content":"     * @param filePath file path of save file relative to project location.","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"MuxPotato"},"content":"     * @return TaskList object containing userTasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"MuxPotato"},"content":"     * @throws FileNotFoundException If file does not exist at the given file path.","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"MuxPotato"},"content":"    public static TaskList retrieveExistingTasksFromFile(String filePath) throws FileNotFoundException {","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"MuxPotato"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"MuxPotato"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"MuxPotato"},"content":"        ArrayList\u003cTask\u003e userTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"MuxPotato"},"content":"        TaskList taskList \u003d new TaskList(userTasks);","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"MuxPotato"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"MuxPotato"},"content":"            String Line \u003d scanner.nextLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"MuxPotato"},"content":"            String[] taskInformationWords \u003d Line.split(\",\");","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"MuxPotato"},"content":"            String taskType \u003d taskInformationWords[TASK_TYPE_INDEX].trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"MuxPotato"},"content":"            if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"MuxPotato"},"content":"                loadTodoTaskFromSaveFile(taskList, taskInformationWords);","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"MuxPotato"},"content":"            } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":90,"author":{"gitId":"MuxPotato"},"content":"                loadDeadlineTaskFromSaveFile(taskList, taskInformationWords);","lastModifiedDate":"2023-02-25"},{"lineNumber":91,"author":{"gitId":"MuxPotato"},"content":"            } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":92,"author":{"gitId":"MuxPotato"},"content":"                loadEventTaskFromSaveFile(taskList, taskInformationWords);","lastModifiedDate":"2023-02-25"},{"lineNumber":93,"author":{"gitId":"MuxPotato"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":94,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":95,"author":{"gitId":"MuxPotato"},"content":"        return taskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":96,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":97,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":98,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":99,"author":{"gitId":"MuxPotato"},"content":"     * Processes and returns Event task type from a given array of string.","lastModifiedDate":"2023-02-25"},{"lineNumber":100,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"MuxPotato"},"content":"     * @param taskInformationWords Array of String containing Event task information.","lastModifiedDate":"2023-02-25"},{"lineNumber":103,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"MuxPotato"},"content":"    public static void loadEventTaskFromSaveFile(TaskList taskList, String[] taskInformationWords) {","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"MuxPotato"},"content":"        String taskName \u003d taskInformationWords[TASK_NAME_INDEX].trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":106,"author":{"gitId":"MuxPotato"},"content":"        Boolean isDone \u003d false;","lastModifiedDate":"2023-02-25"},{"lineNumber":107,"author":{"gitId":"MuxPotato"},"content":"        if (taskInformationWords[TASK_IS_DONE_INDEX].trim().equals(\"true\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"MuxPotato"},"content":"            isDone \u003d true;","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"MuxPotato"},"content":"        String taskEventStartTime \u003d taskInformationWords[TASK_EVENT_START_TIME_INDEX].trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"MuxPotato"},"content":"        String taskEventEndTime \u003d taskInformationWords[TASK_EVENT_END_TIME_INDEX].trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"MuxPotato"},"content":"        Event newEventTask \u003d new Event(taskName, taskEventStartTime, taskEventEndTime);","lastModifiedDate":"2023-02-25"},{"lineNumber":113,"author":{"gitId":"MuxPotato"},"content":"        newEventTask.setisDone(isDone);","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"MuxPotato"},"content":"        taskList.addUserTask(newEventTask);","lastModifiedDate":"2023-02-25"},{"lineNumber":115,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":116,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":117,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"MuxPotato"},"content":"     * Processes and returns Deadline task type from a given array of string.","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":120,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":121,"author":{"gitId":"MuxPotato"},"content":"     * @param taskInformationWords Array of String containing Deadline task information.","lastModifiedDate":"2023-02-25"},{"lineNumber":122,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":123,"author":{"gitId":"MuxPotato"},"content":"    public static void loadDeadlineTaskFromSaveFile(TaskList taskList, String[] taskInformationWords) {","lastModifiedDate":"2023-02-25"},{"lineNumber":124,"author":{"gitId":"MuxPotato"},"content":"        String taskName \u003d taskInformationWords[TASK_NAME_INDEX].trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":125,"author":{"gitId":"MuxPotato"},"content":"        Boolean isDone \u003d false;","lastModifiedDate":"2023-02-25"},{"lineNumber":126,"author":{"gitId":"MuxPotato"},"content":"        if (taskInformationWords[TASK_IS_DONE_INDEX].trim().equals(\"true\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":127,"author":{"gitId":"MuxPotato"},"content":"            isDone \u003d true;","lastModifiedDate":"2023-02-25"},{"lineNumber":128,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":129,"author":{"gitId":"MuxPotato"},"content":"        String taskDeadline \u003d taskInformationWords[TASK_DEADLINE_INDEX].trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"MuxPotato"},"content":"        Deadline newDeadlineTask \u003d new Deadline(taskName, taskDeadline);","lastModifiedDate":"2023-02-25"},{"lineNumber":131,"author":{"gitId":"MuxPotato"},"content":"        newDeadlineTask.setisDone(isDone);","lastModifiedDate":"2023-02-25"},{"lineNumber":132,"author":{"gitId":"MuxPotato"},"content":"        taskList.addUserTask(newDeadlineTask);","lastModifiedDate":"2023-02-25"},{"lineNumber":133,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":134,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":135,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":136,"author":{"gitId":"MuxPotato"},"content":"     * Processes and returns Todo task type from a given array of string.","lastModifiedDate":"2023-02-25"},{"lineNumber":137,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":138,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":139,"author":{"gitId":"MuxPotato"},"content":"     * @param taskInformationWords Array of String containing Todo task information.","lastModifiedDate":"2023-02-25"},{"lineNumber":140,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":141,"author":{"gitId":"MuxPotato"},"content":"    public static void loadTodoTaskFromSaveFile(TaskList taskList, String[] taskInformationWords) {","lastModifiedDate":"2023-02-25"},{"lineNumber":142,"author":{"gitId":"MuxPotato"},"content":"        String taskName \u003d taskInformationWords[TASK_NAME_INDEX].trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":143,"author":{"gitId":"MuxPotato"},"content":"        Boolean isDone \u003d false;","lastModifiedDate":"2023-02-25"},{"lineNumber":144,"author":{"gitId":"MuxPotato"},"content":"        if (taskInformationWords[TASK_IS_DONE_INDEX].trim().equals(\"true\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":145,"author":{"gitId":"MuxPotato"},"content":"            isDone \u003d true;","lastModifiedDate":"2023-02-25"},{"lineNumber":146,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":147,"author":{"gitId":"MuxPotato"},"content":"        Todo newTodoTask \u003d new Todo(taskName);","lastModifiedDate":"2023-02-25"},{"lineNumber":148,"author":{"gitId":"MuxPotato"},"content":"        newTodoTask.setisDone(isDone);","lastModifiedDate":"2023-02-25"},{"lineNumber":149,"author":{"gitId":"MuxPotato"},"content":"        taskList.addUserTask(newTodoTask);","lastModifiedDate":"2023-02-25"},{"lineNumber":150,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":151,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":152,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":153,"author":{"gitId":"MuxPotato"},"content":"     * Checks whether a given save directory exists.","lastModifiedDate":"2023-02-25"},{"lineNumber":154,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":155,"author":{"gitId":"MuxPotato"},"content":"     * @param DIRECTORY_PATH path of directory containing save file.","lastModifiedDate":"2023-02-25"},{"lineNumber":156,"author":{"gitId":"MuxPotato"},"content":"     * @return Returns true if directory exists in the given directory path, False otherwise.","lastModifiedDate":"2023-02-25"},{"lineNumber":157,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":158,"author":{"gitId":"MuxPotato"},"content":"    public static boolean isSaveDirectoryPresent(String DIRECTORY_PATH) {","lastModifiedDate":"2023-02-25"},{"lineNumber":159,"author":{"gitId":"MuxPotato"},"content":"        Path directoryPath \u003d Paths.get(DIRECTORY_PATH);","lastModifiedDate":"2023-02-25"},{"lineNumber":160,"author":{"gitId":"MuxPotato"},"content":"        if (Files.exists(directoryPath) \u0026\u0026 Files.isDirectory(directoryPath)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":161,"author":{"gitId":"MuxPotato"},"content":"            return true;","lastModifiedDate":"2023-02-25"},{"lineNumber":162,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":163,"author":{"gitId":"MuxPotato"},"content":"        return false;","lastModifiedDate":"2023-02-25"},{"lineNumber":164,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":165,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":166,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":167,"author":{"gitId":"MuxPotato"},"content":"     * Creates directory at a given directory path.","lastModifiedDate":"2023-02-25"},{"lineNumber":168,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":169,"author":{"gitId":"MuxPotato"},"content":"     * @param DIRECTORY_PATH path of directory containing save file.","lastModifiedDate":"2023-02-25"},{"lineNumber":170,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":171,"author":{"gitId":"MuxPotato"},"content":"    public static void createSaveFileDirectory(String DIRECTORY_PATH) {","lastModifiedDate":"2023-02-25"},{"lineNumber":172,"author":{"gitId":"MuxPotato"},"content":"        File file \u003d new File(DIRECTORY_PATH);","lastModifiedDate":"2023-02-25"},{"lineNumber":173,"author":{"gitId":"MuxPotato"},"content":"        if (file.mkdir() \u003d\u003d true) {","lastModifiedDate":"2023-02-25"},{"lineNumber":174,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Directory successfully created at [project_root]/\" + DIRECTORY_PATH);","lastModifiedDate":"2023-02-25"},{"lineNumber":175,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":176,"author":{"gitId":"MuxPotato"},"content":"        } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":177,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Failed to create directory, data might be lost\");","lastModifiedDate":"2023-02-25"},{"lineNumber":178,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":179,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":180,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":181,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":182,"author":{"gitId":"MuxPotato"},"content":"     * Saves user tasks from taskList into the save file at the directory path and file path.","lastModifiedDate":"2023-02-25"},{"lineNumber":183,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":184,"author":{"gitId":"MuxPotato"},"content":"     * @param DIRECTORY_PATH path of directory containing save file.","lastModifiedDate":"2023-02-25"},{"lineNumber":185,"author":{"gitId":"MuxPotato"},"content":"     * @param FILE_PATH file path of save file relative to project location.","lastModifiedDate":"2023-02-25"},{"lineNumber":186,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":187,"author":{"gitId":"MuxPotato"},"content":"     * @throws IOException If directory path or file path is not present, and program fails","lastModifiedDate":"2023-02-25"},{"lineNumber":188,"author":{"gitId":"MuxPotato"},"content":"     * to create a new directory or file path.","lastModifiedDate":"2023-02-25"},{"lineNumber":189,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":190,"author":{"gitId":"MuxPotato"},"content":"    public static void saveData(String DIRECTORY_PATH, String FILE_PATH, TaskList taskList) throws IOException {","lastModifiedDate":"2023-02-25"},{"lineNumber":191,"author":{"gitId":"MuxPotato"},"content":"        if (isSaveDirectoryPresent(DIRECTORY_PATH) \u003d\u003d false) {","lastModifiedDate":"2023-02-25"},{"lineNumber":192,"author":{"gitId":"MuxPotato"},"content":"            createSaveFileDirectory(DIRECTORY_PATH);","lastModifiedDate":"2023-02-25"},{"lineNumber":193,"author":{"gitId":"MuxPotato"},"content":"            if (isSaveDirectoryPresent(DIRECTORY_PATH) \u003d\u003d false) {","lastModifiedDate":"2023-02-25"},{"lineNumber":194,"author":{"gitId":"MuxPotato"},"content":"                throw new IOException();","lastModifiedDate":"2023-02-25"},{"lineNumber":195,"author":{"gitId":"MuxPotato"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":196,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":197,"author":{"gitId":"MuxPotato"},"content":"        saveExistingTasksToFile(taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":198,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":199,"author":{"gitId":"MuxPotato"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"MuxPotato":199}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"public class Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"MuxPotato"},"content":"    private String taskName;","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"    private Boolean isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"MuxPotato"},"content":"     * Constructor for Task Object.","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"MuxPotato"},"content":"    public Task() {","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"MuxPotato"},"content":"        taskName \u003d \"\";","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"MuxPotato"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"MuxPotato"},"content":"     * Constructor for Task Object using taskName.","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"MuxPotato"},"content":"     * @param taskName name of new task.","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"MuxPotato"},"content":"    public Task(String taskName) {","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MuxPotato"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"MuxPotato"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"MuxPotato"},"content":"     * Getter function for task name.","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"MuxPotato"},"content":"     * @return task name of current task object.","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"MuxPotato"},"content":"    public String getTaskName() {","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"MuxPotato"},"content":"        return taskName;","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"MuxPotato"},"content":"     * Getter function for isDone boolean variable of task.","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"MuxPotato"},"content":"     * @return True if task is done, False otherwise.","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"MuxPotato"},"content":"    public Boolean getisDone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"MuxPotato"},"content":"        return isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"MuxPotato"},"content":"     * Setter function to set task name.","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"MuxPotato"},"content":"     * @param taskName new task name for task.","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"MuxPotato"},"content":"    public void setTaskName (String taskName) {","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"MuxPotato"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"MuxPotato"},"content":"     * Setter function for isDone boolean variable of task.","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"MuxPotato"},"content":"     * @param isDone boolean input for isDone of task.","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"MuxPotato"},"content":"    public void setisDone(Boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"MuxPotato"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"MuxPotato"},"content":"     * Overides toString() of Object class.","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"MuxPotato"},"content":"     * @return String indication of whether task is done + task name.","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"MuxPotato"},"content":"    @Override","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"MuxPotato"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"MuxPotato"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"MuxPotato"},"content":"            return \"[X] \" + taskName;","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"MuxPotato"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"MuxPotato"},"content":"            return \"[ ] \" + taskName;","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"MuxPotato"},"content":"}","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"MuxPotato":74}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"import java.sql.Array;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"MuxPotato"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"public class TaskList {","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"MuxPotato"},"content":"     * Constructor for TaskList Class.","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"MuxPotato"},"content":"     * @param userTasks ArrayList\u003cTask\u003e which contains user tasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"MuxPotato"},"content":"    public TaskList(ArrayList\u003cTask\u003e userTasks) {","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"MuxPotato"},"content":"        this.userTasks \u003d userTasks;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"MuxPotato"},"content":"    private ArrayList\u003cTask\u003e userTasks;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"MuxPotato"},"content":"     * Getter function for ArrayList\u003cTask\u003e userTasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"MuxPotato"},"content":"     * @return ArrayList\u003cTask\u003e userTasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"MuxPotato"},"content":"    public ArrayList\u003cTask\u003e getUserTasksArrayList() {","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"MuxPotato"},"content":"        return userTasks;","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"MuxPotato"},"content":"     * Getter function for task in userTasks using index.","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"MuxPotato"},"content":"     * @param index index of task to return.","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"MuxPotato"},"content":"     * @return Task at the given index.","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"MuxPotato"},"content":"    public Task getUserTask(int index) {","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"MuxPotato"},"content":"        return userTasks.get(index);","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"MuxPotato"},"content":"     * Adds new task into userTasks ArrayList.","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"MuxPotato"},"content":"     * @param newTask Task to be added.","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"MuxPotato"},"content":"    public void addUserTask(Task newTask) {","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"MuxPotato"},"content":"        userTasks.add(newTask);","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"MuxPotato"},"content":"     * Removes task at given index from userTasks ArrayList.","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"MuxPotato"},"content":"     * @param index index of task to be removed.","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"MuxPotato"},"content":"    public void removeUserTask(int index) {","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"MuxPotato"},"content":"        userTasks.remove(index);","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"MuxPotato"},"content":"     * Returns number of user tasks currently present in ArrayList\u003cTask\u003e userTasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"MuxPotato"},"content":"     * @return number of user tasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"MuxPotato"},"content":"    public int getNumberOfUserTasks() {","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"MuxPotato"},"content":"        return userTasks.size();","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"MuxPotato"},"content":"     * Setter function to set task as done at given index.","lastModifiedDate":"2023-02-26"},{"lineNumber":63,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"MuxPotato"},"content":"     * @param index index of task to be set as done.","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"MuxPotato"},"content":"    public void setTaskDone(int index) {","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"MuxPotato"},"content":"        userTasks.get(index).setisDone(true);","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"MuxPotato"},"content":"     * Setter function to set task as not done at given index.","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"MuxPotato"},"content":"     * @param index index of task to be set as not done.","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"MuxPotato"},"content":"    public void setTaskNotDone(int index) {","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"MuxPotato"},"content":"        userTasks.get(index).setisDone(false);","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":80,"author":{"gitId":"MuxPotato"},"content":"     * Finds and returns tasks based on keyword name given.","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":82,"author":{"gitId":"MuxPotato"},"content":"     * @param name String keyword to search for.","lastModifiedDate":"2023-02-26"},{"lineNumber":83,"author":{"gitId":"MuxPotato"},"content":"     * @return ArrayList\u003cInteger\u003e of task indexes which contained keyword given.","lastModifiedDate":"2023-02-26"},{"lineNumber":84,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":85,"author":{"gitId":"MuxPotato"},"content":"    public ArrayList\u003cInteger\u003e findTasksBasedOnName(String name) {","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"MuxPotato"},"content":"        ArrayList\u003cInteger\u003e tasksIndexWithSimilarName \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"MuxPotato"},"content":"        for(int i \u003d 0; i \u003c userTasks.size(); i++) {","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"MuxPotato"},"content":"            String taskName \u003d userTasks.get(i).getTaskName();","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"MuxPotato"},"content":"            taskName \u003d taskName.toLowerCase();","lastModifiedDate":"2023-02-25"},{"lineNumber":90,"author":{"gitId":"MuxPotato"},"content":"            int indexOfSearchedName \u003d taskName.indexOf(name.toLowerCase());","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"MuxPotato"},"content":"            if (indexOfSearchedName !\u003d -1) {","lastModifiedDate":"2023-02-25"},{"lineNumber":92,"author":{"gitId":"MuxPotato"},"content":"                tasksIndexWithSimilarName.add(i);","lastModifiedDate":"2023-02-25"},{"lineNumber":93,"author":{"gitId":"MuxPotato"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":94,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":95,"author":{"gitId":"MuxPotato"},"content":"        return tasksIndexWithSimilarName;","lastModifiedDate":"2023-02-25"},{"lineNumber":96,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":97,"author":{"gitId":"MuxPotato"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"MuxPotato":97}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"     * Constructor for Todo task.","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"MuxPotato"},"content":"     * @param taskName  name of Task.","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"MuxPotato"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"MuxPotato"},"content":"        super(taskName);","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"MuxPotato"},"content":"     * Overrides toString() of Object class.","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"MuxPotato"},"content":"     * @return String indication of task type + whether task is done + task name.","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"MuxPotato"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MuxPotato"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MuxPotato"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MuxPotato"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MuxPotato":20}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MuxPotato"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"MuxPotato"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"MuxPotato"},"content":"public class Ui {","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"MuxPotato"},"content":"    final static int ZERO_INDEX \u003d 0;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"MuxPotato"},"content":"    final static int ONE_INDEX \u003d 1;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"MuxPotato"},"content":"    final static int OFFSET_ONE_FOR_ZERO_INDEXING \u003d 1;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"MuxPotato"},"content":"    final static String DOUBLE_SPACING \u003d \"  \";","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"MuxPotato"},"content":"    final static String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"MuxPotato"},"content":"    final static String DIRECTORY_PATH \u003d \"data\";","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"MuxPotato"},"content":"     * Executes user command based on the given user input","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"MuxPotato"},"content":"     * user command keyword is extracted using .split() function and passed on to various functions","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"MuxPotato"},"content":"     * toContinue boolean variable is returned to Duke class, to indicate whether user wants to end Duke program","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"MuxPotato"},"content":"     * @param userInput Line inputted from user.","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"MuxPotato"},"content":"     * @return toContinue Boolean variable returned to Duke class.","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"MuxPotato"},"content":"    public boolean executeUserCommand(TaskList taskList, String userInput) {","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"MuxPotato"},"content":"        userInput \u003d userInput.trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"MuxPotato"},"content":"        String[] userInputWords \u003d userInput.split(\" \");","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"MuxPotato"},"content":"        String userCommandKeyword \u003d userInputWords[ZERO_INDEX];","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"MuxPotato"},"content":"        boolean toContinue \u003d true;","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"MuxPotato"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"MuxPotato"},"content":"            switch (userCommandKeyword) {","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"MuxPotato"},"content":"            case \"list\":","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"MuxPotato"},"content":"                userCommandList(taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"MuxPotato"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"MuxPotato"},"content":"            case \"bye\":","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"MuxPotato"},"content":"                toContinue \u003d false;","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"MuxPotato"},"content":"                userCommandBye(taskList);","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"MuxPotato"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"MuxPotato"},"content":"            case \"mark\":","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"MuxPotato"},"content":"                userCommandMark(taskList, userInputWords);","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"MuxPotato"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"MuxPotato"},"content":"            case \"unmark\":","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"MuxPotato"},"content":"                userCommandUnmark(taskList, userInputWords);","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"MuxPotato"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"MuxPotato"},"content":"            case \"todo\":","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"MuxPotato"},"content":"                userCommandTodo(taskList, userCommandKeyword, userInput);","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"MuxPotato"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"MuxPotato"},"content":"            case \"deadline\":","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"MuxPotato"},"content":"                userCommandDeadline(taskList, userCommandKeyword, userInput);","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"MuxPotato"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"MuxPotato"},"content":"            case \"event\":","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"MuxPotato"},"content":"                userCommandEvent(taskList, userCommandKeyword, userInput);","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"MuxPotato"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"MuxPotato"},"content":"            case \"delete\":","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"MuxPotato"},"content":"                userCommandDelete(taskList, userInputWords);","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"MuxPotato"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"MuxPotato"},"content":"            case \"find\":","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"MuxPotato"},"content":"                userCommandFind(taskList, userCommandKeyword, userInput);","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"MuxPotato"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"MuxPotato"},"content":"            default:","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"MuxPotato"},"content":"                userCommandDefault();","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"MuxPotato"},"content":"                break;","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"MuxPotato"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"MuxPotato"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"Error Found see message above!!!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"MuxPotato"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"IO EXCEPTION, Data might be lost\");","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"MuxPotato"},"content":"        return toContinue;","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"MuxPotato"},"content":"     * Executes the Event command:","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"MuxPotato"},"content":"     * 1. Creates new event task","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"MuxPotato"},"content":"     * 2. Add new event task to taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"MuxPotato"},"content":"     * 3. Print out description of newly added task and current number of tasks","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"MuxPotato"},"content":"     * @param userCommandKeyword Command keyword given by user, etc. mark, unmark, find etc.","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"MuxPotato"},"content":"     * @param userInput Line inputted from user.","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException Thrown by getNewEventTask","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"MuxPotato"},"content":"    private static void userCommandEvent(TaskList taskList, String userCommandKeyword, String userInput) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"MuxPotato"},"content":"        Event newEventTask \u003d getNewEventTask(userInput, userCommandKeyword);","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"MuxPotato"},"content":"        taskList.addUserTask(newEventTask);","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"MuxPotato"},"content":"        printAddedNewTask(taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"MuxPotato"},"content":"     * Returns a newly created event task.","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"MuxPotato"},"content":"     * @param userInput Line inputted from user.","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"MuxPotato"},"content":"     * @param userCommandKeyword Command keyword given by user, etc. mark, unmark, find etc.","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"MuxPotato"},"content":"     * @return Event object created according to userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException Thrown by getTaskString, getEventTaskName, getEventStartDate, getEventEndDate","lastModifiedDate":"2023-02-25"},{"lineNumber":90,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"MuxPotato"},"content":"     * getTaskString: If the task description extracted is empty, length of userInput \u003c\u003d length of userCommand","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"MuxPotato"},"content":"     * getEventTaskName: If taskString does not contain \"/from\" format keyword OR If task name extracted is empty string","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"MuxPotato"},"content":"     * getEventStartDate: If taskString is missing /from or /to (detected from looking at length of String[] taskStringPartsSplitByTo)","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"MuxPotato"},"content":"     * OR If start date extracted is empty","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"MuxPotato"},"content":"     * getEventEndDate: If taskString is missing /from or /to (detected from looking at length of String[] taskStringPartsSplitByTo)","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"MuxPotato"},"content":"     * OR If end date extracted is empty.","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":98,"author":{"gitId":"MuxPotato"},"content":"    private static Event getNewEventTask(String userInput, String userCommandKeyword) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":99,"author":{"gitId":"MuxPotato"},"content":"        String taskString \u003d Parser.getTaskString(userInput, userCommandKeyword);","lastModifiedDate":"2023-02-25"},{"lineNumber":100,"author":{"gitId":"MuxPotato"},"content":"        String taskName \u003d Parser.getEventTaskName(taskString);","lastModifiedDate":"2023-02-25"},{"lineNumber":101,"author":{"gitId":"MuxPotato"},"content":"        String eventFromDate \u003d Parser.getEventStartDate(taskString);","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"MuxPotato"},"content":"        String eventToDate \u003d Parser.getEventEndDate(taskString);","lastModifiedDate":"2023-02-25"},{"lineNumber":103,"author":{"gitId":"MuxPotato"},"content":"        Event newEventTask \u003d new Event(taskName, eventFromDate, eventToDate);","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"MuxPotato"},"content":"        return newEventTask;","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":106,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":107,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"MuxPotato"},"content":"     * Executes the Deadline command:","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"MuxPotato"},"content":"     * 1. Creates new deadline task","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"MuxPotato"},"content":"     * 2. Add new deadline task to taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"MuxPotato"},"content":"     * 3. Print out description of newly added task and current number of tasks","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":113,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"MuxPotato"},"content":"     * @param userCommandKeyword Command keyword given by user, etc. mark, unmark, find etc.","lastModifiedDate":"2023-02-25"},{"lineNumber":115,"author":{"gitId":"MuxPotato"},"content":"     * @param userInput Line inputted from user.","lastModifiedDate":"2023-02-25"},{"lineNumber":116,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException Thrown by getNewDeadlineTask","lastModifiedDate":"2023-02-25"},{"lineNumber":117,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"MuxPotato"},"content":"    private static void userCommandDeadline(TaskList taskList, String userCommandKeyword, String userInput) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"MuxPotato"},"content":"        Deadline newDeadlineTask \u003d getNewDeadlineTask(userInput, userCommandKeyword);","lastModifiedDate":"2023-02-25"},{"lineNumber":120,"author":{"gitId":"MuxPotato"},"content":"        taskList.addUserTask(newDeadlineTask);","lastModifiedDate":"2023-02-25"},{"lineNumber":121,"author":{"gitId":"MuxPotato"},"content":"        printAddedNewTask(taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":122,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":123,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":124,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":125,"author":{"gitId":"MuxPotato"},"content":"     * Returns a newly created deadline task.","lastModifiedDate":"2023-02-25"},{"lineNumber":126,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":127,"author":{"gitId":"MuxPotato"},"content":"     * @param userInput Line inputted from user.","lastModifiedDate":"2023-02-25"},{"lineNumber":128,"author":{"gitId":"MuxPotato"},"content":"     * @param userCommandKeyword Command keyword given by user, etc. mark, unmark, find etc.","lastModifiedDate":"2023-02-25"},{"lineNumber":129,"author":{"gitId":"MuxPotato"},"content":"     * @return Deadline object created according to userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException Thrown by getTaskString, getDeadlineTaskName, getDeadlineDueDateString.","lastModifiedDate":"2023-02-25"},{"lineNumber":131,"author":{"gitId":"MuxPotato"},"content":"     * getTaskString: If the task description extracted is empty, length of userInput \u003c\u003d length of userCommand","lastModifiedDate":"2023-02-26"},{"lineNumber":132,"author":{"gitId":"MuxPotato"},"content":"     * getDeadlineTaskName: If taskString does not contain \"/by\" format keyword OR If task name extracted is empty string","lastModifiedDate":"2023-02-26"},{"lineNumber":133,"author":{"gitId":"MuxPotato"},"content":"     * getDeadlineDueDateString: If taskString is missing /by (detected from looking at length of String[] taskStringParts)","lastModifiedDate":"2023-02-26"},{"lineNumber":134,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":135,"author":{"gitId":"MuxPotato"},"content":"    private static Deadline getNewDeadlineTask(String userInput, String userCommandKeyword) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":136,"author":{"gitId":"MuxPotato"},"content":"        String taskString \u003d Parser.getTaskString(userInput, userCommandKeyword);","lastModifiedDate":"2023-02-25"},{"lineNumber":137,"author":{"gitId":"MuxPotato"},"content":"        String taskName \u003d Parser.getDeadlineTaskName(taskString);","lastModifiedDate":"2023-02-25"},{"lineNumber":138,"author":{"gitId":"MuxPotato"},"content":"        String deadlineDueDate \u003d Parser.getDeadlineDueDateString(taskString);","lastModifiedDate":"2023-02-25"},{"lineNumber":139,"author":{"gitId":"MuxPotato"},"content":"        Deadline newDeadlineTask \u003d new Deadline(taskName, deadlineDueDate);","lastModifiedDate":"2023-02-25"},{"lineNumber":140,"author":{"gitId":"MuxPotato"},"content":"        return newDeadlineTask;","lastModifiedDate":"2023-02-25"},{"lineNumber":141,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":142,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":143,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":144,"author":{"gitId":"MuxPotato"},"content":"     * Executes the Todo command:","lastModifiedDate":"2023-02-25"},{"lineNumber":145,"author":{"gitId":"MuxPotato"},"content":"     * 1. Creates new Todo task","lastModifiedDate":"2023-02-25"},{"lineNumber":146,"author":{"gitId":"MuxPotato"},"content":"     * 2. Add new Todo task to taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":147,"author":{"gitId":"MuxPotato"},"content":"     * 3. Print out description of newly added task and current number of tasks","lastModifiedDate":"2023-02-25"},{"lineNumber":148,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":149,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":150,"author":{"gitId":"MuxPotato"},"content":"     * @param userCommandKeyword Command keyword given by user, etc. mark, unmark, find etc.","lastModifiedDate":"2023-02-25"},{"lineNumber":151,"author":{"gitId":"MuxPotato"},"content":"     * @param userInput Line inputted from user.","lastModifiedDate":"2023-02-25"},{"lineNumber":152,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException Thrown by getNewTodoTask","lastModifiedDate":"2023-02-25"},{"lineNumber":153,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":154,"author":{"gitId":"MuxPotato"},"content":"    private static void userCommandTodo(TaskList taskList, String userCommandKeyword, String userInput) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":155,"author":{"gitId":"MuxPotato"},"content":"        Todo newToDoTask \u003d getNewTodoTask(userInput, userCommandKeyword);","lastModifiedDate":"2023-02-25"},{"lineNumber":156,"author":{"gitId":"MuxPotato"},"content":"        taskList.addUserTask(newToDoTask);","lastModifiedDate":"2023-02-25"},{"lineNumber":157,"author":{"gitId":"MuxPotato"},"content":"        printAddedNewTask(taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":158,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":159,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":160,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":161,"author":{"gitId":"MuxPotato"},"content":"     * Returns a newly created Todo task.","lastModifiedDate":"2023-02-25"},{"lineNumber":162,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":163,"author":{"gitId":"MuxPotato"},"content":"     * @param userInput Line inputted from user.","lastModifiedDate":"2023-02-25"},{"lineNumber":164,"author":{"gitId":"MuxPotato"},"content":"     * @param userCommandKeyword Command keyword given by user, etc. mark, unmark, find etc.","lastModifiedDate":"2023-02-25"},{"lineNumber":165,"author":{"gitId":"MuxPotato"},"content":"     * @return Todo object created according to userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":166,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException Thrown by getTaskString, getTodoTaskName.","lastModifiedDate":"2023-02-25"},{"lineNumber":167,"author":{"gitId":"MuxPotato"},"content":"     * getTaskString: If the task description extracted is empty, length of userInput \u003c\u003d length of userCommand.","lastModifiedDate":"2023-02-26"},{"lineNumber":168,"author":{"gitId":"MuxPotato"},"content":"     * getTodoTaskName: If taskString is an empty string.","lastModifiedDate":"2023-02-26"},{"lineNumber":169,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":170,"author":{"gitId":"MuxPotato"},"content":"    private static Todo getNewTodoTask (String userInput, String userCommandKeyword) throws DukeException{","lastModifiedDate":"2023-02-25"},{"lineNumber":171,"author":{"gitId":"MuxPotato"},"content":"        String taskString \u003d Parser.getTaskString(userInput, userCommandKeyword);","lastModifiedDate":"2023-02-25"},{"lineNumber":172,"author":{"gitId":"MuxPotato"},"content":"        String taskName \u003d Parser.getTodoTaskName(taskString);","lastModifiedDate":"2023-02-25"},{"lineNumber":173,"author":{"gitId":"MuxPotato"},"content":"        Todo newTodoTask \u003d new Todo(taskName);","lastModifiedDate":"2023-02-25"},{"lineNumber":174,"author":{"gitId":"MuxPotato"},"content":"        return newTodoTask;","lastModifiedDate":"2023-02-25"},{"lineNumber":175,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":176,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":177,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":178,"author":{"gitId":"MuxPotato"},"content":"     * Unmarks task according to task index extracted from user input.","lastModifiedDate":"2023-02-26"},{"lineNumber":179,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":180,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":181,"author":{"gitId":"MuxPotato"},"content":"     * @param userInputWords Array of strings split by \" \" from userInput line.","lastModifiedDate":"2023-02-25"},{"lineNumber":182,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException If taskIndex is greater than number of tasks in taskList, taskIndex \u003e\u003d number of user tasks OR","lastModifiedDate":"2023-02-25"},{"lineNumber":183,"author":{"gitId":"MuxPotato"},"content":"     * If taskIndex is lesser than 0, taskIndex \u003c 0.","lastModifiedDate":"2023-02-25"},{"lineNumber":184,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":185,"author":{"gitId":"MuxPotato"},"content":"    private static void userCommandUnmark(TaskList taskList, String[] userInputWords) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":186,"author":{"gitId":"MuxPotato"},"content":"        int taskIndex;","lastModifiedDate":"2023-02-25"},{"lineNumber":187,"author":{"gitId":"MuxPotato"},"content":"        taskIndex \u003d Integer.parseInt(userInputWords[ONE_INDEX]) - OFFSET_ONE_FOR_ZERO_INDEXING;","lastModifiedDate":"2023-02-25"},{"lineNumber":188,"author":{"gitId":"MuxPotato"},"content":"        if (taskIndex + OFFSET_ONE_FOR_ZERO_INDEXING \u003e taskList.getNumberOfUserTasks()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":189,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"There is no task that is indexed: \" + taskIndex);","lastModifiedDate":"2023-02-25"},{"lineNumber":190,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":191,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":192,"author":{"gitId":"MuxPotato"},"content":"        if (taskIndex \u003c ZERO_INDEX) {","lastModifiedDate":"2023-02-25"},{"lineNumber":193,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"task number given cannot be less than 1\");","lastModifiedDate":"2023-02-25"},{"lineNumber":194,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":195,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":196,"author":{"gitId":"MuxPotato"},"content":"        taskList.setTaskNotDone(taskIndex);","lastModifiedDate":"2023-02-25"},{"lineNumber":197,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(taskList.getUserTask(taskIndex));","lastModifiedDate":"2023-02-25"},{"lineNumber":198,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-02-25"},{"lineNumber":199,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":200,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":201,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":202,"author":{"gitId":"MuxPotato"},"content":"     * Marks task according to task index extracted from user input.","lastModifiedDate":"2023-02-26"},{"lineNumber":203,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":204,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":205,"author":{"gitId":"MuxPotato"},"content":"     * @param userInputWords Array of strings split by \" \" from userInput line.","lastModifiedDate":"2023-02-25"},{"lineNumber":206,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException If taskIndex is greater than number of tasks in taskList, taskIndex \u003e\u003d number of user tasks OR","lastModifiedDate":"2023-02-25"},{"lineNumber":207,"author":{"gitId":"MuxPotato"},"content":"     * If taskIndex is lesser than 0, taskIndex \u003c 0.","lastModifiedDate":"2023-02-25"},{"lineNumber":208,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":209,"author":{"gitId":"MuxPotato"},"content":"    private static void userCommandMark(TaskList taskList, String[] userInputWords) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":210,"author":{"gitId":"MuxPotato"},"content":"        int taskIndex;","lastModifiedDate":"2023-02-25"},{"lineNumber":211,"author":{"gitId":"MuxPotato"},"content":"        taskIndex \u003d Integer.parseInt(userInputWords[ONE_INDEX]) - OFFSET_ONE_FOR_ZERO_INDEXING;","lastModifiedDate":"2023-02-25"},{"lineNumber":212,"author":{"gitId":"MuxPotato"},"content":"        if (taskIndex + OFFSET_ONE_FOR_ZERO_INDEXING \u003e taskList.getNumberOfUserTasks()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":213,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"There is no task that is indexed: \" + taskIndex);","lastModifiedDate":"2023-02-25"},{"lineNumber":214,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":215,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":216,"author":{"gitId":"MuxPotato"},"content":"        if (taskIndex \u003c ZERO_INDEX) {","lastModifiedDate":"2023-02-25"},{"lineNumber":217,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"task number given cannot be less than 1\");","lastModifiedDate":"2023-02-25"},{"lineNumber":218,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":219,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":220,"author":{"gitId":"MuxPotato"},"content":"        taskList.setTaskDone(taskIndex);","lastModifiedDate":"2023-02-25"},{"lineNumber":221,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(taskList.getUserTask(taskIndex));","lastModifiedDate":"2023-02-25"},{"lineNumber":222,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-02-25"},{"lineNumber":223,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":224,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":225,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":226,"author":{"gitId":"MuxPotato"},"content":"     * Lists out every task present in userTasks from taskList.","lastModifiedDate":"2023-02-26"},{"lineNumber":227,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":228,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":229,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":230,"author":{"gitId":"MuxPotato"},"content":"    private static void userCommandList(TaskList taskList) {","lastModifiedDate":"2023-02-25"},{"lineNumber":231,"author":{"gitId":"MuxPotato"},"content":"        ArrayList\u003cTask\u003e userTasks \u003d taskList.getUserTasksArrayList();","lastModifiedDate":"2023-02-25"},{"lineNumber":232,"author":{"gitId":"MuxPotato"},"content":"        for(int i \u003d 0; i \u003c userTasks.size(); i++) {","lastModifiedDate":"2023-02-25"},{"lineNumber":233,"author":{"gitId":"MuxPotato"},"content":"            if (userTasks.get(i).getisDone()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":234,"author":{"gitId":"MuxPotato"},"content":"                System.out.println((i + 1) + \". \" + userTasks.get(i));","lastModifiedDate":"2023-02-25"},{"lineNumber":235,"author":{"gitId":"MuxPotato"},"content":"            } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":236,"author":{"gitId":"MuxPotato"},"content":"                System.out.println((i + 1) + \". \" + userTasks.get(i));","lastModifiedDate":"2023-02-25"},{"lineNumber":237,"author":{"gitId":"MuxPotato"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":238,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":239,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":240,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":241,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":242,"author":{"gitId":"MuxPotato"},"content":"     * Saves the userTasks in taskList to a given directory and file.","lastModifiedDate":"2023-02-25"},{"lineNumber":243,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":244,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":245,"author":{"gitId":"MuxPotato"},"content":"     * @throws IOException If directory path or file path is not present, and program fails","lastModifiedDate":"2023-02-25"},{"lineNumber":246,"author":{"gitId":"MuxPotato"},"content":"     * to create a new directory or file path.","lastModifiedDate":"2023-02-25"},{"lineNumber":247,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":248,"author":{"gitId":"MuxPotato"},"content":"    private static void userCommandBye(TaskList taskList) throws IOException {","lastModifiedDate":"2023-02-25"},{"lineNumber":249,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":250,"author":{"gitId":"MuxPotato"},"content":"        Storage.saveData(DIRECTORY_PATH, FILE_PATH, taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":251,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":252,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":253,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":254,"author":{"gitId":"MuxPotato"},"content":"     * Throws a DukeException, informing that user inputted an invalid line format","lastModifiedDate":"2023-02-25"},{"lineNumber":255,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":256,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException Always throws DukeException.","lastModifiedDate":"2023-02-25"},{"lineNumber":257,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":258,"author":{"gitId":"MuxPotato"},"content":"    private static void userCommandDefault() throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":259,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-02-25"},{"lineNumber":260,"author":{"gitId":"MuxPotato"},"content":"        throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":261,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":262,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":263,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":264,"author":{"gitId":"MuxPotato"},"content":"     * Deletes task according to task index extracted from user input.","lastModifiedDate":"2023-02-26"},{"lineNumber":265,"author":{"gitId":"MuxPotato"},"content":"     * If task is deleted successfully, prints out deleted task description and shows number of user tasks remaining.","lastModifiedDate":"2023-02-25"},{"lineNumber":266,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":267,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":268,"author":{"gitId":"MuxPotato"},"content":"     * @param userInputWords Array of strings split by \" \" from userInput line.","lastModifiedDate":"2023-02-25"},{"lineNumber":269,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException If taskIndex is greater than number of tasks in taskList, taskIndex \u003e\u003d number of user tasks OR","lastModifiedDate":"2023-02-25"},{"lineNumber":270,"author":{"gitId":"MuxPotato"},"content":"     * If taskIndex is lesser than 0, taskIndex \u003c 0.","lastModifiedDate":"2023-02-25"},{"lineNumber":271,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":272,"author":{"gitId":"MuxPotato"},"content":"    private static void userCommandDelete(TaskList taskList, String[] userInputWords) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":273,"author":{"gitId":"MuxPotato"},"content":"        int taskIndex;","lastModifiedDate":"2023-02-25"},{"lineNumber":274,"author":{"gitId":"MuxPotato"},"content":"        taskIndex \u003d Integer.parseInt(userInputWords[ONE_INDEX]) - OFFSET_ONE_FOR_ZERO_INDEXING;","lastModifiedDate":"2023-02-25"},{"lineNumber":275,"author":{"gitId":"MuxPotato"},"content":"        if (taskIndex + OFFSET_ONE_FOR_ZERO_INDEXING \u003e taskList.getNumberOfUserTasks()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":276,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"There is no task that is indexed: \" + taskIndex);","lastModifiedDate":"2023-02-25"},{"lineNumber":277,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":278,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":279,"author":{"gitId":"MuxPotato"},"content":"        if (taskIndex \u003c ZERO_INDEX) {","lastModifiedDate":"2023-02-25"},{"lineNumber":280,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"task number given cannot be less than 1\");","lastModifiedDate":"2023-02-25"},{"lineNumber":281,"author":{"gitId":"MuxPotato"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-25"},{"lineNumber":282,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":283,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");","lastModifiedDate":"2023-02-25"},{"lineNumber":284,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(DOUBLE_SPACING + taskList.getUserTask(taskIndex));","lastModifiedDate":"2023-02-25"},{"lineNumber":285,"author":{"gitId":"MuxPotato"},"content":"        taskList.removeUserTask(taskIndex);","lastModifiedDate":"2023-02-25"},{"lineNumber":286,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(\"Now you have \" + taskList.getNumberOfUserTasks() + \" in the list.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":287,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":288,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":289,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":290,"author":{"gitId":"MuxPotato"},"content":"     * Prints out last added task and number of user tasks remaining.","lastModifiedDate":"2023-02-25"},{"lineNumber":291,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":292,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":293,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":294,"author":{"gitId":"MuxPotato"},"content":"    private static void printAddedNewTask(TaskList taskList) {","lastModifiedDate":"2023-02-25"},{"lineNumber":295,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\"); // shift this line below with the another print statement later","lastModifiedDate":"2023-02-25"},{"lineNumber":296,"author":{"gitId":"MuxPotato"},"content":"        int numOfUserTasks \u003d taskList.getNumberOfUserTasks();","lastModifiedDate":"2023-02-25"},{"lineNumber":297,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(taskList.getUserTask(numOfUserTasks- OFFSET_ONE_FOR_ZERO_INDEXING));","lastModifiedDate":"2023-02-25"},{"lineNumber":298,"author":{"gitId":"MuxPotato"},"content":"        System.out.println(\"Now you have \" + numOfUserTasks + \" in the list.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":299,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":300,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":301,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":302,"author":{"gitId":"MuxPotato"},"content":"     * Getter function for userCommandList function.","lastModifiedDate":"2023-02-25"},{"lineNumber":303,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":304,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":305,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":306,"author":{"gitId":"MuxPotato"},"content":"    public static void executeListCommand(TaskList taskList) {","lastModifiedDate":"2023-02-25"},{"lineNumber":307,"author":{"gitId":"MuxPotato"},"content":"        userCommandList(taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":308,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":309,"author":{"gitId":"MuxPotato"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":310,"author":{"gitId":"MuxPotato"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":311,"author":{"gitId":"MuxPotato"},"content":"     * Searches userTasks in taskList according to the find keyword given by user.","lastModifiedDate":"2023-02-26"},{"lineNumber":312,"author":{"gitId":"MuxPotato"},"content":"     * Prints out every user task that contains the given keyword.","lastModifiedDate":"2023-02-26"},{"lineNumber":313,"author":{"gitId":"MuxPotato"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":314,"author":{"gitId":"MuxPotato"},"content":"     * @param taskList TaskList object containing the user tasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":315,"author":{"gitId":"MuxPotato"},"content":"     * @param userCommandKeyword Command keyword given by user, etc. mark, unmark, find etc.","lastModifiedDate":"2023-02-26"},{"lineNumber":316,"author":{"gitId":"MuxPotato"},"content":"     * @param userInput Line inputted from user.","lastModifiedDate":"2023-02-26"},{"lineNumber":317,"author":{"gitId":"MuxPotato"},"content":"     * @throws DukeException Thrown by getTaskString.","lastModifiedDate":"2023-02-26"},{"lineNumber":318,"author":{"gitId":"MuxPotato"},"content":"     * getTaskString: If the task description extracted is empty, length of userInput \u003c\u003d length of userCommand.","lastModifiedDate":"2023-02-26"},{"lineNumber":319,"author":{"gitId":"MuxPotato"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":320,"author":{"gitId":"MuxPotato"},"content":"    private static void userCommandFind(TaskList taskList, String userCommandKeyword, String userInput) throws DukeException {","lastModifiedDate":"2023-02-25"},{"lineNumber":321,"author":{"gitId":"MuxPotato"},"content":"        String taskName \u003d Parser.getTaskString(userInput, userCommandKeyword);","lastModifiedDate":"2023-02-25"},{"lineNumber":322,"author":{"gitId":"MuxPotato"},"content":"        taskName \u003d taskName.trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":323,"author":{"gitId":"MuxPotato"},"content":"        ArrayList\u003cInteger\u003e tasksIndexWithSimilarName \u003d taskList.findTasksBasedOnName(taskName);","lastModifiedDate":"2023-02-25"},{"lineNumber":324,"author":{"gitId":"MuxPotato"},"content":"        int numberOfTasksToPrint \u003d tasksIndexWithSimilarName.size();","lastModifiedDate":"2023-02-25"},{"lineNumber":325,"author":{"gitId":"MuxPotato"},"content":"        if (numberOfTasksToPrint \u003d\u003d 0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":326,"author":{"gitId":"MuxPotato"},"content":"            System.out.println(\"No tasks with entered keyword found\");","lastModifiedDate":"2023-02-25"},{"lineNumber":327,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":328,"author":{"gitId":"MuxPotato"},"content":"        for(int i \u003d 0; i \u003c numberOfTasksToPrint; i++) {","lastModifiedDate":"2023-02-25"},{"lineNumber":329,"author":{"gitId":"MuxPotato"},"content":"            int currentTaskIndex \u003d tasksIndexWithSimilarName.get(i);","lastModifiedDate":"2023-02-25"},{"lineNumber":330,"author":{"gitId":"MuxPotato"},"content":"            Task currentTask \u003d taskList.getUserTask(currentTaskIndex);","lastModifiedDate":"2023-02-25"},{"lineNumber":331,"author":{"gitId":"MuxPotato"},"content":"            System.out.println((i + 1) + \". \" + currentTask);","lastModifiedDate":"2023-02-25"},{"lineNumber":332,"author":{"gitId":"MuxPotato"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":333,"author":{"gitId":"MuxPotato"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":334,"author":{"gitId":"MuxPotato"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"MuxPotato":334}}]
