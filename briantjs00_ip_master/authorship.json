[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"# Duke Task Manager: User Guide","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"Duke is a Personal Assistant Chatbot that aids the user in keeping track of ","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"their tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"## Quick Start","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"1. Ensure that Java 11 is installed in your computer, if not proceed to download from the link:","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"   https://www.oracle.com/sg/java/technologies/javase/jdk11-archive-downloads.html","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":"2. Verify that you have a copy of \"duke.jar\" in your computer","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"3. After that, locate folder containing ip.jar in your computer, right-click it, and choose \"Open in Terminal\".","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"briantjs00"},"content":"4. In the terminal, type: java -jar duke.jar, and press enter. The Duke Task Manager will start up.","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"## Features Overview","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"1. Startup","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":"2. Add Todo Task","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":"3. Add Deadline Task","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"briantjs00"},"content":"4. Add Event Task","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"5. List out the Tasks ","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"briantjs00"},"content":"6. Marking Task Done","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"briantjs00"},"content":"7. Marking Task Undone","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"briantjs00"},"content":"8. Deleting Task from list","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"briantjs00"},"content":"9. Finding Task/s from Keyword","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"briantjs00"},"content":"10. Exit","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":24,"author":{"gitId":"briantjs00"},"content":"### Feature - Startup","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":26,"author":{"gitId":"briantjs00"},"content":"Duke will load the saved tasks from \u0027tasks.txt\u0027, or create this file if it does not exist.","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":28,"author":{"gitId":"briantjs00"},"content":"Expected output of startup: `On First Startup`","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"briantjs00"},"content":"Hello! I\u0027m Duke","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"briantjs00"},"content":"What can I do for you?","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"briantjs00"},"content":"Expected output of startup: `On Subsequent Startup - If no saved task`","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"briantjs00"},"content":"Hello! I\u0027m Duke","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"briantjs00"},"content":"No saved task recorded","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"briantjs00"},"content":"What can I do for you?","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"briantjs00"},"content":"Expected output of startup: `On Subsequent Startup - If there is are saved tasks`","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"briantjs00"},"content":"Hello! I\u0027m Duke","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"briantjs00"},"content":"Here are the tasks in your save list:","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"briantjs00"},"content":"1.[T][ ] study CS2113","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"briantjs00"},"content":"What can I do for you?","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"briantjs00"},"content":"### Note: The command inputs are not case-sensitive","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"briantjs00"},"content":"### Feature - Add Todo Task","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":67,"author":{"gitId":"briantjs00"},"content":"### `command` - todo","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"briantjs00"},"content":"Format: [command] [task description]","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":70,"author":{"gitId":"briantjs00"},"content":"Sample input:","lastModifiedDate":"2023-03-03"},{"lineNumber":71,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"briantjs00"},"content":"todo study CS2113","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"briantjs00"},"content":"Expected output:","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"briantjs00"},"content":"Roger! The Todo task has been added:","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"briantjs00"},"content":"[T][ ] study CS2113","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"briantjs00"},"content":"Now you have 1 in the list","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":83,"author":{"gitId":"briantjs00"},"content":"### Feature - Add DeadLine Task","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":85,"author":{"gitId":"briantjs00"},"content":"### `command` - deadline","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"briantjs00"},"content":"Format: [command] [task description]","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":88,"author":{"gitId":"briantjs00"},"content":"Sample input: ","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"briantjs00"},"content":"deadline submit ip /by 2359","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"briantjs00"},"content":"Expected output:","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":94,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"briantjs00"},"content":"Roger! The Deadline task has been added:","lastModifiedDate":"2023-03-03"},{"lineNumber":96,"author":{"gitId":"briantjs00"},"content":"    [D][ ] submit ip (by: 2359)","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"briantjs00"},"content":"Now you have 2 in the list","lastModifiedDate":"2023-03-03"},{"lineNumber":98,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":99,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":100,"author":{"gitId":"briantjs00"},"content":"### Feature - Add Event Task","lastModifiedDate":"2023-03-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":102,"author":{"gitId":"briantjs00"},"content":"### `command` - event","lastModifiedDate":"2023-03-03"},{"lineNumber":103,"author":{"gitId":"briantjs00"},"content":"Format: [command] [task description]","lastModifiedDate":"2023-03-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":105,"author":{"gitId":"briantjs00"},"content":"Sample input:","lastModifiedDate":"2023-03-03"},{"lineNumber":106,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":107,"author":{"gitId":"briantjs00"},"content":"event CS2113 Midterms /from 9am /to 10am","lastModifiedDate":"2023-03-03"},{"lineNumber":108,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":109,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":110,"author":{"gitId":"briantjs00"},"content":"Expected output:","lastModifiedDate":"2023-03-03"},{"lineNumber":111,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":112,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":113,"author":{"gitId":"briantjs00"},"content":"Roger! The Deadline task has been added:","lastModifiedDate":"2023-03-03"},{"lineNumber":114,"author":{"gitId":"briantjs00"},"content":"    [E][ ] CS2113 Midterms (from: 9am to: 10am)","lastModifiedDate":"2023-03-03"},{"lineNumber":115,"author":{"gitId":"briantjs00"},"content":"Now you have 3 in the list","lastModifiedDate":"2023-03-03"},{"lineNumber":116,"author":{"gitId":"briantjs00"},"content":"______________________________________________s______________","lastModifiedDate":"2023-03-03"},{"lineNumber":117,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":118,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":119,"author":{"gitId":"briantjs00"},"content":"### Feature - List out the Tasks","lastModifiedDate":"2023-03-03"},{"lineNumber":120,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":121,"author":{"gitId":"briantjs00"},"content":"### `command` - list","lastModifiedDate":"2023-03-03"},{"lineNumber":122,"author":{"gitId":"briantjs00"},"content":"Format: [command]","lastModifiedDate":"2023-03-03"},{"lineNumber":123,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":124,"author":{"gitId":"briantjs00"},"content":"Sample input:","lastModifiedDate":"2023-03-03"},{"lineNumber":125,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":126,"author":{"gitId":"briantjs00"},"content":"list","lastModifiedDate":"2023-03-03"},{"lineNumber":127,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":128,"author":{"gitId":"briantjs00"},"content":"Expected output:","lastModifiedDate":"2023-03-03"},{"lineNumber":129,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":130,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":131,"author":{"gitId":"briantjs00"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-03-03"},{"lineNumber":132,"author":{"gitId":"briantjs00"},"content":"1.[T][ ] study CS2113","lastModifiedDate":"2023-03-03"},{"lineNumber":133,"author":{"gitId":"briantjs00"},"content":"2.[D][ ] submit ip (by: 2359)","lastModifiedDate":"2023-03-03"},{"lineNumber":134,"author":{"gitId":"briantjs00"},"content":"3.[E][ ] CS2113 Midterms (from: 9am to: 10am)","lastModifiedDate":"2023-03-03"},{"lineNumber":135,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":136,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":137,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":138,"author":{"gitId":"briantjs00"},"content":"### Feature - Marking Task Done","lastModifiedDate":"2023-03-03"},{"lineNumber":139,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":140,"author":{"gitId":"briantjs00"},"content":"### `command` - mark","lastModifiedDate":"2023-03-03"},{"lineNumber":141,"author":{"gitId":"briantjs00"},"content":"Format: [command] [task index]","lastModifiedDate":"2023-03-03"},{"lineNumber":142,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":143,"author":{"gitId":"briantjs00"},"content":"Sample input:","lastModifiedDate":"2023-03-03"},{"lineNumber":144,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":145,"author":{"gitId":"briantjs00"},"content":"mark 1","lastModifiedDate":"2023-03-03"},{"lineNumber":146,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":147,"author":{"gitId":"briantjs00"},"content":"Expected output:","lastModifiedDate":"2023-03-03"},{"lineNumber":148,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":149,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":150,"author":{"gitId":"briantjs00"},"content":"Awesome! I\u0027ve mark this task as done:","lastModifiedDate":"2023-03-03"},{"lineNumber":151,"author":{"gitId":"briantjs00"},"content":"[X] study CS2113","lastModifiedDate":"2023-03-03"},{"lineNumber":152,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":153,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":154,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":155,"author":{"gitId":"briantjs00"},"content":"### Feature - Marking Task Undone","lastModifiedDate":"2023-03-03"},{"lineNumber":156,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":157,"author":{"gitId":"briantjs00"},"content":"### `command` - unmark","lastModifiedDate":"2023-03-03"},{"lineNumber":158,"author":{"gitId":"briantjs00"},"content":"Format: [command] [task index]","lastModifiedDate":"2023-03-03"},{"lineNumber":159,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":160,"author":{"gitId":"briantjs00"},"content":"Sample input:","lastModifiedDate":"2023-03-03"},{"lineNumber":161,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":162,"author":{"gitId":"briantjs00"},"content":"unmark 1","lastModifiedDate":"2023-03-03"},{"lineNumber":163,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":164,"author":{"gitId":"briantjs00"},"content":"Expected output:","lastModifiedDate":"2023-03-03"},{"lineNumber":165,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":166,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":167,"author":{"gitId":"briantjs00"},"content":"What!?!? OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-03-03"},{"lineNumber":168,"author":{"gitId":"briantjs00"},"content":"[ ] study CS2113","lastModifiedDate":"2023-03-03"},{"lineNumber":169,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":170,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":171,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":172,"author":{"gitId":"briantjs00"},"content":"### Feature - Deleting Task from list","lastModifiedDate":"2023-03-03"},{"lineNumber":173,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":174,"author":{"gitId":"briantjs00"},"content":"### `command` - delete","lastModifiedDate":"2023-03-03"},{"lineNumber":175,"author":{"gitId":"briantjs00"},"content":"Format: [command] [task index]","lastModifiedDate":"2023-03-03"},{"lineNumber":176,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":177,"author":{"gitId":"briantjs00"},"content":"Sample input:","lastModifiedDate":"2023-03-03"},{"lineNumber":178,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":179,"author":{"gitId":"briantjs00"},"content":"delete 1","lastModifiedDate":"2023-03-03"},{"lineNumber":180,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":181,"author":{"gitId":"briantjs00"},"content":"Expected output:","lastModifiedDate":"2023-03-03"},{"lineNumber":182,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":183,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":184,"author":{"gitId":"briantjs00"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-03-03"},{"lineNumber":185,"author":{"gitId":"briantjs00"},"content":"  [T][ ] study CS2113","lastModifiedDate":"2023-03-03"},{"lineNumber":186,"author":{"gitId":"briantjs00"},"content":"Now you have 2 tasks in the list","lastModifiedDate":"2023-03-03"},{"lineNumber":187,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":188,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":189,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":190,"author":{"gitId":"briantjs00"},"content":"### Feature - Finding Task/s from Keyword","lastModifiedDate":"2023-03-03"},{"lineNumber":191,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":192,"author":{"gitId":"briantjs00"},"content":"### `command` - find","lastModifiedDate":"2023-03-03"},{"lineNumber":193,"author":{"gitId":"briantjs00"},"content":"Format: [command] [keyword]","lastModifiedDate":"2023-03-03"},{"lineNumber":194,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":195,"author":{"gitId":"briantjs00"},"content":"Sample input:","lastModifiedDate":"2023-03-03"},{"lineNumber":196,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":197,"author":{"gitId":"briantjs00"},"content":"find CS2113","lastModifiedDate":"2023-03-03"},{"lineNumber":198,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":199,"author":{"gitId":"briantjs00"},"content":"Expected output:","lastModifiedDate":"2023-03-03"},{"lineNumber":200,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":201,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":202,"author":{"gitId":"briantjs00"},"content":"Here are the matching tasks in your save list:","lastModifiedDate":"2023-03-03"},{"lineNumber":203,"author":{"gitId":"briantjs00"},"content":"1.[E][ ] CS2113 Midterms (from: 9am to: 10am)","lastModifiedDate":"2023-03-03"},{"lineNumber":204,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":205,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":206,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":207,"author":{"gitId":"briantjs00"},"content":"### Feature - Exit","lastModifiedDate":"2023-03-03"},{"lineNumber":208,"author":{"gitId":"briantjs00"},"content":"This will close Duke.","lastModifiedDate":"2023-03-03"},{"lineNumber":209,"author":{"gitId":"briantjs00"},"content":"### `command` - bye","lastModifiedDate":"2023-03-03"},{"lineNumber":210,"author":{"gitId":"briantjs00"},"content":"Format: [command]","lastModifiedDate":"2023-03-03"},{"lineNumber":211,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":212,"author":{"gitId":"briantjs00"},"content":"Sample input:","lastModifiedDate":"2023-03-03"},{"lineNumber":213,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":214,"author":{"gitId":"briantjs00"},"content":"bye","lastModifiedDate":"2023-03-03"},{"lineNumber":215,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":216,"author":{"gitId":"briantjs00"},"content":"Expected output:","lastModifiedDate":"2023-03-03"},{"lineNumber":217,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":218,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":219,"author":{"gitId":"briantjs00"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2023-03-03"},{"lineNumber":220,"author":{"gitId":"briantjs00"},"content":"____________________________________________________________","lastModifiedDate":"2023-03-03"},{"lineNumber":221,"author":{"gitId":"briantjs00"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":222,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":223,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"-":15,"briantjs00":208}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"import commandProcessor.CommandProcessor;","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":"import storage.TaskStorage;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"import task.*;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"import static task.TaskList.*;","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"import static ui.UI.*;","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":"import static commandProcessor.CommandProcessor.*;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"briantjs00"},"content":"    private static TaskList tasks;","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"    public Duke(String dataPath){","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":"        TaskStorage.dataPath \u003d dataPath;","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"briantjs00"},"content":"        TaskStorage.loadSaveData();","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"briantjs00"},"content":"     * Run the program Duke to read and process the input given by user","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"briantjs00"},"content":"     * @exception DukeException addTodo error and runCommand error","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"briantjs00"},"content":"     * @see DukeException","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"briantjs00"},"content":"    public void run() {","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"briantjs00"},"content":"        start();","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"briantjs00"},"content":"        String input, command;","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"briantjs00"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"briantjs00"},"content":"        while (isRunning) {","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"briantjs00"},"content":"            Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"briantjs00"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"briantjs00"},"content":"            command \u003d input.split(\" \")[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"briantjs00"},"content":"            try {","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"briantjs00"},"content":"                CommandProcessor.runCommand(input, command, tasks);","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"briantjs00"},"content":"                isRunning \u003d getIsRunningStatus();","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"briantjs00"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"briantjs00"},"content":"                printError(e);","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"briantjs00"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"briantjs00"},"content":"        new Duke(\"tasks.txt\").run();","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":5,"briantjs00":40}},{"path":"src/main/java/Exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"package exceptions;","lastModifiedDate":"2023-02-16"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"briantjs00":7}},{"path":"src/main/java/commandProcessor/CommandProcessor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"package commandProcessor;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":"import task.TaskList;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"import static storage.TaskStorage.writeSaveData;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"import static task.TaskList.*;","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"import static ui.UI.bye;","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"briantjs00"},"content":" * This class processes all the command inputs from the user","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"briantjs00"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"public class CommandProcessor {","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"    private static String ERROR_MESSAGE \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":"    private static boolean isRunning \u003d true;","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"briantjs00"},"content":"    public static void setIsRunning(boolean running) {","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"        isRunning \u003d running;","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"briantjs00"},"content":"    public static boolean getIsRunningStatus() {","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"briantjs00"},"content":"        return isRunning;","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"briantjs00"},"content":"     * This method reads the command given by the user and perform its respective command tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"briantjs00"},"content":"     * The input parameter is the task description given by the user and it is used to create the new task.","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"briantjs00"},"content":"     * The tasks parameter is the task list used for storing the added tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"briantjs00"},"content":"     * @param input","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"briantjs00"},"content":"     * @param command","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"briantjs00"},"content":"     * @param tasks","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"briantjs00"},"content":"     * @throws DukeException on wrong input of command","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"briantjs00"},"content":"    public static void runCommand(String input, String command, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"briantjs00"},"content":"        if (command.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"briantjs00"},"content":"            bye();","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"briantjs00"},"content":"            setIsRunning(false);","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"briantjs00"},"content":"        } else if (command.equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"briantjs00"},"content":"            addTodo(input);","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"briantjs00"},"content":"        } else if (command.equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"briantjs00"},"content":"            addDeadline(input);","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"briantjs00"},"content":"        } else if (command.equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"briantjs00"},"content":"            addEvent(input);","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"briantjs00"},"content":"        } else if (command.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"briantjs00"},"content":"            printList();","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"briantjs00"},"content":"        } else if (command.equalsIgnoreCase(\"mark\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"briantjs00"},"content":"            int taskIdx \u003d Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"briantjs00"},"content":"            markTask(taskIdx);","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"briantjs00"},"content":"        } else if (command.equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"briantjs00"},"content":"            int taskIdx \u003d Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"briantjs00"},"content":"            unmarkTask(taskIdx);","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"briantjs00"},"content":"        } else if (command.equalsIgnoreCase(\"find\")) {","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"briantjs00"},"content":"            findTask(input.split(\" \")[1]);","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"briantjs00"},"content":"        } else if (command.equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"briantjs00"},"content":"            int taskIdx \u003d Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"briantjs00"},"content":"            deleteTask(taskIdx);","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"briantjs00"},"content":"        } else {","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"briantjs00"},"content":"            throw new DukeException(ERROR_MESSAGE);","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"briantjs00"},"content":"        writeSaveData(tasks);","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"briantjs00"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"briantjs00":61}},{"path":"src/main/java/storage/DataParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"package storage;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"import static task.TaskList.*;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":" * This class parses all the data retrieved from the save file and","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":" * add the retrieved tasks into DUKE.","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"public class DataParser {","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"briantjs00"},"content":"    public static void parseTodo(String data) {","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"briantjs00"},"content":"        String task \u003d data.split(\"|\",5)[4];","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"        String status \u003d data.split(\"|\",5)[2];","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"        addTodoData(task, status);","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"briantjs00"},"content":"    public static void parseDeadline(String data) {","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"        String task \u003d data.split(\"|\",5)[4];","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"briantjs00"},"content":"        String status \u003d data.split(\"|\",5)[2];","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"briantjs00"},"content":"        addDeadlineData(task, status);","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"briantjs00"},"content":"    public static void parseEvent(String data) {","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"briantjs00"},"content":"        String task \u003d data.split(\"|\", 5)[4];","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"briantjs00"},"content":"        String status \u003d data.split(\"|\", 5)[2];","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"briantjs00"},"content":"        addEventData(task, status);","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"briantjs00"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"briantjs00":27}},{"path":"src/main/java/storage/TaskStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"package storage;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"import task.Task;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"import java.io.File;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"import static storage.DataParser.*;","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"briantjs00"},"content":"import static task.TaskList.*;","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"briantjs00"},"content":"import static ui.UI.*;","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"/**","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":" * This class manages the save file that stores tasks data into the computer disk","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"briantjs00"},"content":"public class TaskStorage {","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"    public static String dataPath;","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"briantjs00"},"content":"    private static FileWriter dataFile;","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"briantjs00"},"content":"    public TaskStorage(){","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"briantjs00"},"content":"        this.dataPath \u003d dataPath;","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"briantjs00"},"content":"    public static void writeSaveData(TaskList tasks) {","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"briantjs00"},"content":"        try {","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"briantjs00"},"content":"            dataFile \u003d new FileWriter(dataPath);","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"briantjs00"},"content":"            for(Task t: tasks.list) {","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"briantjs00"},"content":"                String task \u003d t.description;","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"briantjs00"},"content":"                String taskType \u003d t.getTaskType();","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"briantjs00"},"content":"                String status \u003d t.getStatusIcon();","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"briantjs00"},"content":"                String data;","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"briantjs00"},"content":"                if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"briantjs00"},"content":"                    data \u003d String.format(\"%s|%s|%s\", taskType, status, task);","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"briantjs00"},"content":"                    dataFile.write(data + System.lineSeparator());","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"briantjs00"},"content":"                } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"briantjs00"},"content":"                    data \u003d String.format(\"%s|%s|%s\", taskType, status, task);","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"briantjs00"},"content":"                    dataFile.write(data + System.lineSeparator());","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"briantjs00"},"content":"                } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"briantjs00"},"content":"                    data \u003d String.format(\"%s|%s|%s\", taskType, status, task);","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"briantjs00"},"content":"                    dataFile.write(data + System.lineSeparator());","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"briantjs00"},"content":"                }","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"briantjs00"},"content":"            }","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"briantjs00"},"content":"            dataFile.close();","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"briantjs00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"briantjs00"},"content":"            writeSaveDataERROR();","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"briantjs00"},"content":"    public static void loadSaveData() {","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"briantjs00"},"content":"        try {","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"briantjs00"},"content":"            File saveData \u003d new File(dataPath);","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"briantjs00"},"content":"            greet();","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"briantjs00"},"content":"            if (!saveData.createNewFile()) {","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"briantjs00"},"content":"                Scanner readData \u003d new Scanner(saveData);","lastModifiedDate":"2023-02-28"},{"lineNumber":55,"author":{"gitId":"briantjs00"},"content":"                while (readData.hasNext()) {","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"briantjs00"},"content":"                    String data \u003d readData.nextLine();","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"briantjs00"},"content":"                    String taskType \u003d data.split(\"|\", 5)[0];","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"briantjs00"},"content":"                    if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"briantjs00"},"content":"                        parseTodo(data);","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"briantjs00"},"content":"                    } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"briantjs00"},"content":"                        parseDeadline(data);","lastModifiedDate":"2023-02-28"},{"lineNumber":62,"author":{"gitId":"briantjs00"},"content":"                    } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"briantjs00"},"content":"                        parseEvent(data);","lastModifiedDate":"2023-02-28"},{"lineNumber":64,"author":{"gitId":"briantjs00"},"content":"                    }","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"briantjs00"},"content":"                }","lastModifiedDate":"2023-02-28"},{"lineNumber":66,"author":{"gitId":"briantjs00"},"content":"                loadSaveList();","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"briantjs00"},"content":"            }","lastModifiedDate":"2023-02-28"},{"lineNumber":68,"author":{"gitId":"briantjs00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-28"},{"lineNumber":69,"author":{"gitId":"briantjs00"},"content":"            loadSaveDataERROR();","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":71,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":72,"author":{"gitId":"briantjs00"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"briantjs00":72}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"package task;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"    public Deadline(String description) {","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":"        super(description);","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"    private String getDate() {","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":"        return this.description.split(\"/by\")[1];","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"briantjs00"},"content":"    private String getTask() {","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"        return this.description.split(\"/by\")[0].split(\" \",2)[1];","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"briantjs00"},"content":"    public String toString() {","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"        return (\"[D]\" + super.toString() + getTask() + \"(by:\" + getDate() + \")\");","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"briantjs00"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"briantjs00":19}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"package task;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"    public Event(String description) {","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":"        super(description);","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"    private String getStartEvent() {","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":"        return this.description.split(\"/from\")[1].split(\"/\")[0];","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"briantjs00"},"content":"    private String getEndEvent() {","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"        return this.description.split(\"/from\")[1].split(\"/to\")[1];","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":"    private String getTask() {","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"briantjs00"},"content":"        return this.description.split(\"/from\")[0].split(\" \",2)[1];","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"briantjs00"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"briantjs00"},"content":"    public String toString() {","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"briantjs00"},"content":"        return (\"[E]\" + super.toString() + getTask() + \"(from:\" + getStartEvent() + \"to:\" + getEndEvent()+ \")\");","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"briantjs00"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"briantjs00":23}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"package task;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"public class Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":"    public String description;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"    public String taskType;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":"    public Task(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"briantjs00"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"    public void setTaskType(String taskType) {","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"briantjs00"},"content":"        return this.taskType;","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"briantjs00"},"content":"    public void markDone() {","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"briantjs00"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"briantjs00"},"content":"    public void markUndone() {","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"briantjs00"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"briantjs00"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"briantjs00"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"briantjs00"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"briantjs00"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"briantjs00"},"content":"        return (\"[\" + this.getStatusIcon() + \"] \");","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"briantjs00"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"briantjs00":37}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"package task;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"import static ui.UI.greet;","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":"public class TaskList {","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"    private static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"briantjs00"},"content":"    private static final String TODO_ERROR \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"briantjs00"},"content":"    public static ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":"        list \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"briantjs00"},"content":"     * Delete the task from the list indicated by the index argument from the user input. The index parameter is","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"briantjs00"},"content":"     * the index of the task in the list.","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"briantjs00"},"content":"     * @param index","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"briantjs00"},"content":"    public static void deleteTask(int index) {","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"  \" + list.get(index).toString());","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"briantjs00"},"content":"        list.remove(index);","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"briantjs00"},"content":"        int size \u003d list.size();","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list\");","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"briantjs00"},"content":"     * Mark the indicated task to be done in the list. The index parameter is the index of the task in the list.","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"briantjs00"},"content":"     * @param index","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"briantjs00"},"content":"    public static void markTask(int index) {","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"briantjs00"},"content":"        list.get(index).markDone();","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"Awesome! I\u0027ve mark this task as done:\");","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"[\" + list.get(index).getStatusIcon() + \"] \" + list.get(index).description.split(\" \", 2)[1]);","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"briantjs00"},"content":"     * Mark the indicated task to be not done in the list. The index parameter is the index of the task in the list.","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"briantjs00"},"content":"     * @param index","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"briantjs00"},"content":"    public static void unmarkTask(int index) {","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"briantjs00"},"content":"        list.get(index).markUndone();","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"What!?!? OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"[\" + list.get(index).getStatusIcon() + \"] \" + list.get(index).description.split(\" \", 2)[1]);","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":55,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"briantjs00"},"content":"     * Create and add a TodoTask into the list. Print the confirmation of the added task.","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"briantjs00"},"content":"     * The input parameter is the TodoTask description typed by the user.","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"briantjs00"},"content":"     * @param input","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"briantjs00"},"content":"     * @throws DukeException if length of task description less than 2","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"briantjs00"},"content":"    public static void addTodo(String input) throws DukeException {","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"briantjs00"},"content":"        try {","lastModifiedDate":"2023-02-28"},{"lineNumber":64,"author":{"gitId":"briantjs00"},"content":"            Todo task \u003d new Todo(input);","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"briantjs00"},"content":"            task.setTaskType(\"T\");","lastModifiedDate":"2023-02-28"},{"lineNumber":66,"author":{"gitId":"briantjs00"},"content":"            list.add(task);","lastModifiedDate":"2023-02-28"},{"lineNumber":67,"author":{"gitId":"briantjs00"},"content":"            if (task.description.split(\" \").length \u003c 2) {","lastModifiedDate":"2023-02-28"},{"lineNumber":68,"author":{"gitId":"briantjs00"},"content":"                throw new DukeException(TODO_ERROR);","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"briantjs00"},"content":"            } else {","lastModifiedDate":"2023-02-28"},{"lineNumber":70,"author":{"gitId":"briantjs00"},"content":"                System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":71,"author":{"gitId":"briantjs00"},"content":"                System.out.println(\"Roger! The Todo task has been added: \\n\" + task.toString());","lastModifiedDate":"2023-02-28"},{"lineNumber":72,"author":{"gitId":"briantjs00"},"content":"                System.out.println(\"Now you have \" + list.size() + \" in the list\");","lastModifiedDate":"2023-02-28"},{"lineNumber":73,"author":{"gitId":"briantjs00"},"content":"                System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"briantjs00"},"content":"            }","lastModifiedDate":"2023-02-28"},{"lineNumber":75,"author":{"gitId":"briantjs00"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-28"},{"lineNumber":76,"author":{"gitId":"briantjs00"},"content":"            printError(e);","lastModifiedDate":"2023-02-28"},{"lineNumber":77,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":78,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":79,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":80,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"briantjs00"},"content":"     * Create and add a Deadline Task into the list. Print the confirmation of the added task.","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"briantjs00"},"content":"     * The input parameter is the Deadline Task description.","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"briantjs00"},"content":"     * @param input","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"briantjs00"},"content":"    public static void addDeadline(String input) {","lastModifiedDate":"2023-02-28"},{"lineNumber":86,"author":{"gitId":"briantjs00"},"content":"        Deadline task \u003d new Deadline(input);","lastModifiedDate":"2023-02-28"},{"lineNumber":87,"author":{"gitId":"briantjs00"},"content":"        task.setTaskType(\"D\");","lastModifiedDate":"2023-02-28"},{"lineNumber":88,"author":{"gitId":"briantjs00"},"content":"        list.add(task);","lastModifiedDate":"2023-02-28"},{"lineNumber":89,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":90,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"Roger! The Deadline task has been added: \\n    \" + task.toString());","lastModifiedDate":"2023-02-28"},{"lineNumber":91,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"Now you have \" + list.size() + \" in the list\");","lastModifiedDate":"2023-02-28"},{"lineNumber":92,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":93,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":94,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":95,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":96,"author":{"gitId":"briantjs00"},"content":"     * Create and add a Event Task into the list. Print the confirmation of the added task.","lastModifiedDate":"2023-03-01"},{"lineNumber":97,"author":{"gitId":"briantjs00"},"content":"     * The input parameter is the Event Task description.","lastModifiedDate":"2023-03-03"},{"lineNumber":98,"author":{"gitId":"briantjs00"},"content":"     * @param input","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":100,"author":{"gitId":"briantjs00"},"content":"    public static void addEvent(String input) {","lastModifiedDate":"2023-02-28"},{"lineNumber":101,"author":{"gitId":"briantjs00"},"content":"        Event task \u003d new Event(input);","lastModifiedDate":"2023-02-28"},{"lineNumber":102,"author":{"gitId":"briantjs00"},"content":"        task.setTaskType(\"E\");","lastModifiedDate":"2023-02-28"},{"lineNumber":103,"author":{"gitId":"briantjs00"},"content":"        list.add(task);","lastModifiedDate":"2023-02-28"},{"lineNumber":104,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":105,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"Roger! The Deadline task has been added: \\n    \" + task.toString());","lastModifiedDate":"2023-02-28"},{"lineNumber":106,"author":{"gitId":"briantjs00"},"content":"        System.out.println(\"Now you have \" + list.size() + \" in the list\");","lastModifiedDate":"2023-02-28"},{"lineNumber":107,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":108,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":109,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":110,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":111,"author":{"gitId":"briantjs00"},"content":"     * Create and add existing TodoTask from the save file into the list. The input parameter is the saved task","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"briantjs00"},"content":"     * description data from the save file. The status parameter is to determine whether saved task is mark done","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"briantjs00"},"content":"     * mark undone.","lastModifiedDate":"2023-03-01"},{"lineNumber":114,"author":{"gitId":"briantjs00"},"content":"     * @param input","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"briantjs00"},"content":"     * @param status","lastModifiedDate":"2023-03-01"},{"lineNumber":116,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":117,"author":{"gitId":"briantjs00"},"content":"    public static void addTodoData(String input, String status) {","lastModifiedDate":"2023-02-28"},{"lineNumber":118,"author":{"gitId":"briantjs00"},"content":"            Todo task \u003d new Todo(input);","lastModifiedDate":"2023-02-28"},{"lineNumber":119,"author":{"gitId":"briantjs00"},"content":"            if (status.equals(\"X\")) {","lastModifiedDate":"2023-02-28"},{"lineNumber":120,"author":{"gitId":"briantjs00"},"content":"                task.markDone();","lastModifiedDate":"2023-02-28"},{"lineNumber":121,"author":{"gitId":"briantjs00"},"content":"            }","lastModifiedDate":"2023-02-28"},{"lineNumber":122,"author":{"gitId":"briantjs00"},"content":"            task.setTaskType(\"T\");","lastModifiedDate":"2023-02-28"},{"lineNumber":123,"author":{"gitId":"briantjs00"},"content":"            list.add(task);","lastModifiedDate":"2023-02-28"},{"lineNumber":124,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":125,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":126,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":127,"author":{"gitId":"briantjs00"},"content":"     * Create and add existing Deadline Task from the save file into the list. The input parameter is the saved task","lastModifiedDate":"2023-03-01"},{"lineNumber":128,"author":{"gitId":"briantjs00"},"content":"     * description data from the save file. The status parameter is to determine whether saved task is mark done","lastModifiedDate":"2023-03-01"},{"lineNumber":129,"author":{"gitId":"briantjs00"},"content":"     * mark undone.","lastModifiedDate":"2023-03-01"},{"lineNumber":130,"author":{"gitId":"briantjs00"},"content":"     * @param input","lastModifiedDate":"2023-03-01"},{"lineNumber":131,"author":{"gitId":"briantjs00"},"content":"     * @param status","lastModifiedDate":"2023-03-01"},{"lineNumber":132,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":133,"author":{"gitId":"briantjs00"},"content":"    public static void addDeadlineData(String input, String status) {","lastModifiedDate":"2023-02-28"},{"lineNumber":134,"author":{"gitId":"briantjs00"},"content":"        Deadline task \u003d new Deadline(input);","lastModifiedDate":"2023-02-28"},{"lineNumber":135,"author":{"gitId":"briantjs00"},"content":"        if (status.equals(\"X\")) {","lastModifiedDate":"2023-02-28"},{"lineNumber":136,"author":{"gitId":"briantjs00"},"content":"            task.markDone();","lastModifiedDate":"2023-02-28"},{"lineNumber":137,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":138,"author":{"gitId":"briantjs00"},"content":"        task.setTaskType(\"D\");","lastModifiedDate":"2023-02-28"},{"lineNumber":139,"author":{"gitId":"briantjs00"},"content":"        list.add(task);","lastModifiedDate":"2023-02-28"},{"lineNumber":140,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":141,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":142,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":143,"author":{"gitId":"briantjs00"},"content":"     * Create and add existing Event Task from the save file into the list. The input parameter is the saved task","lastModifiedDate":"2023-03-01"},{"lineNumber":144,"author":{"gitId":"briantjs00"},"content":"     * description data from the save file. The status parameter is to determine whether saved task is mark done","lastModifiedDate":"2023-03-01"},{"lineNumber":145,"author":{"gitId":"briantjs00"},"content":"     * mark undone.","lastModifiedDate":"2023-03-01"},{"lineNumber":146,"author":{"gitId":"briantjs00"},"content":"     * @param input","lastModifiedDate":"2023-03-01"},{"lineNumber":147,"author":{"gitId":"briantjs00"},"content":"     * @param status","lastModifiedDate":"2023-03-01"},{"lineNumber":148,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":149,"author":{"gitId":"briantjs00"},"content":"    public static void addEventData(String input, String status) {","lastModifiedDate":"2023-02-28"},{"lineNumber":150,"author":{"gitId":"briantjs00"},"content":"        Event task \u003d new Event(input);","lastModifiedDate":"2023-02-28"},{"lineNumber":151,"author":{"gitId":"briantjs00"},"content":"        if (status.equals(\"X\")) {","lastModifiedDate":"2023-02-28"},{"lineNumber":152,"author":{"gitId":"briantjs00"},"content":"            task.markDone();","lastModifiedDate":"2023-02-28"},{"lineNumber":153,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":154,"author":{"gitId":"briantjs00"},"content":"        task.setTaskType(\"E\");","lastModifiedDate":"2023-02-28"},{"lineNumber":155,"author":{"gitId":"briantjs00"},"content":"        list.add(task);","lastModifiedDate":"2023-02-28"},{"lineNumber":156,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":157,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":158,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":159,"author":{"gitId":"briantjs00"},"content":"     * Print out all the task in the list. If the list is empty, print a text \"No task added yet\".","lastModifiedDate":"2023-03-01"},{"lineNumber":160,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":161,"author":{"gitId":"briantjs00"},"content":"    public static void printList() {","lastModifiedDate":"2023-02-28"},{"lineNumber":162,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":163,"author":{"gitId":"briantjs00"},"content":"        int numTask \u003d list.size();","lastModifiedDate":"2023-02-28"},{"lineNumber":164,"author":{"gitId":"briantjs00"},"content":"        if (numTask \u003d\u003d 0) {","lastModifiedDate":"2023-02-28"},{"lineNumber":165,"author":{"gitId":"briantjs00"},"content":"            System.out.println(\"No task added yet\");","lastModifiedDate":"2023-02-28"},{"lineNumber":166,"author":{"gitId":"briantjs00"},"content":"            System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":167,"author":{"gitId":"briantjs00"},"content":"        } else {","lastModifiedDate":"2023-02-28"},{"lineNumber":168,"author":{"gitId":"briantjs00"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-02-28"},{"lineNumber":169,"author":{"gitId":"briantjs00"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-02-28"},{"lineNumber":170,"author":{"gitId":"briantjs00"},"content":"                System.out.println((i+1) + \".\" + list.get(i).toString());","lastModifiedDate":"2023-02-28"},{"lineNumber":171,"author":{"gitId":"briantjs00"},"content":"            }","lastModifiedDate":"2023-02-28"},{"lineNumber":172,"author":{"gitId":"briantjs00"},"content":"            System.out.println(LINE);","lastModifiedDate":"2023-02-28"},{"lineNumber":173,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":174,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":175,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":176,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":177,"author":{"gitId":"briantjs00"},"content":"     * This method prints out the previous tasks stored in the save file to show the","lastModifiedDate":"2023-03-03"},{"lineNumber":178,"author":{"gitId":"briantjs00"},"content":"     * user what they had saved from their previous usage of Duke.","lastModifiedDate":"2023-03-03"},{"lineNumber":179,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":180,"author":{"gitId":"briantjs00"},"content":"    public static void loadSaveList() {","lastModifiedDate":"2023-03-01"},{"lineNumber":181,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":182,"author":{"gitId":"briantjs00"},"content":"        int numTask \u003d list.size();","lastModifiedDate":"2023-03-01"},{"lineNumber":183,"author":{"gitId":"briantjs00"},"content":"        if (numTask \u003d\u003d 0) {","lastModifiedDate":"2023-03-01"},{"lineNumber":184,"author":{"gitId":"briantjs00"},"content":"            System.out.println(\"No saved task recorded\");","lastModifiedDate":"2023-03-01"},{"lineNumber":185,"author":{"gitId":"briantjs00"},"content":"            System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":186,"author":{"gitId":"briantjs00"},"content":"        } else {","lastModifiedDate":"2023-03-01"},{"lineNumber":187,"author":{"gitId":"briantjs00"},"content":"            System.out.println(\"Here are the tasks in your save list:\");","lastModifiedDate":"2023-03-01"},{"lineNumber":188,"author":{"gitId":"briantjs00"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-03-01"},{"lineNumber":189,"author":{"gitId":"briantjs00"},"content":"                System.out.println((i+1) + \".\" + list.get(i).toString());","lastModifiedDate":"2023-03-01"},{"lineNumber":190,"author":{"gitId":"briantjs00"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":191,"author":{"gitId":"briantjs00"},"content":"            System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":192,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":193,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":194,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":195,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":196,"author":{"gitId":"briantjs00"},"content":"     * This method prints out the found tasks in the list to show the user","lastModifiedDate":"2023-03-03"},{"lineNumber":197,"author":{"gitId":"briantjs00"},"content":"     * which tasks were found from their find input.","lastModifiedDate":"2023-03-03"},{"lineNumber":198,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":199,"author":{"gitId":"briantjs00"},"content":"    private static void printFoundList(ArrayList\u003cTask\u003e foundTasks) {","lastModifiedDate":"2023-03-01"},{"lineNumber":200,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":201,"author":{"gitId":"briantjs00"},"content":"        int numTask \u003d foundTasks.size();","lastModifiedDate":"2023-03-01"},{"lineNumber":202,"author":{"gitId":"briantjs00"},"content":"        if (numTask \u003d\u003d 0) {","lastModifiedDate":"2023-03-01"},{"lineNumber":203,"author":{"gitId":"briantjs00"},"content":"            System.out.println(\"No task found\");","lastModifiedDate":"2023-03-01"},{"lineNumber":204,"author":{"gitId":"briantjs00"},"content":"            System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":205,"author":{"gitId":"briantjs00"},"content":"        } else {","lastModifiedDate":"2023-03-01"},{"lineNumber":206,"author":{"gitId":"briantjs00"},"content":"            System.out.println(\"Here are the matching tasks in your save list:\");","lastModifiedDate":"2023-03-01"},{"lineNumber":207,"author":{"gitId":"briantjs00"},"content":"            for (int i \u003d 0; i \u003c foundTasks.size(); i++) {","lastModifiedDate":"2023-03-01"},{"lineNumber":208,"author":{"gitId":"briantjs00"},"content":"                System.out.println((i+1) + \".\" + foundTasks.get(i).toString());","lastModifiedDate":"2023-03-01"},{"lineNumber":209,"author":{"gitId":"briantjs00"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":210,"author":{"gitId":"briantjs00"},"content":"            System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":211,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":212,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":213,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":214,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":215,"author":{"gitId":"briantjs00"},"content":"     * Stores the task containing the input keyed by the user into a list.","lastModifiedDate":"2023-03-03"},{"lineNumber":216,"author":{"gitId":"briantjs00"},"content":"     * @param input","lastModifiedDate":"2023-03-03"},{"lineNumber":217,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":218,"author":{"gitId":"briantjs00"},"content":"    public static void findTask(String input) {","lastModifiedDate":"2023-03-01"},{"lineNumber":219,"author":{"gitId":"briantjs00"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-01"},{"lineNumber":220,"author":{"gitId":"briantjs00"},"content":"        for(Task t : list) {","lastModifiedDate":"2023-03-01"},{"lineNumber":221,"author":{"gitId":"briantjs00"},"content":"            String task \u003d t.description;","lastModifiedDate":"2023-03-01"},{"lineNumber":222,"author":{"gitId":"briantjs00"},"content":"            if (task.contains(input)) {","lastModifiedDate":"2023-03-01"},{"lineNumber":223,"author":{"gitId":"briantjs00"},"content":"                foundTasks.add(t);","lastModifiedDate":"2023-03-01"},{"lineNumber":224,"author":{"gitId":"briantjs00"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":225,"author":{"gitId":"briantjs00"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":226,"author":{"gitId":"briantjs00"},"content":"        printFoundList(foundTasks);","lastModifiedDate":"2023-03-01"},{"lineNumber":227,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":228,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":229,"author":{"gitId":"briantjs00"},"content":"    public static void printError(DukeException e) {","lastModifiedDate":"2023-02-28"},{"lineNumber":230,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE + System.lineSeparator() + e.getMessage() + System.lineSeparator() + LINE );","lastModifiedDate":"2023-02-28"},{"lineNumber":231,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":232,"author":{"gitId":"briantjs00"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"briantjs00":232}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"package task;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"    public String getTask() {","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":"        return this.description.split(\" \",2)[1];","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"briantjs00"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"        return (\"[T]\" + super.toString() + getTask());","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"briantjs00":15}},{"path":"src/main/java/ui/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"briantjs00"},"content":"package ui;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"briantjs00"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"briantjs00"},"content":" * User interaction of Duke by printing out the respective messages","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"briantjs00"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"briantjs00"},"content":"public class UI {","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"briantjs00"},"content":"    private static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"briantjs00"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"briantjs00"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"briantjs00"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"briantjs00"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"briantjs00"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"briantjs00"},"content":"    private static final String GREET \u003d \"Hello! I\u0027m Duke\";","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"briantjs00"},"content":"    private static final String START \u003d \"What can I do for you?\";","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"briantjs00"},"content":"    private static final String BYE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"briantjs00"},"content":"    private static final String WRITE_DATA_ERROR \u003d \"WRITE SAVE DATA ERROR\";","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"    private static final String LOAD_DATA_ERROR \u003d \"LOAD SAVE DATA ERROR\";","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"briantjs00"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"briantjs00"},"content":"     * Print out the logo and greet the user","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"briantjs00"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"briantjs00"},"content":"    public static void greet() {","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LOGO);","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"briantjs00"},"content":"        System.out.println(GREET);","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"briantjs00"},"content":"    public static void start() {","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"briantjs00"},"content":"        System.out.println(START);","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"briantjs00"},"content":"    public static void bye() {","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"briantjs00"},"content":"        System.out.println(BYE);","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"briantjs00"},"content":"    public static void writeSaveDataERROR() {","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"briantjs00"},"content":"        System.out.println(WRITE_DATA_ERROR);","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"briantjs00"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"briantjs00"},"content":"    public static void loadSaveDataERROR() {","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LOAD_DATA_ERROR);","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"briantjs00"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"briantjs00"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"briantjs00"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"briantjs00":52}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"briantjs00"},"content":"REM run the program, feed task from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"briantjs00":1}}]
