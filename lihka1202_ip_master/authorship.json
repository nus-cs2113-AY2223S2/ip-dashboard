[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"Duke is a CLI based task-mananger. Duke can keep track of a variety of tasks, while also ensuring that this process is secure and seamless.","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"The user guide serves as a handbook for users who wish to do two main things:","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"- Understand more about what Duke can/cannot do","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"- Maximise their use cases for Duke as a personal Task Manager","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"The handbook is catered to users who are new to CLI based platforms therefore most parts are kept concicse and are filled with examples, however some parts might appear verbose to advanced users. Regardless, users are encouraged to read the whole guide, in the order specified in the [Table of Contents](#table-of-contents). Advanced users can check out the apprendix which delves deeper into the kind of inputs the commands can handle.","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"# Table of Contents","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":"- [User Guide](#user-guide)","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":"- [Start](#starting-procedures)","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":"- [Features](#features)","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":"  - [Add A Task](#add-a-task)","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":"    - [Todo](#todo)","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"    - [Deadline](#deadline)","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"    - [Event](#event)","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"  - [List](#list)","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"  - [Mark](#mark)","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"  - [Unmark](#unmark)","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"  - [Delete](#delete)","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"  - [Find](#find)","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"  - [Help](#help)","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"  - [Bye](#bye)","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"- [Appendix](#appendix)","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"# Starting Procedures","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"If you\u0027re new to CLIs as a whole, fret not. Here is a list of things you would need to do to get started:","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"- Firstly, you would need to download the `ip.jar` file.","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"- Move that file to a different folder, preferably if you create a new folder called `dukeTesting` specifically for this. Even if you do not do so, it is perfectly fine, this is because the `dukeData.txt` will spawn in the same directory you run the `ip.jar` file from. ","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"- Next, you would need to check if your system has atleast java 11 running, any higher version is fine but `Duke` was built on java 11 so its good to know that.","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"- Now you\u0027re ready to start running Duke! Head over to the directory where the `ip.jar` file is and run the following command `java -jar ip.jar`","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"- You would see the following loading screen:","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"Initializing Data collection sites......................","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"Initializing Duke packages..............................","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"Initializing corefunctioanlities........................","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"Initializing Duke.......................................","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"Initializing ExceptionHandler...........................","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"Initializing TaskList...................................","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"Initializing Ui.........................................","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"corefunctionalities complete............................","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"Initializing datatypes..................................","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"Initializing Tasks......................................","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"Initializing Events.....................................","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"Initializing Deadlines..................................","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"Initializing Todos......................................","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"Initializing TaskFileHandler............................","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"datatypes complete......................................","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"- This means that Duke is up and booting, soon you would arrive at a screen that greets you like this:","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"Hello from","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":" ____        _        ","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"|  _ \\ _   _| | _____ ","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"| | | | | | | |/ / _ \\","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"| |_| | |_| |   \u003c  __/","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"|____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"Hello! I\u0027m Duke","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"What can I do for you?","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"If you are unsure of the commands, type \u0027help\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":68,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":69,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":70,"author":{"gitId":"lihka1202"},"content":"- The next part on the guide will inform you on what are some features and how should a user use them","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"lihka1202"},"content":"# Features","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"lihka1202"},"content":"The features and potential use cases are listed below","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"lihka1202"},"content":"## Add a `Task`","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"lihka1202"},"content":"Duke can support three main kinds of `Tasks`. Duke is able to differentiate between these three kinds of `Tasks` based on the keywords alloted to each task.","lastModifiedDate":"2023-02-26"},{"lineNumber":77,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":78,"author":{"gitId":"lihka1202"},"content":"### `todo`","lastModifiedDate":"2023-02-26"},{"lineNumber":79,"author":{"gitId":"lihka1202"},"content":"A simple task which a user needs to complete. A `todo` **must be accompanied with a description of the task**. Additionally, `todo` is *case sensitive*, hence typing `Todo` or `tODO` or anything else would be rejected by Duke (as you will see below). ","lastModifiedDate":"2023-02-26"},{"lineNumber":80,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"lihka1202"},"content":"Hence this is the format of any todo:","lastModifiedDate":"2023-02-26"},{"lineNumber":82,"author":{"gitId":"lihka1202"},"content":"`todo \u003cDESCRIPTION_OF_TASK\u003e`","lastModifiedDate":"2023-02-26"},{"lineNumber":83,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":84,"author":{"gitId":"lihka1202"},"content":"Here is an example of how todo is used:","lastModifiedDate":"2023-02-26"},{"lineNumber":85,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":86,"author":{"gitId":"lihka1202"},"content":"#### Normal todo example","lastModifiedDate":"2023-02-26"},{"lineNumber":87,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":88,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"lihka1202"},"content":"todo get milk","lastModifiedDate":"2023-02-26"},{"lineNumber":90,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"lihka1202"},"content":"\tGot it. I\u0027ve added this task:","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"lihka1202"},"content":"\t\t[T][ ] get milk","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"lihka1202"},"content":"\tNow you have 1 task in the list","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":97,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":98,"author":{"gitId":"lihka1202"},"content":"In the case above, the description of the todo is *get milk*.","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":100,"author":{"gitId":"lihka1202"},"content":"More detailed examples of how Duke handles other `todo` outputs can be found in the [More examples on todo](Appendix#More-examples-on-todo) section.","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"lihka1202"},"content":"### `deadline`","lastModifiedDate":"2023-02-26"},{"lineNumber":103,"author":{"gitId":"lihka1202"},"content":"A simple `Task` which a user needs to complete **by a certain deadline**. A deadline must be accompanied by a **description, a \u0027/by\u0027 term and a deadline in a certain format**. Like `todo`, `deadline` is also case senstive.","lastModifiedDate":"2023-02-26"},{"lineNumber":104,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":105,"author":{"gitId":"lihka1202"},"content":"The format of the deadline is as such:","lastModifiedDate":"2023-02-26"},{"lineNumber":106,"author":{"gitId":"lihka1202"},"content":"`deadline \u003cDESCRIPTION_OF_TASK\u003e /by yyyy-mm-dd`","lastModifiedDate":"2023-02-26"},{"lineNumber":107,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":108,"author":{"gitId":"lihka1202"},"content":"Here is an example of how `deadline` is used. ","lastModifiedDate":"2023-02-26"},{"lineNumber":109,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":110,"author":{"gitId":"lihka1202"},"content":"#### Normal Deadline Example","lastModifiedDate":"2023-02-26"},{"lineNumber":111,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":112,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":113,"author":{"gitId":"lihka1202"},"content":"deadline get milk /by 2023-02-27","lastModifiedDate":"2023-02-26"},{"lineNumber":114,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":115,"author":{"gitId":"lihka1202"},"content":"\tGot it. I\u0027ve added this task:","lastModifiedDate":"2023-02-26"},{"lineNumber":116,"author":{"gitId":"lihka1202"},"content":"\t\t[D][ ] get milk (by: Feb 27 2023)","lastModifiedDate":"2023-02-26"},{"lineNumber":117,"author":{"gitId":"lihka1202"},"content":"\tNow you have 2 tasks in the list","lastModifiedDate":"2023-02-26"},{"lineNumber":118,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":119,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":120,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":121,"author":{"gitId":"lihka1202"},"content":"Note that `2023-02-27` follows the `yyyy-mm-dd` format","lastModifiedDate":"2023-02-26"},{"lineNumber":122,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":123,"author":{"gitId":"lihka1202"},"content":"More detailed examples of how Duke handles other `todo` outputs can be found in the [More examples on deadline](Appendix#More-examples-on-deadline) section.","lastModifiedDate":"2023-02-26"},{"lineNumber":124,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":125,"author":{"gitId":"lihka1202"},"content":"### `event`","lastModifiedDate":"2023-02-26"},{"lineNumber":126,"author":{"gitId":"lihka1202"},"content":"A simple `Task` which a user needs to complete **between a range of dates**. An event must be accompanied by a **description, a \u0027/from\u0027 term, a \u0027/to\u0027 term and dates for the 2 terms in a specific format**. Like `todo` and `deadline`, `event` is also case sensitive.","lastModifiedDate":"2023-02-26"},{"lineNumber":127,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":128,"author":{"gitId":"lihka1202"},"content":"The format of the event task is as such:","lastModifiedDate":"2023-02-26"},{"lineNumber":129,"author":{"gitId":"lihka1202"},"content":"`event \u003cDESCRIPTION_OF_TASK\u003e /from yyyy-mm-dd /to yyyy-mm-dd`","lastModifiedDate":"2023-02-26"},{"lineNumber":130,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":131,"author":{"gitId":"lihka1202"},"content":"An example is listed below:","lastModifiedDate":"2023-02-26"},{"lineNumber":132,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":133,"author":{"gitId":"lihka1202"},"content":"#### Normal Event Example","lastModifiedDate":"2023-02-26"},{"lineNumber":134,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":135,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":136,"author":{"gitId":"lihka1202"},"content":"event CS2113 midterms /from 2023-03-03 /to 2023-03-04","lastModifiedDate":"2023-02-26"},{"lineNumber":137,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":138,"author":{"gitId":"lihka1202"},"content":"\tGot it. I\u0027ve added this task:","lastModifiedDate":"2023-02-26"},{"lineNumber":139,"author":{"gitId":"lihka1202"},"content":"\t\t[E][ ] CS2113 midterms (from: Mar 3 2023 to: Mar 4 2023)","lastModifiedDate":"2023-02-26"},{"lineNumber":140,"author":{"gitId":"lihka1202"},"content":"\tNow you have 1 task in the list","lastModifiedDate":"2023-02-26"},{"lineNumber":141,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":142,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":143,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":144,"author":{"gitId":"lihka1202"},"content":"Note the formats of the `/from` and `/to` dates.","lastModifiedDate":"2023-02-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":146,"author":{"gitId":"lihka1202"},"content":"More detailed examples of how Duke handles other `event` inputs can be found in the [More examples on event](Appendix#More-examples-on-event) section.","lastModifiedDate":"2023-02-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":149,"author":{"gitId":"lihka1202"},"content":"# `list`","lastModifiedDate":"2023-02-26"},{"lineNumber":150,"author":{"gitId":"lihka1202"},"content":"This is a command which the use could use to see all the `Tasks` they have created so far. Do note that the list is **case sensitive**. ","lastModifiedDate":"2023-02-26"},{"lineNumber":151,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":152,"author":{"gitId":"lihka1202"},"content":"The format is as such: `list`","lastModifiedDate":"2023-02-26"},{"lineNumber":153,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":154,"author":{"gitId":"lihka1202"},"content":"An example of its usage would be the following:","lastModifiedDate":"2023-02-26"},{"lineNumber":155,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":156,"author":{"gitId":"lihka1202"},"content":"list","lastModifiedDate":"2023-02-26"},{"lineNumber":157,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":158,"author":{"gitId":"lihka1202"},"content":"\tHere are the tasks in your list:","lastModifiedDate":"2023-02-26"},{"lineNumber":159,"author":{"gitId":"lihka1202"},"content":"\t1.[E][ ] CS2113 midterms (from: Mar 3 2023 to: Mar 4 2023)","lastModifiedDate":"2023-02-26"},{"lineNumber":160,"author":{"gitId":"lihka1202"},"content":"\t2.[T][ ] get milk","lastModifiedDate":"2023-02-26"},{"lineNumber":161,"author":{"gitId":"lihka1202"},"content":"\t3.[T][ ] get some sleep","lastModifiedDate":"2023-02-26"},{"lineNumber":162,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":163,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":164,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":165,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":166,"author":{"gitId":"lihka1202"},"content":"Additionally, there are 2 pairs of square braces on each level, the first pair of square braces indicates the kind of task that is listed.","lastModifiedDate":"2023-02-26"},{"lineNumber":167,"author":{"gitId":"lihka1202"},"content":"- `[T]` indicates that the task is a `todo`.","lastModifiedDate":"2023-02-26"},{"lineNumber":168,"author":{"gitId":"lihka1202"},"content":"- `[D]` indicates that the task is a `deadline`.","lastModifiedDate":"2023-02-26"},{"lineNumber":169,"author":{"gitId":"lihka1202"},"content":"- `[E]` indicates that the task is a `event`.","lastModifiedDate":"2023-02-26"},{"lineNumber":170,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":171,"author":{"gitId":"lihka1202"},"content":"The pair of braces beside the task indicators are the **completion indicators.**","lastModifiedDate":"2023-02-26"},{"lineNumber":172,"author":{"gitId":"lihka1202"},"content":"- `[ ]` refers to a task that is not complete.","lastModifiedDate":"2023-02-26"},{"lineNumber":173,"author":{"gitId":"lihka1202"},"content":"- `[X]` refers to a task that has been completed.","lastModifiedDate":"2023-02-26"},{"lineNumber":174,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":175,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":176,"author":{"gitId":"lihka1202"},"content":"# `mark`","lastModifiedDate":"2023-02-26"},{"lineNumber":177,"author":{"gitId":"lihka1202"},"content":"This command allows the user mark a task if they have already completed it. This ensures that users are able to view tasks which they have completed, and tasks which they have not. As mentioned in the pervious section, the completion status of a `Task` is represented through the **completion indicators**. For a quick recap, do read through the section about the [list](#list) command again. Duke is able to understand which task a user wishes to mark based on the serial number of the task they wish to mark.","lastModifiedDate":"2023-02-26"},{"lineNumber":178,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":179,"author":{"gitId":"lihka1202"},"content":"In gist, this is the format of marking: `mark \u003cSERIAL_NUMBER_OF_TASK\u003e`.","lastModifiedDate":"2023-02-26"},{"lineNumber":180,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":181,"author":{"gitId":"lihka1202"},"content":"Here is an example that elucidates the same:","lastModifiedDate":"2023-02-26"},{"lineNumber":182,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":183,"author":{"gitId":"lihka1202"},"content":"mark 2","lastModifiedDate":"2023-02-26"},{"lineNumber":184,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":185,"author":{"gitId":"lihka1202"},"content":"\tNice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-02-26"},{"lineNumber":186,"author":{"gitId":"lihka1202"},"content":"\t\t[T][X] get milk","lastModifiedDate":"2023-02-26"},{"lineNumber":187,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":188,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":189,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":190,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":191,"author":{"gitId":"lihka1202"},"content":"# `unmark`","lastModifiedDate":"2023-02-26"},{"lineNumber":192,"author":{"gitId":"lihka1202"},"content":"Users are advised to go through [mark](#mark) before reading through this section, as the `unmark` command is just the opposite of marking. Unmark would turn a marked task into an umarked task. Hence the syntax of the marking and unmarking is the same. In order to unmark, the user would need to inform Duke of the serial number of the task which they wish to unmark.","lastModifiedDate":"2023-02-26"},{"lineNumber":193,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":194,"author":{"gitId":"lihka1202"},"content":"The format is as such: `unmark \u003cSERIAL_NUMBER_OF_TASK\u003e`","lastModifiedDate":"2023-02-26"},{"lineNumber":195,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":196,"author":{"gitId":"lihka1202"},"content":"Here is an example which demonstrates this:","lastModifiedDate":"2023-02-26"},{"lineNumber":197,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":198,"author":{"gitId":"lihka1202"},"content":"unmark 2","lastModifiedDate":"2023-02-26"},{"lineNumber":199,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":200,"author":{"gitId":"lihka1202"},"content":"\tNice! I\u0027ve marked this task as not done:","lastModifiedDate":"2023-02-26"},{"lineNumber":201,"author":{"gitId":"lihka1202"},"content":"\t\t[T][ ] get milk","lastModifiedDate":"2023-02-26"},{"lineNumber":202,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":203,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":204,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":205,"author":{"gitId":"lihka1202"},"content":"# `delete`","lastModifiedDate":"2023-02-26"},{"lineNumber":206,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":207,"author":{"gitId":"lihka1202"},"content":"The delete command allows the user to delete a certain task of their choice. **It is very imnportant to note that `mark` and `delete` are very different, even though they both can be used after the completion of  Task**. The `mark` command only marks an item as completed, **but still leaves it in the list of tasks**. The `delete` command **removes the task from the list as a whole**, *there is no way to recover the task after this*. Similar to [mark](#mark) and [unmark](#unmark), in order to delete a `Task`, the user needs to supply the serial number of the task to Duke.","lastModifiedDate":"2023-02-26"},{"lineNumber":208,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":209,"author":{"gitId":"lihka1202"},"content":"This is the format of the `delete` command: `delete \u003cSERIAL_NUMBER_OF_TASK\u003e`.","lastModifiedDate":"2023-02-26"},{"lineNumber":210,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":211,"author":{"gitId":"lihka1202"},"content":"Here is an example:","lastModifiedDate":"2023-02-26"},{"lineNumber":212,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":213,"author":{"gitId":"lihka1202"},"content":"delete 3","lastModifiedDate":"2023-02-26"},{"lineNumber":214,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":215,"author":{"gitId":"lihka1202"},"content":"\tNoted! I\u0027ve removed this task!","lastModifiedDate":"2023-02-26"},{"lineNumber":216,"author":{"gitId":"lihka1202"},"content":"\t\t[T][ ] get some sleep","lastModifiedDate":"2023-02-26"},{"lineNumber":217,"author":{"gitId":"lihka1202"},"content":"\tNow you have 2 tasks in the list","lastModifiedDate":"2023-02-26"},{"lineNumber":218,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":219,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":220,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":221,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":222,"author":{"gitId":"lihka1202"},"content":"# `find`","lastModifiedDate":"2023-02-26"},{"lineNumber":223,"author":{"gitId":"lihka1202"},"content":"The `find` command can be used to look for a specific phrase in the descriptions for all the tasks which are listed. This does not include tasks which have been deleted. Duke would then return all the tasks which have this phrase in their descriptins","lastModifiedDate":"2023-02-26"},{"lineNumber":224,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":225,"author":{"gitId":"lihka1202"},"content":"The format of the `find` command is as such: `find \u003cPHRASE_TO_LOOK_FOR\u003e`.","lastModifiedDate":"2023-02-26"},{"lineNumber":226,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":227,"author":{"gitId":"lihka1202"},"content":"An example of how to use this command can be seen below:","lastModifiedDate":"2023-02-26"},{"lineNumber":228,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":229,"author":{"gitId":"lihka1202"},"content":"find CS2113","lastModifiedDate":"2023-02-26"},{"lineNumber":230,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":231,"author":{"gitId":"lihka1202"},"content":"\t1.[E][ ] CS2113 midterms (from: Mar 3 2023 to: Mar 4 2023)","lastModifiedDate":"2023-02-26"},{"lineNumber":232,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":234,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":235,"author":{"gitId":"lihka1202"},"content":"# `help`","lastModifiedDate":"2023-02-26"},{"lineNumber":236,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":237,"author":{"gitId":"lihka1202"},"content":"The help command can be used to get a list of all the commands and how to use them. In a certain sense, its a more portable version of this user guide included in Duke, and can be invoked by using: `help`.","lastModifiedDate":"2023-02-26"},{"lineNumber":238,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":239,"author":{"gitId":"lihka1202"},"content":"Here is an example:","lastModifiedDate":"2023-02-26"},{"lineNumber":240,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":241,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":242,"author":{"gitId":"lihka1202"},"content":"help","lastModifiedDate":"2023-02-26"},{"lineNumber":243,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":244,"author":{"gitId":"lihka1202"},"content":"\tHi! These are the commands which duke understands!","lastModifiedDate":"2023-02-26"},{"lineNumber":245,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":246,"author":{"gitId":"lihka1202"},"content":"\tlist - This would display all the existing Tasks in the Task List","lastModifiedDate":"2023-02-26"},{"lineNumber":247,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":248,"author":{"gitId":"lihka1202"},"content":"\ttodo - Creates a todo, use it by adding \u0027todo\u0027 and some description. An example is listed below:","lastModifiedDate":"2023-02-26"},{"lineNumber":249,"author":{"gitId":"lihka1202"},"content":"\t\t\u0027todo get milk\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":250,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":251,"author":{"gitId":"lihka1202"},"content":"\tdeadline - Creates a deadline, use it by adding \u0027deadline\u0027 followed by some description and a deadline which follows \u0027/by\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":252,"author":{"gitId":"lihka1202"},"content":"\tNote that the dates must follow the following format: yyyy-mm-dd","lastModifiedDate":"2023-02-26"},{"lineNumber":253,"author":{"gitId":"lihka1202"},"content":"\t\t\u0027deadline get milk /by 2023-12-01\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":254,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":255,"author":{"gitId":"lihka1202"},"content":"\tevent - Creates an event, use it by adding \u0027event\u0027 ,some description, a start date followed by \u0027/from\u0027 and an end date followed by \u0027/to\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":256,"author":{"gitId":"lihka1202"},"content":"\tNote that the dates must follow the following format: yyyy-mm-dd","lastModifiedDate":"2023-02-26"},{"lineNumber":257,"author":{"gitId":"lihka1202"},"content":"\t\t\u0027event get some milk /from 2023-03-01 /to 2023-03-02","lastModifiedDate":"2023-02-26"},{"lineNumber":258,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":259,"author":{"gitId":"lihka1202"},"content":"\tmark - mark would inform Duke to mark a task as complete. To invoke type \u0027mark\u0027 followed by the serial number of the specific task","lastModifiedDate":"2023-02-26"},{"lineNumber":260,"author":{"gitId":"lihka1202"},"content":"\t\t \u0027mark 1\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":261,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":262,"author":{"gitId":"lihka1202"},"content":"\tunmark - unmark would inform Duke to unmark a task as incomplete. To invoke type \u0027unmark\u0027 followed by the serial number of the specific task","lastModifiedDate":"2023-02-26"},{"lineNumber":263,"author":{"gitId":"lihka1202"},"content":"\t\t \u0027unmark 1\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":264,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":265,"author":{"gitId":"lihka1202"},"content":"\tdelete - delete would inform Duke to delete a task. To invoke type \u0027delete\u0027 followed by the serial number of the specific task","lastModifiedDate":"2023-02-26"},{"lineNumber":266,"author":{"gitId":"lihka1202"},"content":"\t\t \u0027delete 1\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":267,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":268,"author":{"gitId":"lihka1202"},"content":"\tfind - find would inform Duke to look for a certain phrase across all the Tasks. To invoke type \u0027find\u0027 followed by the phrase you wish to look for","lastModifiedDate":"2023-02-26"},{"lineNumber":269,"author":{"gitId":"lihka1202"},"content":"\t\t \u0027find book\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":270,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":271,"author":{"gitId":"lihka1202"},"content":"\tbye - to exit the program!","lastModifiedDate":"2023-02-26"},{"lineNumber":272,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":273,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":274,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":275,"author":{"gitId":"lihka1202"},"content":"# `bye`","lastModifiedDate":"2023-02-26"},{"lineNumber":276,"author":{"gitId":"lihka1202"},"content":"This is the final command listed here. Using this command would quit the application and return back to your terminal.","lastModifiedDate":"2023-02-26"},{"lineNumber":277,"author":{"gitId":"lihka1202"},"content":"This is the format of the command: `bye `.","lastModifiedDate":"2023-02-26"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":279,"author":{"gitId":"lihka1202"},"content":"An example is as such:","lastModifiedDate":"2023-02-26"},{"lineNumber":280,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":281,"author":{"gitId":"lihka1202"},"content":"bye","lastModifiedDate":"2023-02-26"},{"lineNumber":282,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":283,"author":{"gitId":"lihka1202"},"content":"\tBye. Hope to see you again soon!","lastModifiedDate":"2023-02-26"},{"lineNumber":284,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":286,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":288,"author":{"gitId":"lihka1202"},"content":"# Final Notes","lastModifiedDate":"2023-02-26"},{"lineNumber":289,"author":{"gitId":"lihka1202"},"content":"The commands listed above are the basic features of Duke. If you wish to know more about what kind of inputs these commands can handle in detail, do check out the appendix!","lastModifiedDate":"2023-02-26"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":291,"author":{"gitId":"lihka1202"},"content":"At any rate, Happy Coding!","lastModifiedDate":"2023-02-26"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":293,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":294,"author":{"gitId":"lihka1202"},"content":"# Appendix","lastModifiedDate":"2023-02-26"},{"lineNumber":295,"author":{"gitId":"lihka1202"},"content":"## More examples on todo","lastModifiedDate":"2023-02-26"},{"lineNumber":296,"author":{"gitId":"lihka1202"},"content":"Here are some examples of todo being used and the respective outputs:","lastModifiedDate":"2023-02-26"},{"lineNumber":297,"author":{"gitId":"lihka1202"},"content":"#### todo example with no description","lastModifiedDate":"2023-02-26"},{"lineNumber":298,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":299,"author":{"gitId":"lihka1202"},"content":"In the odd chance a user forgets to supply Duke with the description, the following happens:","lastModifiedDate":"2023-02-26"},{"lineNumber":300,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":301,"author":{"gitId":"lihka1202"},"content":"todo","lastModifiedDate":"2023-02-26"},{"lineNumber":302,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":303,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the todo has a description!","lastModifiedDate":"2023-02-26"},{"lineNumber":304,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":305,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":306,"author":{"gitId":"lihka1202"},"content":"#### `Todo` instead of `todo`","lastModifiedDate":"2023-02-26"},{"lineNumber":307,"author":{"gitId":"lihka1202"},"content":"As mentioned previously, if a user were to enter `Todo` instead of `todo`, Duke would reject it and ask the user to enter again.","lastModifiedDate":"2023-02-26"},{"lineNumber":308,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":309,"author":{"gitId":"lihka1202"},"content":"Todo get more milk","lastModifiedDate":"2023-02-26"},{"lineNumber":310,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":311,"author":{"gitId":"lihka1202"},"content":"\tPlease enter a valid input","lastModifiedDate":"2023-02-26"},{"lineNumber":312,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":313,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":314,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":315,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":316,"author":{"gitId":"lihka1202"},"content":"## More examples on deadline","lastModifiedDate":"2023-02-26"},{"lineNumber":317,"author":{"gitId":"lihka1202"},"content":"Here are some examples of deadline being used and the respective outputs:","lastModifiedDate":"2023-02-26"},{"lineNumber":318,"author":{"gitId":"lihka1202"},"content":"#### deadline example no description","lastModifiedDate":"2023-02-26"},{"lineNumber":319,"author":{"gitId":"lihka1202"},"content":"If the user forgets to enter the description the following happens:","lastModifiedDate":"2023-02-26"},{"lineNumber":320,"author":{"gitId":"lihka1202"},"content":"```deadline /by 2023-02-27","lastModifiedDate":"2023-02-26"},{"lineNumber":321,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":322,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the deadline isn\u0027t empty!","lastModifiedDate":"2023-02-26"},{"lineNumber":323,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":325,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":326,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":327,"author":{"gitId":"lihka1202"},"content":"#### deadline example no deadline set","lastModifiedDate":"2023-02-26"},{"lineNumber":328,"author":{"gitId":"lihka1202"},"content":"If the user forgets to enter the deadline all together, the following happens:","lastModifiedDate":"2023-02-26"},{"lineNumber":329,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":330,"author":{"gitId":"lihka1202"},"content":"deadline get milk /by ","lastModifiedDate":"2023-02-26"},{"lineNumber":331,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":332,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the deadline isn\u0027t empty!","lastModifiedDate":"2023-02-26"},{"lineNumber":333,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":334,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":335,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":336,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":337,"author":{"gitId":"lihka1202"},"content":"In the event the user decides to leave the deadline with all white spaces, the following happens:","lastModifiedDate":"2023-02-26"},{"lineNumber":338,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":339,"author":{"gitId":"lihka1202"},"content":"deadline get milk /by      ","lastModifiedDate":"2023-02-26"},{"lineNumber":340,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":341,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the deadline is not composed of solely white spaces!","lastModifiedDate":"2023-02-26"},{"lineNumber":342,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":343,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":344,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":345,"author":{"gitId":"lihka1202"},"content":"#### deadline example missing `deadline` phrase","lastModifiedDate":"2023-02-26"},{"lineNumber":346,"author":{"gitId":"lihka1202"},"content":"If the deadline phrase was missing, this happens:","lastModifiedDate":"2023-02-26"},{"lineNumber":347,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":348,"author":{"gitId":"lihka1202"},"content":"get food /by 2023-07-22","lastModifiedDate":"2023-02-26"},{"lineNumber":349,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":350,"author":{"gitId":"lihka1202"},"content":"\tPlease enter a valid input","lastModifiedDate":"2023-02-26"},{"lineNumber":351,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":352,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":353,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":355,"author":{"gitId":"lihka1202"},"content":"#### deadline example with missing `/by` phrase","lastModifiedDate":"2023-02-26"},{"lineNumber":356,"author":{"gitId":"lihka1202"},"content":"In the event the user forgets to enter the `/by` phrase","lastModifiedDate":"2023-02-26"},{"lineNumber":357,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":358,"author":{"gitId":"lihka1202"},"content":"deadine get food 2023-07-22","lastModifiedDate":"2023-02-26"},{"lineNumber":359,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":360,"author":{"gitId":"lihka1202"},"content":"\tPlease enter a valid input","lastModifiedDate":"2023-02-26"},{"lineNumber":361,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":362,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":363,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":364,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":365,"author":{"gitId":"lihka1202"},"content":"#### deadline example with the date in the wrong format","lastModifiedDate":"2023-02-26"},{"lineNumber":366,"author":{"gitId":"lihka1202"},"content":"In the event a user enters the date in the wrong format, the following happens:","lastModifiedDate":"2023-02-26"},{"lineNumber":367,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":368,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":369,"author":{"gitId":"lihka1202"},"content":"deadline get food /by tomorrow","lastModifiedDate":"2023-02-26"},{"lineNumber":370,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":371,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the deadline follows the following format: yyyy-mm-dd.","lastModifiedDate":"2023-02-26"},{"lineNumber":372,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":373,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":374,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":375,"author":{"gitId":"lihka1202"},"content":"#### deadline example with date in the past","lastModifiedDate":"2023-02-26"},{"lineNumber":376,"author":{"gitId":"lihka1202"},"content":"Duke is aware of the current date, it can access your systems date. Hence entering a deadline that is in the past would warrant a prompt from Duke:","lastModifiedDate":"2023-02-26"},{"lineNumber":377,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":378,"author":{"gitId":"lihka1202"},"content":"deadline travel to the past /by 2019-02-02","lastModifiedDate":"2023-02-26"},{"lineNumber":379,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":380,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the deadline isn\u0027t before the current date","lastModifiedDate":"2023-02-26"},{"lineNumber":381,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":382,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":383,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":386,"author":{"gitId":"lihka1202"},"content":"## More examples on event","lastModifiedDate":"2023-02-26"},{"lineNumber":387,"author":{"gitId":"lihka1202"},"content":"Here are some examples of event being used and the respective outputs:","lastModifiedDate":"2023-02-26"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":389,"author":{"gitId":"lihka1202"},"content":"#### event example with missing descriptions and range","lastModifiedDate":"2023-02-26"},{"lineNumber":390,"author":{"gitId":"lihka1202"},"content":"If the event description and range were missing, this is how Duke would react:","lastModifiedDate":"2023-02-26"},{"lineNumber":391,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":392,"author":{"gitId":"lihka1202"},"content":"event","lastModifiedDate":"2023-02-26"},{"lineNumber":393,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":394,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the event isn\u0027t empty!","lastModifiedDate":"2023-02-26"},{"lineNumber":395,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":398,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":399,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":400,"author":{"gitId":"lihka1202"},"content":"#### event example with missing range of dates","lastModifiedDate":"2023-02-26"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":402,"author":{"gitId":"lihka1202"},"content":"This is what would happen if the user missed on adding the dates to his task:","lastModifiedDate":"2023-02-26"},{"lineNumber":403,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":404,"author":{"gitId":"lihka1202"},"content":"event CS2113 Homework","lastModifiedDate":"2023-02-26"},{"lineNumber":405,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":406,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that you include the \u0027/from\u0027 phrase to indicate the start of the event!","lastModifiedDate":"2023-02-26"},{"lineNumber":407,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":408,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":409,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":410,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":411,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":412,"author":{"gitId":"lihka1202"},"content":"#### event examples with missing description","lastModifiedDate":"2023-02-26"},{"lineNumber":413,"author":{"gitId":"lihka1202"},"content":"This is what would happen if the description were to be missing:","lastModifiedDate":"2023-02-26"},{"lineNumber":414,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":415,"author":{"gitId":"lihka1202"},"content":"event    /from 2023-04-04 /to 2023-05-05","lastModifiedDate":"2023-02-26"},{"lineNumber":416,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":417,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the event isn\u0027t empty!","lastModifiedDate":"2023-02-26"},{"lineNumber":418,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":419,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":420,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":421,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":422,"author":{"gitId":"lihka1202"},"content":"#### event example with /from date in the wrong format","lastModifiedDate":"2023-02-26"},{"lineNumber":423,"author":{"gitId":"lihka1202"},"content":"This is what would happen if the /from date is in the wrong format:","lastModifiedDate":"2023-02-26"},{"lineNumber":424,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":425,"author":{"gitId":"lihka1202"},"content":"event CS2113 HW /from today /to 2023-12-02","lastModifiedDate":"2023-02-26"},{"lineNumber":426,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":427,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the from and to dates follow the following format: yyyy-mm-dd.","lastModifiedDate":"2023-02-26"},{"lineNumber":428,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":429,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":430,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":431,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":432,"author":{"gitId":"lihka1202"},"content":"#### event example with /to date in the wrong format","lastModifiedDate":"2023-02-26"},{"lineNumber":433,"author":{"gitId":"lihka1202"},"content":"This is what would happen if the to date is in the wrong format:","lastModifiedDate":"2023-02-26"},{"lineNumber":434,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":435,"author":{"gitId":"lihka1202"},"content":"event CS2113 HW /from 2023-12-02 /to tomorrow","lastModifiedDate":"2023-02-26"},{"lineNumber":436,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":437,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the from and to dates follow the following format: yyyy-mm-dd.","lastModifiedDate":"2023-02-26"},{"lineNumber":438,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":439,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":440,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":441,"author":{"gitId":"lihka1202"},"content":"#### event examples with /from date after the /to date","lastModifiedDate":"2023-02-26"},{"lineNumber":442,"author":{"gitId":"lihka1202"},"content":"This is what would happen if the /from date is after the /to date:","lastModifiedDate":"2023-02-26"},{"lineNumber":443,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":444,"author":{"gitId":"lihka1202"},"content":"event CS2113 HW /from 2026-01-10 /to 2023-01-01","lastModifiedDate":"2023-02-26"},{"lineNumber":445,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":446,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that your dates are chronologically appropriate...","lastModifiedDate":"2023-02-26"},{"lineNumber":447,"author":{"gitId":"lihka1202"},"content":"\tThe from date cannot be after the to date","lastModifiedDate":"2023-02-26"},{"lineNumber":448,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":449,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":450,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":451,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":452,"author":{"gitId":"lihka1202"},"content":"#### event examples with range of dates in the past","lastModifiedDate":"2023-02-26"},{"lineNumber":453,"author":{"gitId":"lihka1202"},"content":"This is what would happen if the dates are in the past:","lastModifiedDate":"2023-02-26"},{"lineNumber":454,"author":{"gitId":"lihka1202"},"content":"```","lastModifiedDate":"2023-02-26"},{"lineNumber":455,"author":{"gitId":"lihka1202"},"content":"event CS2113 HW /from 2019-01-01 /to 2019-02-01","lastModifiedDate":"2023-02-26"},{"lineNumber":456,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":457,"author":{"gitId":"lihka1202"},"content":"\tPlease ensure that the from and to dates aren\u0027t in the past...","lastModifiedDate":"2023-02-26"},{"lineNumber":458,"author":{"gitId":"lihka1202"},"content":"\t---------------------------------------------------------------------------------","lastModifiedDate":"2023-02-26"},{"lineNumber":459,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":460,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"lihka1202":433,"-":27}},{"path":"src/main/java/corefunctionalities/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package corefunctionalities;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":" * This is the main Duke Class which contains the main program.","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanachary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"public class Duke {","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":"    private FileHandler fileOject;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":"    private ExceptionHandler exceptionHandler;","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"     * Constructor for an object of type \u003ccode\u003eDuke\u003c/code\u003e. Instantiates the various attributes of Duke such as {@link Ui},","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"     * {@link FileHandler}, {@link ExceptionHandler} and {@link TaskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"    public Duke() {","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"        fileOject \u003d new FileHandler(System.getProperty(\"user.dir\") + \"/dukeData.txt\");","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"        exceptionHandler \u003d new ExceptionHandler();","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"        taskList \u003d new TaskList(fileOject);","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"     * Runs the main functionality of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"    public void run() {","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"        while(!isExit) {","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"            ui.readCommand();","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"            ui.nullChecker();","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"            exceptionHandler.execute(ui.userInput, taskList, fileOject);","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"            isExit \u003d exceptionHandler.isExit();","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"        ui.sayBye();","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"     * Main runnable function of Duke. Makes a call to {@link Duke#run()} to run the program","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"     * @param args","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"        new Duke().run();","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"lihka1202":49}},{"path":"src/main/java/corefunctionalities/ExceptionHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package corefunctionalities;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"import dataypes.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"import exceptions.DeadlineIsBlank;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"import exceptions.DeadlineMissingPhrase;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyDeadline;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyEvent;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyList;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyTodo;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventFromIsBlank;","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventMissingBothPhrases;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventMissingFromPhrase;","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventMissingToPhrase;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventToIsBlank;","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":"import exceptions.FromAfterTo;","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"import exceptions.MarkQualityException;","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"import exceptions.TaskMarked;","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"import exceptions.TaskUnMarked;","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"import exceptions.UnmarkQualityException;","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"import exceptions.WrongChrono;","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"import helpers.Command;","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"import helpers.Parser;","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-24"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":" * This class handles any and all exceptions generated by methods of {@link Command}. Methods of ExceptionHandler catch","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":" * exceptions throw to them and resolve them. Has instances of {@link Ui}, {@link Command}, {@link Parser} and a boolean","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":" * variable {@link ExceptionHandler#isExit}to dictate when to exit the program.","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanachary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"public class ExceptionHandler {","lastModifiedDate":"2023-02-24"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"    protected Ui ui \u003d new Ui();","lastModifiedDate":"2023-02-24"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"    protected Command command \u003d new Command();","lastModifiedDate":"2023-02-24"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"    protected Parser parser \u003d new Parser();","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"    protected boolean isExit \u003d false;","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"     * Handles exceptions thrown by {@link Command#commandDeadline(String, TaskList, FileHandler)}","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"     * @param userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"     * @param taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"    public void deadlineExceptionHandler(String userInput, TaskList taskList, FileHandler fileObject) {","lastModifiedDate":"2023-02-24"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"            command.commandDeadline(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-24"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"        } catch (EmptyDeadline e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the deadline isn\u0027t empty!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"        } catch (DeadlineMissingPhrase e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that you include the \u0027/by\u0027 phrase to indicate the deadline!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":"        } catch (DeadlineIsBlank e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the deadline is not composed of solely white spaces!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"unable to write\");","lastModifiedDate":"2023-02-24"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the deadline follows the following format: yyyy-mm-dd.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"        } catch (WrongChrono e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the deadline isn\u0027t before the current date\");","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":71,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":72,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":73,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"lihka1202"},"content":"     * Handles exceptions thrown by {@link Command#commandEvent(String, TaskList, FileHandler)}","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"lihka1202"},"content":"     * @param userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"lihka1202"},"content":"     * @param taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"lihka1202"},"content":"    public void eventExceptionHandler(String userInput, TaskList taskList, FileHandler fileObject) {","lastModifiedDate":"2023-02-24"},{"lineNumber":80,"author":{"gitId":"lihka1202"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":81,"author":{"gitId":"lihka1202"},"content":"            command.commandEvent(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-24"},{"lineNumber":82,"author":{"gitId":"lihka1202"},"content":"        } catch (EmptyEvent e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":83,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":84,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the event isn\u0027t empty!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":85,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":86,"author":{"gitId":"lihka1202"},"content":"        } catch (EventMissingFromPhrase e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":87,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":88,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that you include the \u0027/from\u0027 phrase to indicate the start of the event!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":89,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":90,"author":{"gitId":"lihka1202"},"content":"        } catch (EventMissingToPhrase e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":91,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":92,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that you include the \u0027/to\u0027 phrase to indicate the end of the event!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":93,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":94,"author":{"gitId":"lihka1202"},"content":"        } catch (EventMissingBothPhrases e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":95,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":96,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that you include the \u0027/from\u0027 and \u0027/to\u0027 phrase to indicate the start and end of the event!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":97,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":98,"author":{"gitId":"lihka1202"},"content":"        } catch (EventFromIsBlank e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":99,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":100,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the event has a valid start time period\");","lastModifiedDate":"2023-02-24"},{"lineNumber":101,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":102,"author":{"gitId":"lihka1202"},"content":"        } catch (EventToIsBlank e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":103,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":104,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the event has a valid end time period\");","lastModifiedDate":"2023-02-24"},{"lineNumber":105,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":106,"author":{"gitId":"lihka1202"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":107,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"unable to write\");","lastModifiedDate":"2023-02-24"},{"lineNumber":109,"author":{"gitId":"lihka1202"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the from and to dates follow the following format: yyyy-mm-dd.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"lihka1202"},"content":"        } catch (WrongChrono e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":113,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the from and to dates aren\u0027t in the past...\");","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":115,"author":{"gitId":"lihka1202"},"content":"        }  catch (FromAfterTo e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":116,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that your dates are chronologically appropriate...\");","lastModifiedDate":"2023-02-25"},{"lineNumber":117,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tThe from date cannot be after the to date\");","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"lihka1202"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":120,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":121,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the event is entered in the right format\");","lastModifiedDate":"2023-02-25"},{"lineNumber":122,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":123,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":124,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":125,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":126,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":127,"author":{"gitId":"lihka1202"},"content":"     * Handles exceptions thrown by {@link Command#commandTodo(String, TaskList, FileHandler)}","lastModifiedDate":"2023-02-25"},{"lineNumber":128,"author":{"gitId":"lihka1202"},"content":"     * @param userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":129,"author":{"gitId":"lihka1202"},"content":"     * @param taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject","lastModifiedDate":"2023-02-25"},{"lineNumber":131,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":132,"author":{"gitId":"lihka1202"},"content":"    public  void todoExceptionHandler(String userInput, TaskList taskList, FileHandler fileObject) {","lastModifiedDate":"2023-02-24"},{"lineNumber":133,"author":{"gitId":"lihka1202"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":134,"author":{"gitId":"lihka1202"},"content":"            command.commandTodo(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-24"},{"lineNumber":135,"author":{"gitId":"lihka1202"},"content":"        }  catch (EmptyTodo e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":136,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":137,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tPlease ensure that the todo has a description!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":138,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":139,"author":{"gitId":"lihka1202"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":140,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"unable to write\");","lastModifiedDate":"2023-02-24"},{"lineNumber":141,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":142,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":143,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":144,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":145,"author":{"gitId":"lihka1202"},"content":"     * Handles exceptions thrown by {@link Command#commandDeleteTask(String, TaskList, FileHandler)}","lastModifiedDate":"2023-02-25"},{"lineNumber":146,"author":{"gitId":"lihka1202"},"content":"     * @param userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":147,"author":{"gitId":"lihka1202"},"content":"     * @param taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":148,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject","lastModifiedDate":"2023-02-25"},{"lineNumber":149,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":150,"author":{"gitId":"lihka1202"},"content":"    public  void deleteExceptionHandler(String userInput, TaskList taskList, FileHandler fileObject) {","lastModifiedDate":"2023-02-24"},{"lineNumber":151,"author":{"gitId":"lihka1202"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":152,"author":{"gitId":"lihka1202"},"content":"            command.commandDeleteTask(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-24"},{"lineNumber":153,"author":{"gitId":"lihka1202"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":154,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":155,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tEnter a valid index to delete\");","lastModifiedDate":"2023-02-24"},{"lineNumber":156,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":157,"author":{"gitId":"lihka1202"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":158,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":159,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tEnter a valid number to delete\");","lastModifiedDate":"2023-02-24"},{"lineNumber":160,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":161,"author":{"gitId":"lihka1202"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":162,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":163,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tUnable to delete from the file\");","lastModifiedDate":"2023-02-24"},{"lineNumber":164,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":165,"author":{"gitId":"lihka1202"},"content":"        } catch (EmptyList e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":166,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":167,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tUnable to delete from an empty list!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":168,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":169,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":170,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":171,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":172,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":173,"author":{"gitId":"lihka1202"},"content":"     * Handles exceptions thrown by {@link Command#commandMarkTask(String, TaskList, FileHandler)}","lastModifiedDate":"2023-02-25"},{"lineNumber":174,"author":{"gitId":"lihka1202"},"content":"     * @param userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":175,"author":{"gitId":"lihka1202"},"content":"     * @param taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":176,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject","lastModifiedDate":"2023-02-25"},{"lineNumber":177,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":178,"author":{"gitId":"lihka1202"},"content":"    public  void markExceptionHandler(String userInput, TaskList taskList, FileHandler fileObject) {","lastModifiedDate":"2023-02-24"},{"lineNumber":179,"author":{"gitId":"lihka1202"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":180,"author":{"gitId":"lihka1202"},"content":"            command.commandMarkTask(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-24"},{"lineNumber":181,"author":{"gitId":"lihka1202"},"content":"        } catch (MarkQualityException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":182,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":183,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tNice try, enter a valid index to mark:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":184,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":185,"author":{"gitId":"lihka1202"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":186,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"WHoops\");","lastModifiedDate":"2023-02-24"},{"lineNumber":187,"author":{"gitId":"lihka1202"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":188,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":189,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tNice try, enter a valid Number to mark:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":190,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":191,"author":{"gitId":"lihka1202"},"content":"        } catch (TaskMarked e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":192,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":193,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tTask has already been marked\");","lastModifiedDate":"2023-02-25"},{"lineNumber":194,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":195,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":196,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":197,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":198,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":199,"author":{"gitId":"lihka1202"},"content":"     * Handles exceptions thrown by {@link Command#commandUnMarkTask(String, TaskList, FileHandler)}","lastModifiedDate":"2023-02-25"},{"lineNumber":200,"author":{"gitId":"lihka1202"},"content":"     * @param userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":201,"author":{"gitId":"lihka1202"},"content":"     * @param taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":202,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject","lastModifiedDate":"2023-02-25"},{"lineNumber":203,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":204,"author":{"gitId":"lihka1202"},"content":"    public  void unMarkExceptionHandler(String userInput, TaskList taskList, FileHandler fileObject) {","lastModifiedDate":"2023-02-24"},{"lineNumber":205,"author":{"gitId":"lihka1202"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":206,"author":{"gitId":"lihka1202"},"content":"            command.commandUnMarkTask(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-24"},{"lineNumber":207,"author":{"gitId":"lihka1202"},"content":"        } catch (UnmarkQualityException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":208,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":209,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tNice try, enter a valid index to unmark:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":210,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":211,"author":{"gitId":"lihka1202"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":212,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"WHoops\");","lastModifiedDate":"2023-02-24"},{"lineNumber":213,"author":{"gitId":"lihka1202"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":214,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":215,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tNice try, enter a valid Number to unmark:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":216,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":217,"author":{"gitId":"lihka1202"},"content":"        } catch (TaskUnMarked e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":218,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":219,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tTask has already been unmarked\");","lastModifiedDate":"2023-02-25"},{"lineNumber":220,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":221,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":222,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":223,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":224,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":225,"author":{"gitId":"lihka1202"},"content":"     * Handles exceptions thrown in by {@link Command#commandlistTasks(TaskList)}. Specifically","lastModifiedDate":"2023-02-25"},{"lineNumber":226,"author":{"gitId":"lihka1202"},"content":"     * when the list is empty.","lastModifiedDate":"2023-02-25"},{"lineNumber":227,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":228,"author":{"gitId":"lihka1202"},"content":"     * @param taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":229,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":230,"author":{"gitId":"lihka1202"},"content":"    public void listExceptionHandler(TaskList taskList) {","lastModifiedDate":"2023-02-25"},{"lineNumber":231,"author":{"gitId":"lihka1202"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":232,"author":{"gitId":"lihka1202"},"content":"            command.commandlistTasks(taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":233,"author":{"gitId":"lihka1202"},"content":"        } catch (EmptyList e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":234,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":235,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tThe list is empty!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":236,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":237,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":238,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":239,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":240,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":241,"author":{"gitId":"lihka1202"},"content":"     * Returns a boolean signifying while-loop exit criteria","lastModifiedDate":"2023-02-25"},{"lineNumber":242,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":243,"author":{"gitId":"lihka1202"},"content":"     * @return exit status","lastModifiedDate":"2023-02-25"},{"lineNumber":244,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":245,"author":{"gitId":"lihka1202"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-25"},{"lineNumber":246,"author":{"gitId":"lihka1202"},"content":"        return isExit;","lastModifiedDate":"2023-02-25"},{"lineNumber":247,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":248,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":249,"author":{"gitId":"lihka1202"},"content":"    public void execute(String userInput, TaskList taskList, FileHandler fileObject) {","lastModifiedDate":"2023-02-25"},{"lineNumber":250,"author":{"gitId":"lihka1202"},"content":"        if(userInput.equals(\"bye\")) { // exit command","lastModifiedDate":"2023-02-25"},{"lineNumber":251,"author":{"gitId":"lihka1202"},"content":"            isExit\u003dtrue;","lastModifiedDate":"2023-02-25"},{"lineNumber":252,"author":{"gitId":"lihka1202"},"content":"        } else if(userInput.equals(\"list\")) { //displays the list if needed","lastModifiedDate":"2023-02-25"},{"lineNumber":253,"author":{"gitId":"lihka1202"},"content":"            this.listExceptionHandler(taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":254,"author":{"gitId":"lihka1202"},"content":"        } else if (parser.isTheSame(userInput, \"mark\")) { //mark the task in","lastModifiedDate":"2023-02-25"},{"lineNumber":255,"author":{"gitId":"lihka1202"},"content":"            this.markExceptionHandler(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-25"},{"lineNumber":256,"author":{"gitId":"lihka1202"},"content":"        } else if (parser.isTheSame(userInput, \"unmark\")) {//unmark the task","lastModifiedDate":"2023-02-25"},{"lineNumber":257,"author":{"gitId":"lihka1202"},"content":"            this.unMarkExceptionHandler(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-25"},{"lineNumber":258,"author":{"gitId":"lihka1202"},"content":"        } else if(parser.isTheSame(userInput, \"todo\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":259,"author":{"gitId":"lihka1202"},"content":"            this.todoExceptionHandler(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-25"},{"lineNumber":260,"author":{"gitId":"lihka1202"},"content":"        } else if(parser.isTheSame(userInput, \"deadline\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":261,"author":{"gitId":"lihka1202"},"content":"            this.deadlineExceptionHandler(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-25"},{"lineNumber":262,"author":{"gitId":"lihka1202"},"content":"        } else if(parser.isTheSame(userInput, \"event\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":263,"author":{"gitId":"lihka1202"},"content":"            this.eventExceptionHandler(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-25"},{"lineNumber":264,"author":{"gitId":"lihka1202"},"content":"        } else if(parser.isTheSame(userInput, \"delete\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":265,"author":{"gitId":"lihka1202"},"content":"            this.deleteExceptionHandler(userInput, taskList, fileObject);","lastModifiedDate":"2023-02-25"},{"lineNumber":266,"author":{"gitId":"lihka1202"},"content":"        }  else if (parser.isTheSame(userInput,\"help\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":267,"author":{"gitId":"lihka1202"},"content":"            command.commandHelp();","lastModifiedDate":"2023-02-25"},{"lineNumber":268,"author":{"gitId":"lihka1202"},"content":"        }else if (parser.isTheSame(userInput, \"find\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":269,"author":{"gitId":"lihka1202"},"content":"            taskList.find(parser.withoutFind(userInput), ui);","lastModifiedDate":"2023-02-25"},{"lineNumber":270,"author":{"gitId":"lihka1202"},"content":"        }  else {","lastModifiedDate":"2023-02-25"},{"lineNumber":271,"author":{"gitId":"lihka1202"},"content":"            ui.validCommand();","lastModifiedDate":"2023-02-25"},{"lineNumber":272,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":273,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":274,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"lihka1202":274}},{"path":"src/main/java/corefunctionalities/FileHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package corefunctionalities;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"import dataypes.Deadlines;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"import dataypes.Events;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"import dataypes.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"import dataypes.Todos;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"import java.io.File;","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":" * This class handles all the functions dealing with any operation on files. Contains instances of {@link File}","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanachary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"public class FileHandler {","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"    public String filePath;","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"    public File dukeFile;","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"     * Constructor for a FileHandler object, creates a new file (if needed) and a new file object to read/write to the","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"     * file. Prints the initialization sequence for Duke.","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"     * @param filePath specifies the path to read/write/create the file at.","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"    public FileHandler(String filePath){","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"        this.dukeFile \u003d new File(filePath); //just creates a new file object, not a new file","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"            dukeFile.createNewFile();","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Whoops, couldn\u0027t create/locate file\");","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"            System.out.print(\"\\033\\143\");","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing Data collection sites......................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing Duke packages..............................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing corefunctioanlities........................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing Duke.......................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing ExceptionHandler...........................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing TaskList...................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing Ui.........................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"corefunctionalities complete............................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing datatypes..................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing Tasks......................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing Events.....................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing Deadlines..................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing Todos......................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing TaskFileHandler............................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"datatypes complete......................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing exceptions.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing DeadlineIsBlank.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing DeadlineMissingPhrase.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing DukeException.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing EmptyDeadline.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing EmptyEvent.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing EmptyTodo.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing EventFromIsBlank.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing EventMissingBothPhrases.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing EventMissingForPhrase.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":90,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing EventMissingToPhrase.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":91,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":92,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing EventToIsBlank.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":93,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":94,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing FromAfterTo.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":95,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":96,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing MarkQualityException.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":97,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":98,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing UnmarkQualityException.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":99,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":100,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing WrongChrono.................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":101,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(100);","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"exceptions complete.....................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":103,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing helpers....................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":106,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing Command....................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":107,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing ExceptionGenerator.........................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Initializing Parser.....................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"helpers complete........................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":113,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"........................................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":115,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":116,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"........................................................\");","lastModifiedDate":"2023-02-25"},{"lineNumber":117,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(250);","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"You\u0027re all set to go!!\\n\");","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"lihka1202"},"content":"            Thread.sleep(1000);","lastModifiedDate":"2023-02-25"},{"lineNumber":120,"author":{"gitId":"lihka1202"},"content":"            System.out.print(\"\\033\\143\");","lastModifiedDate":"2023-02-25"},{"lineNumber":121,"author":{"gitId":"lihka1202"},"content":"            System.out.flush();","lastModifiedDate":"2023-02-25"},{"lineNumber":122,"author":{"gitId":"lihka1202"},"content":"        } catch (InterruptedException ie) {","lastModifiedDate":"2023-02-25"},{"lineNumber":123,"author":{"gitId":"lihka1202"},"content":"            Thread.currentThread().interrupt();","lastModifiedDate":"2023-02-25"},{"lineNumber":124,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":125,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":126,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":127,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":128,"author":{"gitId":"lihka1202"},"content":"     * Adds new data to a file, based on the value of \u003ccode\u003etoAdd\u003c/code\u003e. Makes use of a {@link FileWriter} instance","lastModifiedDate":"2023-02-25"},{"lineNumber":129,"author":{"gitId":"lihka1202"},"content":"     * in append mode. Used by {@link helpers.Command} to append new \u003ccode\u003eTasks\u003c/code\u003e to the file.","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":131,"author":{"gitId":"lihka1202"},"content":"     * @param toAdd A string that dictates what needs to be added to the file.","lastModifiedDate":"2023-02-25"},{"lineNumber":132,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In the event {@link FileHandler#addToFile(String)} is unable to write to the file.","lastModifiedDate":"2023-02-25"},{"lineNumber":133,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":134,"author":{"gitId":"lihka1202"},"content":"    public void addToFile(String toAdd) throws IOException {","lastModifiedDate":"2023-02-17"},{"lineNumber":135,"author":{"gitId":"lihka1202"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-02-17"},{"lineNumber":136,"author":{"gitId":"lihka1202"},"content":"        fw.write(toAdd);","lastModifiedDate":"2023-02-17"},{"lineNumber":137,"author":{"gitId":"lihka1202"},"content":"        fw.close();","lastModifiedDate":"2023-02-17"},{"lineNumber":138,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":139,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":140,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":141,"author":{"gitId":"lihka1202"},"content":"     * Clears the existing file by rewriting the whole file with \"\". This method is called by {@link FileHandler#populateFile(TaskList)}","lastModifiedDate":"2023-02-25"},{"lineNumber":142,"author":{"gitId":"lihka1202"},"content":"     * in the process of updating data in the file.","lastModifiedDate":"2023-02-25"},{"lineNumber":143,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":144,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In the event {@link FileHandler#clearFile()} is unable to write to the file.","lastModifiedDate":"2023-02-25"},{"lineNumber":145,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":146,"author":{"gitId":"lihka1202"},"content":"    public void clearFile() throws IOException {","lastModifiedDate":"2023-02-17"},{"lineNumber":147,"author":{"gitId":"lihka1202"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-02-17"},{"lineNumber":148,"author":{"gitId":"lihka1202"},"content":"        fw.write(\"\");","lastModifiedDate":"2023-02-17"},{"lineNumber":149,"author":{"gitId":"lihka1202"},"content":"        fw.close();","lastModifiedDate":"2023-02-17"},{"lineNumber":150,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":151,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":152,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":153,"author":{"gitId":"lihka1202"},"content":"     * Draws upon elements of \u003ccode\u003etaskList\u003c/code\u003e to populate the file. Makes use of {@link FileHandler#clearFile()}","lastModifiedDate":"2023-02-25"},{"lineNumber":154,"author":{"gitId":"lihka1202"},"content":"     * to clear the file and {@link TaskList#addTaskListFile(FileHandler)} to update data in the file.","lastModifiedDate":"2023-02-25"},{"lineNumber":155,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":156,"author":{"gitId":"lihka1202"},"content":"     * @param taskList Represents the data which needs to be updated in the file","lastModifiedDate":"2023-02-25"},{"lineNumber":157,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In the event {@link FileHandler#populateFile(TaskList)} is unable to write to the file.","lastModifiedDate":"2023-02-25"},{"lineNumber":158,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":159,"author":{"gitId":"lihka1202"},"content":"    public void populateFile(TaskList taskList) throws IOException {","lastModifiedDate":"2023-02-24"},{"lineNumber":160,"author":{"gitId":"lihka1202"},"content":"        clearFile();","lastModifiedDate":"2023-02-18"},{"lineNumber":161,"author":{"gitId":"lihka1202"},"content":"        taskList.addTaskListFile(this);","lastModifiedDate":"2023-02-24"},{"lineNumber":162,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":163,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":164,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":165,"author":{"gitId":"lihka1202"},"content":"     * Reads data from the file and converts each line into an instance of {@link Task}. Updates the {@link ArrayList\u003cTask\u003e}","lastModifiedDate":"2023-02-25"},{"lineNumber":166,"author":{"gitId":"lihka1202"},"content":"     * and returns it. Used by the \u003ccode\u003econstructor\u003c/code\u003e of {@link TaskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":167,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":168,"author":{"gitId":"lihka1202"},"content":"     * @return An {@link ArrayList\u003cTask\u003e} containing processed data from the file (if any). If the file is empty,","lastModifiedDate":"2023-02-25"},{"lineNumber":169,"author":{"gitId":"lihka1202"},"content":"     * returns an empty {@link ArrayList\u003cTask\u003e}","lastModifiedDate":"2023-02-25"},{"lineNumber":170,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In the event {@link FileHandler#readFile()} is unable to write to the file.","lastModifiedDate":"2023-02-25"},{"lineNumber":171,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":172,"author":{"gitId":"lihka1202"},"content":"    public ArrayList\u003cTask\u003e readFile() throws IOException{","lastModifiedDate":"2023-02-18"},{"lineNumber":173,"author":{"gitId":"lihka1202"},"content":"        ArrayList\u003cTask\u003e arrayList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-24"},{"lineNumber":174,"author":{"gitId":"lihka1202"},"content":"        if(dukeFile.createNewFile()\u003d\u003dtrue) {","lastModifiedDate":"2023-02-18"},{"lineNumber":175,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Returned empty\");","lastModifiedDate":"2023-02-18"},{"lineNumber":176,"author":{"gitId":"lihka1202"},"content":"            return arrayList;","lastModifiedDate":"2023-02-18"},{"lineNumber":177,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":178,"author":{"gitId":"lihka1202"},"content":"        Scanner s \u003d new Scanner(dukeFile);","lastModifiedDate":"2023-02-18"},{"lineNumber":179,"author":{"gitId":"lihka1202"},"content":"        while(s.hasNext()) {","lastModifiedDate":"2023-02-18"},{"lineNumber":180,"author":{"gitId":"lihka1202"},"content":"            String holder \u003d s.nextLine();","lastModifiedDate":"2023-02-18"},{"lineNumber":181,"author":{"gitId":"lihka1202"},"content":"            String[] compartments \u003d holder.split(\" # \");","lastModifiedDate":"2023-02-18"},{"lineNumber":182,"author":{"gitId":"lihka1202"},"content":"            if( compartments[0].equals(\"T\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":183,"author":{"gitId":"lihka1202"},"content":"                Todos temp \u003d new Todos();","lastModifiedDate":"2023-02-18"},{"lineNumber":184,"author":{"gitId":"lihka1202"},"content":"                if(compartments[1].equals(\"false\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":185,"author":{"gitId":"lihka1202"},"content":"                    temp.unMarkTask();","lastModifiedDate":"2023-02-18"},{"lineNumber":186,"author":{"gitId":"lihka1202"},"content":"                } else {","lastModifiedDate":"2023-02-18"},{"lineNumber":187,"author":{"gitId":"lihka1202"},"content":"                    temp.markTask();","lastModifiedDate":"2023-02-18"},{"lineNumber":188,"author":{"gitId":"lihka1202"},"content":"                }","lastModifiedDate":"2023-02-18"},{"lineNumber":189,"author":{"gitId":"lihka1202"},"content":"                temp.setDescription(compartments[2]);","lastModifiedDate":"2023-02-18"},{"lineNumber":190,"author":{"gitId":"lihka1202"},"content":"                arrayList.add(temp);","lastModifiedDate":"2023-02-18"},{"lineNumber":191,"author":{"gitId":"lihka1202"},"content":"            } else if ( compartments[0].equals(\"D\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":192,"author":{"gitId":"lihka1202"},"content":"                Deadlines temp \u003d new Deadlines();","lastModifiedDate":"2023-02-18"},{"lineNumber":193,"author":{"gitId":"lihka1202"},"content":"                if(compartments[1].equals(\"false\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":194,"author":{"gitId":"lihka1202"},"content":"                    temp.unMarkTask();","lastModifiedDate":"2023-02-18"},{"lineNumber":195,"author":{"gitId":"lihka1202"},"content":"                } else {","lastModifiedDate":"2023-02-18"},{"lineNumber":196,"author":{"gitId":"lihka1202"},"content":"                    temp.markTask();","lastModifiedDate":"2023-02-18"},{"lineNumber":197,"author":{"gitId":"lihka1202"},"content":"                }","lastModifiedDate":"2023-02-18"},{"lineNumber":198,"author":{"gitId":"lihka1202"},"content":"                temp.setDescription(compartments[2]);","lastModifiedDate":"2023-02-18"},{"lineNumber":199,"author":{"gitId":"lihka1202"},"content":"                temp.setDeadline(compartments[3]);","lastModifiedDate":"2023-02-18"},{"lineNumber":200,"author":{"gitId":"lihka1202"},"content":"                arrayList.add(temp);","lastModifiedDate":"2023-02-18"},{"lineNumber":201,"author":{"gitId":"lihka1202"},"content":"            } else if( compartments[0].equals(\"E\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":202,"author":{"gitId":"lihka1202"},"content":"                Events temp \u003d new Events();","lastModifiedDate":"2023-02-18"},{"lineNumber":203,"author":{"gitId":"lihka1202"},"content":"                if(compartments[1].equals(\"false\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":204,"author":{"gitId":"lihka1202"},"content":"                    temp.unMarkTask();","lastModifiedDate":"2023-02-18"},{"lineNumber":205,"author":{"gitId":"lihka1202"},"content":"                } else {","lastModifiedDate":"2023-02-18"},{"lineNumber":206,"author":{"gitId":"lihka1202"},"content":"                    temp.markTask();","lastModifiedDate":"2023-02-18"},{"lineNumber":207,"author":{"gitId":"lihka1202"},"content":"                }","lastModifiedDate":"2023-02-18"},{"lineNumber":208,"author":{"gitId":"lihka1202"},"content":"                temp.setDescription(compartments[2]);","lastModifiedDate":"2023-02-18"},{"lineNumber":209,"author":{"gitId":"lihka1202"},"content":"                temp.setFrom(compartments[3]);","lastModifiedDate":"2023-02-18"},{"lineNumber":210,"author":{"gitId":"lihka1202"},"content":"                temp.setTo(compartments[4]);","lastModifiedDate":"2023-02-18"},{"lineNumber":211,"author":{"gitId":"lihka1202"},"content":"                arrayList.add(temp);","lastModifiedDate":"2023-02-18"},{"lineNumber":212,"author":{"gitId":"lihka1202"},"content":"            }","lastModifiedDate":"2023-02-18"},{"lineNumber":213,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":214,"author":{"gitId":"lihka1202"},"content":"        return arrayList;","lastModifiedDate":"2023-02-18"},{"lineNumber":215,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":216,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":217,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"lihka1202":217}},{"path":"src/main/java/corefunctionalities/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package corefunctionalities;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"import dataypes.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"import dataypes.TaskFileHandler;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-24"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":" * A class that encapsulates an {@link ArrayList\u003cTask\u003e} which contains Tasks entered by the user, and associated functions","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":" * to use/modify the data.","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanachary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":"public class TaskList {","lastModifiedDate":"2023-02-24"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"    ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-02-24"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"     * Constructor which reads data (if any) from {@link FileHandler} object using {@link FileHandler#readFile()}","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject file Object which can access \u003ccode\u003edukeData.txt\u003c/code\u003e","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"     * @exception IOException In the event {@link FileHandler#readFile()} is unable to read the file","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"    public TaskList(FileHandler fileObject) {","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"            taskList \u003d fileObject.readFile();","lastModifiedDate":"2023-02-24"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"Whoops cannot read file\");","lastModifiedDate":"2023-02-24"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"     * Adds a {@link Task} object to the {@link TaskList#taskList}. Method is used by {@link helpers.Command} to add","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"     * \u003ccode\u003eTask\u003c/code\u003e objects to {@link TaskList#taskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"     * @param task The {@link Task} object which is added to the {@link TaskList#taskList}.","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-02-24"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"        taskList.add(task); //note that the actual addition is done in the ExceptionHandler","lastModifiedDate":"2023-02-24"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"     * Returns the size of the {@link TaskList#taskList}. This method is used by methods in {@link Ui} and {@link helpers.Command}","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"     * @return The size of the {@link TaskList#taskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"    public int getSize() {","lastModifiedDate":"2023-02-24"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"        return taskList.size();","lastModifiedDate":"2023-02-24"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"     * Returns the index of an {@link Task} ele in the {@link TaskList#taskList}. This method is used in {@link TaskList#find(String, Ui)}","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"     * @param ele The {@link Task} whose index is being sought out.","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"     * @return The index of the {@link Task} which is being sought out.","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"    public int getIndex(Task ele) {","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"        return taskList.indexOf(ele);","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"     * Returns the {@link Task} at index \u003ccode\u003ei\u003c/code\u003e in  {@link TaskList#taskList}. Used by methods in","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"     * {@link helpers.Command}, {@link Ui} and {@link helpers.ExceptionGenerator}","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"     * @param i Represent the index of the {@link Task}","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"     * @return A {@link Task} object which is at the \u003ccode\u003eith\u003c/code\u003e index in {@link TaskList#taskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"lihka1202"},"content":"    public Task getTask(int i) {","lastModifiedDate":"2023-02-24"},{"lineNumber":70,"author":{"gitId":"lihka1202"},"content":"        return taskList.get(i);","lastModifiedDate":"2023-02-24"},{"lineNumber":71,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":72,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":73,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"lihka1202"},"content":"     * Removes an instance of {@link Task} at index \u003ccode\u003ei\u003c/code\u003e in the {@link TaskList#taskList}. Used by methods in","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"lihka1202"},"content":"     * {@link helpers.Command}.","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"lihka1202"},"content":"     * @param i The index where {@link Task} needs to be removed","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"lihka1202"},"content":"    public void removeTask(int i) {","lastModifiedDate":"2023-02-24"},{"lineNumber":80,"author":{"gitId":"lihka1202"},"content":"        taskList.remove(i);","lastModifiedDate":"2023-02-24"},{"lineNumber":81,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":82,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":83,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"lihka1202"},"content":"     * Processes {@link Task} from {@link TaskList#taskList} into file readable format using {@link TaskFileHandler#enCode()}","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"lihka1202"},"content":"     * Used by {@link FileHandler#populateFile(TaskList)}.","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject In order to update the file with new data","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In the event the file cannot be written to.","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":90,"author":{"gitId":"lihka1202"},"content":"    public void addTaskListFile(FileHandler fileObject) throws IOException{","lastModifiedDate":"2023-02-24"},{"lineNumber":91,"author":{"gitId":"lihka1202"},"content":"        for(Task ele: taskList) {","lastModifiedDate":"2023-02-24"},{"lineNumber":92,"author":{"gitId":"lihka1202"},"content":"            fileObject.addToFile(ele.enCode() + System.lineSeparator());","lastModifiedDate":"2023-02-24"},{"lineNumber":93,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":94,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":95,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":96,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":97,"author":{"gitId":"lihka1202"},"content":"     * Finds instances of a certain keyword entered by the user amidst all the tasks in the {@link TaskList#taskList}.","lastModifiedDate":"2023-02-25"},{"lineNumber":98,"author":{"gitId":"lihka1202"},"content":"     * Used by {@link helpers.ExceptionGenerator}.","lastModifiedDate":"2023-02-25"},{"lineNumber":99,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":100,"author":{"gitId":"lihka1202"},"content":"     * @param toSearch","lastModifiedDate":"2023-02-25"},{"lineNumber":101,"author":{"gitId":"lihka1202"},"content":"     * @param ui","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":103,"author":{"gitId":"lihka1202"},"content":"    public void find(String toSearch, Ui ui) {","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"lihka1202"},"content":"        ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"lihka1202"},"content":"        int counter \u003d 0;","lastModifiedDate":"2023-02-25"},{"lineNumber":106,"author":{"gitId":"lihka1202"},"content":"        for(Task ele: taskList) {","lastModifiedDate":"2023-02-25"},{"lineNumber":107,"author":{"gitId":"lihka1202"},"content":"            if(ele.getDescription().contains(toSearch)\u003d\u003dtrue) {","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"lihka1202"},"content":"                System.out.println(\"\\t\" + Integer.toString(getIndex(ele)+1) + \".\" + ele.getStatusAndDescription());","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"lihka1202"},"content":"                counter+\u003d1;","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"lihka1202"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"lihka1202"},"content":"        if(counter \u003d\u003d 0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":113,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tSorry, nothing matches this!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":115,"author":{"gitId":"lihka1202"},"content":"        } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":116,"author":{"gitId":"lihka1202"},"content":"            ui.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":117,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":120,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"lihka1202":120}},{"path":"src/main/java/corefunctionalities/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package corefunctionalities;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"import dataypes.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyList;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"//import helpers.ExceptionGenerator;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"//import helpers.Parser;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-24"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":" * A Class that deals with user input and outputs which are shown after processing these inputs. Contains instances of","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":" * {@link String} and {@link Scanner}","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanchary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"public class Ui {","lastModifiedDate":"2023-02-24"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"    protected String userInput;","lastModifiedDate":"2023-02-24"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"    //protected Parser parser \u003d new Parser();","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"    //protected ExceptionGenerator exceptionGenerator \u003d new ExceptionGenerator();","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"     * An empty Constructor to initialize an object of type {@link Ui}.","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"    public Ui () {}","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"     * Reads in input from the user, via the {@link Scanner} object. Used in {@link Duke} to read input.","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"    public void readCommand() {","lastModifiedDate":"2023-02-24"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-24"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"        this.userInput \u003d in.nextLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"     * Returns {@link String} user input. This method is used in {@link Ui#nullChecker()}.","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"     * @return A {@link String} which represents the user input.","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"    public String getUserInput() {","lastModifiedDate":"2023-02-24"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"        return this.userInput;","lastModifiedDate":"2023-02-24"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"     * This method shows the opening screen for {@link Duke}.","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-02-24"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-02-24"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-02-24"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-02-24"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-02-24"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-02-24"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-02-24"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"---------------------------------------------------------------------------------\");","lastModifiedDate":"2023-02-24"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-02-24"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-02-24"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"If you are unsure of the commands, type \u0027help\u0027\");","lastModifiedDate":"2023-02-24"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"---------------------------------------------------------------------------------\");","lastModifiedDate":"2023-02-24"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"     * This method is used to print a line composed of \"--\".","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"    public void printLine() {","lastModifiedDate":"2023-02-24"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t---------------------------------------------------------------------------------\");","lastModifiedDate":"2023-02-24"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":68,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"lihka1202"},"content":"     * This method list all the {@link Task} objects in the {@link TaskList#taskList}. This method is used by {@link helpers.Command#commandlistTasks(TaskList)}","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link java.util.ArrayList\u003cTask\u003e} containing all the tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"lihka1202"},"content":"     * @throws EmptyList If the list is empty.","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"lihka1202"},"content":"    public void listTasks(TaskList taskList) throws EmptyList {","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"lihka1202"},"content":"        if(taskList.getSize()\u003d\u003d0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"lihka1202"},"content":"            throw new EmptyList();","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":79,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tHere are the tasks in your list:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":80,"author":{"gitId":"lihka1202"},"content":"        for(int i \u003d 0; i\u003c taskList.getSize();i+\u003d1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":81,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\u0027\\t\u0027 + Integer.toString(i+1) + \".\" + taskList.getTask(i).getStatusAndDescription());","lastModifiedDate":"2023-02-24"},{"lineNumber":82,"author":{"gitId":"lihka1202"},"content":"            // can be further optimized.","lastModifiedDate":"2023-02-24"},{"lineNumber":83,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":84,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":85,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":86,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":87,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"lihka1202"},"content":"     * This prints the task which was unmarked by {@link helpers.Command#commandUnMarkTask(String, TaskList, FileHandler)}","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":90,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The input command supplied by the user","lastModifiedDate":"2023-02-25"},{"lineNumber":91,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link TaskList} containing the \u003ccode\u003etaskList\u003c/code\u003e","lastModifiedDate":"2023-02-25"},{"lineNumber":92,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":93,"author":{"gitId":"lihka1202"},"content":"    public void printUnmarkedTask(String userInput, TaskList taskList) {","lastModifiedDate":"2023-02-25"},{"lineNumber":94,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":95,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tNice! I\u0027ve marked this task as not done:\");//modifying element in the tasklist","lastModifiedDate":"2023-02-24"},{"lineNumber":96,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t\" + taskList.getTask(Integer.parseInt(userInput.split(\" \")[1]) - 1).getStatusAndDescription());","lastModifiedDate":"2023-02-24"},{"lineNumber":97,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":98,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":99,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":100,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":101,"author":{"gitId":"lihka1202"},"content":"     * This prints the task which was marked by {@link helpers.Command#commandMarkTask(String, TaskList, FileHandler)}","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":103,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The input command supplied by the user","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link TaskList} containing the \u003ccode\u003etaskList\u003c/code\u003e","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":106,"author":{"gitId":"lihka1202"},"content":"    public void printMarkedTask(String userInput, TaskList taskList) {","lastModifiedDate":"2023-02-25"},{"lineNumber":107,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":108,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");//modifying element in the tasklist","lastModifiedDate":"2023-02-24"},{"lineNumber":109,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t\" + taskList.getTask(Integer.parseInt(userInput.split(\" \")[1]) - 1).getStatusAndDescription());","lastModifiedDate":"2023-02-24"},{"lineNumber":110,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":111,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":112,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":113,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"lihka1202"},"content":"     * This method prints the number of {@link Task} objects which are present in {@link TaskList#taskList}. This method","lastModifiedDate":"2023-02-25"},{"lineNumber":115,"author":{"gitId":"lihka1202"},"content":"     * is used by {@link Ui}","lastModifiedDate":"2023-02-25"},{"lineNumber":116,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":117,"author":{"gitId":"lihka1202"},"content":"     * @param currentIndex The size of the {@link TaskList#taskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"lihka1202"},"content":"    public void printNoTasks(int currentIndex) {","lastModifiedDate":"2023-02-24"},{"lineNumber":120,"author":{"gitId":"lihka1202"},"content":"        if(currentIndex\u003d\u003d1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":121,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tNow you have \" + Integer.toString(currentIndex) + \" task in the list\");","lastModifiedDate":"2023-02-24"},{"lineNumber":122,"author":{"gitId":"lihka1202"},"content":"        } else {","lastModifiedDate":"2023-02-24"},{"lineNumber":123,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tNow you have \" + Integer.toString(currentIndex) + \" tasks in the list\");","lastModifiedDate":"2023-02-24"},{"lineNumber":124,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":125,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":126,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":127,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":128,"author":{"gitId":"lihka1202"},"content":"     * Formats the {@link Ui#printNoTasks(int)} appropriately and prints it. Used by methods in {@link helpers.Command}","lastModifiedDate":"2023-02-25"},{"lineNumber":129,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"lihka1202"},"content":"     * @param taskList","lastModifiedDate":"2023-02-25"},{"lineNumber":131,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":132,"author":{"gitId":"lihka1202"},"content":"    public void printTaskEnding (TaskList taskList) {","lastModifiedDate":"2023-02-24"},{"lineNumber":133,"author":{"gitId":"lihka1202"},"content":"        this.printNoTasks(taskList.getSize());","lastModifiedDate":"2023-02-24"},{"lineNumber":134,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":135,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":136,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":137,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":138,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":139,"author":{"gitId":"lihka1202"},"content":"     * This method prints out the parting statements from {@link Duke}.","lastModifiedDate":"2023-02-25"},{"lineNumber":140,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":141,"author":{"gitId":"lihka1202"},"content":"    public void sayBye() {","lastModifiedDate":"2023-02-24"},{"lineNumber":142,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":143,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tBye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":144,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":145,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":146,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":147,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":148,"author":{"gitId":"lihka1202"},"content":"     * This method prints the Command Line User Guide should the user ever need it.","lastModifiedDate":"2023-02-25"},{"lineNumber":149,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":150,"author":{"gitId":"lihka1202"},"content":"    public void displayHelper() {","lastModifiedDate":"2023-02-24"},{"lineNumber":151,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":152,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tHi! These are the commands which duke understands!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":153,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":154,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tlist - This would display all the existing Tasks in the Task List\");","lastModifiedDate":"2023-02-25"},{"lineNumber":155,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":156,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\ttodo - Creates a todo, use it by adding \u0027todo\u0027 and some description. An example is listed below:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":157,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t\u0027todo get milk\u0027\");","lastModifiedDate":"2023-02-24"},{"lineNumber":158,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":159,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tdeadline - Creates a deadline, use it by adding \u0027deadline\u0027 followed by some description and a deadline which follows \u0027/by\u0027\");","lastModifiedDate":"2023-02-24"},{"lineNumber":160,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tNote that the dates must follow the following format: yyyy-mm-dd\");","lastModifiedDate":"2023-02-25"},{"lineNumber":161,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t\u0027deadline get milk /by 2023-12-01\u0027\");","lastModifiedDate":"2023-02-25"},{"lineNumber":162,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":163,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tevent - Creates an event, use it by adding \u0027event\u0027 ,some description, a start date followed by \u0027/from\u0027 and an end date followed by \u0027/to\u0027\");","lastModifiedDate":"2023-02-24"},{"lineNumber":164,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tNote that the dates must follow the following format: yyyy-mm-dd\");","lastModifiedDate":"2023-02-25"},{"lineNumber":165,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t\u0027event get some milk /from 2023-03-01 /to 2023-03-02\");","lastModifiedDate":"2023-02-25"},{"lineNumber":166,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":167,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tmark - mark would inform Duke to mark a task as complete. To invoke type \u0027mark\u0027 followed by the serial number of the specific task\");","lastModifiedDate":"2023-02-25"},{"lineNumber":168,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t \u0027mark 1\u0027\");","lastModifiedDate":"2023-02-25"},{"lineNumber":169,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":170,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tunmark - unmark would inform Duke to unmark a task as incomplete. To invoke type \u0027unmark\u0027 followed by the serial number of the specific task\");","lastModifiedDate":"2023-02-25"},{"lineNumber":171,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t \u0027unmark 1\u0027\");","lastModifiedDate":"2023-02-25"},{"lineNumber":172,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":173,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tdelete - delete would inform Duke to delete a task. To invoke type \u0027delete\u0027 followed by the serial number of the specific task\");","lastModifiedDate":"2023-02-25"},{"lineNumber":174,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t \u0027delete 1\u0027\");","lastModifiedDate":"2023-02-25"},{"lineNumber":175,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":176,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tfind - find would inform Duke to look for a certain phrase across all the Tasks. To invoke type \u0027find\u0027 followed by the phrase you wish to look for\");","lastModifiedDate":"2023-02-25"},{"lineNumber":177,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t \u0027find book\u0027\");","lastModifiedDate":"2023-02-25"},{"lineNumber":178,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":179,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tbye - to exit the program!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":180,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":181,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":182,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":183,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":184,"author":{"gitId":"lihka1202"},"content":"     * This method checks if the input read by {@link Ui#readCommand()} is non-empty.","lastModifiedDate":"2023-02-25"},{"lineNumber":185,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":186,"author":{"gitId":"lihka1202"},"content":"    public void nullChecker() {","lastModifiedDate":"2023-02-24"},{"lineNumber":187,"author":{"gitId":"lihka1202"},"content":"        while(this.getUserInput().equals(\"\") || this.getUserInput().equals(\" \")) {","lastModifiedDate":"2023-02-24"},{"lineNumber":188,"author":{"gitId":"lihka1202"},"content":"            this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":189,"author":{"gitId":"lihka1202"},"content":"            System.out.println(\"\\tSorry please enter a valid input \");","lastModifiedDate":"2023-02-24"},{"lineNumber":190,"author":{"gitId":"lihka1202"},"content":"            this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":191,"author":{"gitId":"lihka1202"},"content":"            this.readCommand();","lastModifiedDate":"2023-02-24"},{"lineNumber":192,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":193,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":194,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":195,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":196,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":197,"author":{"gitId":"lihka1202"},"content":"     * This method prompts the user to enter a valid input, if the input read by {@link Ui#readCommand()} is not valid.","lastModifiedDate":"2023-02-25"},{"lineNumber":198,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":199,"author":{"gitId":"lihka1202"},"content":"    public void validCommand() {","lastModifiedDate":"2023-02-24"},{"lineNumber":200,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":201,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tPlease enter a valid input\");","lastModifiedDate":"2023-02-24"},{"lineNumber":202,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":203,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":204,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":205,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":206,"author":{"gitId":"lihka1202"},"content":"     * This method prints out the details of the {@link Task} Object which was deleted from the {@link TaskList#taskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":207,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":208,"author":{"gitId":"lihka1202"},"content":"     * @param item The {@link Task} which needs to be deleted","lastModifiedDate":"2023-02-25"},{"lineNumber":209,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link TaskList#taskList} containing all the \u003ccode\u003eTasks\u003c/code\u003e","lastModifiedDate":"2023-02-25"},{"lineNumber":210,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":211,"author":{"gitId":"lihka1202"},"content":"    public void printDeleteCommand(Task item, TaskList taskList) {","lastModifiedDate":"2023-02-24"},{"lineNumber":212,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":213,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tNoted! I\u0027ve removed this task!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":214,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t\" + item.getStatusAndDescription());","lastModifiedDate":"2023-02-24"},{"lineNumber":215,"author":{"gitId":"lihka1202"},"content":"        this.printNoTasks(taskList.getSize());","lastModifiedDate":"2023-02-24"},{"lineNumber":216,"author":{"gitId":"lihka1202"},"content":"        this.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":217,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":218,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":219,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":220,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"lihka1202":220}},{"path":"src/main/java/dataypes/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package dataypes;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"import exceptions.WrongChrono;","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":" * This class extends {@link Task} by providing each {@link Task} with a {@link Deadlines#deadline}.","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanchary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":"public class Deadlines extends Task implements TaskFileHandler {","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":"    protected LocalDate deadline;","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"    //protected LocalDateTime deadlineTesting;","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"     * The constructor creates a new object of type {@link Deadlines}. This also prints out the content of the {@link Task}","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"     * which was just instantiated.","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"     * @param description A description of the {@link Task}.","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"     * @param deadline A deadline for the {@link Task} in the form of \"yyyy-mm-dd\".","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"     * @throws DateTimeParseException In the event the format of the deadline is wrong.","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"     * @throws WrongChrono In the event the deadline is in the past.","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"    public Deadlines(String description, String deadline) throws DateTimeParseException, WrongChrono {","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"        super(description);","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"        this.deadline \u003d LocalDate.parse(deadline);","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"        if(this.deadline.isBefore(LocalDate.now())) {","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"            throw new WrongChrono();","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t\" + this.getStatusAndDescription());","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"     * An empty constructor for {@link Deadlines}","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"    public Deadlines(){} //more when you get to decode and less in enCode","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"     * Returns the {@link Deadlines#deadline} in the form of a {@link String} and formatted as \"MMM d yyyy\";","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"     * @return A {@link String} containing a formatted {@link Deadlines#deadline}","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"    public String getDeadline() {","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"        return this.deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"     * Sets the {@link Deadlines#deadline} by parsing a {@link String} using {@link LocalDate#parse(CharSequence)} and","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"     * converting it to {@link LocalDate} type.","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"     * @param deadline A {@link String} of the form \"yyyy-mm-dd\".","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":"    public void setDeadline(String deadline) {","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"        this.deadline \u003d LocalDate.parse(deadline);","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"    public String getStatusAndDescription() {","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"        return \"[D]\" + super.getStatusAndDescription() + \"(by: \" + this.getDeadline() + \")\";","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"    public String enCode() {","lastModifiedDate":"2023-02-18"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"        return \"D # \" + super.enCode() + \" # \" + this.deadline;","lastModifiedDate":"2023-02-18"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"lihka1202":67}},{"path":"src/main/java/dataypes/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package dataypes;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"import exceptions.FromAfterTo;","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"import exceptions.WrongChrono;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":" * This class extends {@link Task} by providing each {@link Task} with a range of dates","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":" * {@link Events#from} a certain date {@link Events#to} another date.","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanchary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"public class Events extends Task implements TaskFileHandler {","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"    protected LocalDate from;","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"    protected LocalDate to;","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"     * The constructor creates a new object of type {@link Events} and also prints out the data with which it was instantiated.","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"     * @param description The description of the {@link Task}","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"     * @param from The {@link Events#from} date stored as a {@link LocalDate} Object","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"     * @param to The {@link Events#to} date stored as a {@link LocalDate} Object","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"     * @throws DateTimeParseException In the event the format of the from or to dates is incorrect","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"     * @throws FromAfterTo In the event if the from date is after the to date.","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"     * @throws WrongChrono In the event both the from and to dates are in the past","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"    public Events(String description, String from, String to) throws DateTimeParseException, FromAfterTo, WrongChrono{","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"        super(description);","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"        this.from \u003d LocalDate.parse(from);","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"        this.to \u003d LocalDate.parse(to);","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"        if(this.from.isAfter(this.to)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"            throw new FromAfterTo();","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"        } else if(this.from.isBefore(LocalDate.now()) || this.from.isBefore(LocalDate.now())) {","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"            throw new WrongChrono();","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t\" + this.getStatusAndDescription());","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"     * An empty constructor for {@link Events}","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"    public Events(){}","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"     * Returns the {@link Events#from} date in the form of a {@link String} formatted as \"MMM d yyyy\"","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"     * @return A {@link String} representing the {@link Events#from} date.","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"    public String getFrom() {","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"        return this.from.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"     * Returns the {@link Events#to} date in the form of a {@link String} formatted as \"MMM d yyyy\"","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"     * @return A {@link String} representing the {@link Events#to} date.","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"    public String getTo() {","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"        return this.to.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"     * Sets the {@link Events#from} to another date.","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"lihka1202"},"content":"     * @param from A {@link String} of the format \"yyyy-mm-dd\" which needs to be set as the {@link Events#from}","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"lihka1202"},"content":"    public void setFrom(String from) {","lastModifiedDate":"2023-02-18"},{"lineNumber":72,"author":{"gitId":"lihka1202"},"content":"        this.from \u003d LocalDate.parse(from);","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":74,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":75,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"lihka1202"},"content":"     * Sets the {@link Events#to} to another date.","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"lihka1202"},"content":"     * @param to A {@link String} of the format \"yyyy-mm-dd\" which needs to be set as the {@link Events#to}","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"lihka1202"},"content":"    public void setTo(String to) {","lastModifiedDate":"2023-02-18"},{"lineNumber":81,"author":{"gitId":"lihka1202"},"content":"        this.to \u003d LocalDate.parse(to);","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":83,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"lihka1202"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"lihka1202"},"content":"    public String getStatusAndDescription() {","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"lihka1202"},"content":"        return \"[E]\" + super.getStatusAndDescription() + \"(from: \" + this.getFrom() + \" to: \" + this.getTo() + \")\";","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"lihka1202"},"content":"    public String enCode() {","lastModifiedDate":"2023-02-18"},{"lineNumber":89,"author":{"gitId":"lihka1202"},"content":"        return \"E # \" + super.enCode() + \" # \" + this.from + \" # \" + this.to;","lastModifiedDate":"2023-02-18"},{"lineNumber":90,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":91,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"lihka1202":91}},{"path":"src/main/java/dataypes/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package dataypes;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":" * This is the class which represents a Class with a {@link Task#description} and completion status {@link Task#isDone}","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanachary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"public class Task  implements TaskFileHandler {","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"    protected String description;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":"     * An empty constructor of {@link Task}","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":"    public Task() {}","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"     * A constructor for {@link Task} which takes in the {@link Task#description} and sets it, while ensuring that the","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"     * {@link Task#isDone} is set to false.","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"     * @param description The description of the {@link Task}.","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"     * Returns {@link Task#isDone}","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"     * @return Returns {@link Task#isDone} which signifies if the task is done or not","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"    public boolean getStatus() {","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"        return this.isDone;","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"     * This returns a {@link String} icon based on the {@link Task#isDone} value.","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"     * @return Either \u003ccode\u003e[X] or [ ]\u003c/code\u003e based on the {@link Task#isDone} value.","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"        return (isDone ? \"[X]\" : \"[ ]\"); // mark done task with X","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"     * Returns the {@link Task#description} of the {@link Task} object.","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"     * @return A {@link String} which is the description of the {@link Task} object","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"     * */","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"        return this.description;","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"     * This returns the status and description used in {@link corefunctionalities.Ui} to display objects of type","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":"     * {@link Task}.","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"     * @return A formatted {@link String} containing the {@link Task#description} and {@link Task#isDone}.","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"    public String getStatusAndDescription() {","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"        return this.getStatusIcon() + \" \" + this.getDescription();","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"     * Marks the task as \u003ccode\u003eDone\u003c/code\u003e by toggling {@link Task#isDone} to true;","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"lihka1202"},"content":"    public void markTask() {","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"lihka1202"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-25"},{"lineNumber":70,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"lihka1202"},"content":"     * Unarks the task as \u003ccode\u003eDone\u003c/code\u003e by toggling {@link Task#isDone} to false;","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"lihka1202"},"content":"    public void unMarkTask() {","lastModifiedDate":"2023-01-25"},{"lineNumber":75,"author":{"gitId":"lihka1202"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"lihka1202"},"content":"     * Returns a {@link String} which can be added to the file and later re-read to populate the {@link corefunctionalities.TaskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"lihka1202"},"content":"     * @return A {@link String} formatted for entry into the file","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"lihka1202"},"content":"    public String enCode() {","lastModifiedDate":"2023-02-18"},{"lineNumber":84,"author":{"gitId":"lihka1202"},"content":"        return getStatus() + \" # \" + getDescription();","lastModifiedDate":"2023-02-18"},{"lineNumber":85,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":86,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"lihka1202"},"content":"     * This method sets the description of the Object based on the input.","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":90,"author":{"gitId":"lihka1202"},"content":"     * @param description The {@link Task#description} of the {@link Task} object","lastModifiedDate":"2023-02-25"},{"lineNumber":91,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":92,"author":{"gitId":"lihka1202"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2023-02-18"},{"lineNumber":93,"author":{"gitId":"lihka1202"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-18"},{"lineNumber":94,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":95,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":96,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"lihka1202":96}},{"path":"src/main/java/dataypes/TaskFileHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package dataypes;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":" * An interface which is used to encode an object of {@link Task} into a file readable format.","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanachary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"public interface TaskFileHandler {","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"    String enCode();","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"lihka1202":10}},{"path":"src/main/java/dataypes/Todos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package dataypes;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":" * A Class that is an extension of the {@link Task}, by creating different types of tasks.","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanachary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"public class Todos extends Task implements TaskFileHandler {","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"     * The constructor sets the description.","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":"     * @param description The description of the {@link Todos} object.","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":"    public Todos(String description) {","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":"        super(description);","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"        System.out.println(\"\\t\\t\" + getStatusAndDescription());","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"     * An emmpty constructor to initialize the Todos Class","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"    public Todos () {}","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"    public String getStatusAndDescription() {","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"        return \"[T]\" + super.getStatusAndDescription();","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"    public String enCode() {","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"        return \"T # \" + super.enCode();","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"//random comment","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"lihka1202":34}},{"path":"src/main/java/exceptions/DeadlineIsBlank.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class DeadlineIsBlank extends Exception{","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/DeadlineMissingPhrase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class DeadlineMissingPhrase extends DukeException{","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":7}},{"path":"src/main/java/exceptions/EmptyDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class EmptyDeadline extends DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":5}},{"path":"src/main/java/exceptions/EmptyEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class EmptyEvent extends DukeException{","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/EmptyList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class EmptyList extends DukeException{","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/EmptyTodo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class EmptyTodo extends DukeException{","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":6}},{"path":"src/main/java/exceptions/EventFromIsBlank.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class EventFromIsBlank extends DukeException{","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/EventMissingBothPhrases.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class EventMissingBothPhrases extends Exception{","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/EventMissingFromPhrase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class EventMissingFromPhrase extends DukeException{","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/EventMissingToPhrase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class EventMissingToPhrase extends DukeException{","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/EventToIsBlank.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class EventToIsBlank extends DukeException{","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/FromAfterTo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class FromAfterTo extends DukeException{","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/MarkQualityException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class MarkQualityException extends DukeException{","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/TaskMarked.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class TaskMarked extends DukeException{","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/TaskUnMarked.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class TaskUnMarked extends DukeException{","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/UnmarkQualityException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class UnmarkQualityException extends DukeException{","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/exceptions/WrongChrono.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package exceptions;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"public class WrongChrono extends DukeException{","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"lihka1202":4}},{"path":"src/main/java/helpers/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package helpers;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"import corefunctionalities.FileHandler;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"import corefunctionalities.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"import corefunctionalities.Ui;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"import dataypes.Deadlines;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":"import dataypes.Events;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"import dataypes.Task;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"import dataypes.Todos;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"import exceptions.DeadlineIsBlank;","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":"import exceptions.DeadlineMissingPhrase;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyDeadline;","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyEvent;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyList;","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyTodo;","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventFromIsBlank;","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventMissingBothPhrases;","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventMissingFromPhrase;","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventMissingToPhrase;","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventToIsBlank;","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"import exceptions.FromAfterTo;","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"import exceptions.MarkQualityException;","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"import exceptions.TaskMarked;","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"import exceptions.TaskUnMarked;","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"import exceptions.UnmarkQualityException;","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"import exceptions.WrongChrono;","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-24"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":" * The Command Class can execute all the commands and pass any exceptions to the {@link corefunctionalities.ExceptionHandler}","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanachary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"public class Command {","lastModifiedDate":"2023-02-24"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"    protected Parser parser \u003d new Parser();","lastModifiedDate":"2023-02-24"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"    protected ExceptionGenerator exceptionGenerator \u003d new ExceptionGenerator();","lastModifiedDate":"2023-02-24"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"    protected Ui ui \u003d new Ui();","lastModifiedDate":"2023-02-24"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"     * List the tasks stored inside {@link TaskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link TaskList} containing the {@link Task} elements","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"     * @throws EmptyList In the case the List is empty","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"    public void commandlistTasks(TaskList taskList) throws EmptyList {","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"        ui.listTasks(taskList);","lastModifiedDate":"2023-02-24"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"     * This command diplays {@link Ui#listTasks(TaskList)}","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"    public void commandHelp() {","lastModifiedDate":"2023-02-24"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"        ui.displayHelper();","lastModifiedDate":"2023-02-24"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"     * This method executes the addition of an {@link Todos} datatype into the {@link TaskList}.","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The userinput which contains the details which can be extracted into the {@link Todos} object","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link TaskList} containing the {@link Task} elements","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject The object of {@link FileHandler} which can write to a file","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"     * @throws EmptyTodo In the case the description of the Todo is empty","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In case fileObject cannot write to the file","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"    public void commandTodo(String userInput, TaskList taskList, FileHandler fileObject) throws EmptyTodo, IOException {","lastModifiedDate":"2023-02-24"},{"lineNumber":68,"author":{"gitId":"lihka1202"},"content":"        String[] holder \u003d parser.getTodo(userInput);","lastModifiedDate":"2023-02-24"},{"lineNumber":69,"author":{"gitId":"lihka1202"},"content":"        exceptionGenerator.todoExceptionGenerator(holder);","lastModifiedDate":"2023-02-24"},{"lineNumber":70,"author":{"gitId":"lihka1202"},"content":"        String input \u003d userInput.replace(\"todo \", \"\");","lastModifiedDate":"2023-02-24"},{"lineNumber":71,"author":{"gitId":"lihka1202"},"content":"        ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":72,"author":{"gitId":"lihka1202"},"content":"        Todos temp \u003d new Todos(input);","lastModifiedDate":"2023-02-24"},{"lineNumber":73,"author":{"gitId":"lihka1202"},"content":"        taskList.addTask(temp); // this will be an issue, weirdly it isn\u0027t","lastModifiedDate":"2023-02-24"},{"lineNumber":74,"author":{"gitId":"lihka1202"},"content":"        fileObject.addToFile(taskList.getTask(taskList.getSize()-1).enCode() + System.lineSeparator());","lastModifiedDate":"2023-02-24"},{"lineNumber":75,"author":{"gitId":"lihka1202"},"content":"        ui.printTaskEnding(taskList);","lastModifiedDate":"2023-02-24"},{"lineNumber":76,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":77,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"lihka1202"},"content":"     * This method executes the addition of an {@link Deadlines} datatype into the {@link TaskList}.","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The userinput which contains the details which can be extracted into the {@link Deadlines} object","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link TaskList} containing the {@link Task} elements","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject The object of {@link FileHandler} which can write to a file","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"lihka1202"},"content":"     * @throws EmptyDeadline In case the deadline description is empty","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"lihka1202"},"content":"     * @throws DeadlineMissingPhrase In case /by phrase is missing.","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"lihka1202"},"content":"     * @throws DeadlineIsBlank In case the deadline date is blank.","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In case fileObject cannot write to the file","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"lihka1202"},"content":"     * @throws DateTimeParseException In case the /by date is in the wrong format","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"lihka1202"},"content":"     * @throws WrongChrono In case the /by date is before the current date.","lastModifiedDate":"2023-02-25"},{"lineNumber":90,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":91,"author":{"gitId":"lihka1202"},"content":"    public void commandDeadline(String userInput, TaskList taskList, FileHandler fileObject) throws EmptyDeadline, DeadlineMissingPhrase, DeadlineIsBlank, IOException, DateTimeParseException, WrongChrono {","lastModifiedDate":"2023-02-25"},{"lineNumber":92,"author":{"gitId":"lihka1202"},"content":"        String[] deadlineAndDescription \u003d parser.getDeadline(userInput);","lastModifiedDate":"2023-02-24"},{"lineNumber":93,"author":{"gitId":"lihka1202"},"content":"        exceptionGenerator.deadlineExceptionGenerator(deadlineAndDescription, userInput);","lastModifiedDate":"2023-02-24"},{"lineNumber":94,"author":{"gitId":"lihka1202"},"content":"        ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":95,"author":{"gitId":"lihka1202"},"content":"        Deadlines temp \u003d new Deadlines(deadlineAndDescription[0], deadlineAndDescription[1]);","lastModifiedDate":"2023-02-24"},{"lineNumber":96,"author":{"gitId":"lihka1202"},"content":"        taskList.addTask(temp);","lastModifiedDate":"2023-02-24"},{"lineNumber":97,"author":{"gitId":"lihka1202"},"content":"        fileObject.addToFile(taskList.getTask(taskList.getSize()-1).enCode() + System.lineSeparator());","lastModifiedDate":"2023-02-24"},{"lineNumber":98,"author":{"gitId":"lihka1202"},"content":"        ui.printTaskEnding(taskList);","lastModifiedDate":"2023-02-24"},{"lineNumber":99,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":100,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":101,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"lihka1202"},"content":"     * This method executes the addition of an {@link Events} datatype into the {@link TaskList}.","lastModifiedDate":"2023-02-25"},{"lineNumber":103,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The userinput which contains the details which can be extracted into the {@link Events} object","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link TaskList} containing the {@link Task} elements","lastModifiedDate":"2023-02-25"},{"lineNumber":106,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject The object of {@link FileHandler} which can write to a file","lastModifiedDate":"2023-02-25"},{"lineNumber":107,"author":{"gitId":"lihka1202"},"content":"     * @throws EmptyEvent In case the Event Description is Empty","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"lihka1202"},"content":"     * @throws EventMissingBothPhrases In case the Event is missing the /from and /to phrase","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"lihka1202"},"content":"     * @throws EventMissingToPhrase IN case the event is missing the /to phrase","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"lihka1202"},"content":"     * @throws EventMissingFromPhrase In case the event is missing the /from phrase","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"lihka1202"},"content":"     * @throws EventFromIsBlank In case the /from date is blank","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"lihka1202"},"content":"     * @throws EventToIsBlank In case the /to date is blank","lastModifiedDate":"2023-02-25"},{"lineNumber":113,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In case fileObject cannot write to the file","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"lihka1202"},"content":"     * @throws DateTimeParseException In case the /from and /to dates aren\u0027t in the right format","lastModifiedDate":"2023-02-25"},{"lineNumber":115,"author":{"gitId":"lihka1202"},"content":"     * @throws FromAfterTo In case the /from date is after the /to date","lastModifiedDate":"2023-02-25"},{"lineNumber":116,"author":{"gitId":"lihka1202"},"content":"     * @throws WrongChrono In case /from or /to dates are before the current date.","lastModifiedDate":"2023-02-25"},{"lineNumber":117,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"lihka1202"},"content":"    public void commandEvent(String userInput, TaskList taskList, FileHandler fileObject) throws EmptyEvent, EventMissingBothPhrases, EventMissingToPhrase, EventMissingFromPhrase, EventFromIsBlank, EventToIsBlank, IOException, DateTimeParseException, FromAfterTo, WrongChrono, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"lihka1202"},"content":"        String [] eventDescription \u003d parser.getEvent(userInput);","lastModifiedDate":"2023-02-24"},{"lineNumber":120,"author":{"gitId":"lihka1202"},"content":"        exceptionGenerator.eventExceptionGenerator(eventDescription, userInput);","lastModifiedDate":"2023-02-24"},{"lineNumber":121,"author":{"gitId":"lihka1202"},"content":"        ui.printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":122,"author":{"gitId":"lihka1202"},"content":"        Events temp \u003d new Events(eventDescription[0], eventDescription[1], eventDescription[2]);","lastModifiedDate":"2023-02-24"},{"lineNumber":123,"author":{"gitId":"lihka1202"},"content":"        taskList.addTask(temp);","lastModifiedDate":"2023-02-24"},{"lineNumber":124,"author":{"gitId":"lihka1202"},"content":"        fileObject.addToFile(taskList.getTask(taskList.getSize()-1).enCode() + System.lineSeparator());","lastModifiedDate":"2023-02-24"},{"lineNumber":125,"author":{"gitId":"lihka1202"},"content":"        ui.printTaskEnding(taskList);","lastModifiedDate":"2023-02-24"},{"lineNumber":126,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":127,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":128,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":129,"author":{"gitId":"lihka1202"},"content":"     * Marks a specific task done in {@link TaskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":131,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The userinput which contains the details which can be used to mark","lastModifiedDate":"2023-02-25"},{"lineNumber":132,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link TaskList} containing the {@link Task} elements","lastModifiedDate":"2023-02-25"},{"lineNumber":133,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject The object of {@link FileHandler} which can write to a file","lastModifiedDate":"2023-02-25"},{"lineNumber":134,"author":{"gitId":"lihka1202"},"content":"     * @throws MarkQualityException If the serial number of the task to be marked does not exist","lastModifiedDate":"2023-02-25"},{"lineNumber":135,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In case fileObject cannot write to the file","lastModifiedDate":"2023-02-25"},{"lineNumber":136,"author":{"gitId":"lihka1202"},"content":"     * @throws NumberFormatException In case the input is not numerical","lastModifiedDate":"2023-02-25"},{"lineNumber":137,"author":{"gitId":"lihka1202"},"content":"     * @throws TaskMarked In case the task is already marked","lastModifiedDate":"2023-02-25"},{"lineNumber":138,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":139,"author":{"gitId":"lihka1202"},"content":"    public void commandMarkTask(String userInput, TaskList taskList, FileHandler fileObject) throws MarkQualityException, IOException, NumberFormatException, TaskMarked {","lastModifiedDate":"2023-02-25"},{"lineNumber":140,"author":{"gitId":"lihka1202"},"content":"        exceptionGenerator.markExceptionGenerator(userInput, taskList);","lastModifiedDate":"2023-02-24"},{"lineNumber":141,"author":{"gitId":"lihka1202"},"content":"        taskList.getTask(Integer.parseInt(userInput.split(\" \")[1]) - 1).markTask();","lastModifiedDate":"2023-02-24"},{"lineNumber":142,"author":{"gitId":"lihka1202"},"content":"        fileObject.populateFile(taskList);","lastModifiedDate":"2023-02-24"},{"lineNumber":143,"author":{"gitId":"lihka1202"},"content":"        ui.printMarkedTask(userInput, taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":144,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":145,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":146,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":147,"author":{"gitId":"lihka1202"},"content":"     * Unmarks a specific task done in {@link TaskList}","lastModifiedDate":"2023-02-25"},{"lineNumber":148,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":149,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The userinput which contains the details which can be used to unmark","lastModifiedDate":"2023-02-25"},{"lineNumber":150,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link TaskList} containing the {@link Task} elements","lastModifiedDate":"2023-02-25"},{"lineNumber":151,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject The object of {@link FileHandler} which can write to a file","lastModifiedDate":"2023-02-25"},{"lineNumber":152,"author":{"gitId":"lihka1202"},"content":"     * @throws UnmarkQualityException If the serial number of the task to be unmarked does not exist","lastModifiedDate":"2023-02-25"},{"lineNumber":153,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In case fileObject cannot write to the file","lastModifiedDate":"2023-02-25"},{"lineNumber":154,"author":{"gitId":"lihka1202"},"content":"     * @throws NumberFormatException In case the input is not numerical","lastModifiedDate":"2023-02-25"},{"lineNumber":155,"author":{"gitId":"lihka1202"},"content":"     * @throws TaskUnMarked In case the task is already unmarked","lastModifiedDate":"2023-02-25"},{"lineNumber":156,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":157,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":158,"author":{"gitId":"lihka1202"},"content":"    public void commandUnMarkTask(String userInput, TaskList taskList, FileHandler fileObject) throws UnmarkQualityException, IOException, NumberFormatException, TaskUnMarked {","lastModifiedDate":"2023-02-25"},{"lineNumber":159,"author":{"gitId":"lihka1202"},"content":"        exceptionGenerator.unMarkExceptionGenerator(userInput, taskList);","lastModifiedDate":"2023-02-24"},{"lineNumber":160,"author":{"gitId":"lihka1202"},"content":"        taskList.getTask(Integer.parseInt(userInput.split(\" \")[1]) - 1).unMarkTask();","lastModifiedDate":"2023-02-24"},{"lineNumber":161,"author":{"gitId":"lihka1202"},"content":"        fileObject.populateFile(taskList);","lastModifiedDate":"2023-02-24"},{"lineNumber":162,"author":{"gitId":"lihka1202"},"content":"        ui.printUnmarkedTask(userInput, taskList);","lastModifiedDate":"2023-02-25"},{"lineNumber":163,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":164,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":165,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":166,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":167,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The user input which contains the serial number of the task that needs to be deleted","lastModifiedDate":"2023-02-25"},{"lineNumber":168,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link TaskList} containing the {@link Task} elements","lastModifiedDate":"2023-02-25"},{"lineNumber":169,"author":{"gitId":"lihka1202"},"content":"     * @param fileObject The object of {@link FileHandler} which can write to a file","lastModifiedDate":"2023-02-25"},{"lineNumber":170,"author":{"gitId":"lihka1202"},"content":"     * @throws IndexOutOfBoundsException If the serial number of the task to be unmarked does not exist","lastModifiedDate":"2023-02-25"},{"lineNumber":171,"author":{"gitId":"lihka1202"},"content":"     * @throws NumberFormatException In case the input is not numerical","lastModifiedDate":"2023-02-25"},{"lineNumber":172,"author":{"gitId":"lihka1202"},"content":"     * @throws IOException In case fileObject cannot write to the file","lastModifiedDate":"2023-02-25"},{"lineNumber":173,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":174,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":175,"author":{"gitId":"lihka1202"},"content":"    public void commandDeleteTask(String userInput, TaskList taskList, FileHandler fileObject) throws IndexOutOfBoundsException, NumberFormatException, IOException, EmptyList{","lastModifiedDate":"2023-02-25"},{"lineNumber":176,"author":{"gitId":"lihka1202"},"content":"        if(taskList.getSize()\u003d\u003d0) {","lastModifiedDate":"2023-02-25"},{"lineNumber":177,"author":{"gitId":"lihka1202"},"content":"            throw new EmptyList();","lastModifiedDate":"2023-02-25"},{"lineNumber":178,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":179,"author":{"gitId":"lihka1202"},"content":"        Task item \u003d new Task();","lastModifiedDate":"2023-02-24"},{"lineNumber":180,"author":{"gitId":"lihka1202"},"content":"        item \u003d taskList.getTask(Integer.parseInt(userInput.split(\" \")[1]) - 1);","lastModifiedDate":"2023-02-24"},{"lineNumber":181,"author":{"gitId":"lihka1202"},"content":"        taskList.removeTask(Integer.parseInt(userInput.split(\" \")[1]) - 1);","lastModifiedDate":"2023-02-24"},{"lineNumber":182,"author":{"gitId":"lihka1202"},"content":"        fileObject.populateFile(taskList);","lastModifiedDate":"2023-02-24"},{"lineNumber":183,"author":{"gitId":"lihka1202"},"content":"        ui.printDeleteCommand(item, taskList);","lastModifiedDate":"2023-02-24"},{"lineNumber":184,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":185,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"lihka1202":185}},{"path":"src/main/java/helpers/ExceptionGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package helpers;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"import corefunctionalities.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"import exceptions.DeadlineIsBlank;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"import exceptions.DeadlineMissingPhrase;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyDeadline;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyEvent;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"import exceptions.EmptyTodo;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventFromIsBlank;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventMissingBothPhrases;","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventMissingFromPhrase;","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventMissingToPhrase;","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":"import exceptions.EventToIsBlank;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":"import exceptions.MarkQualityException;","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":"import exceptions.TaskMarked;","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"import exceptions.TaskUnMarked;","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"import exceptions.UnmarkQualityException;","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":" * This class generates the conditions during which the exceptions are invoked and passes to the {@link Command} Class","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":" * to be further passed down to the {@link corefunctionalities.ExceptionHandler} class.","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanchary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"public class ExceptionGenerator {","lastModifiedDate":"2023-02-24"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"    protected Parser parser \u003d new Parser();","lastModifiedDate":"2023-02-24"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"     * An empty constructor to initialize the ExceptionGenerator Class","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"    public ExceptionGenerator () {}","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"     * Generates the potential Exceptions for a {@link dataypes.Todos} Object","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"     * @param holder The split user input which can be processed further","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"     * @throws EmptyTodo In the case the description for the Todo is empty","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"    public void todoExceptionGenerator(String [] holder) throws EmptyTodo {","lastModifiedDate":"2023-02-24"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"        if(holder.length\u003c2)","lastModifiedDate":"2023-02-24"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"        {","lastModifiedDate":"2023-02-24"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"            throw new EmptyTodo();","lastModifiedDate":"2023-02-24"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"     * Generates the potential Exceptions for a {@link dataypes.Deadlines} Object","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"     * @param deadlineAndDescription The split user input which can be processed further","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The raw user input which can be processed further","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"     * @throws EmptyDeadline In the case the description for the Deadline is empty","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"     * @throws DeadlineMissingPhrase In the case the /by phrase is missing","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"     * @throws DeadlineIsBlank In the case that the deadline is empty.","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"    public void deadlineExceptionGenerator(String[]  deadlineAndDescription, String userInput) throws EmptyDeadline, DeadlineMissingPhrase, DeadlineIsBlank{","lastModifiedDate":"2023-02-24"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"        if(!userInput.contains(\"/by \") \u0026\u0026 userInput.split(\" \").length\u003e1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":"            throw new DeadlineMissingPhrase();","lastModifiedDate":"2023-02-24"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"        } else if(deadlineAndDescription.length\u003d\u003d1 || deadlineAndDescription[0].isBlank()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"            throw new EmptyDeadline();","lastModifiedDate":"2023-02-24"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"        } else if(deadlineAndDescription[1].isBlank()) {","lastModifiedDate":"2023-02-24"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"            throw new DeadlineIsBlank();","lastModifiedDate":"2023-02-24"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"     * Generates the potential Exceptions for a {@link dataypes.Events} Object","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"lihka1202"},"content":"     * @param eventDescription The split user input which can be processed further","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The raw user input which can be processed further","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"lihka1202"},"content":"     * @throws EmptyEvent In the case the description for the Event is empty","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"lihka1202"},"content":"     * @throws EventMissingBothPhrases In the case that both /from and /to are missing from the userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"lihka1202"},"content":"     * @throws EventMissingToPhrase In the case that /to phrase is missing from the userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"lihka1202"},"content":"     * @throws EventMissingFromPhrase In the case that /from phrase is missing from the userInput","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"lihka1202"},"content":"     * @throws EventFromIsBlank In the case the /from date is missing","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"lihka1202"},"content":"     * @throws EventToIsBlank In the case the /to date is missing","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"lihka1202"},"content":"    public void eventExceptionGenerator(String [] eventDescription, String userInput) throws EmptyEvent, EventMissingBothPhrases, EventMissingToPhrase, EventMissingFromPhrase, EventFromIsBlank, EventToIsBlank, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"lihka1202"},"content":"        if(!userInput.contains(\"/from\") \u0026\u0026 userInput.split(\" \").length\u003e1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":80,"author":{"gitId":"lihka1202"},"content":"            throw new EventMissingFromPhrase();","lastModifiedDate":"2023-02-24"},{"lineNumber":81,"author":{"gitId":"lihka1202"},"content":"        } else if(!userInput.contains(\"/to\") \u0026\u0026 userInput.split(\" \").length\u003e1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":82,"author":{"gitId":"lihka1202"},"content":"            throw new EventMissingToPhrase();","lastModifiedDate":"2023-02-24"},{"lineNumber":83,"author":{"gitId":"lihka1202"},"content":"        } else if(!(userInput.contains(\"/from\") || userInput.contains(\"/to\")) \u0026\u0026 userInput.split(\" \").length\u003e1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":84,"author":{"gitId":"lihka1202"},"content":"            throw new EventMissingFromPhrase();","lastModifiedDate":"2023-02-24"},{"lineNumber":85,"author":{"gitId":"lihka1202"},"content":"        } else if(!(userInput.contains(\"/from\") || !userInput.contains(\"/to\")) \u0026\u0026 userInput.split(\" \").length\u003e1) {","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"lihka1202"},"content":"            throw new EventMissingBothPhrases();","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"lihka1202"},"content":"        }  else if (eventDescription.length\u003d\u003d1 || eventDescription[0].isBlank()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":88,"author":{"gitId":"lihka1202"},"content":"            throw new EmptyEvent();","lastModifiedDate":"2023-02-24"},{"lineNumber":89,"author":{"gitId":"lihka1202"},"content":"        }else if(eventDescription[1].isBlank()) {","lastModifiedDate":"2023-02-24"},{"lineNumber":90,"author":{"gitId":"lihka1202"},"content":"            throw new EventFromIsBlank();","lastModifiedDate":"2023-02-24"},{"lineNumber":91,"author":{"gitId":"lihka1202"},"content":"        } else if(eventDescription[2].isBlank()) {","lastModifiedDate":"2023-02-24"},{"lineNumber":92,"author":{"gitId":"lihka1202"},"content":"            throw new EventToIsBlank();","lastModifiedDate":"2023-02-24"},{"lineNumber":93,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":94,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":95,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":96,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":97,"author":{"gitId":"lihka1202"},"content":"     * This generates the exceptions when a {@link dataypes.Task} is being marked","lastModifiedDate":"2023-02-25"},{"lineNumber":98,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":99,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The serial number of the {@link dataypes.Task} which needs to be marked","lastModifiedDate":"2023-02-25"},{"lineNumber":100,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link java.util.ArrayList\u003cdataypes.Task\u003e} containing all the \u003ccode\u003eTasks\u003c/code\u003e","lastModifiedDate":"2023-02-25"},{"lineNumber":101,"author":{"gitId":"lihka1202"},"content":"     * @throws MarkQualityException In the case the serial number of the task to be marked lies outside the valid range.","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"lihka1202"},"content":"     * @throws NumberFormatException In the case the serial number to be marked is not a number","lastModifiedDate":"2023-02-25"},{"lineNumber":103,"author":{"gitId":"lihka1202"},"content":"     * @throws TaskMarked If the Task has already been marked","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"lihka1202"},"content":"    public void markExceptionGenerator(String userInput, TaskList taskList) throws MarkQualityException, NumberFormatException, TaskMarked {","lastModifiedDate":"2023-02-25"},{"lineNumber":106,"author":{"gitId":"lihka1202"},"content":"        if(parser.isInRange(userInput, taskList)\u003d\u003dfalse) {","lastModifiedDate":"2023-02-24"},{"lineNumber":107,"author":{"gitId":"lihka1202"},"content":"            throw new MarkQualityException();","lastModifiedDate":"2023-02-24"},{"lineNumber":108,"author":{"gitId":"lihka1202"},"content":"        } else if(taskList.getTask(Integer.parseInt(userInput.split(\" \")[1]) - 1).getStatus()\u003d\u003dtrue) {","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"lihka1202"},"content":"            throw new TaskMarked();","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":111,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":112,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":113,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":114,"author":{"gitId":"lihka1202"},"content":"     * This generates the exceptions when a {@link dataypes.Task} is being unnmarked","lastModifiedDate":"2023-02-25"},{"lineNumber":115,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":116,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The serial number of the {@link dataypes.Task} which needs to be unmarked","lastModifiedDate":"2023-02-25"},{"lineNumber":117,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link java.util.ArrayList\u003cdataypes.Task\u003e} containing all the \u003ccode\u003eTasks\u003c/code\u003e","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"lihka1202"},"content":"     * @throws UnmarkQualityException In the case the serial number of the task to be unmarked lies outside the valid range.","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"lihka1202"},"content":"     * @throws NumberFormatException In the case the serial number to be unmarked is not a number","lastModifiedDate":"2023-02-25"},{"lineNumber":120,"author":{"gitId":"lihka1202"},"content":"     * @throws TaskUnMarked If the Task has already been unmarked","lastModifiedDate":"2023-02-25"},{"lineNumber":121,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":122,"author":{"gitId":"lihka1202"},"content":"    public void unMarkExceptionGenerator(String userInput, TaskList taskList) throws UnmarkQualityException, NumberFormatException, TaskUnMarked {","lastModifiedDate":"2023-02-25"},{"lineNumber":123,"author":{"gitId":"lihka1202"},"content":"        if(parser.isInRange(userInput, taskList)\u003d\u003dfalse) {","lastModifiedDate":"2023-02-24"},{"lineNumber":124,"author":{"gitId":"lihka1202"},"content":"            throw new UnmarkQualityException();","lastModifiedDate":"2023-02-24"},{"lineNumber":125,"author":{"gitId":"lihka1202"},"content":"        } else if(taskList.getTask(Integer.parseInt(userInput.split(\" \")[1]) - 1).getStatus()\u003d\u003dfalse) {","lastModifiedDate":"2023-02-25"},{"lineNumber":126,"author":{"gitId":"lihka1202"},"content":"            throw new TaskUnMarked();","lastModifiedDate":"2023-02-25"},{"lineNumber":127,"author":{"gitId":"lihka1202"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":128,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":129,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"lihka1202":129}},{"path":"src/main/java/helpers/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"package helpers;","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"import corefunctionalities.TaskList;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":" * The Parser Class is responsible for parsing and processing data.","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":" *","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":" * @author Muthya Narayanachary Akhil","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"public class Parser {","lastModifiedDate":"2023-02-24"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"lihka1202"},"content":"     * An empty constructor to initialize the Parser Class","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"lihka1202"},"content":"    public Parser () {}","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"lihka1202"},"content":"     * Method splits the userinput into a {@link String}[] ,individual phrases separated by \" \".","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The userinput which needs to be split","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"lihka1202"},"content":"     * @return {@link String} array containing space seperated words","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"lihka1202"},"content":"    public String[] getTodo(String userInput) {","lastModifiedDate":"2023-02-24"},{"lineNumber":23,"author":{"gitId":"lihka1202"},"content":"        return userInput.split(\" \");","lastModifiedDate":"2023-02-24"},{"lineNumber":24,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":25,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":26,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"lihka1202"},"content":"     * Method processes the data such that the user input is split based on the delimiter \"/by\"","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The user input which needs to be split","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"lihka1202"},"content":"     * @return {@link String} array separated based on the \"/by\" regex","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"lihka1202"},"content":"    public String[] getDeadline(String userInput) {","lastModifiedDate":"2023-02-24"},{"lineNumber":33,"author":{"gitId":"lihka1202"},"content":"        String intermediateStage \u003d userInput.replace(\"deadline \", \"\");","lastModifiedDate":"2023-02-24"},{"lineNumber":34,"author":{"gitId":"lihka1202"},"content":"        String[] deadlineAndDescription \u003d intermediateStage.split(\"/by \");","lastModifiedDate":"2023-02-24"},{"lineNumber":35,"author":{"gitId":"lihka1202"},"content":"        return deadlineAndDescription;","lastModifiedDate":"2023-02-24"},{"lineNumber":36,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":37,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":38,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"lihka1202"},"content":"     * Method processes the data such that the user input is split based on the delimiter \"/from\" or \"/to\"","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The input which needs to be processed","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"lihka1202"},"content":"     * @return A {@link String} Array consisting of phrases separated by either \"/from\" or \"/to\".","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"lihka1202"},"content":"    public String[] getEvent(String userInput) {","lastModifiedDate":"2023-02-24"},{"lineNumber":46,"author":{"gitId":"lihka1202"},"content":"        String intermediateStage \u003d userInput.replace(\"event \", \"\");","lastModifiedDate":"2023-02-24"},{"lineNumber":47,"author":{"gitId":"lihka1202"},"content":"        String[] eventDescription \u003d intermediateStage.split(\"/from | /to \");","lastModifiedDate":"2023-02-24"},{"lineNumber":48,"author":{"gitId":"lihka1202"},"content":"        return eventDescription;","lastModifiedDate":"2023-02-24"},{"lineNumber":49,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":50,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":51,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"lihka1202"},"content":"     * Compares the user input with a word and returns whether they are the same or not","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The user input which needs to be compared","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"lihka1202"},"content":"     * @param toCompare The phrase the user input needs to be compared to","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"lihka1202"},"content":"     * @return Whether it is true or false","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"lihka1202"},"content":"    public boolean isTheSame(String userInput, String toCompare) {","lastModifiedDate":"2023-02-24"},{"lineNumber":59,"author":{"gitId":"lihka1202"},"content":"        return userInput.split(\" \")[0].equals(toCompare);","lastModifiedDate":"2023-02-24"},{"lineNumber":60,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":61,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":62,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"lihka1202"},"content":"     * Checks whether the user input is in the valid range or not.","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The user input that needs to be checked for","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"lihka1202"},"content":"     * @param taskList The {@link java.util.ArrayList\u003cdataypes.Task\u003e} containing all the \u003ccodes\u003eTasks\u003c/codes\u003e","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"lihka1202"},"content":"     * @return A boolean to indicate whether it is true or false","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"lihka1202"},"content":"     * @throws NumberFormatException In the case the user input is not numerical.","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"lihka1202"},"content":"    public boolean isInRange(String userInput, TaskList taskList) throws NumberFormatException{","lastModifiedDate":"2023-02-24"},{"lineNumber":71,"author":{"gitId":"lihka1202"},"content":"        boolean isReturn \u003d false;","lastModifiedDate":"2023-02-24"},{"lineNumber":72,"author":{"gitId":"lihka1202"},"content":"        isReturn \u003d Integer.parseInt(userInput.split(\" \")[1])\u003e0 \u0026\u0026 Integer.parseInt(userInput.split(\" \")[1])\u003ctaskList.getSize()+1;","lastModifiedDate":"2023-02-24"},{"lineNumber":73,"author":{"gitId":"lihka1202"},"content":"        return (isReturn);","lastModifiedDate":"2023-02-24"},{"lineNumber":74,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":75,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"lihka1202"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":77,"author":{"gitId":"lihka1202"},"content":"     * Cleans the user input by removing \"find \"","lastModifiedDate":"2023-02-25"},{"lineNumber":78,"author":{"gitId":"lihka1202"},"content":"     *","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"lihka1202"},"content":"     * @param userInput The {@link String} that needs to be cleaned","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"lihka1202"},"content":"     * @return A {@link String} containing the phrase alone, without \"find \"","lastModifiedDate":"2023-02-25"},{"lineNumber":81,"author":{"gitId":"lihka1202"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"lihka1202"},"content":"    public String withoutFind(String userInput) {","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"lihka1202"},"content":"        return userInput.replace(\"find \", \"\");","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"lihka1202"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"lihka1202"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"lihka1202"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"lihka1202":86}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lihka1202"},"content":"todo borrow book","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"lihka1202"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"lihka1202"},"content":"mark 2","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"lihka1202"},"content":"mark 1","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"lihka1202"},"content":"event go home tomorrow /from today /to tomorrow","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"lihka1202"},"content":"mark 3","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"lihka1202"},"content":"list","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"lihka1202"},"content":"unmark 4","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"lihka1202"},"content":"unmark 6","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"lihka1202"},"content":"unmark 2","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"lihka1202"},"content":"bye","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"lihka1202":11}}]
