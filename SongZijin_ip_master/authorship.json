[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"### Storing the tasks in list","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"Any changes made to the list of tasks will be stored in a text file named ","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"`data.txt`, when booting up the application, the previously added tsks","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"will still be there.","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"### Adding a new Task","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"`type taskName [dates]`","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"- `type` refers to one of  `Todo`, `Deadline` or `Event`.","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"- `taskNaame` refers to the name of the task","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"- When adding tasks of type `Deadline` or `Event`, `[date]` needs to be ","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"specified with the following format:","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"deadline taskName /by date","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"event taskName /from startDate /to endDate","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"- If the date is constructed in the format of `yyyy-MM-ddd`, it will be ","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"automatically formatted to the form `MMM dd yyyy`, e.g., converting from","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"`2023-03-03` to `Mar 03 2023`","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"#### Example","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"\u003e todo borrow book","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"_(ovo)-| Added:","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"  [T] Borrow book","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"_(#o#)_| Currently, the number of task I remembered is: 1","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"\u003e deadline code iP project /by 2023-03-03","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"_(ovo)-| Added:","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"  [D] Code iP project (by: Mar 03 2023)","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"_(#o#)_| Currently, the number of task I remembered is: 2","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"\u003e event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"_(ovo)-| Added:","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"  [E] Project meeting (from: Mon 2pm to: 4pm)","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"_(#o#)_| Currently, the number of task I remembered is: 3","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"### Delete a task","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"`delete INDEX`","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"Will delete the task with an index of `INDEX`, which is an integer representing ","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"the index of the task to be deleted, starting from 1.","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"#### Example","lastModifiedDate":"2023-02-19"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"\u003e delete 1","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"|(0o0)\u003e Gocha! I will now delete this task:","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"  [T] Borrow book","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"_(#o#)_| Currently, the number of task I remembered is: 2","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"### Mark a task as done","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"`mark INDEX`","lastModifiedDate":"2023-02-19"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"Will mark the task with an index of `INDEX` as done, where ","lastModifiedDate":"2023-02-19"},{"lineNumber":59,"author":{"gitId":"SongZijin"},"content":"`INDEX` is an integer representing the index of the task to be marked,","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"SongZijin"},"content":"starting from 1.","lastModifiedDate":"2023-02-19"},{"lineNumber":61,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"SongZijin"},"content":"#### Example","lastModifiedDate":"2023-02-19"},{"lineNumber":63,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"SongZijin"},"content":"\u003e mark 1","lastModifiedDate":"2023-02-19"},{"lineNumber":65,"author":{"gitId":"SongZijin"},"content":"*^(^v^)^* Great! I have marked this task as done:","lastModifiedDate":"2023-02-19"},{"lineNumber":66,"author":{"gitId":"SongZijin"},"content":"1.[D] [X] Code iP project (by: Mar 03 2023)","lastModifiedDate":"2023-02-19"},{"lineNumber":67,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"SongZijin"},"content":"### Mark a task as not done","lastModifiedDate":"2023-02-19"},{"lineNumber":70,"author":{"gitId":"SongZijin"},"content":"`unmark INDEX`","lastModifiedDate":"2023-02-19"},{"lineNumber":71,"author":{"gitId":"SongZijin"},"content":"Will mark the task with an index of `INDEX` as not done, where","lastModifiedDate":"2023-02-19"},{"lineNumber":72,"author":{"gitId":"SongZijin"},"content":"`INDEX` is an integer representing the index of the task to be marked,","lastModifiedDate":"2023-02-19"},{"lineNumber":73,"author":{"gitId":"SongZijin"},"content":"starting from 1.","lastModifiedDate":"2023-02-19"},{"lineNumber":74,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":75,"author":{"gitId":"SongZijin"},"content":"#### Example","lastModifiedDate":"2023-02-19"},{"lineNumber":76,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":77,"author":{"gitId":"SongZijin"},"content":"\u003e unmark 1","lastModifiedDate":"2023-02-19"},{"lineNumber":78,"author":{"gitId":"SongZijin"},"content":"_(@_@)_ Hmmm. I shall mark this task as not done:","lastModifiedDate":"2023-02-19"},{"lineNumber":79,"author":{"gitId":"SongZijin"},"content":"1.[D] [ ] Code iP project (by: Mar 03 2023)","lastModifiedDate":"2023-02-19"},{"lineNumber":80,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":81,"author":{"gitId":"SongZijin"},"content":"### List currently stored tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":82,"author":{"gitId":"SongZijin"},"content":"`list`","lastModifiedDate":"2023-02-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":84,"author":{"gitId":"SongZijin"},"content":"- Will display all the currently stored item in the list, with a format of:","lastModifiedDate":"2023-02-19"},{"lineNumber":85,"author":{"gitId":"SongZijin"},"content":"  - Task of type `todo`: `INDEX. [T]state taskName`","lastModifiedDate":"2023-02-19"},{"lineNumber":86,"author":{"gitId":"SongZijin"},"content":"  - Task of type `deadline`: `INDEX. [D]state taskName (by: date)`","lastModifiedDate":"2023-02-19"},{"lineNumber":87,"author":{"gitId":"SongZijin"},"content":"  - Task of type `event`: `INDEX. [E]state taskName (from: startDate to: endDate)`","lastModifiedDate":"2023-02-19"},{"lineNumber":88,"author":{"gitId":"SongZijin"},"content":"- `state` refer to if the task is done or not","lastModifiedDate":"2023-02-19"},{"lineNumber":89,"author":{"gitId":"SongZijin"},"content":"  - `[X]` if the task have been marked as done","lastModifiedDate":"2023-02-19"},{"lineNumber":90,"author":{"gitId":"SongZijin"},"content":"  - `[ ]` if the task have not been marked or have been marked as not done","lastModifiedDate":"2023-02-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":92,"author":{"gitId":"SongZijin"},"content":"#### Example","lastModifiedDate":"2023-02-19"},{"lineNumber":93,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":94,"author":{"gitId":"SongZijin"},"content":"\u003e list","lastModifiedDate":"2023-02-19"},{"lineNumber":95,"author":{"gitId":"SongZijin"},"content":"|(*O*)| Here\u0027s the tasks I remembered:","lastModifiedDate":"2023-02-19"},{"lineNumber":96,"author":{"gitId":"SongZijin"},"content":"1.[D] [ ] Code iP project (by: Mar 03 2023)","lastModifiedDate":"2023-02-19"},{"lineNumber":97,"author":{"gitId":"SongZijin"},"content":"2.[E] [ ] Project meeting (from: Mon 2pm to: 4pm)","lastModifiedDate":"2023-02-19"},{"lineNumber":98,"author":{"gitId":"SongZijin"},"content":"3.[T] [ ] Read book","lastModifiedDate":"2023-02-19"},{"lineNumber":99,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":100,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":101,"author":{"gitId":"SongZijin"},"content":"### Find all tasks that contain a word","lastModifiedDate":"2023-02-19"},{"lineNumber":102,"author":{"gitId":"SongZijin"},"content":"`find toFind`","lastModifiedDate":"2023-02-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":104,"author":{"gitId":"SongZijin"},"content":"Will find and display all tasks that contains the string `toFind` in the name of the task.","lastModifiedDate":"2023-02-19"},{"lineNumber":105,"author":{"gitId":"SongZijin"},"content":"If there is no item in the list that have name containing `toFind`, an error message will be","lastModifiedDate":"2023-02-19"},{"lineNumber":106,"author":{"gitId":"SongZijin"},"content":"displayed, followed by the list of all currently stored tasks.","lastModifiedDate":"2023-02-19"},{"lineNumber":107,"author":{"gitId":"SongZijin"},"content":"#### Example","lastModifiedDate":"2023-02-19"},{"lineNumber":108,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":109,"author":{"gitId":"SongZijin"},"content":"\u003e find book","lastModifiedDate":"2023-02-19"},{"lineNumber":110,"author":{"gitId":"SongZijin"},"content":"|(*v*)| Here are all the matching tasks I found:","lastModifiedDate":"2023-02-19"},{"lineNumber":111,"author":{"gitId":"SongZijin"},"content":"1.[T] [ ] Read book","lastModifiedDate":"2023-02-19"},{"lineNumber":112,"author":{"gitId":"SongZijin"},"content":"\u003e find sleep","lastModifiedDate":"2023-02-19"},{"lineNumber":113,"author":{"gitId":"SongZijin"},"content":"|(@A@)| I don\u0027t see any task that contain the word you are searching.","lastModifiedDate":"2023-02-19"},{"lineNumber":114,"author":{"gitId":"SongZijin"},"content":"|(*O*)| Here\u0027s the tasks I remembered:","lastModifiedDate":"2023-02-19"},{"lineNumber":115,"author":{"gitId":"SongZijin"},"content":"1.[D] [ ] Code iP project (by: Mar 03 2023)","lastModifiedDate":"2023-02-19"},{"lineNumber":116,"author":{"gitId":"SongZijin"},"content":"2.[E] [ ] Project meeting (from: Mon 2pm to: 4pm)","lastModifiedDate":"2023-02-19"},{"lineNumber":117,"author":{"gitId":"SongZijin"},"content":"3.[T] [ ] Read book","lastModifiedDate":"2023-02-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":119,"author":{"gitId":"SongZijin"},"content":"```","lastModifiedDate":"2023-02-19"},{"lineNumber":120,"author":{"gitId":"SongZijin"},"content":"## Usage","lastModifiedDate":"2023-02-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":122,"author":{"gitId":"SongZijin"},"content":"### `bye` - End the program","lastModifiedDate":"2023-02-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":124,"author":{"gitId":"SongZijin"},"content":"Will exit the program.","lastModifiedDate":"2023-02-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":126,"author":{"gitId":"SongZijin"},"content":"#### Example","lastModifiedDate":"2023-02-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":128,"author":{"gitId":"SongZijin"},"content":"\u003e bye","lastModifiedDate":"2023-02-19"},{"lineNumber":129,"author":{"gitId":"SongZijin"},"content":"/(0A0)/ Bye. See you next time!","lastModifiedDate":"2023-02-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"SongZijin":113,"-":17}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"import enums.DialogueTypes;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"import managers.InputManager;","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import managers.OutputDialogueManager;","lastModifiedDate":"2023-02-06"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"public class Main {","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"    private InputManager inputManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"    private OutputDialogueManager display;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"    public Main () {","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"        inputManager \u003d new InputManager();","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"        display \u003d new OutputDialogueManager();","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"     * Calls the InputManager to process the input repeatedly until an ExitCommand","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"     * is created.","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"    public void run() {","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"        display.printInteraction(DialogueTypes.GREETINGS);","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"        boolean isDone \u003d false;","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"        do {","lastModifiedDate":"2023-02-18"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"            isDone \u003d inputManager.processOneInput();","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"        } while (!isDone);","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"        new Main().run();","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"SongZijin":27}},{"path":"src/main/java/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package commands;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import enums.DialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import enums.ErrorDialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import errors.InvalidDeadlineException;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import errors.InvalidEventException;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"import managers.OutputDialogueManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"import managers.SaveManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"import managers.TaskManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"import static tasks.Task.getItemCount;","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":" * Represents a command to add a new Task in to the list of Tasks.","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"public class AddCommand extends Command{","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"    public String commandLine;","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"    private String content;","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"     * Constructs a new AddCommand, specifying the type and the content of the Task to add.","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"     * @param commandLine A String containing the type of Task to be added, \u003ccode\u003eTodo, Deadline\u003c/code\u003e","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"     *                    or \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"     * @param content A String containing the content that is used to construct the new Task.","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"    public AddCommand(String commandLine, String content) {","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"        this.commandLine \u003d commandLine;","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"    public void execute(TaskManager taskList, SaveManager storage, OutputDialogueManager display){","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"            Task newTask \u003d addNewTask(taskList);","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"            printNewlyAddedTask(display, newTask);","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"            super.saveOneTasks(newTask, storage, display);","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"        } catch (InvalidDeadlineException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.DEADLINE_WRONG_FORMAT);","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"        } catch (InvalidEventException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.EVENT_WRONG_FORMAT);","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"    private void printNewlyAddedTask(OutputDialogueManager display, Task newTask) {","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"        display.printInteraction(DialogueTypes.ADD_TASK);","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"        newTask.printTaskWithoutId();","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"        display.printInteraction(DialogueTypes.COUNT_OF_TASKS);","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"        System.out.println(getItemCount());","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"    private Task addNewTask(TaskManager taskList) throws InvalidDeadlineException, InvalidEventException {","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"        switch (this.commandLine) {","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"        case \"todo\" :","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"            newTask \u003d taskList.addNewTodoTask(this.content);","lastModifiedDate":"2023-02-18"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"SongZijin"},"content":"            newTask \u003d taskList.addNewDeadlineTask(this.content);","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":61,"author":{"gitId":"SongZijin"},"content":"        case \"event\":","lastModifiedDate":"2023-02-18"},{"lineNumber":62,"author":{"gitId":"SongZijin"},"content":"            newTask \u003d taskList.addNewEventTask(this.content);","lastModifiedDate":"2023-02-18"},{"lineNumber":63,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":64,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":65,"author":{"gitId":"SongZijin"},"content":"        return newTask;","lastModifiedDate":"2023-02-18"},{"lineNumber":66,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":67,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":67}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package commands;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import enums.ErrorDialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import managers.OutputDialogueManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import managers.SaveManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import managers.TaskManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":" * Represents a command that is instructed for the program to conduct. A Command","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":" * Object specifies what the type of command is with its subclasses.","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"     * Executes the command depending on the type of command it is, using the various managers.","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"     * @param taskList A TaskManager that controls the list of Tasks and how it is manipulated.","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"     * @param storage A SaveManager that controls how the list of Tasks can be saved.","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"     * @param display An OutputDialogueManager that controls what to display for the user to see.","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"    public abstract void execute(TaskManager taskList, SaveManager storage, OutputDialogueManager display);","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"     * Calls the SaveManager to save all the tasks in the current list of Tasks.","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"     * @param taskList A TaskManager that controls the list of Tasks and how it is manipulated.","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"     * @param storage A SaveManager that controls how the list of Tasks can be saved.","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"     * @param display An OutputDialogueManager that controls what to display for the user to see.","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"    public void saveAllTasks (TaskManager taskList, SaveManager storage,OutputDialogueManager display) {","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"            storage.saveCurrentState(taskList);","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.ERROR_WHEN_SAVING);","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"     * Calls the SaveManager to save one more Task in to the current list of Tasks.","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"     * @param newTask A Task that is going to be saved.","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"     * @param storage A SaveManager that controls how the list of Tasks can be saved.","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"     * @param display An OutputDialogueManager that controls what to display for the user to see.","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"    public void saveOneTasks (Task newTask, SaveManager storage, OutputDialogueManager display) {","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"            storage.saveNewTask(newTask);","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.ERROR_WHEN_SAVING);","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":53}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package commands;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import enums.DialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import enums.ErrorDialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import errors.TaskNumberOutOfRangeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import managers.OutputDialogueManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"import managers.SaveManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"import managers.TaskManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"import static tasks.Task.getItemCount;","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":" * Represents a command that intends to delete an item from the list of Tasks.","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"    private int idToDelete;","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"     * Constructs a DeleteCommand Object with the index of the Task to be deleted.","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"     * @param idToDelete A integer representing the index of the Task that is going to be deleted.","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"    public DeleteCommand(int idToDelete) {","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"        this.idToDelete \u003d idToDelete;","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"    public void execute(TaskManager taskList, SaveManager storage, OutputDialogueManager display) {","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"            Task toBeDeleted \u003d taskList.deleteItem(this.idToDelete);","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"            printDeleteResults(display, toBeDeleted);","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"            super.saveAllTasks(taskList, storage, display);","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"        } catch (TaskNumberOutOfRangeException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.TASK_NUMBER_OUT_OF_RANGE);","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"            taskList.listAllItems(display);","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"    private void printDeleteResults(OutputDialogueManager display, Task toBeDeleted) {","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"        display.printInteraction(DialogueTypes.DELETE_TASK);","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"        toBeDeleted.printTaskWithoutId();","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"        display.printInteraction(DialogueTypes.COUNT_OF_TASKS);","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"        System.out.println(getItemCount());","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":47}},{"path":"src/main/java/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package commands;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import enums.DialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import managers.OutputDialogueManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import managers.SaveManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import managers.TaskManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":" * Represents a command to end the currently running program.","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"    public void execute(TaskManager taskList, SaveManager storage, OutputDialogueManager display) {","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"        display.printInteraction(DialogueTypes.GOODBYE);","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"     * Checks if an exit command has been introduced, return true if it is given.","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"     * @param command A Command Object that is to be checked if it is an exit command.","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"     * @return True if the command is an ExitCommand, else return false.","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"    public static boolean isDone(Command command) {","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"        return command instanceof ExitCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":27}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package commands;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import enums.ErrorDialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import errors.NoMatchingItemException;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import managers.OutputDialogueManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import managers.SaveManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"import managers.TaskManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":" * Represents a command to find Tasks with names that contains a specified String.","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"    private String toFind;","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"     * Constructs a FindCommand Object from the String containing the word or phrase to find.","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"     * @param toFind A String containing the word or phrase for this command to find.","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"    public FindCommand(String toFind) {","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"        this.toFind \u003d toFind;","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"    public void execute(TaskManager taskList, SaveManager storage, OutputDialogueManager display) {","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"            taskList.findTaskWithWord(toFind, display);","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"        } catch (NoMatchingItemException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.NO_MATCHING_TASK);","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"            taskList.listAllItems(display);","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":33}},{"path":"src/main/java/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package commands;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import enums.DialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import managers.OutputDialogueManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import managers.SaveManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import managers.TaskManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":" * Represent a command to call and display the help menu.","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"    public void execute(TaskManager taskList, SaveManager storage, OutputDialogueManager display) {","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"        display.printInteraction(DialogueTypes.HELP_MENU);","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":16}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package commands;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import managers.OutputDialogueManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import managers.SaveManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import managers.TaskManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":" * Represents a command to display all the Tasks currently stored in list.","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"    public void execute(TaskManager taskList, SaveManager storage, OutputDialogueManager display) {","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"        taskList.listAllItems(display);","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":15}},{"path":"src/main/java/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package commands;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import enums.DialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import enums.ErrorDialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import errors.TaskNumberOutOfRangeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import managers.OutputDialogueManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"import managers.SaveManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"import managers.TaskManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":" * Represents a command to mark or unmark a specific Task as done.","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"    private boolean isDone;","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"    private int indexToMark;","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"     * Constructs a MarkCommand, specifying the state to mark and which task to mark.","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"     * @param isDone A boolean function to mark the state of the specified Task to.","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"     * @param indexToMark An integer representing the position of the Task to be marked in","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"     *                    a list of Tasks starting from 1.","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"    public MarkCommand(boolean isDone, int indexToMark) {","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"        this.indexToMark \u003d indexToMark;","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"    public void execute(TaskManager taskList, SaveManager storage, OutputDialogueManager display) {","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"            Task markedTask \u003d markTask(taskList, display);","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"            printMarkedTaskWithIndex(markedTask);","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"            super.saveAllTasks(taskList, storage, display);","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"        } catch (TaskNumberOutOfRangeException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.TASK_NUMBER_OUT_OF_RANGE);","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"            taskList.listAllItems(display);","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"    private void printMarkedTaskWithIndex(Task markedTask) {","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"        System.out.print(indexToMark + 1);","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"        markedTask.printTask();","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"    private Task markTask(TaskManager taskList, OutputDialogueManager display) throws TaskNumberOutOfRangeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"        Task markedTask;","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"        if (isDone) {","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"            markedTask \u003d taskList.changeStateOfTask(indexToMark, true);","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"            display.printInteraction(DialogueTypes.MARK_TASK);","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"        } else {","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"            markedTask \u003d taskList.changeStateOfTask(indexToMark, false);","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"            display.printInteraction(DialogueTypes.UNMARK_TASK);","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"        return markedTask;","lastModifiedDate":"2023-02-18"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":58}},{"path":"src/main/java/commands/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package commands;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import enums.DialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import managers.OutputDialogueManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import managers.SaveManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import managers.TaskManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":" * Represents a command of unknown input, which is processed as an error.","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"    public void execute(TaskManager taskList, SaveManager storage, OutputDialogueManager display) {","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"        display.printInteraction(DialogueTypes.UNKNOWN_TYPE);","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":16}},{"path":"src/main/java/enums/DialogueTypes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package enums;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"public enum DialogueTypes {","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"    GREETINGS,","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"    LIST_TASKS,","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"    MARK_TASK,","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"    UNMARK_TASK,","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"    ADD_TASK,","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"    DELETE_TASK,","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"    UNKNOWN_TYPE,","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"    HELP_MENU,","lastModifiedDate":"2023-02-06"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"    COUNT_OF_TASKS,","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"    FIND_TASK,","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"    GOODBYE","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"SongZijin":17}},{"path":"src/main/java/enums/ErrorDialogueTypes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package enums;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"public enum ErrorDialogueTypes {","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"    INVALID_TASK_NUMBER,","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"    TASK_NUMBER_OUT_OF_RANGE,","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"    EMPTY_TASK_NAME,","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"    DEADLINE_WRONG_FORMAT,","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"    EVENT_WRONG_FORMAT,","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"    NO_TASK_IN_LIST,","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"    ERROR_WHEN_SAVING,","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"    NO_MATCHING_TASK","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":12}},{"path":"src/main/java/errors/EmptyTaskListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package errors;","lastModifiedDate":"2023-02-16"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"public class EmptyTaskListException extends Exception {","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"SongZijin":4}},{"path":"src/main/java/errors/InvalidDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package errors;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"public class InvalidDeadlineException extends Exception {","lastModifiedDate":"2023-02-06"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"SongZijin":4}},{"path":"src/main/java/errors/InvalidEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package errors;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"public class InvalidEventException extends Exception {","lastModifiedDate":"2023-02-06"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"SongZijin":4}},{"path":"src/main/java/errors/NoMatchingItemException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package errors;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"public class NoMatchingItemException extends Exception {","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":4}},{"path":"src/main/java/errors/TaskNumberOutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package errors;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"public class TaskNumberOutOfRangeException extends Exception {","lastModifiedDate":"2023-02-06"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"SongZijin":4}},{"path":"src/main/java/managers/InputManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package managers;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import commands.Command;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import commands.ExitCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import enums.ErrorDialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import translators.Parser;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"import errors.InvalidDeadlineException;","lastModifiedDate":"2023-02-06"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"import errors.InvalidEventException;","lastModifiedDate":"2023-02-06"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":" * A manager that connects the other three managers to process the command entered","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":" * by the user and produce an output.","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"public class InputManager {","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"    private TaskManager tasks;","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"    private OutputDialogueManager display;","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"    private SaveManager storage;","lastModifiedDate":"2023-02-18"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"     * Constructs an InputManager object by creating Objects of the other three managers","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"     * and a new Scanner. Handles the exceptions that may occur when TaskManager gets","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"     * created.","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"    public InputManager() {","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"        this.display \u003d new OutputDialogueManager();","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"        this.storage \u003d new SaveManager();","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"            this.tasks \u003d new TaskManager(storage.initialiseData());","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.ERROR_WHEN_SAVING);","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"        } catch (InvalidDeadlineException e) {","lastModifiedDate":"2023-02-06"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.DEADLINE_WRONG_FORMAT);","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"        } catch (InvalidEventException e) {","lastModifiedDate":"2023-02-06"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.EVENT_WRONG_FORMAT);","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"     * Processes one input from the user according to the command provided, then return","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"     * a boolean value indicating if this processing can end.","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"     * @return True if the command calls to end the program, else return false.","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"    public boolean processOneInput() {","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"        String line \u003d scanner.nextLine();","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"        boolean canStop \u003d false;","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"            Command command \u003d Parser.parse(line);","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"            command.execute(tasks, storage, display);","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"            canStop \u003d ExitCommand.isDone(command);","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.INVALID_TASK_NUMBER);","lastModifiedDate":"2023-02-18"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"            tasks.listAllItems(display);","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.EMPTY_TASK_NAME);","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":61,"author":{"gitId":"SongZijin"},"content":"        return canStop;","lastModifiedDate":"2023-02-18"},{"lineNumber":62,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"SongZijin":64}},{"path":"src/main/java/managers/OutputDialogueManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package managers;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import enums.DialogueTypes;","lastModifiedDate":"2023-02-06"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import enums.ErrorDialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":" * A manager that controls what dialogue to display to the user during each interaction, or","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":" * when an error is experienced.","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"public class OutputDialogueManager {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"     * Display the respective dialogue after the user inputs a command.","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"     * @param interactionType A DialogueTypes Object specifying the type of interaction","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"     *                        to be displayed.","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"    public void printInteraction(DialogueTypes interactionType) {","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"        switch (interactionType) {","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"        case GREETINGS:","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"\u003c(0v0)/ Hey! Liri here!\" + System.lineSeparator()","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"                    + \"\u003c(-v-)\u003e How can I help you?\");","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"        case LIST_TASKS:","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(*O*)| Here\u0027s the tasks I remembered:\");","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"        case MARK_TASK:","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"*^(^v^)^* Great! I have marked this task as done:\");","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"        case UNMARK_TASK:","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"_(@_@)_ Hmmm. I shall mark this task as not done:\");","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"        case DELETE_TASK:","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(0o0)\u003e Gocha! I will now delete this task:\");","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"        case ADD_TASK:","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"_(ovo)-| Added:\");","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"        case HELP_MENU:","lastModifiedDate":"2023-02-06"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"(^A^)\u003d\u003d Here\u0027s the list of commands you can tell me to do:\"","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"                    + System.lineSeparator() +","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"                    \"- To add a to-do task: todo taskName\" + System.lineSeparator() +","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"                    \"  (eg: todo borrow book)\" + System.lineSeparator() +","lastModifiedDate":"2023-02-16"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"                    \"- To add a task with deadline: deadline taskName /by deadline\" +","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"                    System.lineSeparator() + \"  (eg: deadline return book /by Sunday)\" + System.lineSeparator() +","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"                    \"- To add an event: event eventName /from startTime /to endTime\" +","lastModifiedDate":"2023-02-16"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"                    System.lineSeparator() + \"  (eg: event project meeting /from Mon 2pm /to 4pm)\"","lastModifiedDate":"2023-02-16"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"                    + System.lineSeparator() +","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"                    \"** Tip: You can store a date in the format of yyyy-MM-dd\" + System.lineSeparator() +","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"                    \"  (eg: 2023-03-03)\" + System.lineSeparator() +","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"                    \"- To look at the stored tasks: list\" + System.lineSeparator() +","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"                    \"- To mark/unmark a task as done: mark/unmark taskIndex\" + System.lineSeparator() +","lastModifiedDate":"2023-02-16"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"                    \"  (eg: mark 1)\" + System.lineSeparator() +","lastModifiedDate":"2023-02-16"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"                    \"- To delete a task: delete taskIndex\" + System.lineSeparator() +","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"                    \"  (eg: delete 1)\" + System.lineSeparator() +","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"                    \"- To find a task that contains a specific word ot phrase: find phraseToFind\"","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"                    + System.lineSeparator() + \"  (eg: find book)\" + System.lineSeparator() +","lastModifiedDate":"2023-02-18"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"                    \"- To end this programme: bye\");","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"SongZijin"},"content":"        case COUNT_OF_TASKS:","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"SongZijin"},"content":"            System.out.print(\"_(#o#)_| Currently, the number of task I remembered is: \");","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"SongZijin"},"content":"        case FIND_TASK:","lastModifiedDate":"2023-02-18"},{"lineNumber":63,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(*v*)| Here are all the matching tasks I found:\");","lastModifiedDate":"2023-02-18"},{"lineNumber":64,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":65,"author":{"gitId":"SongZijin"},"content":"        case GOODBYE:","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"/(0A0)/ Bye. See you next time!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"SongZijin"},"content":"        case UNKNOWN_TYPE:","lastModifiedDate":"2023-02-18"},{"lineNumber":69,"author":{"gitId":"SongZijin"},"content":"            // fallthrough","lastModifiedDate":"2023-02-18"},{"lineNumber":70,"author":{"gitId":"SongZijin"},"content":"        default:","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(@A@)| I can\u0027t understand what you are talking about.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"SongZijin"},"content":"            printInteraction(DialogueTypes.HELP_MENU);","lastModifiedDate":"2023-02-18"},{"lineNumber":73,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":78,"author":{"gitId":"SongZijin"},"content":"     * Display the respective error message when an exception occurs.","lastModifiedDate":"2023-02-19"},{"lineNumber":79,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":80,"author":{"gitId":"SongZijin"},"content":"     * @param errorMessage A ErrorDialogueTypes Object specifying what error message to display.","lastModifiedDate":"2023-02-19"},{"lineNumber":81,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":82,"author":{"gitId":"SongZijin"},"content":"    public void printErrorDialogue(ErrorDialogueTypes errorMessage) {","lastModifiedDate":"2023-02-18"},{"lineNumber":83,"author":{"gitId":"SongZijin"},"content":"        switch (errorMessage) {","lastModifiedDate":"2023-02-06"},{"lineNumber":84,"author":{"gitId":"SongZijin"},"content":"        case EMPTY_TASK_NAME:","lastModifiedDate":"2023-02-06"},{"lineNumber":85,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(@A@)| The description seems to be empty or incomplete, please remember to fill it\");","lastModifiedDate":"2023-02-06"},{"lineNumber":86,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-06"},{"lineNumber":87,"author":{"gitId":"SongZijin"},"content":"        case DEADLINE_WRONG_FORMAT:","lastModifiedDate":"2023-02-06"},{"lineNumber":88,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(@A@)| I think your format for adding a new deadline task is wrong.\"","lastModifiedDate":"2023-02-16"},{"lineNumber":89,"author":{"gitId":"SongZijin"},"content":"                    + System.lineSeparator() +","lastModifiedDate":"2023-02-16"},{"lineNumber":90,"author":{"gitId":"SongZijin"},"content":"                    \"(0v0)-- Here\u0027s an example of adding a deadline task: deadline return book /by Sunday\");","lastModifiedDate":"2023-02-16"},{"lineNumber":91,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-06"},{"lineNumber":92,"author":{"gitId":"SongZijin"},"content":"        case EVENT_WRONG_FORMAT:","lastModifiedDate":"2023-02-06"},{"lineNumber":93,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(@A@)| I think your format for adding an new event is wrong.\"","lastModifiedDate":"2023-02-16"},{"lineNumber":94,"author":{"gitId":"SongZijin"},"content":"                    + System.lineSeparator() + \"(0v0)-- Here\u0027s an example of adding an event: \" +","lastModifiedDate":"2023-02-16"},{"lineNumber":95,"author":{"gitId":"SongZijin"},"content":"                    \"event project meeting /from Mon 2pm /to 4pm\");","lastModifiedDate":"2023-02-06"},{"lineNumber":96,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-06"},{"lineNumber":97,"author":{"gitId":"SongZijin"},"content":"        case TASK_NUMBER_OUT_OF_RANGE:","lastModifiedDate":"2023-02-06"},{"lineNumber":98,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(@A@)| I don\u0027t remember any task of this number, please try a new one\");","lastModifiedDate":"2023-02-06"},{"lineNumber":99,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-06"},{"lineNumber":100,"author":{"gitId":"SongZijin"},"content":"        case INVALID_TASK_NUMBER:","lastModifiedDate":"2023-02-06"},{"lineNumber":101,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(@A@)| I don\u0027t think you have entered a number for the task number.\");","lastModifiedDate":"2023-02-06"},{"lineNumber":102,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-06"},{"lineNumber":103,"author":{"gitId":"SongZijin"},"content":"        case NO_TASK_IN_LIST:","lastModifiedDate":"2023-02-06"},{"lineNumber":104,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(#A#)| I don\u0027t remember any task, please add some following the format below: \"","lastModifiedDate":"2023-02-16"},{"lineNumber":105,"author":{"gitId":"SongZijin"},"content":"                    + System.lineSeparator() + \"- To add a to-do task: todo taskName\" + System.lineSeparator() +","lastModifiedDate":"2023-02-16"},{"lineNumber":106,"author":{"gitId":"SongZijin"},"content":"                    \"  (eg: todo borrow book)\" + System.lineSeparator() +","lastModifiedDate":"2023-02-16"},{"lineNumber":107,"author":{"gitId":"SongZijin"},"content":"                    \"- To add a task with deadline: deadline taskName /by deadline\" +","lastModifiedDate":"2023-02-16"},{"lineNumber":108,"author":{"gitId":"SongZijin"},"content":"                    System.lineSeparator() + \"  (eg: deadline return book /by Sunday)\"","lastModifiedDate":"2023-02-16"},{"lineNumber":109,"author":{"gitId":"SongZijin"},"content":"                    + System.lineSeparator() + \" - To add an event: event eventName /from startTime /to endTime\" +","lastModifiedDate":"2023-02-16"},{"lineNumber":110,"author":{"gitId":"SongZijin"},"content":"                    System.lineSeparator() + \"  (eg: event project meeting /from Mon 2pm /to 4pm)\"","lastModifiedDate":"2023-02-18"},{"lineNumber":111,"author":{"gitId":"SongZijin"},"content":"                    + System.lineSeparator() +","lastModifiedDate":"2023-02-18"},{"lineNumber":112,"author":{"gitId":"SongZijin"},"content":"                    \"** Tip: You can store a date in the format of yyyy-MM-dd\" + System.lineSeparator()","lastModifiedDate":"2023-02-18"},{"lineNumber":113,"author":{"gitId":"SongZijin"},"content":"                    + \"  (eg: 2023-03-03)\");","lastModifiedDate":"2023-02-18"},{"lineNumber":114,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-06"},{"lineNumber":115,"author":{"gitId":"SongZijin"},"content":"        case ERROR_WHEN_SAVING:","lastModifiedDate":"2023-02-18"},{"lineNumber":116,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"/(TAT)/  There seems to be some error when saving data...\");","lastModifiedDate":"2023-02-18"},{"lineNumber":117,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":118,"author":{"gitId":"SongZijin"},"content":"        case NO_MATCHING_TASK:","lastModifiedDate":"2023-02-18"},{"lineNumber":119,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(@A@)| I don\u0027t see any task that contain the word you are searching.\");","lastModifiedDate":"2023-02-18"},{"lineNumber":120,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":121,"author":{"gitId":"SongZijin"},"content":"        default:","lastModifiedDate":"2023-02-18"},{"lineNumber":122,"author":{"gitId":"SongZijin"},"content":"            System.out.println(\"|(TAT)| Some error that I do not understand have happened.\");","lastModifiedDate":"2023-02-18"},{"lineNumber":123,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":124,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":125,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":126,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"SongZijin":126}},{"path":"src/main/java/managers/SaveManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package managers;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import errors.InvalidDeadlineException;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import errors.InvalidEventException;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import tasks.Event;","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"import tasks.ToDo;","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"import java.io.File;","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"import static tasks.Deadline.DEADLINE_CLASS;","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"import static tasks.Event.EVENT_CLASS;","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"import static tasks.ToDo.TODO_CLASS;","lastModifiedDate":"2023-02-16"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":" * Represents a manager for saving the contents of the current list to a txt file,","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":" * of the name PATHNAME, or reading the content from that file.","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"public class SaveManager {","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"    public static final String PATHNAME \u003d \"data.txt\";","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"    public static final int SAVED_DATA_BEGIN_INDEX \u003d 3;","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"    // Storing format:","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"    // T0 name","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"    // D0 name /by time","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"    // E0 name /from time /to time","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"     * Reads the contents that are stored into an ArrayList of Tasks.","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"     * @return An ArrayList containing Tasks from the stored txt document.","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"     * @throws IOException If failed to create a File.","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"     * @throws InvalidDeadlineException If a command for constructing Deadline Object is in incorrect format.","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"     * @throws InvalidEventException If a command for constructing Event Object is in incorrect format.","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"    public ArrayList\u003cTask\u003e initialiseData()","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"            throws IOException, InvalidDeadlineException, InvalidEventException {","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"        File f \u003d new File(PATHNAME);","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"        ArrayList\u003cTask\u003e storedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"            if (f.createNewFile()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"                return storedTasks;","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"            Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"                processStoredTask(storedTasks, line);","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"        return storedTasks;","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":59,"author":{"gitId":"SongZijin"},"content":"     * Write all the items of the current ArrayList of tasks into a txt file for storage.","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":61,"author":{"gitId":"SongZijin"},"content":"     * @param tasks The manager for Tasks where the list of Tasks is stored.","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"SongZijin"},"content":"     * @throws IOException If the FileWriter cannot be generated.","lastModifiedDate":"2023-02-19"},{"lineNumber":63,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"SongZijin"},"content":"    public void saveCurrentState (TaskManager tasks) throws IOException {","lastModifiedDate":"2023-02-18"},{"lineNumber":65,"author":{"gitId":"SongZijin"},"content":"        FileWriter fileWriter \u003d new FileWriter(PATHNAME, true);","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"SongZijin"},"content":"        FileWriter fileClearer \u003d new FileWriter(PATHNAME);","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"SongZijin"},"content":"        fileClearer.write(\"\");","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"SongZijin"},"content":"        fileClearer.close();","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"SongZijin"},"content":"        String taskState \u003d \"\";","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"SongZijin"},"content":"        for (Task taskItem : tasks.getTasksList()) {","lastModifiedDate":"2023-02-18"},{"lineNumber":71,"author":{"gitId":"SongZijin"},"content":"            String toWrite \u003d \"\";","lastModifiedDate":"2023-02-13"},{"lineNumber":72,"author":{"gitId":"SongZijin"},"content":"            if (taskItem.isDone()) {","lastModifiedDate":"2023-02-16"},{"lineNumber":73,"author":{"gitId":"SongZijin"},"content":"                taskState \u003d \"1\";","lastModifiedDate":"2023-02-13"},{"lineNumber":74,"author":{"gitId":"SongZijin"},"content":"            } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":75,"author":{"gitId":"SongZijin"},"content":"                taskState \u003d \"0\";","lastModifiedDate":"2023-02-13"},{"lineNumber":76,"author":{"gitId":"SongZijin"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":77,"author":{"gitId":"SongZijin"},"content":"            toWrite \u003d taskItem.getClassType() + taskState + taskItem.getToStore();","lastModifiedDate":"2023-02-16"},{"lineNumber":78,"author":{"gitId":"SongZijin"},"content":"            fileWriter.write(toWrite + System.lineSeparator());","lastModifiedDate":"2023-02-13"},{"lineNumber":79,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":80,"author":{"gitId":"SongZijin"},"content":"        fileWriter.close();","lastModifiedDate":"2023-02-13"},{"lineNumber":81,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":82,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":83,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":84,"author":{"gitId":"SongZijin"},"content":"     * Write an additional line to the document where the data is saved for when a new","lastModifiedDate":"2023-02-19"},{"lineNumber":85,"author":{"gitId":"SongZijin"},"content":"     * Task is added.","lastModifiedDate":"2023-02-19"},{"lineNumber":86,"author":{"gitId":"SongZijin"},"content":"     * @param newTask The Task that is newly added.","lastModifiedDate":"2023-02-19"},{"lineNumber":87,"author":{"gitId":"SongZijin"},"content":"     * @throws IOException If the FileWriter cannot be generated.","lastModifiedDate":"2023-02-19"},{"lineNumber":88,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":89,"author":{"gitId":"SongZijin"},"content":"    public void saveNewTask (Task newTask) throws IOException {","lastModifiedDate":"2023-02-18"},{"lineNumber":90,"author":{"gitId":"SongZijin"},"content":"        FileWriter fileWriter \u003d new FileWriter(PATHNAME, true);","lastModifiedDate":"2023-02-18"},{"lineNumber":91,"author":{"gitId":"SongZijin"},"content":"        String toWrite \u003d \"\";","lastModifiedDate":"2023-02-18"},{"lineNumber":92,"author":{"gitId":"SongZijin"},"content":"        String taskState \u003d \"0\";","lastModifiedDate":"2023-02-18"},{"lineNumber":93,"author":{"gitId":"SongZijin"},"content":"        toWrite \u003d newTask.getClassType() + taskState + newTask.getToStore();","lastModifiedDate":"2023-02-18"},{"lineNumber":94,"author":{"gitId":"SongZijin"},"content":"        fileWriter.write(toWrite + System.lineSeparator());","lastModifiedDate":"2023-02-18"},{"lineNumber":95,"author":{"gitId":"SongZijin"},"content":"        fileWriter.close();","lastModifiedDate":"2023-02-18"},{"lineNumber":96,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":97,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":98,"author":{"gitId":"SongZijin"},"content":"    private void processStoredTask(ArrayList\u003cTask\u003e storedTasks, String line)","lastModifiedDate":"2023-02-19"},{"lineNumber":99,"author":{"gitId":"SongZijin"},"content":"            throws InvalidDeadlineException, InvalidEventException {","lastModifiedDate":"2023-02-18"},{"lineNumber":100,"author":{"gitId":"SongZijin"},"content":"        switch (line.substring(0,1)) {","lastModifiedDate":"2023-02-13"},{"lineNumber":101,"author":{"gitId":"SongZijin"},"content":"        case TODO_CLASS:","lastModifiedDate":"2023-02-16"},{"lineNumber":102,"author":{"gitId":"SongZijin"},"content":"            ToDo toDo \u003d new ToDo(line.substring(SAVED_DATA_BEGIN_INDEX));","lastModifiedDate":"2023-02-17"},{"lineNumber":103,"author":{"gitId":"SongZijin"},"content":"            setMarkState(line, toDo);","lastModifiedDate":"2023-02-13"},{"lineNumber":104,"author":{"gitId":"SongZijin"},"content":"            storedTasks.add(toDo);","lastModifiedDate":"2023-02-13"},{"lineNumber":105,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-13"},{"lineNumber":106,"author":{"gitId":"SongZijin"},"content":"        case DEADLINE_CLASS:","lastModifiedDate":"2023-02-16"},{"lineNumber":107,"author":{"gitId":"SongZijin"},"content":"            Deadline deadline \u003d new Deadline(line.substring(SAVED_DATA_BEGIN_INDEX));","lastModifiedDate":"2023-02-17"},{"lineNumber":108,"author":{"gitId":"SongZijin"},"content":"            setMarkState(line, deadline);","lastModifiedDate":"2023-02-13"},{"lineNumber":109,"author":{"gitId":"SongZijin"},"content":"            storedTasks.add(deadline);","lastModifiedDate":"2023-02-13"},{"lineNumber":110,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-13"},{"lineNumber":111,"author":{"gitId":"SongZijin"},"content":"        case EVENT_CLASS:","lastModifiedDate":"2023-02-16"},{"lineNumber":112,"author":{"gitId":"SongZijin"},"content":"            Event event \u003d new Event(line.substring(SAVED_DATA_BEGIN_INDEX));","lastModifiedDate":"2023-02-17"},{"lineNumber":113,"author":{"gitId":"SongZijin"},"content":"            setMarkState(line, event);","lastModifiedDate":"2023-02-13"},{"lineNumber":114,"author":{"gitId":"SongZijin"},"content":"            storedTasks.add(event);","lastModifiedDate":"2023-02-13"},{"lineNumber":115,"author":{"gitId":"SongZijin"},"content":"            break;","lastModifiedDate":"2023-02-13"},{"lineNumber":116,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":117,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":118,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":119,"author":{"gitId":"SongZijin"},"content":"    private void setMarkState(String line, Task task) {","lastModifiedDate":"2023-02-19"},{"lineNumber":120,"author":{"gitId":"SongZijin"},"content":"        if (Integer.parseInt(line.substring(1,2)) \u003d\u003d 1) {","lastModifiedDate":"2023-02-13"},{"lineNumber":121,"author":{"gitId":"SongZijin"},"content":"            task.markAsState(true);","lastModifiedDate":"2023-02-13"},{"lineNumber":122,"author":{"gitId":"SongZijin"},"content":"        } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":123,"author":{"gitId":"SongZijin"},"content":"            task.markAsState(false);","lastModifiedDate":"2023-02-13"},{"lineNumber":124,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":125,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":126,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"SongZijin":126}},{"path":"src/main/java/managers/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package managers;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import enums.DialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import enums.ErrorDialogueTypes;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import errors.EmptyTaskListException;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import errors.InvalidDeadlineException;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"import errors.InvalidEventException;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"import errors.NoMatchingItemException;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"import errors.TaskNumberOutOfRangeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"import tasks.Event;","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"import tasks.ToDo;","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"import static java.util.stream.Collectors.toList;","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":" * Represents a controller of how the contents of the \u003ccode\u003eArrayList\u003cTask\u003e\u003c/code\u003e is manipulated","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":" * and changed, with functions specific to each change.","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"public class TaskManager {","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"    private ArrayList\u003cTask\u003e tasksList;","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"    private ArrayList\u003cTask\u003e foundList;","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"    public static final int TODO_BEGIN_INDEX \u003d 5;","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"    public static final int DEADLINE_BEGIN_INDEX \u003d 9;","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"    public static final int EVENT_BEGIN_INDEX \u003d 6;","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"     * Constructs a new TaskManager Object from an ArrayList of Tasks.","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"     * @param taskList A list of Task Objects that initialise the \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"    public TaskManager(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"        tasksList \u003d taskList;","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"        foundList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"     * Returns the list of Tasks currently stored in this Task Manager.","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"     * @return The list of all currently stored Tasks.","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"    public ArrayList\u003cTask\u003e getTasksList() {","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"        return tasksList;","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"     * Adds a new Task that is of the form of an Event Object.","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"     * @param line A String containing both the command that specify the type of object","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"     *             to be added, and the contents of this Event Object.","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"     * @return A Task Object of type Event with the contents specified in \u003ccode\u003eline\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"     * @throws InvalidEventException If the input is of an incorrect format.","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"    public Task addNewEventTask(String line) throws InvalidEventException {","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"        Task newTask \u003d new Event(line.substring(EVENT_BEGIN_INDEX));","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"SongZijin"},"content":"        tasksList.add(newTask);","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"SongZijin"},"content":"        return newTask;","lastModifiedDate":"2023-02-18"},{"lineNumber":61,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":62,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":63,"author":{"gitId":"SongZijin"},"content":"     * Adds a new Task that is of the form of a Deadline Object.","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":65,"author":{"gitId":"SongZijin"},"content":"     * @param line A String containing both the command that specify the type of object","lastModifiedDate":"2023-02-19"},{"lineNumber":66,"author":{"gitId":"SongZijin"},"content":"     *             to be added, and the contents of this Deadline Object.","lastModifiedDate":"2023-02-19"},{"lineNumber":67,"author":{"gitId":"SongZijin"},"content":"     * @return A Task Object of type Deadline with the contents specified in \u003ccode\u003eline\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"SongZijin"},"content":"     * @throws InvalidDeadlineException If the input is of an incorrect format.","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":70,"author":{"gitId":"SongZijin"},"content":"    public Task addNewDeadlineTask(String line) throws InvalidDeadlineException {","lastModifiedDate":"2023-02-18"},{"lineNumber":71,"author":{"gitId":"SongZijin"},"content":"        Task newTask \u003d new Deadline(line.substring(DEADLINE_BEGIN_INDEX));","lastModifiedDate":"2023-02-18"},{"lineNumber":72,"author":{"gitId":"SongZijin"},"content":"        tasksList.add(newTask);","lastModifiedDate":"2023-02-18"},{"lineNumber":73,"author":{"gitId":"SongZijin"},"content":"        return newTask;","lastModifiedDate":"2023-02-18"},{"lineNumber":74,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":75,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":76,"author":{"gitId":"SongZijin"},"content":"     * Adds a new Task that is of the form of a Todo Object.","lastModifiedDate":"2023-02-19"},{"lineNumber":77,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":78,"author":{"gitId":"SongZijin"},"content":"     * @param line A String containing both the command that specify the type of object","lastModifiedDate":"2023-02-19"},{"lineNumber":79,"author":{"gitId":"SongZijin"},"content":"     *             to be added, and the contents of this Todo Object.","lastModifiedDate":"2023-02-19"},{"lineNumber":80,"author":{"gitId":"SongZijin"},"content":"     * @return A Task Object of type Todo with the contents specified in \u003ccode\u003eline\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":81,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":82,"author":{"gitId":"SongZijin"},"content":"    public Task addNewTodoTask(String line) {","lastModifiedDate":"2023-02-18"},{"lineNumber":83,"author":{"gitId":"SongZijin"},"content":"        Task newTask \u003d new ToDo(line.substring(TODO_BEGIN_INDEX));","lastModifiedDate":"2023-02-18"},{"lineNumber":84,"author":{"gitId":"SongZijin"},"content":"        tasksList.add(newTask);","lastModifiedDate":"2023-02-18"},{"lineNumber":85,"author":{"gitId":"SongZijin"},"content":"        return newTask;","lastModifiedDate":"2023-02-18"},{"lineNumber":86,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":87,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":88,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":89,"author":{"gitId":"SongZijin"},"content":"     * Mark or unmark a Task in the position specified by \u003ccode\u003eindexToMark\u003c/code\u003e as done.","lastModifiedDate":"2023-02-19"},{"lineNumber":90,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":91,"author":{"gitId":"SongZijin"},"content":"     * @param indexToMark An integer representing the location of the task inside a list starting","lastModifiedDate":"2023-02-19"},{"lineNumber":92,"author":{"gitId":"SongZijin"},"content":"     *                    from 1.","lastModifiedDate":"2023-02-19"},{"lineNumber":93,"author":{"gitId":"SongZijin"},"content":"     * @param isDone A boolean function that is true to mark a Task as done, else to unmark the Task.","lastModifiedDate":"2023-02-19"},{"lineNumber":94,"author":{"gitId":"SongZijin"},"content":"     * @return The Task Object that have been changed by this function.","lastModifiedDate":"2023-02-19"},{"lineNumber":95,"author":{"gitId":"SongZijin"},"content":"     * @throws TaskNumberOutOfRangeException If the \u003ccode\u003eindexToMark\u003c/code\u003e is of a value not inside the list.","lastModifiedDate":"2023-02-19"},{"lineNumber":96,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":97,"author":{"gitId":"SongZijin"},"content":"    public Task changeStateOfTask(int indexToMark, boolean isDone)","lastModifiedDate":"2023-02-18"},{"lineNumber":98,"author":{"gitId":"SongZijin"},"content":"            throws TaskNumberOutOfRangeException {","lastModifiedDate":"2023-02-19"},{"lineNumber":99,"author":{"gitId":"SongZijin"},"content":"        if (indexToMark \u003e\u003d Task.getItemCount() || indexToMark \u003c 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":100,"author":{"gitId":"SongZijin"},"content":"            throw new TaskNumberOutOfRangeException();","lastModifiedDate":"2023-02-18"},{"lineNumber":101,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":102,"author":{"gitId":"SongZijin"},"content":"        tasksList.get(indexToMark).markAsState(isDone);","lastModifiedDate":"2023-02-18"},{"lineNumber":103,"author":{"gitId":"SongZijin"},"content":"        return tasksList.get(indexToMark);","lastModifiedDate":"2023-02-18"},{"lineNumber":104,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":105,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":106,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":107,"author":{"gitId":"SongZijin"},"content":"     * Displays all the items inside the list, if the list is empty, display an error","lastModifiedDate":"2023-02-19"},{"lineNumber":108,"author":{"gitId":"SongZijin"},"content":"     * message instead.","lastModifiedDate":"2023-02-19"},{"lineNumber":109,"author":{"gitId":"SongZijin"},"content":"     * @param display The OutputDialogueManager that contains the String of dialogues to be","lastModifiedDate":"2023-02-19"},{"lineNumber":110,"author":{"gitId":"SongZijin"},"content":"     *                displayed to provide further information to the user.","lastModifiedDate":"2023-02-19"},{"lineNumber":111,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":112,"author":{"gitId":"SongZijin"},"content":"    public void listAllItems(OutputDialogueManager display) {","lastModifiedDate":"2023-02-18"},{"lineNumber":113,"author":{"gitId":"SongZijin"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":114,"author":{"gitId":"SongZijin"},"content":"            checkStateOfTasksList();","lastModifiedDate":"2023-02-18"},{"lineNumber":115,"author":{"gitId":"SongZijin"},"content":"            display.printInteraction(DialogueTypes.LIST_TASKS);","lastModifiedDate":"2023-02-18"},{"lineNumber":116,"author":{"gitId":"SongZijin"},"content":"            printAllTasksInList(tasksList);","lastModifiedDate":"2023-02-18"},{"lineNumber":117,"author":{"gitId":"SongZijin"},"content":"        } catch (EmptyTaskListException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":118,"author":{"gitId":"SongZijin"},"content":"            display.printErrorDialogue(ErrorDialogueTypes.NO_TASK_IN_LIST);","lastModifiedDate":"2023-02-18"},{"lineNumber":119,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":120,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":121,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":122,"author":{"gitId":"SongZijin"},"content":"    private static void checkStateOfTasksList() throws EmptyTaskListException {","lastModifiedDate":"2023-02-18"},{"lineNumber":123,"author":{"gitId":"SongZijin"},"content":"        if (Task.getItemCount() \u003c 1) {","lastModifiedDate":"2023-02-18"},{"lineNumber":124,"author":{"gitId":"SongZijin"},"content":"            throw new EmptyTaskListException();","lastModifiedDate":"2023-02-18"},{"lineNumber":125,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":126,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":127,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":128,"author":{"gitId":"SongZijin"},"content":"    private void printAllTasksInList( ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2023-02-18"},{"lineNumber":129,"author":{"gitId":"SongZijin"},"content":"        int taskCount \u003d 1;","lastModifiedDate":"2023-02-18"},{"lineNumber":130,"author":{"gitId":"SongZijin"},"content":"        for (Task item: listOfTasks) {","lastModifiedDate":"2023-02-18"},{"lineNumber":131,"author":{"gitId":"SongZijin"},"content":"            System.out.print(taskCount);","lastModifiedDate":"2023-02-18"},{"lineNumber":132,"author":{"gitId":"SongZijin"},"content":"            item.printTask();","lastModifiedDate":"2023-02-18"},{"lineNumber":133,"author":{"gitId":"SongZijin"},"content":"            taskCount++;","lastModifiedDate":"2023-02-18"},{"lineNumber":134,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":135,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":136,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":137,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":138,"author":{"gitId":"SongZijin"},"content":"     * Deletes an item from the list of Tasks, specified by the \u003ccode\u003eindexToDelete\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":139,"author":{"gitId":"SongZijin"},"content":"     * @param indexToDelete An integer representing the position of a Task in a list of Tasks","lastModifiedDate":"2023-02-19"},{"lineNumber":140,"author":{"gitId":"SongZijin"},"content":"     *                      starting from 1.","lastModifiedDate":"2023-02-19"},{"lineNumber":141,"author":{"gitId":"SongZijin"},"content":"     * @return The Task that is deleted.","lastModifiedDate":"2023-02-19"},{"lineNumber":142,"author":{"gitId":"SongZijin"},"content":"     * @throws TaskNumberOutOfRangeException If the \u003ccode\u003eindexToDelete\u003c/code\u003e is of a value not inside the list.","lastModifiedDate":"2023-02-19"},{"lineNumber":143,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":144,"author":{"gitId":"SongZijin"},"content":"    public Task deleteItem(int indexToDelete) throws TaskNumberOutOfRangeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":145,"author":{"gitId":"SongZijin"},"content":"        if (indexToDelete \u003e\u003d Task.getItemCount() || indexToDelete \u003c 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":146,"author":{"gitId":"SongZijin"},"content":"            throw new TaskNumberOutOfRangeException();","lastModifiedDate":"2023-02-18"},{"lineNumber":147,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":148,"author":{"gitId":"SongZijin"},"content":"        Task toBeDeleted \u003d tasksList.get(indexToDelete);","lastModifiedDate":"2023-02-18"},{"lineNumber":149,"author":{"gitId":"SongZijin"},"content":"        tasksList.remove(indexToDelete);","lastModifiedDate":"2023-02-18"},{"lineNumber":150,"author":{"gitId":"SongZijin"},"content":"        Task.decreaseItemCount();","lastModifiedDate":"2023-02-18"},{"lineNumber":151,"author":{"gitId":"SongZijin"},"content":"        return toBeDeleted;","lastModifiedDate":"2023-02-18"},{"lineNumber":152,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":153,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":154,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":155,"author":{"gitId":"SongZijin"},"content":"     * Search the list of Tasks and find all the Tasks that contains the content of String","lastModifiedDate":"2023-02-19"},{"lineNumber":156,"author":{"gitId":"SongZijin"},"content":"     * \u003ccode\u003etoFind\u003c/code\u003e, then store all those contents into the ArrayList of \u003ccode\u003efoundList\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":157,"author":{"gitId":"SongZijin"},"content":"     * @param toFind A String containing the word or phrase that one wished to find.","lastModifiedDate":"2023-02-19"},{"lineNumber":158,"author":{"gitId":"SongZijin"},"content":"     * @param display The OutputDialogueManager that contains the String of dialogues to be","lastModifiedDate":"2023-02-19"},{"lineNumber":159,"author":{"gitId":"SongZijin"},"content":"     *                displayed to provide further information to the user.","lastModifiedDate":"2023-02-19"},{"lineNumber":160,"author":{"gitId":"SongZijin"},"content":"     * @throws NoMatchingItemException If no item in the lst of all tasks have content that contains","lastModifiedDate":"2023-02-19"},{"lineNumber":161,"author":{"gitId":"SongZijin"},"content":"     *                                 the word or phrase in the input.","lastModifiedDate":"2023-02-19"},{"lineNumber":162,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":163,"author":{"gitId":"SongZijin"},"content":"    public void findTaskWithWord (String toFind, OutputDialogueManager display)","lastModifiedDate":"2023-02-18"},{"lineNumber":164,"author":{"gitId":"SongZijin"},"content":"            throws NoMatchingItemException {","lastModifiedDate":"2023-02-18"},{"lineNumber":165,"author":{"gitId":"SongZijin"},"content":"        foundList.clear();","lastModifiedDate":"2023-02-18"},{"lineNumber":166,"author":{"gitId":"SongZijin"},"content":"        foundList \u003d (ArrayList\u003cTask\u003e) tasksList.stream()","lastModifiedDate":"2023-02-18"},{"lineNumber":167,"author":{"gitId":"SongZijin"},"content":"                .filter(t -\u003e t.getItemName().toLowerCase().contains(toFind))","lastModifiedDate":"2023-02-18"},{"lineNumber":168,"author":{"gitId":"SongZijin"},"content":"                .collect(toList());","lastModifiedDate":"2023-02-18"},{"lineNumber":169,"author":{"gitId":"SongZijin"},"content":"        if (foundList.isEmpty()) {","lastModifiedDate":"2023-02-18"},{"lineNumber":170,"author":{"gitId":"SongZijin"},"content":"            throw new NoMatchingItemException();","lastModifiedDate":"2023-02-18"},{"lineNumber":171,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":172,"author":{"gitId":"SongZijin"},"content":"        display.printInteraction(DialogueTypes.FIND_TASK);","lastModifiedDate":"2023-02-18"},{"lineNumber":173,"author":{"gitId":"SongZijin"},"content":"        printAllTasksInList(foundList);","lastModifiedDate":"2023-02-18"},{"lineNumber":174,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":175,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":175}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"import errors.InvalidDeadlineException;","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import translators.SpecialInputDateTranslator;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":" * Represents a task with a deadline. A \u003ccode\u003eDeadline\u003c/code\u003e object represents","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":" * a task that have an end date.","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"    public static final int DEADLINE_DIVIDER_LENGTH \u003d 4;","lastModifiedDate":"2023-02-06"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"    public static final String DEADLINE_SEPARATOR \u003d \"/by\";","lastModifiedDate":"2023-02-16"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"    public static final String DONE_DEADLINE_INDICATOR \u003d \"[D] [X]\";","lastModifiedDate":"2023-02-16"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"    public static final String NOT_DONE_DEADLINE_INDICATOR \u003d \"[D] [ ]\";","lastModifiedDate":"2023-02-16"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"    public static final String DEADLINE_CLASS \u003d \"D\";","lastModifiedDate":"2023-02-16"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"    private String itemName;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"    private String deadline;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"    private LocalDate deadlineDate;","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"     * Construct a Deadline Object from a line of information.","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"     * @param itemName A String containing both name of the task and the ending time of","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"     *                 the task, seperated by \u003ccode\u003e/by\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"     * @throws InvalidDeadlineException If the format of the line is incorrect.","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"    public Deadline(String itemName) throws InvalidDeadlineException {","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"        super(itemName);","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"        int indexOfDivider \u003d itemName.indexOf(DEADLINE_SEPARATOR);","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"        if (indexOfDivider \u003d\u003d -1 ||","lastModifiedDate":"2023-02-06"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"                itemName.substring(indexOfDivider + DEADLINE_DIVIDER_LENGTH).isEmpty()) {","lastModifiedDate":"2023-02-06"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"            throw new InvalidDeadlineException();","lastModifiedDate":"2023-02-06"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"        this.itemName \u003d super.getItemName().substring(0,indexOfDivider).trim();","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"        this.deadline \u003d itemName.substring(indexOfDivider + DEADLINE_DIVIDER_LENGTH).trim();","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"        if (SpecialInputDateTranslator.isInSpecialFormat(deadline)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"            this.deadlineDate \u003d SpecialInputDateTranslator.convertToDateObject(deadline);","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"            this.deadline \u003d SpecialInputDateTranslator.formatDate(deadlineDate);","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"        incrementItemCount();","lastModifiedDate":"2023-02-06"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"    public void printTask() {","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"        String status;","lastModifiedDate":"2023-02-06"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"        if (super.isDone()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"            status \u003d DONE_DEADLINE_INDICATOR;","lastModifiedDate":"2023-02-16"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"            status \u003d NOT_DONE_DEADLINE_INDICATOR;","lastModifiedDate":"2023-02-16"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"        System.out.println( \".\" + status + \" \" + this.itemName + \" (by: \" + deadline + \")\");","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"    public void printTaskWithoutId() {","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"        System.out.println( \"  [D] \" + this.itemName + \" (by: \" + deadline + \")\");","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"SongZijin"},"content":"    public String getClassType() {","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"SongZijin"},"content":"        return DEADLINE_CLASS;","lastModifiedDate":"2023-02-16"},{"lineNumber":64,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"SongZijin"},"content":"    public String getToStore() {","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"SongZijin"},"content":"        return (\" \" + this.itemName + \" /by \" + this.deadline);","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"SongZijin":70}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"import errors.InvalidEventException;","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import translators.SpecialInputDateTranslator;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":" * Represents a task that happen during a specific period of time. An \u003ccode\u003eEvent\u003c/code\u003e corresponds to","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":" * a task with both a start date and an end date e.g., \u003ccode\u003eEvent (from: start to: end)\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"    public static final String EVENT_TIME_START_INDICATOR \u003d \"/from\";","lastModifiedDate":"2023-02-16"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"    public static final String EVENT_TIME_END_INDICATOR \u003d \"/to\";","lastModifiedDate":"2023-02-16"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"    public static final int EVENT_TIME_START_DIVIDER_LENGTH \u003d 6;","lastModifiedDate":"2023-02-16"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"    public static final int EVENT_TIME_END_DIVIDER_LENGTH \u003d 4;","lastModifiedDate":"2023-02-16"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"    public static final String EVENT_CLASS \u003d \"E\";","lastModifiedDate":"2023-02-16"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"    public static final String DONE_EVENT_INDICATOR \u003d \"[E] [X]\";","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"    public static final String NOT_DONE_EVENT_INDICATOR \u003d \"[E] [ ]\";","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"    private String itemName;","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"    private String startTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"    private String endTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"    private LocalDate startDate;","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"    private LocalDate endDate;","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"     * Creates a new event with a start date and an end date.","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"     * @param itemName A String that contains the name, starting date and ending date of the task,","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"     *                 with the dates seperated by \u003ccode\u003e/from\u003c/code\u003e and \u003ccode\u003e/to\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"     * @throws InvalidEventException If \u003ccode\u003eitemName\u003c/code\u003e is of an incorrect format.","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"    public Event(String itemName) throws InvalidEventException {","lastModifiedDate":"2023-02-16"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"        super(itemName);","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"        int indexOfStartTime \u003d itemName.indexOf(EVENT_TIME_START_INDICATOR);","lastModifiedDate":"2023-02-16"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"        int indexOfEndTime \u003d itemName.indexOf(EVENT_TIME_END_INDICATOR);","lastModifiedDate":"2023-02-16"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"        if (indexOfEndTime \u003d\u003d -1 || indexOfStartTime \u003d\u003d -1) {","lastModifiedDate":"2023-02-06"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"            throw new InvalidEventException();","lastModifiedDate":"2023-02-06"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-06"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"        this.itemName \u003d super.getItemName().substring(0, indexOfStartTime).trim();","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"        this.startTime \u003d itemName.substring(indexOfStartTime + EVENT_TIME_START_DIVIDER_LENGTH, indexOfEndTime).trim();","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"        this.endTime \u003d itemName.substring(indexOfEndTime + EVENT_TIME_END_DIVIDER_LENGTH).trim();","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"        if (SpecialInputDateTranslator.isInSpecialFormat(startTime)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"            this.startDate \u003d SpecialInputDateTranslator.convertToDateObject(startTime);","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"            this.startTime \u003d SpecialInputDateTranslator.formatDate(startDate);","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"        if (SpecialInputDateTranslator.isInSpecialFormat(endTime)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"            this.endDate \u003d SpecialInputDateTranslator.convertToDateObject(endTime);","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"            this.endTime \u003d SpecialInputDateTranslator.formatDate(endDate);","lastModifiedDate":"2023-02-19"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"        incrementItemCount();","lastModifiedDate":"2023-02-06"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"    public void printTask() {","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"        String status;","lastModifiedDate":"2023-02-06"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"        if (super.isDone()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"            status \u003d DONE_EVENT_INDICATOR;","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"SongZijin"},"content":"            status \u003d NOT_DONE_EVENT_INDICATOR;","lastModifiedDate":"2023-02-16"},{"lineNumber":60,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"SongZijin"},"content":"        System.out.println(\".\" + status + \" \" + this.itemName +","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"SongZijin"},"content":"                \" (from: \" + startTime + \" to: \" + endTime + \")\");","lastModifiedDate":"2023-02-18"},{"lineNumber":63,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"SongZijin"},"content":"    public void printTaskWithoutId() {","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"SongZijin"},"content":"        System.out.println( \"  [E] \" + this.itemName +  \" (from: \" + startTime + \" to: \" + endTime + \")\");","lastModifiedDate":"2023-02-18"},{"lineNumber":68,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":71,"author":{"gitId":"SongZijin"},"content":"    public String getClassType () {","lastModifiedDate":"2023-02-13"},{"lineNumber":72,"author":{"gitId":"SongZijin"},"content":"        return EVENT_CLASS;","lastModifiedDate":"2023-02-16"},{"lineNumber":73,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":74,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":75,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":76,"author":{"gitId":"SongZijin"},"content":"    public String getToStore() {","lastModifiedDate":"2023-02-13"},{"lineNumber":77,"author":{"gitId":"SongZijin"},"content":"        return (\" \" + this.itemName + \" /from \" + this.startTime + \" /to \" + this.endTime);","lastModifiedDate":"2023-02-13"},{"lineNumber":78,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":79,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":80,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"SongZijin":80}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":" * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e is an abstract object with three specific types,","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":" * \u003ccode\u003eTodo\u003c/code\u003e, \u003ccode\u003eDeadline\u003c/code\u003e and \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-06"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"    private static int itemCount \u003d 0;","lastModifiedDate":"2023-02-06"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"    private String itemName;","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"     * Creates an object of type Task.","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"     * @param itemName The name of this Task object.","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"    public Task(String itemName) {","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"        itemName \u003d itemName.substring(0,1).toUpperCase() + itemName.substring(1);","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"        this.itemName \u003d itemName.trim();","lastModifiedDate":"2023-02-18"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"     * Returns the name of the current Task Object.","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"     * @return Name of Task Object.","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"    public String getItemName() {","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"        return itemName;","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"     * Return the total number of Task Objects that are created.","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"     * @return Total number of Task Objects.","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"    public static int getItemCount() {","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"        return itemCount;","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"     * Increases the count for the number of Task Objects.","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"     * Used whenever a new Task is added.","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"    public static void incrementItemCount() {","lastModifiedDate":"2023-02-06"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"        Task.itemCount++;","lastModifiedDate":"2023-02-06"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"     * Decreases the count for the number of Task Objects.","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"     * Used whenever a Task is deleted.","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"    public static void decreaseItemCount() {","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"        Task.itemCount--;","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"     * Return if the Task have been marked as done.","lastModifiedDate":"2023-02-19"},{"lineNumber":59,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"SongZijin"},"content":"     * @return True if the Task is marked as done, else return false.","lastModifiedDate":"2023-02-19"},{"lineNumber":61,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"SongZijin"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"SongZijin"},"content":"        return isDone;","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":67,"author":{"gitId":"SongZijin"},"content":"     * Mark the current Task as completed if \u003ccode\u003estate\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e,","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"SongZijin"},"content":"     * else mark it as incomplete, by changing the state of \u003ccode\u003eisDone\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":70,"author":{"gitId":"SongZijin"},"content":"     * @param state The state that you wish to mark the Current Task to.","lastModifiedDate":"2023-02-19"},{"lineNumber":71,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":72,"author":{"gitId":"SongZijin"},"content":"    public void markAsState(boolean state) {","lastModifiedDate":"2023-02-06"},{"lineNumber":73,"author":{"gitId":"SongZijin"},"content":"        this.isDone \u003d state;","lastModifiedDate":"2023-02-06"},{"lineNumber":74,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":75,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":76,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":77,"author":{"gitId":"SongZijin"},"content":"     * Print the contents of the current Task in a format specific to the type of","lastModifiedDate":"2023-02-19"},{"lineNumber":78,"author":{"gitId":"SongZijin"},"content":"     * Task it is. This print includes a dot for a number representing the index of","lastModifiedDate":"2023-02-19"},{"lineNumber":79,"author":{"gitId":"SongZijin"},"content":"     * the currently printed Task to be included before it.","lastModifiedDate":"2023-02-19"},{"lineNumber":80,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":81,"author":{"gitId":"SongZijin"},"content":"    public abstract void printTask();","lastModifiedDate":"2023-02-06"},{"lineNumber":82,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":84,"author":{"gitId":"SongZijin"},"content":"     * Print the contents of the Task in a format specific to the type of","lastModifiedDate":"2023-02-19"},{"lineNumber":85,"author":{"gitId":"SongZijin"},"content":"     * Task it is. This print is specifically used when the task is to be printed","lastModifiedDate":"2023-02-19"},{"lineNumber":86,"author":{"gitId":"SongZijin"},"content":"     * without an integer representing the number of this task before it.","lastModifiedDate":"2023-02-19"},{"lineNumber":87,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":88,"author":{"gitId":"SongZijin"},"content":"    public abstract void printTaskWithoutId();","lastModifiedDate":"2023-02-06"},{"lineNumber":89,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":90,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":91,"author":{"gitId":"SongZijin"},"content":"     * Return the type of the current Task.","lastModifiedDate":"2023-02-19"},{"lineNumber":92,"author":{"gitId":"SongZijin"},"content":"     * @return T if task is of \u003ccode\u003eTodo\u003c/code\u003e type","lastModifiedDate":"2023-02-19"},{"lineNumber":93,"author":{"gitId":"SongZijin"},"content":"     *         D if task is of \u003ccode\u003eDeadline\u003c/code\u003e type","lastModifiedDate":"2023-02-19"},{"lineNumber":94,"author":{"gitId":"SongZijin"},"content":"     *         E if task is of \u003ccode\u003eEvent\u003c/code\u003e type","lastModifiedDate":"2023-02-19"},{"lineNumber":95,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":96,"author":{"gitId":"SongZijin"},"content":"    public abstract String getClassType();","lastModifiedDate":"2023-02-13"},{"lineNumber":97,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":98,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":99,"author":{"gitId":"SongZijin"},"content":"     * Return a String containing the contents of the task that is in a format","lastModifiedDate":"2023-02-19"},{"lineNumber":100,"author":{"gitId":"SongZijin"},"content":"     * suitable for storing in a text file.","lastModifiedDate":"2023-02-19"},{"lineNumber":101,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":102,"author":{"gitId":"SongZijin"},"content":"     * @return A string containing the essential information of the Task, such as","lastModifiedDate":"2023-02-19"},{"lineNumber":103,"author":{"gitId":"SongZijin"},"content":"     *         name of the Task or if it is marked as done.","lastModifiedDate":"2023-02-19"},{"lineNumber":104,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":105,"author":{"gitId":"SongZijin"},"content":"    public abstract String getToStore();","lastModifiedDate":"2023-02-13"},{"lineNumber":106,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"SongZijin":106}},{"path":"src/main/java/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package tasks;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":" * Represents a task with no dates involved. A \u003ccode\u003eTodo\u003c/code\u003e object correspond","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":" * to a Task that only have a name.","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-02-16"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"    public static final String TODO_CLASS \u003d \"T\";","lastModifiedDate":"2023-02-16"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"    public static final String DONE_TODO_INDICATOR \u003d \"[T] [X]\";","lastModifiedDate":"2023-02-16"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"    public static final String NOT_DONE_TODO_INDICATOR \u003d \"[T] [ ]\";","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"     * Construct a Todo Object using the name of the object.","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"     * @param itemName A String containing the name of the Todo Object.","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"    public ToDo(String itemName) {","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"        super(itemName);","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"        incrementItemCount();","lastModifiedDate":"2023-02-06"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"    public void printTask() {","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"        String status;","lastModifiedDate":"2023-02-06"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"        if (super.isDone()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"            status \u003d DONE_TODO_INDICATOR;","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"            status \u003d NOT_DONE_TODO_INDICATOR;","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"        System.out.println(\".\" + status + \" \" + this.getItemName());","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"    public void printTaskWithoutId() {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"        System.out.println( \"  [T] \" + this.getItemName());","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"    public String getClassType () {","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"        return TODO_CLASS;","lastModifiedDate":"2023-02-16"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"    public String getToStore() {","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"        return \" \" + this.getItemName();","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"SongZijin":48}},{"path":"src/main/java/translators/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package translators;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import commands.AddCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import commands.Command;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"import commands.DeleteCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"import commands.ExitCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"import commands.FindCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":"import commands.HelpCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":"import commands.ListCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":"import commands.MarkCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"import commands.UnknownCommand;","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":" * Represents a parser that separates the String of command into Command Objects.","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"public class Parser {","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"     * Returns a Command of a specific type depending on the content of","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"     * the input String.","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"     * @param fullCommand A String inputted by the user, containing at","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"     *                    least a Command word that need to be parsed","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"     * @return A Command Object translated from \u003ccode\u003efullCommand\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"     * @throws NumberFormatException If the input is not an Integer when it is","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"     *                               supposed to be one.","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"     * @throws IndexOutOfBoundsException If the content of a Command that should not be","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"     *                                   empty is empty.","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"    public static Command parse(String fullCommand)","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"            throws NumberFormatException, IndexOutOfBoundsException {","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"        if (fullCommand.equals(\"bye\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"        if (fullCommand.equals(\"list\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"            return new ListCommand();","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"        String[] words \u003d fullCommand.split(\" \");","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"        switch (words[0]) {","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"            int indexToMark \u003d Integer.parseInt(words[1]) - 1;","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"            return new MarkCommand(true, indexToMark);","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"            int indexToUnmark \u003d Integer.parseInt(words[1]) - 1;","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"            return new MarkCommand(false, indexToUnmark);","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"SongZijin"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"SongZijin"},"content":"            // fall through","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"SongZijin"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"SongZijin"},"content":"            // fall through","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"SongZijin"},"content":"        case \"event\":","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"SongZijin"},"content":"            return new AddCommand(words[0], fullCommand);","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"SongZijin"},"content":"        case \"help\":","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"SongZijin"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"SongZijin"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"SongZijin"},"content":"            int indexToDelete \u003d Integer.parseInt(words[1]) - 1;","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"SongZijin"},"content":"            return new DeleteCommand(indexToDelete);","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"SongZijin"},"content":"        case \"find\":","lastModifiedDate":"2023-02-18"},{"lineNumber":57,"author":{"gitId":"SongZijin"},"content":"            String toFind \u003d fullCommand.replace(words[0],\"\" ).trim();","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"SongZijin"},"content":"            return new FindCommand(toFind.toLowerCase());","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"SongZijin"},"content":"        default:","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"SongZijin"},"content":"            return new UnknownCommand();","lastModifiedDate":"2023-02-18"},{"lineNumber":61,"author":{"gitId":"SongZijin"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":62,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":63,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"SongZijin":63}},{"path":"src/main/java/translators/SpecialInputDateTranslator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"package translators;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"/**","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":" * Represents a translator that converts a string of date in the form \u003ccode\u003eyyyy-MM-dd\u003c/code\u003e","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SongZijin"},"content":" * to the form of \u003ccode\u003eMMM dd yyyy\u003c/code\u003e, e.g., translate \u003ccode\u003e2023-03-03\u003c/code\u003e to","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SongZijin"},"content":" * \u003ccode\u003eMar 03 2023\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SongZijin"},"content":" */","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SongZijin"},"content":"public class SpecialInputDateTranslator {","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SongZijin"},"content":"     * Checks if the String of date is in the specific format for the translation to be possible.","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SongZijin"},"content":"     * @param date A string representing a date.","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SongZijin"},"content":"     * @return True if the string is in the format of \u003ccode\u003eyyyy-MM-dd\u003c/code\u003e, else return false.","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SongZijin"},"content":"    public static boolean isInSpecialFormat(String date) {","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SongZijin"},"content":"        return date.matches(\"([0-9]{4}-[0-9]{2}-[0-9]{2})\");","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"     * Converts the date from String format to a LocalDate Object.","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SongZijin"},"content":"     * @param date A String containing information of a date in the format of \u003ccode\u003eyyyy-MM-dd\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SongZijin"},"content":"     * @return A LocalDate Object translated from the String \u003ccode\u003edate\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"SongZijin"},"content":"    public static LocalDate convertToDateObject(String date) {","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"SongZijin"},"content":"            DateTimeFormatter dateOnlyInputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"SongZijin"},"content":"            return LocalDate.parse(date, dateOnlyInputFormatter);","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"SongZijin"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SongZijin"},"content":"    /**","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SongZijin"},"content":"     * Convert a DateTime Object to a string of format \u003ccode\u003eMMM dd yyyy\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"SongZijin"},"content":"     *","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"SongZijin"},"content":"     * @param date A DateTime Object that needs to be converted.","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"SongZijin"},"content":"     * @return A String representing date in the format of \u003ccode\u003eMMM dd yyyy\u003c/code\u003e.","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"SongZijin"},"content":"     */","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"SongZijin"},"content":"    public static String formatDate (LocalDate date) {","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SongZijin"},"content":"        DateTimeFormatter dateOnlyOutputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SongZijin"},"content":"        return date.format(dateOnlyOutputFormatter);","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SongZijin"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SongZijin"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SongZijin":44}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"SongZijin"},"content":"todo Song Zijin: Answer CS2113 tutorial questions","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"SongZijin"},"content":"deadline weekly CS2113 quiz /by Monday 9pm","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"SongZijin"},"content":"list","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"SongZijin"},"content":"event CS2113 lecture /from Friday 4pm /to 6pm","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"SongZijin"},"content":"mark 1","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"SongZijin"},"content":"list","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"SongZijin"},"content":"bye","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"SongZijin":7}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"SongZijin"},"content":"java -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"SongZijin":1,"-":37}}]
