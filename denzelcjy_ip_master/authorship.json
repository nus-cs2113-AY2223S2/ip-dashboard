[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"# User Guide for Duke","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"Duke is a **task list manager application** for use via the **Command Line Interface** (CLI) that interacts with you like a personal assistant. ","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":"- [Quick Start](#quick-start)","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":"- [Features](#features)","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"  + [Add a To-Do task: `todo`](#add-a-to-do-task-todo)","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"  + [Add a Deadline task: `deadline`](#add-a-deadline-task-deadline)","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"  + [Add an Event task: `event`](#add-an-event-task-event)","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"  + [List all tasks: `list`](#list-all-tasks-list)","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"  + [Mark a task as done: `mark`](#mark-a-task-as-done-mark)","lastModifiedDate":"2023-02-17"},{"lineNumber":12,"author":{"gitId":"denzelcjy"},"content":"  + [Mark a task as not done: `unmark`](#mark-a-task-as-not-done-unmark)","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":"  + [Delete a task: `delete`](#delete-a-task-delete)","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":"  + [Search tasks with given keyword : `find`](#search-tasks-with-given-keyword-find)","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"  + [Exit the application: `bye`](#exit-the-application-bye)","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"  + [Loading/Saving the data file](#loadingsaving-the-data-file)","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"- [Command Summary](#command-summary)","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"## Quick Start","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"2. Download the latest `Duke.jar` available [here](https://github.com/denzelcjy/ip/releases).","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"3. Copy the file to the folder you want to use as the home folder for your Duke chatbot, e.g. `Desktop`.","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"denzelcjy"},"content":"4. Open the command terminal, `cd` into the folder that you copied `Duke.jar` into in the previous step, e.g. `cd Desktop`.","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"denzelcjy"},"content":"5. Once in the folder, type the command `java -jar Duke.jar` to run the application.","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"denzelcjy"},"content":"If successful, you should see this as the response output:","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"denzelcjy"},"content":"Hello from","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"denzelcjy"},"content":" ____        _","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"denzelcjy"},"content":"|  _ \\ _   _| | _____","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"denzelcjy"},"content":"| | | | | | | |/ / _ \\","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"denzelcjy"},"content":"| |_| | |_| |   \u003c  __/","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"denzelcjy"},"content":"|____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"denzelcjy"},"content":"     Hello! I\u0027m Duke","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"denzelcjy"},"content":"     What can I do for you?","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":39,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"denzelcjy"},"content":"### Add a To-Do task: `todo`","lastModifiedDate":"2023-02-17"},{"lineNumber":44,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":45,"author":{"gitId":"denzelcjy"},"content":"Adds a to-do task to the task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"denzelcjy"},"content":"#### Usage:","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"denzelcjy"},"content":"`todo \u003cdescription\u003e`","lastModifiedDate":"2023-02-17"},{"lineNumber":50,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":51,"author":{"gitId":"denzelcjy"},"content":"#### Example:","lastModifiedDate":"2023-02-17"},{"lineNumber":52,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":53,"author":{"gitId":"denzelcjy"},"content":"`todo borrow book`","lastModifiedDate":"2023-02-17"},{"lineNumber":54,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":55,"author":{"gitId":"denzelcjy"},"content":"#### Sample Outcome:","lastModifiedDate":"2023-02-17"},{"lineNumber":56,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":57,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":58,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":59,"author":{"gitId":"denzelcjy"},"content":"     Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-17"},{"lineNumber":60,"author":{"gitId":"denzelcjy"},"content":"       [T][ ] borrow book","lastModifiedDate":"2023-02-17"},{"lineNumber":61,"author":{"gitId":"denzelcjy"},"content":"     Now you have 1 tasks in the list.","lastModifiedDate":"2023-02-17"},{"lineNumber":62,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":63,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":64,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":65,"author":{"gitId":"denzelcjy"},"content":"### Add a Deadline task: `deadline`","lastModifiedDate":"2023-02-17"},{"lineNumber":66,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":67,"author":{"gitId":"denzelcjy"},"content":"Adds a deadline task to the task list with a due date.","lastModifiedDate":"2023-02-17"},{"lineNumber":68,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":69,"author":{"gitId":"denzelcjy"},"content":"#### Usage:","lastModifiedDate":"2023-02-17"},{"lineNumber":70,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":71,"author":{"gitId":"denzelcjy"},"content":"`deadline \u003cdescription\u003e /by \u003cdue date\u003e` ","lastModifiedDate":"2023-02-17"},{"lineNumber":72,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":73,"author":{"gitId":"denzelcjy"},"content":"+ `\u003cdue date\u003e` details can contain `\u003cdate\u003e` in the format of `\u003cyyyy-mm-dd\u003e` or \u003ctime\u003e in the format of a string.","lastModifiedDate":"2023-02-17"},{"lineNumber":74,"author":{"gitId":"denzelcjy"},"content":"  ","lastModifiedDate":"2023-02-17"},{"lineNumber":75,"author":{"gitId":"denzelcjy"},"content":"  + If both are included, `\u003cdate\u003e` should be **before** the remaining string.","lastModifiedDate":"2023-02-17"},{"lineNumber":76,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":77,"author":{"gitId":"denzelcjy"},"content":"#### Example 1 using `\u003ctime\u003e` only:","lastModifiedDate":"2023-02-17"},{"lineNumber":78,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":79,"author":{"gitId":"denzelcjy"},"content":"`deadline return book /by 6pm`","lastModifiedDate":"2023-02-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2021-07-17"},{"lineNumber":81,"author":{"gitId":"denzelcjy"},"content":"#### Example 2 using `\u003cdate\u003e + \u003ctime\u003e`:","lastModifiedDate":"2023-02-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":83,"author":{"gitId":"denzelcjy"},"content":"`deadline submit assignment /by 2023-08-08 at 6pm`","lastModifiedDate":"2023-02-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":85,"author":{"gitId":"denzelcjy"},"content":"#### Sample Outcome 1:","lastModifiedDate":"2023-02-17"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":88,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":89,"author":{"gitId":"denzelcjy"},"content":"     Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-17"},{"lineNumber":90,"author":{"gitId":"denzelcjy"},"content":"       [D][ ] return book (by: 6pm)","lastModifiedDate":"2023-02-17"},{"lineNumber":91,"author":{"gitId":"denzelcjy"},"content":"     Now you have 2 tasks in the list.","lastModifiedDate":"2023-02-17"},{"lineNumber":92,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":93,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":94,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":95,"author":{"gitId":"denzelcjy"},"content":"#### Sample Outcome 2:","lastModifiedDate":"2023-02-17"},{"lineNumber":96,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":97,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":98,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":99,"author":{"gitId":"denzelcjy"},"content":"     Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-17"},{"lineNumber":100,"author":{"gitId":"denzelcjy"},"content":"       [D][ ] submit assignment (by: 8 Aug 2023 at 6pm)","lastModifiedDate":"2023-02-17"},{"lineNumber":101,"author":{"gitId":"denzelcjy"},"content":"     Now you have 3 tasks in the list.","lastModifiedDate":"2023-02-17"},{"lineNumber":102,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":103,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":104,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":105,"author":{"gitId":"denzelcjy"},"content":"### Add an Event task: `event`","lastModifiedDate":"2023-02-17"},{"lineNumber":106,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":107,"author":{"gitId":"denzelcjy"},"content":"Adds an event task to the task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":108,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":109,"author":{"gitId":"denzelcjy"},"content":"#### Usage:","lastModifiedDate":"2023-02-17"},{"lineNumber":110,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":111,"author":{"gitId":"denzelcjy"},"content":"`event \u003cdescription\u003e /from \u003cstart date/time\u003e /to \u003cend date/time\u003e`","lastModifiedDate":"2023-02-17"},{"lineNumber":112,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":113,"author":{"gitId":"denzelcjy"},"content":"#### Example:","lastModifiedDate":"2023-02-17"},{"lineNumber":114,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":115,"author":{"gitId":"denzelcjy"},"content":"`event project meeting /from 9 Aug 2pm /to 4pm`","lastModifiedDate":"2023-02-17"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":117,"author":{"gitId":"denzelcjy"},"content":"#### Sample Outcome:","lastModifiedDate":"2023-02-17"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":119,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":120,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":121,"author":{"gitId":"denzelcjy"},"content":"     Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-17"},{"lineNumber":122,"author":{"gitId":"denzelcjy"},"content":"       [E][ ] project meeting (from: 9 Aug 2pm to: 4pm)","lastModifiedDate":"2023-02-17"},{"lineNumber":123,"author":{"gitId":"denzelcjy"},"content":"     Now you have 4 tasks in the list.","lastModifiedDate":"2023-02-17"},{"lineNumber":124,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":125,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":126,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":127,"author":{"gitId":"denzelcjy"},"content":"### List all tasks: `list`","lastModifiedDate":"2023-02-17"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":129,"author":{"gitId":"denzelcjy"},"content":"List all current tasks in the task list in order, along with the task type and done status.","lastModifiedDate":"2023-02-17"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2019-07-29"},{"lineNumber":131,"author":{"gitId":"denzelcjy"},"content":"#### Usage:","lastModifiedDate":"2023-02-17"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":133,"author":{"gitId":"denzelcjy"},"content":"`list`","lastModifiedDate":"2023-02-17"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":135,"author":{"gitId":"denzelcjy"},"content":"#### Example:","lastModifiedDate":"2023-02-17"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":137,"author":{"gitId":"denzelcjy"},"content":"`list`","lastModifiedDate":"2023-02-17"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":139,"author":{"gitId":"denzelcjy"},"content":"#### Sample Outcome:","lastModifiedDate":"2023-02-17"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":141,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":142,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":143,"author":{"gitId":"denzelcjy"},"content":"     Here are the tasks in your list:","lastModifiedDate":"2023-02-17"},{"lineNumber":144,"author":{"gitId":"denzelcjy"},"content":"     1.[T][ ] borrow book","lastModifiedDate":"2023-02-17"},{"lineNumber":145,"author":{"gitId":"denzelcjy"},"content":"     2.[D][ ] return book (by: 6pm)","lastModifiedDate":"2023-02-17"},{"lineNumber":146,"author":{"gitId":"denzelcjy"},"content":"     3.[D][ ] submit assignment (by: 8 Aug 2023 at 6pm)","lastModifiedDate":"2023-02-17"},{"lineNumber":147,"author":{"gitId":"denzelcjy"},"content":"     4.[E][ ] project meeting (from: 9 Aug 2pm to: 4pm)","lastModifiedDate":"2023-02-17"},{"lineNumber":148,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":149,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":150,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":151,"author":{"gitId":"denzelcjy"},"content":"### Mark a task as done: `mark`","lastModifiedDate":"2023-02-17"},{"lineNumber":152,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":153,"author":{"gitId":"denzelcjy"},"content":"Marks the task as done according to given task number.","lastModifiedDate":"2023-02-17"},{"lineNumber":154,"author":{"gitId":"denzelcjy"},"content":"  ","lastModifiedDate":"2023-02-17"},{"lineNumber":155,"author":{"gitId":"denzelcjy"},"content":"#### Usage:","lastModifiedDate":"2023-02-17"},{"lineNumber":156,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":157,"author":{"gitId":"denzelcjy"},"content":"`mark \u003ctask number\u003e`","lastModifiedDate":"2023-02-17"},{"lineNumber":158,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":159,"author":{"gitId":"denzelcjy"},"content":"#### Example:","lastModifiedDate":"2023-02-17"},{"lineNumber":160,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":161,"author":{"gitId":"denzelcjy"},"content":"`mark 1`","lastModifiedDate":"2023-02-17"},{"lineNumber":162,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":163,"author":{"gitId":"denzelcjy"},"content":"#### Sample Outcome:","lastModifiedDate":"2023-02-17"},{"lineNumber":164,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":165,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":166,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":167,"author":{"gitId":"denzelcjy"},"content":"     Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-02-17"},{"lineNumber":168,"author":{"gitId":"denzelcjy"},"content":"       [T][X] borrow book","lastModifiedDate":"2023-02-17"},{"lineNumber":169,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":170,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":171,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":172,"author":{"gitId":"denzelcjy"},"content":"### Mark a task as \u003cins\u003enot\u003c/ins\u003e done: `unmark`","lastModifiedDate":"2023-02-17"},{"lineNumber":173,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":174,"author":{"gitId":"denzelcjy"},"content":"Marks the task as not done according to given task number.","lastModifiedDate":"2023-02-17"},{"lineNumber":175,"author":{"gitId":"denzelcjy"},"content":"  ","lastModifiedDate":"2023-02-17"},{"lineNumber":176,"author":{"gitId":"denzelcjy"},"content":"#### Usage:","lastModifiedDate":"2023-02-17"},{"lineNumber":177,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":178,"author":{"gitId":"denzelcjy"},"content":"`unmark \u003ctask number\u003e`","lastModifiedDate":"2023-02-17"},{"lineNumber":179,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":180,"author":{"gitId":"denzelcjy"},"content":"#### Example:","lastModifiedDate":"2023-02-17"},{"lineNumber":181,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":182,"author":{"gitId":"denzelcjy"},"content":"`unmark 1`","lastModifiedDate":"2023-02-17"},{"lineNumber":183,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":184,"author":{"gitId":"denzelcjy"},"content":"#### Sample Outcome:","lastModifiedDate":"2023-02-17"},{"lineNumber":185,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":186,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":187,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":188,"author":{"gitId":"denzelcjy"},"content":"     OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-02-17"},{"lineNumber":189,"author":{"gitId":"denzelcjy"},"content":"       [T][ ] borrow book","lastModifiedDate":"2023-02-17"},{"lineNumber":190,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":191,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":192,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":193,"author":{"gitId":"denzelcjy"},"content":"### Delete a task: `delete`","lastModifiedDate":"2023-02-17"},{"lineNumber":194,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":195,"author":{"gitId":"denzelcjy"},"content":"Removes the task from the task list according to given task number.","lastModifiedDate":"2023-02-17"},{"lineNumber":196,"author":{"gitId":"denzelcjy"},"content":"  ","lastModifiedDate":"2023-02-17"},{"lineNumber":197,"author":{"gitId":"denzelcjy"},"content":"#### Usage:","lastModifiedDate":"2023-02-17"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":199,"author":{"gitId":"denzelcjy"},"content":"`delete \u003ctask number\u003e`","lastModifiedDate":"2023-02-17"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":201,"author":{"gitId":"denzelcjy"},"content":"#### Example:","lastModifiedDate":"2023-02-17"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":203,"author":{"gitId":"denzelcjy"},"content":"`delete 3`","lastModifiedDate":"2023-02-17"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":205,"author":{"gitId":"denzelcjy"},"content":"#### Sample Outcome:","lastModifiedDate":"2023-02-17"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":207,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":208,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":209,"author":{"gitId":"denzelcjy"},"content":"     Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-02-17"},{"lineNumber":210,"author":{"gitId":"denzelcjy"},"content":"       [D][ ] submit assignment (by: 8 Aug 2023 at 6pm)","lastModifiedDate":"2023-02-17"},{"lineNumber":211,"author":{"gitId":"denzelcjy"},"content":"     Now you have 3 tasks in the list.","lastModifiedDate":"2023-02-17"},{"lineNumber":212,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":213,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":214,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":215,"author":{"gitId":"denzelcjy"},"content":"### Search tasks with given keyword: `find`","lastModifiedDate":"2023-02-17"},{"lineNumber":216,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":217,"author":{"gitId":"denzelcjy"},"content":"Searches for tasks with where the given keyword is a substring of the task description.","lastModifiedDate":"2023-02-17"},{"lineNumber":218,"author":{"gitId":"denzelcjy"},"content":"  ","lastModifiedDate":"2023-02-17"},{"lineNumber":219,"author":{"gitId":"denzelcjy"},"content":"#### Usage:","lastModifiedDate":"2023-02-17"},{"lineNumber":220,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":221,"author":{"gitId":"denzelcjy"},"content":"`find \u003ckeyword\u003e`","lastModifiedDate":"2023-02-17"},{"lineNumber":222,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":223,"author":{"gitId":"denzelcjy"},"content":"#### Example:","lastModifiedDate":"2023-02-17"},{"lineNumber":224,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":225,"author":{"gitId":"denzelcjy"},"content":"`find book`","lastModifiedDate":"2023-02-17"},{"lineNumber":226,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":227,"author":{"gitId":"denzelcjy"},"content":"#### Sample Outcome:","lastModifiedDate":"2023-02-17"},{"lineNumber":228,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":229,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":230,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":231,"author":{"gitId":"denzelcjy"},"content":"     Here are the matching tasks in your list:","lastModifiedDate":"2023-02-17"},{"lineNumber":232,"author":{"gitId":"denzelcjy"},"content":"     1.[T][ ] borrow book","lastModifiedDate":"2023-02-17"},{"lineNumber":233,"author":{"gitId":"denzelcjy"},"content":"     2.[D][ ] return book (by: 6pm)","lastModifiedDate":"2023-02-17"},{"lineNumber":234,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":235,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":236,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":237,"author":{"gitId":"denzelcjy"},"content":"### Exit the application: `bye`","lastModifiedDate":"2023-02-17"},{"lineNumber":238,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":239,"author":{"gitId":"denzelcjy"},"content":"Exits the Duke chatbot.","lastModifiedDate":"2023-02-17"},{"lineNumber":240,"author":{"gitId":"denzelcjy"},"content":"  ","lastModifiedDate":"2023-02-17"},{"lineNumber":241,"author":{"gitId":"denzelcjy"},"content":"#### Usage:","lastModifiedDate":"2023-02-17"},{"lineNumber":242,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":243,"author":{"gitId":"denzelcjy"},"content":"`bye`","lastModifiedDate":"2023-02-17"},{"lineNumber":244,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":245,"author":{"gitId":"denzelcjy"},"content":"#### Example:","lastModifiedDate":"2023-02-17"},{"lineNumber":246,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":247,"author":{"gitId":"denzelcjy"},"content":"`bye`","lastModifiedDate":"2023-02-17"},{"lineNumber":248,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":249,"author":{"gitId":"denzelcjy"},"content":"#### Sample Outcome:","lastModifiedDate":"2023-02-17"},{"lineNumber":250,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":251,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":252,"author":{"gitId":"denzelcjy"},"content":"    ____________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":253,"author":{"gitId":"denzelcjy"},"content":"     Bye. Hope to see you again soon!","lastModifiedDate":"2023-02-17"},{"lineNumber":254,"author":{"gitId":"denzelcjy"},"content":"    ___________________________________________________________","lastModifiedDate":"2023-02-17"},{"lineNumber":255,"author":{"gitId":"denzelcjy"},"content":"```","lastModifiedDate":"2023-02-17"},{"lineNumber":256,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":257,"author":{"gitId":"denzelcjy"},"content":"### Loading/Saving the data file:","lastModifiedDate":"2023-02-17"},{"lineNumber":258,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":259,"author":{"gitId":"denzelcjy"},"content":"+ Task list data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2023-02-17"},{"lineNumber":260,"author":{"gitId":"denzelcjy"},"content":"  ","lastModifiedDate":"2023-02-17"},{"lineNumber":261,"author":{"gitId":"denzelcjy"},"content":"+ Upon starting the Duke chatbot, saved data from the previous session will be loaded automatically.","lastModifiedDate":"2023-02-17"},{"lineNumber":262,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":263,"author":{"gitId":"denzelcjy"},"content":"## Command Summary","lastModifiedDate":"2023-02-17"},{"lineNumber":264,"author":{"gitId":"denzelcjy"},"content":"  ","lastModifiedDate":"2023-02-17"},{"lineNumber":265,"author":{"gitId":"denzelcjy"},"content":"Command | Usage | Example","lastModifiedDate":"2023-02-17"},{"lineNumber":266,"author":{"gitId":"denzelcjy"},"content":"| ------------ | ------------ | ------------ |","lastModifiedDate":"2023-02-17"},{"lineNumber":267,"author":{"gitId":"denzelcjy"},"content":"todo | `todo \u003cdescription\u003e` | `todo borrow book` ","lastModifiedDate":"2023-02-17"},{"lineNumber":268,"author":{"gitId":"denzelcjy"},"content":"deadline | `deadline \u003cdescription\u003e /by \u003cdue date\u003e` | `deadline submit assignment /by 2023-08-08 at 6pm`","lastModifiedDate":"2023-02-17"},{"lineNumber":269,"author":{"gitId":"denzelcjy"},"content":"event | `event \u003cdescription\u003e /from \u003cstart date/time\u003e /to \u003cend date/time\u003e` | `event project meeting /from 9 Aug 2pm /to 4pm`","lastModifiedDate":"2023-02-17"},{"lineNumber":270,"author":{"gitId":"denzelcjy"},"content":"list | `list` | `list`","lastModifiedDate":"2023-02-17"},{"lineNumber":271,"author":{"gitId":"denzelcjy"},"content":"mark | `mark \u003ctask number\u003e` | `mark 1`","lastModifiedDate":"2023-02-17"},{"lineNumber":272,"author":{"gitId":"denzelcjy"},"content":"unmark | `unmark \u003ctask number\u003e` | `unmark 1`","lastModifiedDate":"2023-02-17"},{"lineNumber":273,"author":{"gitId":"denzelcjy"},"content":"delete | `delete \u003ctask number\u003e` | `delete 3`","lastModifiedDate":"2023-02-17"},{"lineNumber":274,"author":{"gitId":"denzelcjy"},"content":"find | `find \u003ckeyword\u003e` | `find book`","lastModifiedDate":"2023-02-17"},{"lineNumber":275,"author":{"gitId":"denzelcjy"},"content":"bye | `bye` | `bye`","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"-":25,"denzelcjy":250}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"import exception.DukeException;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"/**","lastModifiedDate":"2023-02-16"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":" * Represents the attributes of the chatbot Duke. Every instantiation of a new Duke object","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":" * allows features such as adding, deleting, listing, loading, saving, marking and unmarking of","lastModifiedDate":"2023-02-16"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":" * different types of tasks into a task list.","lastModifiedDate":"2023-02-16"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":" */","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":"    protected TaskList taskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":"    protected FileDataHandler fileDataHandler;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"    protected Ui ui;","lastModifiedDate":"2023-02-16"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"    public Duke(String filePath, String directoryName) {","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"        fileDataHandler \u003d new FileDataHandler(filePath, directoryName);","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"        ui  \u003d new Ui();","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"            if(!fileDataHandler.createFile()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"denzelcjy"},"content":"                fileDataHandler.loadFile(taskList);","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"denzelcjy"},"content":"        } catch (FileNotFoundException exception) {","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"denzelcjy"},"content":"            ui.printErrorMessage(\"     ☹ OOPS!!! The save file could not be loaded as it does not exist.\");","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"denzelcjy"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"denzelcjy"},"content":"            ui.printErrorMessage(\"     ☹ OOPS!!! As an error has occurred, the current task list will not be saved in a file!\");","lastModifiedDate":"2023-02-16"},{"lineNumber":29,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"denzelcjy"},"content":"     * Starts the Duke chatbot, begins to wait for inputs by the user to pass to the Parser class to","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"denzelcjy"},"content":"     * execute the commands. The loop finishes upon user keying in command \"bye\" and triggers an exit.","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"denzelcjy"},"content":"     * This also catches exceptions thrown by the Parser class during execution.","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"denzelcjy"},"content":"    public void run() {","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"denzelcjy"},"content":"        ui.welcomeMessage();","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"denzelcjy"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"denzelcjy"},"content":"        while (input.hasNextLine()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"denzelcjy"},"content":"            Parser parseInput \u003d new Parser(this);","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"denzelcjy"},"content":"            String[] nextInput \u003d input.nextLine().split(\" \", 2);","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"denzelcjy"},"content":"            boolean isExit;","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"denzelcjy"},"content":"            try {","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"denzelcjy"},"content":"                isExit \u003d parseInput.parse(nextInput);","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"denzelcjy"},"content":"                if(isExit) {","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"denzelcjy"},"content":"                    break;","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"denzelcjy"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"denzelcjy"},"content":"                fileDataHandler.saveFile(taskList);","lastModifiedDate":"2023-02-16"},{"lineNumber":50,"author":{"gitId":"denzelcjy"},"content":"            } catch (DukeException exception) {","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"denzelcjy"},"content":"                ui.printErrorMessage(exception.getMessage());","lastModifiedDate":"2023-02-16"},{"lineNumber":52,"author":{"gitId":"denzelcjy"},"content":"            } catch (ArrayIndexOutOfBoundsException exception) {","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"denzelcjy"},"content":"                //for the case of no space after calling a command","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"denzelcjy"},"content":"                ui.printErrorMessage(\"     ☹ OOPS!!! The description of a \" + nextInput[0] + \" cannot be empty.\");","lastModifiedDate":"2023-02-16"},{"lineNumber":55,"author":{"gitId":"denzelcjy"},"content":"            } catch (IOException exception) {","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"denzelcjy"},"content":"                ui.printErrorMessage(\"     ☹ OOPS!!! There is an error writing to the file :-(\");","lastModifiedDate":"2023-02-16"},{"lineNumber":57,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"denzelcjy"},"content":"        ui.farewellMessage();","lastModifiedDate":"2023-02-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":62,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":63,"author":{"gitId":"denzelcjy"},"content":"     * Instantiates a new Duke object that takes in a relative filepath of data/duke.txt and a directoryName to load","lastModifiedDate":"2023-02-17"},{"lineNumber":64,"author":{"gitId":"denzelcjy"},"content":"     * and store the task list into duke.txt.","lastModifiedDate":"2023-02-17"},{"lineNumber":65,"author":{"gitId":"denzelcjy"},"content":"     * Calls the run() method to begin a session with the Duke chatbot.","lastModifiedDate":"2023-02-17"},{"lineNumber":66,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":67,"author":{"gitId":"denzelcjy"},"content":"     * @param args String array that takes in arguments from the command line when the application is running.","lastModifiedDate":"2023-02-17"},{"lineNumber":68,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"denzelcjy"},"content":"        new Duke(\"data/duke.txt\", \"data\").run();","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"-":5,"denzelcjy":69}},{"path":"src/main/java/FileDataHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"import task.Deadline;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"import task.Event;","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"import task.Todo;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":"import java.io.File;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"/**","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"denzelcjy"},"content":" * Represents a file data handler that is able to have features such as saving the current task list","lastModifiedDate":"2023-02-16"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":" * and loading the saved task list from the previous session.","lastModifiedDate":"2023-02-16"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":" */","lastModifiedDate":"2023-02-16"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"public class FileDataHandler {","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"    protected String filePath;","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"    protected String directoryName;","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"    public FileDataHandler(String filePath, String directoryName){","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"        this.directoryName \u003d directoryName;","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"denzelcjy"},"content":"     * Checks if the needed directory and save file already exists, else creates a new file and directory for the user.","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"denzelcjy"},"content":"     * @return boolean that states if the file has been successfully created, or already exists.","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"denzelcjy"},"content":"     * @throws IOException if there is an error in creation of file or directory for the user.","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"denzelcjy"},"content":"    public boolean createFile () throws IOException {","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"denzelcjy"},"content":"        File dataFile \u003d new File(this.filePath);","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"denzelcjy"},"content":"        File dataDirectory \u003d new File (this.directoryName);","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"denzelcjy"},"content":"        boolean isDirectoryCreated;","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"denzelcjy"},"content":"        boolean isFileCreated \u003d dataFile.exists();","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"denzelcjy"},"content":"        if (dataDirectory.exists()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"denzelcjy"},"content":"            isFileCreated \u003d dataFile.createNewFile();","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"denzelcjy"},"content":"        } else {","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"denzelcjy"},"content":"            isDirectoryCreated \u003d dataDirectory.mkdir();","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"denzelcjy"},"content":"            if (isDirectoryCreated) {","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"denzelcjy"},"content":"                isFileCreated \u003d dataFile.createNewFile();","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"denzelcjy"},"content":"        return isFileCreated;","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"denzelcjy"},"content":"     * Attempts to load the save file from the path \"data/duke.txt\".","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"denzelcjy"},"content":"     * If successful and file exists, read the file and calls the respective methods to add the different types of Tasks","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"denzelcjy"},"content":"     * into the arraylist initialized for the current session of Duke chatbot.","lastModifiedDate":"2023-02-17"},{"lineNumber":50,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":51,"author":{"gitId":"denzelcjy"},"content":"     * @param taskList the arraylist that is to be populated with Task objects.","lastModifiedDate":"2023-02-17"},{"lineNumber":52,"author":{"gitId":"denzelcjy"},"content":"     * @throws FileNotFoundException if the save file cannot be found.","lastModifiedDate":"2023-02-17"},{"lineNumber":53,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":54,"author":{"gitId":"denzelcjy"},"content":"    public void loadFile(TaskList taskList) throws FileNotFoundException {","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"denzelcjy"},"content":"        File dataFile \u003d new File(filePath);","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"denzelcjy"},"content":"        Scanner input \u003d new Scanner(dataFile);","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"denzelcjy"},"content":"        while (input.hasNextLine()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"denzelcjy"},"content":"            String[] nextInput \u003d input.nextLine().split(\" \\\\| \", 2);","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"denzelcjy"},"content":"            if (nextInput[0].equals(\"T\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"denzelcjy"},"content":"                loadTodoTask(nextInput[1], taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"denzelcjy"},"content":"            if (nextInput[0].equals(\"D\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"denzelcjy"},"content":"                loadDeadlineTask(nextInput[1], taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"denzelcjy"},"content":"            if (nextInput[0].equals(\"E\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"denzelcjy"},"content":"                loadEventTask(nextInput[1], taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":72,"author":{"gitId":"denzelcjy"},"content":"     * Attempts to save the current contents of the arraylist into a save file called duke.txt by writing into the file.","lastModifiedDate":"2023-02-17"},{"lineNumber":73,"author":{"gitId":"denzelcjy"},"content":"     * Saves task according to their respective task type by calling their corresponding methods.","lastModifiedDate":"2023-02-17"},{"lineNumber":74,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":75,"author":{"gitId":"denzelcjy"},"content":"     * @param taskList the arraylist that is now populated with Task objects to be written to the save file.","lastModifiedDate":"2023-02-17"},{"lineNumber":76,"author":{"gitId":"denzelcjy"},"content":"     * @throws IOException if writing to the save file fails.","lastModifiedDate":"2023-02-17"},{"lineNumber":77,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":78,"author":{"gitId":"denzelcjy"},"content":"    public void saveFile (TaskList taskList) throws IOException {","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"denzelcjy"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"denzelcjy"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"denzelcjy"},"content":"            if (taskList.getTask(i) instanceof Todo) {","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"denzelcjy"},"content":"                saveTodoTask((Todo) taskList.getTask(i), fileWriter);","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"denzelcjy"},"content":"            if (taskList.getTask(i) instanceof Deadline) {","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"denzelcjy"},"content":"                saveDeadlineTask((Deadline) taskList.getTask(i), fileWriter);","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"denzelcjy"},"content":"            if (taskList.getTask(i) instanceof Event) {","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"denzelcjy"},"content":"                saveEventTask((Event) taskList.getTask(i), fileWriter);","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"denzelcjy"},"content":"            if (i \u003d\u003d taskList.getSize() - 1) {","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"denzelcjy"},"content":"                break;","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"denzelcjy"},"content":"            fileWriter.write(System.lineSeparator());","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"denzelcjy"},"content":"        fileWriter.close();","lastModifiedDate":"2023-02-11"},{"lineNumber":96,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":98,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":99,"author":{"gitId":"denzelcjy"},"content":"     * Adds a task of the Todo type into the arraylist after converting from the save file format.","lastModifiedDate":"2023-02-17"},{"lineNumber":100,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":101,"author":{"gitId":"denzelcjy"},"content":"     * @param description the details of the Todo task that is to be added to the arraylist.","lastModifiedDate":"2023-02-17"},{"lineNumber":102,"author":{"gitId":"denzelcjy"},"content":"     * @param taskList the arraylist that contains the Task objects.","lastModifiedDate":"2023-02-17"},{"lineNumber":103,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":104,"author":{"gitId":"denzelcjy"},"content":"    public void loadTodoTask (String description, TaskList taskList) {","lastModifiedDate":"2023-02-15"},{"lineNumber":105,"author":{"gitId":"denzelcjy"},"content":"        String[] inputs \u003d description.split(\" \\\\| \");","lastModifiedDate":"2023-02-11"},{"lineNumber":106,"author":{"gitId":"denzelcjy"},"content":"        String details \u003d inputs[1];","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"denzelcjy"},"content":"        Todo savedTodoTask \u003d new Todo(details);","lastModifiedDate":"2023-02-11"},{"lineNumber":108,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"1\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":109,"author":{"gitId":"denzelcjy"},"content":"            savedTodoTask.markAsDone();","lastModifiedDate":"2023-02-11"},{"lineNumber":110,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"denzelcjy"},"content":"        taskList.addTask(savedTodoTask);","lastModifiedDate":"2023-02-15"},{"lineNumber":112,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":113,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":115,"author":{"gitId":"denzelcjy"},"content":"     * Adds a task of the Deadline type into the arraylist after converting from the save file format.","lastModifiedDate":"2023-02-17"},{"lineNumber":116,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":117,"author":{"gitId":"denzelcjy"},"content":"     * @param description the details of the Deadline task that is to be added to the arraylist.","lastModifiedDate":"2023-02-17"},{"lineNumber":118,"author":{"gitId":"denzelcjy"},"content":"     * @param taskList the arraylist that contains the Task objects.","lastModifiedDate":"2023-02-17"},{"lineNumber":119,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":120,"author":{"gitId":"denzelcjy"},"content":"    public static void loadDeadlineTask (String description, TaskList taskList) {","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"denzelcjy"},"content":"        String[] inputs \u003d description.split(\" \\\\| \");","lastModifiedDate":"2023-02-11"},{"lineNumber":122,"author":{"gitId":"denzelcjy"},"content":"        String details \u003d inputs[1];","lastModifiedDate":"2023-02-11"},{"lineNumber":123,"author":{"gitId":"denzelcjy"},"content":"        String by \u003d inputs[2];","lastModifiedDate":"2023-02-11"},{"lineNumber":124,"author":{"gitId":"denzelcjy"},"content":"        Deadline savedDeadlineTask \u003d new Deadline(details, by);","lastModifiedDate":"2023-02-11"},{"lineNumber":125,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"1\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":126,"author":{"gitId":"denzelcjy"},"content":"            savedDeadlineTask.markAsDone();","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"denzelcjy"},"content":"        taskList.addTask(savedDeadlineTask);","lastModifiedDate":"2023-02-15"},{"lineNumber":129,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":130,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":131,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":132,"author":{"gitId":"denzelcjy"},"content":"     * Adds a task of the Event type into the arraylist after converting from the save file format.","lastModifiedDate":"2023-02-17"},{"lineNumber":133,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":134,"author":{"gitId":"denzelcjy"},"content":"     * @param description the details of the Event task that is to be added to the arraylist.","lastModifiedDate":"2023-02-17"},{"lineNumber":135,"author":{"gitId":"denzelcjy"},"content":"     * @param taskList the arraylist that contains the Task objects.","lastModifiedDate":"2023-02-17"},{"lineNumber":136,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":137,"author":{"gitId":"denzelcjy"},"content":"    public static void loadEventTask (String description, TaskList taskList) {","lastModifiedDate":"2023-02-15"},{"lineNumber":138,"author":{"gitId":"denzelcjy"},"content":"        String[] inputs \u003d description.split(\" \\\\| \");","lastModifiedDate":"2023-02-11"},{"lineNumber":139,"author":{"gitId":"denzelcjy"},"content":"        String details \u003d inputs[1];","lastModifiedDate":"2023-02-11"},{"lineNumber":140,"author":{"gitId":"denzelcjy"},"content":"        String range \u003d inputs[2];","lastModifiedDate":"2023-02-11"},{"lineNumber":141,"author":{"gitId":"denzelcjy"},"content":"        String[] ranges \u003d range.split(\"-\");","lastModifiedDate":"2023-02-11"},{"lineNumber":142,"author":{"gitId":"denzelcjy"},"content":"        String from \u003d ranges[0];","lastModifiedDate":"2023-02-11"},{"lineNumber":143,"author":{"gitId":"denzelcjy"},"content":"        String to \u003d ranges[1];","lastModifiedDate":"2023-02-11"},{"lineNumber":144,"author":{"gitId":"denzelcjy"},"content":"        Event savedEventTask \u003d new Event(details, from, to);","lastModifiedDate":"2023-02-11"},{"lineNumber":145,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"1\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":146,"author":{"gitId":"denzelcjy"},"content":"            savedEventTask.markAsDone();","lastModifiedDate":"2023-02-11"},{"lineNumber":147,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":148,"author":{"gitId":"denzelcjy"},"content":"        taskList.addTask(savedEventTask);","lastModifiedDate":"2023-02-15"},{"lineNumber":149,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":150,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":151,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":152,"author":{"gitId":"denzelcjy"},"content":"     * Saves a task of the Todo type into the save file duke.txt by writing to the file","lastModifiedDate":"2023-02-17"},{"lineNumber":153,"author":{"gitId":"denzelcjy"},"content":"     * with reference from the arraylist.","lastModifiedDate":"2023-02-17"},{"lineNumber":154,"author":{"gitId":"denzelcjy"},"content":"     * Writes in specific format for the save file.","lastModifiedDate":"2023-02-17"},{"lineNumber":155,"author":{"gitId":"denzelcjy"},"content":"     * @param newTodoTask the Todo task to be written to the save file.","lastModifiedDate":"2023-02-17"},{"lineNumber":156,"author":{"gitId":"denzelcjy"},"content":"     * @param todoWriter the FileWriter object that refers to the original FileWriter object created during saveFile().","lastModifiedDate":"2023-02-17"},{"lineNumber":157,"author":{"gitId":"denzelcjy"},"content":"     * @throws IOException if writing to the save file fails.","lastModifiedDate":"2023-02-17"},{"lineNumber":158,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":159,"author":{"gitId":"denzelcjy"},"content":"    public static void saveTodoTask (Todo newTodoTask, FileWriter todoWriter) throws IOException {","lastModifiedDate":"2023-02-11"},{"lineNumber":160,"author":{"gitId":"denzelcjy"},"content":"        String details \u003d newTodoTask.getDetails();","lastModifiedDate":"2023-02-11"},{"lineNumber":161,"author":{"gitId":"denzelcjy"},"content":"        String mark \u003d \"0\";","lastModifiedDate":"2023-02-11"},{"lineNumber":162,"author":{"gitId":"denzelcjy"},"content":"        if (newTodoTask.getIsDone()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":163,"author":{"gitId":"denzelcjy"},"content":"            mark \u003d \"1\";","lastModifiedDate":"2023-02-11"},{"lineNumber":164,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":165,"author":{"gitId":"denzelcjy"},"content":"        String combined \u003d \"T | \" + mark + \" | \" + details;","lastModifiedDate":"2023-02-11"},{"lineNumber":166,"author":{"gitId":"denzelcjy"},"content":"        todoWriter.write(combined);","lastModifiedDate":"2023-02-11"},{"lineNumber":167,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":168,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":169,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":170,"author":{"gitId":"denzelcjy"},"content":"     * Saves a task of the Deadline type into the save file duke.txt by writing to the file","lastModifiedDate":"2023-02-17"},{"lineNumber":171,"author":{"gitId":"denzelcjy"},"content":"     * with reference from the arraylist.","lastModifiedDate":"2023-02-17"},{"lineNumber":172,"author":{"gitId":"denzelcjy"},"content":"     * Writes in specific format for the save file.","lastModifiedDate":"2023-02-17"},{"lineNumber":173,"author":{"gitId":"denzelcjy"},"content":"     * @param newDeadlineTask the Deadline task to be written to the save file.","lastModifiedDate":"2023-02-17"},{"lineNumber":174,"author":{"gitId":"denzelcjy"},"content":"     * @param deadlineWriter the FileWriter object that refers to the original FileWriter object created during saveFile().","lastModifiedDate":"2023-02-17"},{"lineNumber":175,"author":{"gitId":"denzelcjy"},"content":"     * @throws IOException if writing to the save file fails.","lastModifiedDate":"2023-02-17"},{"lineNumber":176,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":177,"author":{"gitId":"denzelcjy"},"content":"    public static void saveDeadlineTask (Deadline newDeadlineTask, FileWriter deadlineWriter) throws IOException {","lastModifiedDate":"2023-02-11"},{"lineNumber":178,"author":{"gitId":"denzelcjy"},"content":"        String details \u003d newDeadlineTask.getDetails();","lastModifiedDate":"2023-02-11"},{"lineNumber":179,"author":{"gitId":"denzelcjy"},"content":"        String mark \u003d \"0\";","lastModifiedDate":"2023-02-11"},{"lineNumber":180,"author":{"gitId":"denzelcjy"},"content":"        if (newDeadlineTask.getIsDone()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":181,"author":{"gitId":"denzelcjy"},"content":"            mark \u003d \"1\";","lastModifiedDate":"2023-02-11"},{"lineNumber":182,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":183,"author":{"gitId":"denzelcjy"},"content":"        String by \u003d newDeadlineTask.getBy();","lastModifiedDate":"2023-02-11"},{"lineNumber":184,"author":{"gitId":"denzelcjy"},"content":"        String combined \u003d \"D | \" + mark + \" | \" + details + \" | \" + by;","lastModifiedDate":"2023-02-11"},{"lineNumber":185,"author":{"gitId":"denzelcjy"},"content":"        deadlineWriter.write(combined);","lastModifiedDate":"2023-02-11"},{"lineNumber":186,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":187,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":188,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":189,"author":{"gitId":"denzelcjy"},"content":"     * Saves a task of the Event type into the save file duke.txt by writing to the file","lastModifiedDate":"2023-02-17"},{"lineNumber":190,"author":{"gitId":"denzelcjy"},"content":"     * with reference from the arraylist.","lastModifiedDate":"2023-02-17"},{"lineNumber":191,"author":{"gitId":"denzelcjy"},"content":"     * Writes in specific format for the save file.","lastModifiedDate":"2023-02-17"},{"lineNumber":192,"author":{"gitId":"denzelcjy"},"content":"     * @param newEventTask the Event task to be written to the save file.","lastModifiedDate":"2023-02-17"},{"lineNumber":193,"author":{"gitId":"denzelcjy"},"content":"     * @param eventWriter the FileWriter object that refers to the original FileWriter object created during saveFile().","lastModifiedDate":"2023-02-17"},{"lineNumber":194,"author":{"gitId":"denzelcjy"},"content":"     * @throws IOException if writing to the save file fails.","lastModifiedDate":"2023-02-17"},{"lineNumber":195,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":196,"author":{"gitId":"denzelcjy"},"content":"    public static void saveEventTask (Event newEventTask, FileWriter eventWriter) throws IOException {","lastModifiedDate":"2023-02-11"},{"lineNumber":197,"author":{"gitId":"denzelcjy"},"content":"        String details \u003d newEventTask.getDetails();","lastModifiedDate":"2023-02-11"},{"lineNumber":198,"author":{"gitId":"denzelcjy"},"content":"        String mark \u003d \"0\";","lastModifiedDate":"2023-02-11"},{"lineNumber":199,"author":{"gitId":"denzelcjy"},"content":"        if (newEventTask.getIsDone()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":200,"author":{"gitId":"denzelcjy"},"content":"            mark \u003d \"1\";","lastModifiedDate":"2023-02-11"},{"lineNumber":201,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":202,"author":{"gitId":"denzelcjy"},"content":"        String from \u003d newEventTask.getFrom();","lastModifiedDate":"2023-02-11"},{"lineNumber":203,"author":{"gitId":"denzelcjy"},"content":"        String to \u003d newEventTask.getTo();","lastModifiedDate":"2023-02-11"},{"lineNumber":204,"author":{"gitId":"denzelcjy"},"content":"        String combined \u003d \"E | \" + mark + \" | \" + details + \" | \" + from + \"-\" + to;","lastModifiedDate":"2023-02-11"},{"lineNumber":205,"author":{"gitId":"denzelcjy"},"content":"        eventWriter.write(combined);","lastModifiedDate":"2023-02-11"},{"lineNumber":206,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":207,"author":{"gitId":"denzelcjy"},"content":"}","lastModifiedDate":"2023-02-11"},{"lineNumber":208,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"denzelcjy":208}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"import exception.DukeException;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"/**","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":" * Represents a parser that is able to identify user input and pass on commands to the program to","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":" * execute different methods to modify/search the task list.","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":" */","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"public class Parser {","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"    protected TaskList taskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"    protected FileDataHandler fileDataHandler;","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"    protected Ui ui;","lastModifiedDate":"2023-02-16"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"    public Parser (Duke duke) {","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"denzelcjy"},"content":"        this.taskList \u003d duke.taskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":"        this.fileDataHandler \u003d duke.fileDataHandler;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-16"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"     * Method that parses the input given by the user.","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"     * If the input is a valid command, proceeds to execute the command given.","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"     * @param inputs the String array containing the first word and the remaining of the string keyed in by the user.","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"     * @return a boolean is set to true if the command is \"bye\", to signal the exit of the chatbot, else set to false.","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"denzelcjy"},"content":"     * @throws DukeException when the command is invalid.","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"denzelcjy"},"content":"    public boolean parse (String[] inputs) throws DukeException {","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"bye\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"denzelcjy"},"content":"            return true;","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].isEmpty()) { //settle for the case of empty inputs","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"denzelcjy"},"content":"            return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"list\")) { //want to print out the task list","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"denzelcjy"},"content":"            ui.printTaskList(taskList);","lastModifiedDate":"2023-02-16"},{"lineNumber":35,"author":{"gitId":"denzelcjy"},"content":"            return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"mark\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"denzelcjy"},"content":"            int taskNumber \u003d Integer.parseInt(inputs[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"denzelcjy"},"content":"            taskList.markTask(taskNumber);","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"denzelcjy"},"content":"            return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"unmark\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"denzelcjy"},"content":"            int taskNumber \u003d Integer.parseInt(inputs[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"denzelcjy"},"content":"            taskList.unmarkTask(taskNumber);","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"denzelcjy"},"content":"            return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"todo\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"denzelcjy"},"content":"            taskList.addTodoTask(inputs[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"denzelcjy"},"content":"            return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"deadline\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"denzelcjy"},"content":"            taskList.addDeadlineTask(inputs[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"denzelcjy"},"content":"            return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"event\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"denzelcjy"},"content":"            taskList.addEventTask(inputs[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"denzelcjy"},"content":"            return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"delete\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"denzelcjy"},"content":"            int taskNumber \u003d Integer.parseInt(inputs[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"denzelcjy"},"content":"            taskList.deleteTask(taskNumber);","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"denzelcjy"},"content":"            return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"denzelcjy"},"content":"        if (inputs[0].equals(\"find\")) {","lastModifiedDate":"2023-02-16"},{"lineNumber":65,"author":{"gitId":"denzelcjy"},"content":"            taskList.findTask(inputs[1]);","lastModifiedDate":"2023-02-16"},{"lineNumber":66,"author":{"gitId":"denzelcjy"},"content":"            return false;","lastModifiedDate":"2023-02-16"},{"lineNumber":67,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":68,"author":{"gitId":"denzelcjy"},"content":"        throw new DukeException(\"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"denzelcjy"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"denzelcjy":70}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"import task.Deadline;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"import exception.DukeException;","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"import task.Event;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":"import task.Task;","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":"import task.Todo;","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-16"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"/**","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"denzelcjy"},"content":" * Represents an underlying ArrayList\u003cTask\u003e that stores the task list.","lastModifiedDate":"2023-02-16"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":" * Contains methods to mark, unmark, add, delete, find different types of tasks.","lastModifiedDate":"2023-02-16"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":" */","lastModifiedDate":"2023-02-16"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"public class TaskList {","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"    protected ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"    protected Ui ui;","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"denzelcjy"},"content":"     * Marks the given task as done.","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"denzelcjy"},"content":"     * @param taskNumber the task number in order of addition to the list.","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"denzelcjy"},"content":"    public void markTask(int taskNumber) {","lastModifiedDate":"2023-02-16"},{"lineNumber":29,"author":{"gitId":"denzelcjy"},"content":"        tasks.get(taskNumber - 1).markAsDone();","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"denzelcjy"},"content":"        ui.printMarkedTask(tasks.get(taskNumber - 1));","lastModifiedDate":"2023-02-16"},{"lineNumber":31,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"denzelcjy"},"content":"     * Marks the given task as not done.","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"denzelcjy"},"content":"     * @param taskNumber the task number in order of addition to the list.","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"denzelcjy"},"content":"    public void unmarkTask(int taskNumber) {","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"denzelcjy"},"content":"        tasks.get(taskNumber - 1).markAsNotDone();","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"denzelcjy"},"content":"        ui.printUnmarkedTask(tasks.get(taskNumber - 1));","lastModifiedDate":"2023-02-16"},{"lineNumber":41,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":44,"author":{"gitId":"denzelcjy"},"content":"     * Adds a task of type Todo to the task list given the correct format.","lastModifiedDate":"2023-02-17"},{"lineNumber":45,"author":{"gitId":"denzelcjy"},"content":"     * If addition succeeds, proceeds to print the Todo task that is added to the task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"denzelcjy"},"content":"     * @param description the details of the Todo task to be added.","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"denzelcjy"},"content":"     * @throws exception.DukeException if the description of the Todo task is empty.","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":50,"author":{"gitId":"denzelcjy"},"content":"    public void addTodoTask(String description) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"denzelcjy"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"denzelcjy"},"content":"            //for the case where user keys in a space after the command","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"denzelcjy"},"content":"            throw new DukeException(\"     ☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"denzelcjy"},"content":"        Todo newTodoTask \u003d new Todo(description);","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"denzelcjy"},"content":"        tasks.add(newTodoTask);","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"denzelcjy"},"content":"        ui.printAddedTask(newTodoTask, tasks.size());","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":61,"author":{"gitId":"denzelcjy"},"content":"     * Formats the date string from \"yyyy-mm-dd\" to a format of \"d MMM yyyy\".","lastModifiedDate":"2023-02-17"},{"lineNumber":62,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":63,"author":{"gitId":"denzelcjy"},"content":"     * @param dateString the string that is to be formatted and in the form of \"yyyy-mm-dd\".","lastModifiedDate":"2023-02-17"},{"lineNumber":64,"author":{"gitId":"denzelcjy"},"content":"     * @return the newly formatted string in \"d MMM yyyy\" format.","lastModifiedDate":"2023-02-17"},{"lineNumber":65,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":66,"author":{"gitId":"denzelcjy"},"content":"    public String formatDate(String dateString) {","lastModifiedDate":"2023-02-16"},{"lineNumber":67,"author":{"gitId":"denzelcjy"},"content":"        int firstHyphenIndex \u003d dateString.indexOf(\"-\");","lastModifiedDate":"2023-02-16"},{"lineNumber":68,"author":{"gitId":"denzelcjy"},"content":"        int dateStartIndex \u003d firstHyphenIndex - 4;","lastModifiedDate":"2023-02-16"},{"lineNumber":69,"author":{"gitId":"denzelcjy"},"content":"        int dataEndIndex \u003d firstHyphenIndex + 6;","lastModifiedDate":"2023-02-16"},{"lineNumber":70,"author":{"gitId":"denzelcjy"},"content":"        String extractedDate \u003d dateString.substring(dateStartIndex, dataEndIndex);","lastModifiedDate":"2023-02-16"},{"lineNumber":71,"author":{"gitId":"denzelcjy"},"content":"        LocalDate date \u003d LocalDate.parse(extractedDate);","lastModifiedDate":"2023-02-16"},{"lineNumber":72,"author":{"gitId":"denzelcjy"},"content":"        String formattedDate \u003d  date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));","lastModifiedDate":"2023-02-16"},{"lineNumber":73,"author":{"gitId":"denzelcjy"},"content":"        return dateString.replace(extractedDate, formattedDate);","lastModifiedDate":"2023-02-16"},{"lineNumber":74,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":75,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":76,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":77,"author":{"gitId":"denzelcjy"},"content":"     * Adds a task of type Deadline to the task list given the correct format, formats the date given in the deadline","lastModifiedDate":"2023-02-17"},{"lineNumber":78,"author":{"gitId":"denzelcjy"},"content":"     * if given in a certain format. If addition succeeds, proceeds to print the Deadline task that is added","lastModifiedDate":"2023-02-17"},{"lineNumber":79,"author":{"gitId":"denzelcjy"},"content":"     * to the task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":80,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":81,"author":{"gitId":"denzelcjy"},"content":"     * @param description the details of the Deadline task to be added.","lastModifiedDate":"2023-02-17"},{"lineNumber":82,"author":{"gitId":"denzelcjy"},"content":"     * @throws DukeException if the description of the Deadline task is empty.","lastModifiedDate":"2023-02-17"},{"lineNumber":83,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":84,"author":{"gitId":"denzelcjy"},"content":"    public void addDeadlineTask(String description) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"denzelcjy"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"denzelcjy"},"content":"            //for the case where user keys in a space after the command","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"denzelcjy"},"content":"            throw new DukeException(\"     ☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"denzelcjy"},"content":"        int firstSlashIndex \u003d description.indexOf(\"/by\");","lastModifiedDate":"2023-02-17"},{"lineNumber":90,"author":{"gitId":"denzelcjy"},"content":"        int detailsEndIndex \u003d firstSlashIndex - 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"denzelcjy"},"content":"        String details \u003d description.substring(0, detailsEndIndex);","lastModifiedDate":"2023-02-15"},{"lineNumber":92,"author":{"gitId":"denzelcjy"},"content":"        int byStartIndex \u003d firstSlashIndex + 4;","lastModifiedDate":"2023-02-15"},{"lineNumber":93,"author":{"gitId":"denzelcjy"},"content":"        String by \u003d description.substring(byStartIndex);","lastModifiedDate":"2023-02-15"},{"lineNumber":94,"author":{"gitId":"denzelcjy"},"content":"        if (by.contains(\"-\")) { //case where user keys in a date","lastModifiedDate":"2023-02-16"},{"lineNumber":95,"author":{"gitId":"denzelcjy"},"content":"            by \u003d formatDate(by);","lastModifiedDate":"2023-02-16"},{"lineNumber":96,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":97,"author":{"gitId":"denzelcjy"},"content":"        Deadline newDeadlineTask \u003d new Deadline(details, by);","lastModifiedDate":"2023-02-15"},{"lineNumber":98,"author":{"gitId":"denzelcjy"},"content":"        tasks.add(newDeadlineTask);","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"denzelcjy"},"content":"        ui.printAddedTask(newDeadlineTask, tasks.size());","lastModifiedDate":"2023-02-16"},{"lineNumber":100,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":101,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":102,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":103,"author":{"gitId":"denzelcjy"},"content":"     * Adds a task of type Event to the task list given the correct format.","lastModifiedDate":"2023-02-17"},{"lineNumber":104,"author":{"gitId":"denzelcjy"},"content":"     * If addition succeeds, proceeds to print the Event task that is added to the task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":105,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":106,"author":{"gitId":"denzelcjy"},"content":"     * @param description the details of the Event task to be added.","lastModifiedDate":"2023-02-17"},{"lineNumber":107,"author":{"gitId":"denzelcjy"},"content":"     * @throws DukeException if the description of the Event task is empty.","lastModifiedDate":"2023-02-17"},{"lineNumber":108,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":109,"author":{"gitId":"denzelcjy"},"content":"    public void addEventTask(String description) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":110,"author":{"gitId":"denzelcjy"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":111,"author":{"gitId":"denzelcjy"},"content":"            //for the case where user keys in a space after the command","lastModifiedDate":"2023-02-15"},{"lineNumber":112,"author":{"gitId":"denzelcjy"},"content":"            throw new DukeException(\"     ☹ OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":113,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":114,"author":{"gitId":"denzelcjy"},"content":"        int firstSlashIndex \u003d description.indexOf(\"/from\");","lastModifiedDate":"2023-02-17"},{"lineNumber":115,"author":{"gitId":"denzelcjy"},"content":"        int secondSlashIndex \u003d description.indexOf(\"/to\", firstSlashIndex + 1);","lastModifiedDate":"2023-02-17"},{"lineNumber":116,"author":{"gitId":"denzelcjy"},"content":"        int detailsEndIndex \u003d firstSlashIndex - 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":117,"author":{"gitId":"denzelcjy"},"content":"        String details \u003d description.substring(0, detailsEndIndex);","lastModifiedDate":"2023-02-15"},{"lineNumber":118,"author":{"gitId":"denzelcjy"},"content":"        int fromStartIndex \u003d firstSlashIndex + 6;","lastModifiedDate":"2023-02-15"},{"lineNumber":119,"author":{"gitId":"denzelcjy"},"content":"        int fromEndIndex \u003d secondSlashIndex - 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":120,"author":{"gitId":"denzelcjy"},"content":"        String from \u003d description.substring(fromStartIndex, fromEndIndex);","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"denzelcjy"},"content":"        int toStartIndex \u003d secondSlashIndex + 4;","lastModifiedDate":"2023-02-15"},{"lineNumber":122,"author":{"gitId":"denzelcjy"},"content":"        String to \u003d description.substring(toStartIndex);","lastModifiedDate":"2023-02-15"},{"lineNumber":123,"author":{"gitId":"denzelcjy"},"content":"        Event newEventTask \u003d new Event(details, from, to);","lastModifiedDate":"2023-02-15"},{"lineNumber":124,"author":{"gitId":"denzelcjy"},"content":"        tasks.add(newEventTask);","lastModifiedDate":"2023-02-15"},{"lineNumber":125,"author":{"gitId":"denzelcjy"},"content":"        ui.printAddedTask(newEventTask, tasks.size());","lastModifiedDate":"2023-02-16"},{"lineNumber":126,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":127,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":128,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":129,"author":{"gitId":"denzelcjy"},"content":"     * Deletes a task based on the task number given.","lastModifiedDate":"2023-02-17"},{"lineNumber":130,"author":{"gitId":"denzelcjy"},"content":"     * If deletion succeeds, proceeds to print the deleted task that is removed from the task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":131,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":132,"author":{"gitId":"denzelcjy"},"content":"     * @param taskNumber the order number at which is task is added to the task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":133,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":134,"author":{"gitId":"denzelcjy"},"content":"    public void deleteTask(int taskNumber) {","lastModifiedDate":"2023-02-15"},{"lineNumber":135,"author":{"gitId":"denzelcjy"},"content":"        int index \u003d taskNumber - 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":136,"author":{"gitId":"denzelcjy"},"content":"        Task deletedTask \u003d tasks.get(index);","lastModifiedDate":"2023-02-15"},{"lineNumber":137,"author":{"gitId":"denzelcjy"},"content":"        tasks.remove(index);","lastModifiedDate":"2023-02-15"},{"lineNumber":138,"author":{"gitId":"denzelcjy"},"content":"        ui.printDeletedTask(deletedTask, tasks.size());","lastModifiedDate":"2023-02-16"},{"lineNumber":139,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":140,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":141,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":142,"author":{"gitId":"denzelcjy"},"content":"     * Finds a task based on the keyword given.","lastModifiedDate":"2023-02-17"},{"lineNumber":143,"author":{"gitId":"denzelcjy"},"content":"     * If finding succeeds, proceeds to add the matching tasks to the arraylist of a new TaskList object.","lastModifiedDate":"2023-02-17"},{"lineNumber":144,"author":{"gitId":"denzelcjy"},"content":"     * Afterwards, prints the list of matching found tasks from the keyword given.","lastModifiedDate":"2023-02-17"},{"lineNumber":145,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":146,"author":{"gitId":"denzelcjy"},"content":"     * @param keyword the keyword that is used to find matching tasks containing it.","lastModifiedDate":"2023-02-17"},{"lineNumber":147,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":148,"author":{"gitId":"denzelcjy"},"content":"    public void findTask(String keyword) {","lastModifiedDate":"2023-02-16"},{"lineNumber":149,"author":{"gitId":"denzelcjy"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-02-16"},{"lineNumber":150,"author":{"gitId":"denzelcjy"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-02-16"},{"lineNumber":151,"author":{"gitId":"denzelcjy"},"content":"            Task currentTask \u003d tasks.get(i);","lastModifiedDate":"2023-02-16"},{"lineNumber":152,"author":{"gitId":"denzelcjy"},"content":"            String details \u003d tasks.get(i).getDetails();","lastModifiedDate":"2023-02-16"},{"lineNumber":153,"author":{"gitId":"denzelcjy"},"content":"            if (details.contains(keyword)) {","lastModifiedDate":"2023-02-16"},{"lineNumber":154,"author":{"gitId":"denzelcjy"},"content":"                taskList.tasks.add(currentTask);","lastModifiedDate":"2023-02-16"},{"lineNumber":155,"author":{"gitId":"denzelcjy"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":156,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":157,"author":{"gitId":"denzelcjy"},"content":"        ui.printFoundTask(taskList);","lastModifiedDate":"2023-02-16"},{"lineNumber":158,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":159,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":160,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":161,"author":{"gitId":"denzelcjy"},"content":"     * Getter method that obtains the Task object currently in the arraylist of the TaskList object.","lastModifiedDate":"2023-02-17"},{"lineNumber":162,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":163,"author":{"gitId":"denzelcjy"},"content":"     * @param taskNumber the order number at which is task is added to the task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":164,"author":{"gitId":"denzelcjy"},"content":"     * @return the Task object found.","lastModifiedDate":"2023-02-17"},{"lineNumber":165,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":166,"author":{"gitId":"denzelcjy"},"content":"    public Task getTask(int taskNumber) {","lastModifiedDate":"2023-02-15"},{"lineNumber":167,"author":{"gitId":"denzelcjy"},"content":"        return tasks.get(taskNumber);","lastModifiedDate":"2023-02-15"},{"lineNumber":168,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":169,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":170,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":171,"author":{"gitId":"denzelcjy"},"content":"     * Adds a new Task object into the arraylist of the TaskList object.","lastModifiedDate":"2023-02-17"},{"lineNumber":172,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":173,"author":{"gitId":"denzelcjy"},"content":"     * @param newTask the new Task object to be added.","lastModifiedDate":"2023-02-17"},{"lineNumber":174,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":175,"author":{"gitId":"denzelcjy"},"content":"    public void addTask(Task newTask) {","lastModifiedDate":"2023-02-15"},{"lineNumber":176,"author":{"gitId":"denzelcjy"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-02-15"},{"lineNumber":177,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":178,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":179,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":180,"author":{"gitId":"denzelcjy"},"content":"     * Getter method that returns the size of the arraylist of the TaskList object.","lastModifiedDate":"2023-02-17"},{"lineNumber":181,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":182,"author":{"gitId":"denzelcjy"},"content":"     * @return an integer corresponding to the total size of the arraylist.","lastModifiedDate":"2023-02-17"},{"lineNumber":183,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":184,"author":{"gitId":"denzelcjy"},"content":"    public int getSize() {","lastModifiedDate":"2023-02-15"},{"lineNumber":185,"author":{"gitId":"denzelcjy"},"content":"        return tasks.size();","lastModifiedDate":"2023-02-15"},{"lineNumber":186,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":187,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":188,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":189,"author":{"gitId":"denzelcjy"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"denzelcjy":189}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"import task.Task;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"/**","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":" * Represents messages that Duke is able to print out to display to the user.","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":" */","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":"public class Ui {","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"    public static final String LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-02-16"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"                                    + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"                                    + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-02-16"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"                                    + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-02-16"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"                                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":"     * Prints the welcome message.","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"    public void welcomeMessage() {","lastModifiedDate":"2023-02-16"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);","lastModifiedDate":"2023-02-16"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     Hello! I\u0027m Duke\");","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     What can I do for you?\");","lastModifiedDate":"2023-02-16"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":23,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"denzelcjy"},"content":"     * Prints the farewell message.","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"denzelcjy"},"content":"    public void farewellMessage() {","lastModifiedDate":"2023-02-16"},{"lineNumber":27,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-16"},{"lineNumber":29,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":31,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"denzelcjy"},"content":"     * Prints error messages.","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"denzelcjy"},"content":"     * @param errorMessage the String containing the error message.","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"denzelcjy"},"content":"    public void printErrorMessage(String errorMessage) {","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":41,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":42,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":43,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":44,"author":{"gitId":"denzelcjy"},"content":"     * Prints the given task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":45,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"denzelcjy"},"content":"     * @param taskList the task list that is to be printed.","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"denzelcjy"},"content":"    public void printTaskList(TaskList taskList) {","lastModifiedDate":"2023-02-16"},{"lineNumber":49,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":50,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     Here are the tasks in your list:\");","lastModifiedDate":"2023-02-16"},{"lineNumber":51,"author":{"gitId":"denzelcjy"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-02-16"},{"lineNumber":52,"author":{"gitId":"denzelcjy"},"content":"            System.out.println(\"     \" + (i + 1) + \".\" + taskList.getTask(i));","lastModifiedDate":"2023-02-16"},{"lineNumber":53,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":54,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":55,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":56,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":57,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":58,"author":{"gitId":"denzelcjy"},"content":"     * Prints the task that is marked.","lastModifiedDate":"2023-02-17"},{"lineNumber":59,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":60,"author":{"gitId":"denzelcjy"},"content":"     * @param markedTask the task that has been marked.","lastModifiedDate":"2023-02-17"},{"lineNumber":61,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":62,"author":{"gitId":"denzelcjy"},"content":"    public void printMarkedTask(Task markedTask) {","lastModifiedDate":"2023-02-16"},{"lineNumber":63,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":64,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-02-16"},{"lineNumber":65,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"       \" + markedTask);","lastModifiedDate":"2023-02-16"},{"lineNumber":66,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":67,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":68,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":69,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":70,"author":{"gitId":"denzelcjy"},"content":"     * Prints the task that is unmarked.","lastModifiedDate":"2023-02-17"},{"lineNumber":71,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":72,"author":{"gitId":"denzelcjy"},"content":"     * @param unmarkedTask the task that has been unmarked.","lastModifiedDate":"2023-02-17"},{"lineNumber":73,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":74,"author":{"gitId":"denzelcjy"},"content":"    public void printUnmarkedTask(Task unmarkedTask) {","lastModifiedDate":"2023-02-16"},{"lineNumber":75,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":76,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-02-16"},{"lineNumber":77,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"       \" + unmarkedTask);","lastModifiedDate":"2023-02-16"},{"lineNumber":78,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":79,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":80,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":81,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":82,"author":{"gitId":"denzelcjy"},"content":"     * Prints the added task.","lastModifiedDate":"2023-02-17"},{"lineNumber":83,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":84,"author":{"gitId":"denzelcjy"},"content":"     * @param addedTask the task that is added.","lastModifiedDate":"2023-02-17"},{"lineNumber":85,"author":{"gitId":"denzelcjy"},"content":"     * @param numOfTasks the total number of tasks in the task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":86,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":87,"author":{"gitId":"denzelcjy"},"content":"    public void printAddedTask(Task addedTask, int numOfTasks) {","lastModifiedDate":"2023-02-16"},{"lineNumber":88,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":89,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-16"},{"lineNumber":90,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"       \" + addedTask);","lastModifiedDate":"2023-02-16"},{"lineNumber":91,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     Now you have \" + numOfTasks + \" tasks in the list.\");","lastModifiedDate":"2023-02-16"},{"lineNumber":92,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":93,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":94,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":95,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":96,"author":{"gitId":"denzelcjy"},"content":"     * Prints the deleted task.","lastModifiedDate":"2023-02-17"},{"lineNumber":97,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":98,"author":{"gitId":"denzelcjy"},"content":"     * @param deletedTask the task that is deleted.","lastModifiedDate":"2023-02-17"},{"lineNumber":99,"author":{"gitId":"denzelcjy"},"content":"     * @param numOfTasks the total number of tasks in the task list.","lastModifiedDate":"2023-02-17"},{"lineNumber":100,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":101,"author":{"gitId":"denzelcjy"},"content":"    public void printDeletedTask(Task deletedTask, int numOfTasks) {","lastModifiedDate":"2023-02-16"},{"lineNumber":102,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":103,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-02-16"},{"lineNumber":104,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"       \" + deletedTask);","lastModifiedDate":"2023-02-16"},{"lineNumber":105,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     Now you have \" + numOfTasks + \" tasks in the list.\");","lastModifiedDate":"2023-02-16"},{"lineNumber":106,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":107,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":108,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":109,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":110,"author":{"gitId":"denzelcjy"},"content":"     * Prints the matching found tasks.","lastModifiedDate":"2023-02-17"},{"lineNumber":111,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":112,"author":{"gitId":"denzelcjy"},"content":"     * @param taskList the task list that will be used to find the tasks.","lastModifiedDate":"2023-02-17"},{"lineNumber":113,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":114,"author":{"gitId":"denzelcjy"},"content":"    public void printFoundTask(TaskList taskList) {","lastModifiedDate":"2023-02-16"},{"lineNumber":115,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":116,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"     Here are the matching tasks in your list:\");","lastModifiedDate":"2023-02-16"},{"lineNumber":117,"author":{"gitId":"denzelcjy"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-02-16"},{"lineNumber":118,"author":{"gitId":"denzelcjy"},"content":"            System.out.println(\"     \" + (i + 1) + \".\" + taskList.getTask(i));","lastModifiedDate":"2023-02-16"},{"lineNumber":119,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":120,"author":{"gitId":"denzelcjy"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-02-16"},{"lineNumber":121,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":122,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":123,"author":{"gitId":"denzelcjy"},"content":"}","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"denzelcjy":123}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"package exception;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"/**","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":" * Represents an exception specific to Duke that is thrown when error occurs","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":" */","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"    public DukeException (String errorMessage) {","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"denzelcjy":11}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"package task;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"/**","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":" * Represents a Deadline type of task that has a due date, which is keyed in by the user","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":" */","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"    protected String by;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"    public Deadline(String details, String by) {","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"        super(details);","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"     * Getter method that gets the \u0027by\u0027 attribute of the Deadline object.","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"     * @return a string that contains the description of the \u0027by\u0027 attribute.","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"    public String getBy() {","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"        return this.by;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"denzelcjy"},"content":"     * Method to print Deadline objects in a certain manner.","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"denzelcjy"},"content":"     * @return a string that represents the Deadline object.","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"denzelcjy"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"denzelcjy"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"denzelcjy"},"content":"        return \"[D]\" + super.toString() +   \" (by: \" + this.by + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"denzelcjy"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"denzelcjy":32}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"package task;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"/**","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":" * Represents an Event type of task that has a timeframe, from a certain date/time","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":" * to a certain date/time, which is keyed in by the user.","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":" */","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"    protected String from;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"    protected String to;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"denzelcjy"},"content":"    public Event(String details, String from, String to) {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":"        super(details);","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"     * Getter method that gets the \u0027from\u0027 attribute of the Event object.","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"     * @return a string that contains the description of the \u0027from\u0027 attribute.","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"denzelcjy"},"content":"    public String getFrom() {","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"denzelcjy"},"content":"        return this.from;","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"denzelcjy"},"content":"     * Getter method that gets the \u0027to\u0027 attribute of the Event object.","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"denzelcjy"},"content":"     * @return a string that contains the description of the \u0027to\u0027 attribute.","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"denzelcjy"},"content":"    public String getTo() {","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"denzelcjy"},"content":"        return this.to;","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"denzelcjy"},"content":"     * Method to print Event objects in a certain manner.","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":39,"author":{"gitId":"denzelcjy"},"content":"     * @return a string that represents the Event object.","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":41,"author":{"gitId":"denzelcjy"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"denzelcjy"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"denzelcjy"},"content":"        return \"[E]\" + super.toString() +   \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"denzelcjy"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"denzelcjy":45}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"package task;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"/**","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":" * Represents a Task that contains attributes such as the details of the task and","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":" * whether the task has been completed.","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":" */","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"public class Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"    protected String details;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"    public Task(String details) {","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"denzelcjy"},"content":"        this.details \u003d details;","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"     * Getter method that gets the \u0027details\u0027 attribute of the Task object.","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"     * @return a string that contains the description of the \u0027details\u0027 attribute.","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"    public String getDetails() {","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"        return this.details;","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"denzelcjy"},"content":"     * Getter method that gets the status icon of the Task object based on the \u0027isDone\u0027 attribute.","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"denzelcjy"},"content":"     * @return a string that is either \"X\" meaning task is done, or \" \" if task is not done.","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"denzelcjy"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"denzelcjy"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"denzelcjy"},"content":"            return \"X\";","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"denzelcjy"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"denzelcjy"},"content":"        return \" \";","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"denzelcjy"},"content":"     * Getter method that gets the \u0027isDone\u0027 attribute of the Task object.","lastModifiedDate":"2023-02-17"},{"lineNumber":39,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"denzelcjy"},"content":"     * @return a boolean that states whether the task is done.","lastModifiedDate":"2023-02-17"},{"lineNumber":41,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":42,"author":{"gitId":"denzelcjy"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"denzelcjy"},"content":"        return this.isDone;","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"denzelcjy"},"content":"     * Setter method that sets the \u0027isDone\u0027 attribute to true in a Task object.","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"denzelcjy"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"denzelcjy"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":54,"author":{"gitId":"denzelcjy"},"content":"     * Setter method that sets the \u0027isDone\u0027 attribute to false in a Task object.","lastModifiedDate":"2023-02-17"},{"lineNumber":55,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":56,"author":{"gitId":"denzelcjy"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"denzelcjy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":61,"author":{"gitId":"denzelcjy"},"content":"     * Method to print Task objects in a certain manner.","lastModifiedDate":"2023-02-17"},{"lineNumber":62,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":63,"author":{"gitId":"denzelcjy"},"content":"     * @return a string that represents the Task object.","lastModifiedDate":"2023-02-17"},{"lineNumber":64,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":65,"author":{"gitId":"denzelcjy"},"content":"    @Override","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"denzelcjy"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"denzelcjy"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.details;","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":71,"author":{"gitId":"denzelcjy"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"denzelcjy":71}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"package task;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"/**","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":" * Represents an Todo type of task that only has details keyed in by the user.","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":" */","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"    public Todo(String details) {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"        super(details);","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"denzelcjy"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":"     * Method to print Todo objects in a certain manner.","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"     * @return a string that represents the Todo object.","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"denzelcjy":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"denzelcjy"},"content":"todo borrow book","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"denzelcjy"},"content":"list","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"denzelcjy"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"denzelcjy"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"denzelcjy"},"content":"mark 1","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"denzelcjy"},"content":"list","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"denzelcjy"},"content":"mark 2","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"denzelcjy"},"content":"list","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"unmark 1","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"list","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"mark 3","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"denzelcjy"},"content":"list","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":"todo","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"denzelcjy"},"content":"deadline","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"denzelcjy"},"content":"event","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"denzelcjy"},"content":"todo","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"denzelcjy"},"content":"blah","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"denzelcjy"},"content":"mark","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"denzelcjy"},"content":"unmark","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"denzelcjy"},"content":"delete 3","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"denzelcjy"},"content":"list","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"denzelcjy"},"content":"bye","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"denzelcjy":22}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"denzelcjy"},"content":"REM delete task.txt from previous run","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"denzelcjy"},"content":"if exist data\\duke.txt del data\\duke.txt","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"denzelcjy"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"denzelcjy"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java ..\\src\\main\\java\\task\\*.java ..\\src\\main\\java\\exception\\*.java","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"denzelcjy":4}}]
