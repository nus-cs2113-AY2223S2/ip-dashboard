[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"# CS2113 Individual Project - Duke","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"This is a project developed from CS2113 ip template (https://github.com/nus-cs2113-AY2223S2/ip) . It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chao2048":2,"-":22}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"[T][X] duke","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"[T][ ] hello","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"[D][ ] ne (by: nt) ","lastModifiedDate":"2023-02-14"}],"authorContributionMap":{"chao2048":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"Duke is a command-line app for managing your own list of tasks to do. ","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"It allows you to store your todo, deadlines, and events for various tasks and give you a quick glance of your task list. ","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"You can also keep track of all the tasks you have done by marking them. ","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"Moreover, it allows you to filter with specific keywords to easily find the task you’re looking for.","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":"### View Help: help","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"chao2048"},"content":"It will print all the commands that the user can use.","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"The list of tasks will be shown in sequence.","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":"In addition, it will be shown in `[Type][X(Done)/ (Not done)]` \u003cdescription\u003e \u003ctime\u003e format.","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"### Add A Todo: todo","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"Add a todo to your task list.","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"### Add A Deadline: deadline","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"Add a deadline to your task list.","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"chao2048"},"content":"### Add An Event: event","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"chao2048"},"content":"Add an event to your task list.","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"chao2048"},"content":"### Mark A Task: mark","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"chao2048"},"content":"Mark a task in the list.","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"chao2048"},"content":"### Unmark A Task: unmark","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"chao2048"},"content":"Unark a task in the list.","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"chao2048"},"content":"### Filter the tasks: find","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"chao2048"},"content":"Find and display tasks that contain the keyword entered by the user.","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"chao2048"},"content":"### Delete task: delete","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"chao2048"},"content":"Delete a task in your list.","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"chao2048"},"content":"### `help` - It will print all the commands that the user can use with a brief introduction.","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"chao2048"},"content":"Example of usage:","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"chao2048"},"content":"`help`","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"chao2048"},"content":"Expected outcome:","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"chao2048"},"content":"\u003e\u003e help","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"chao2048"},"content":"First time using Duke? Below is the quick guide for you to get to know about how to use the app …","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"chao2048"},"content":"### `list` - List all tasks will in sequence.","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":53,"author":{"gitId":"chao2048"},"content":"Example of usage:","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"chao2048"},"content":"`list`","lastModifiedDate":"2023-02-28"},{"lineNumber":55,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"chao2048"},"content":"Expected outcome:","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"chao2048"},"content":"1. [T][ ] return book","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"chao2048"},"content":"2. [D][ ] finish ip (by: May 02 2023)","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"chao2048"},"content":"3. [E][ ] CG2023 midterm (from: Mar 02 2023, to: Mar 02 2023)","lastModifiedDate":"2023-02-28"},{"lineNumber":62,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":64,"author":{"gitId":"chao2048"},"content":"### `todo` - add a todo to the list of tasks","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2023-02-28"},{"lineNumber":67,"author":{"gitId":"chao2048"},"content":"`todo \u003ctodo description\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":69,"author":{"gitId":"chao2048"},"content":"Expected outcome:","lastModifiedDate":"2023-02-28"},{"lineNumber":70,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":71,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":72,"author":{"gitId":"chao2048"},"content":"[T][ ] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":73,"author":{"gitId":"chao2048"},"content":"\u003e\u003e todo play game","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"chao2048"},"content":"\u003e\u003e todo return book","lastModifiedDate":"2023-02-28"},{"lineNumber":75,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":76,"author":{"gitId":"chao2048"},"content":"[T][ ] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":77,"author":{"gitId":"chao2048"},"content":"[T][ ] play game","lastModifiedDate":"2023-02-28"},{"lineNumber":78,"author":{"gitId":"chao2048"},"content":"[T][ ] return book","lastModifiedDate":"2023-02-28"},{"lineNumber":79,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":81,"author":{"gitId":"chao2048"},"content":"### `deadline` - add a deadline to the list of tasks","lastModifiedDate":"2023-02-28"},{"lineNumber":82,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":83,"author":{"gitId":"chao2048"},"content":"Example of usage:","lastModifiedDate":"2023-02-28"},{"lineNumber":84,"author":{"gitId":"chao2048"},"content":"`deadline \u003cdeadline description\u003e by: \u003cwhen\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":85,"author":{"gitId":"chao2048"},"content":"when must be in `yyyy-mmm-dd` format","lastModifiedDate":"2023-02-28"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2023-02-28"},{"lineNumber":88,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":89,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":90,"author":{"gitId":"chao2048"},"content":"[T][ ] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":91,"author":{"gitId":"chao2048"},"content":"\u003e\u003e deadline return book by: 2022-02-02","lastModifiedDate":"2023-02-28"},{"lineNumber":92,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":93,"author":{"gitId":"chao2048"},"content":"[T][ ] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":94,"author":{"gitId":"chao2048"},"content":"[D][ ] return book (by: Feb 02 2022)","lastModifiedDate":"2023-02-28"},{"lineNumber":95,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":97,"author":{"gitId":"chao2048"},"content":"### `event` - add an event to the list of tasks.","lastModifiedDate":"2023-02-28"},{"lineNumber":98,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":99,"author":{"gitId":"chao2048"},"content":"Example of usage:","lastModifiedDate":"2023-02-28"},{"lineNumber":100,"author":{"gitId":"chao2048"},"content":"`event \u003cevent description\u003e from: \u003cwhen\u003e to: \u003cwhen\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":101,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":102,"author":{"gitId":"chao2048"},"content":"when must be in `yyyy-mmm-dd` format","lastModifiedDate":"2023-02-28"},{"lineNumber":103,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":104,"author":{"gitId":"chao2048"},"content":"Expected outcome:","lastModifiedDate":"2023-02-28"},{"lineNumber":105,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":106,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":107,"author":{"gitId":"chao2048"},"content":"[T][ ] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":108,"author":{"gitId":"chao2048"},"content":"\u003e\u003e event Malaysia Trip from 2023-03-04 to: 2023-03-10","lastModifiedDate":"2023-02-28"},{"lineNumber":109,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":110,"author":{"gitId":"chao2048"},"content":"[T][ ] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":111,"author":{"gitId":"chao2048"},"content":"[D][ ] Malaysia Trip (from: Mar 04 2023, to: Mar 10 2023)","lastModifiedDate":"2023-02-28"},{"lineNumber":112,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":113,"author":{"gitId":"chao2048"},"content":"### `mark` - mark a task in the list.","lastModifiedDate":"2023-02-28"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":115,"author":{"gitId":"chao2048"},"content":"Example of usage:","lastModifiedDate":"2023-02-28"},{"lineNumber":116,"author":{"gitId":"chao2048"},"content":"`mark \u003cTask Index\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":118,"author":{"gitId":"chao2048"},"content":"Expected outcome:","lastModifiedDate":"2023-02-28"},{"lineNumber":119,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":120,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":121,"author":{"gitId":"chao2048"},"content":"1. [T][ ] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":122,"author":{"gitId":"chao2048"},"content":"2. [T][ ] play game","lastModifiedDate":"2023-02-28"},{"lineNumber":123,"author":{"gitId":"chao2048"},"content":"3. [T][ ] return book","lastModifiedDate":"2023-02-28"},{"lineNumber":124,"author":{"gitId":"chao2048"},"content":"\u003e\u003e mark 1","lastModifiedDate":"2023-02-28"},{"lineNumber":125,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":126,"author":{"gitId":"chao2048"},"content":"1. [T][X] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":127,"author":{"gitId":"chao2048"},"content":"2. [T][ ] play game","lastModifiedDate":"2023-02-28"},{"lineNumber":128,"author":{"gitId":"chao2048"},"content":"3. [T][ ] return book","lastModifiedDate":"2023-02-28"},{"lineNumber":129,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":130,"author":{"gitId":"chao2048"},"content":"### `unmark` - unmark a task in the list.","lastModifiedDate":"2023-02-28"},{"lineNumber":131,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":132,"author":{"gitId":"chao2048"},"content":"Example of usage:","lastModifiedDate":"2023-02-28"},{"lineNumber":133,"author":{"gitId":"chao2048"},"content":"`unmark \u003cTask Index\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":134,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":135,"author":{"gitId":"chao2048"},"content":"Expected outcome:","lastModifiedDate":"2023-02-28"},{"lineNumber":136,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":137,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":138,"author":{"gitId":"chao2048"},"content":"1. [T][X] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":139,"author":{"gitId":"chao2048"},"content":"2. [T][ ] play game","lastModifiedDate":"2023-02-28"},{"lineNumber":140,"author":{"gitId":"chao2048"},"content":"3. [T][ ] return book","lastModifiedDate":"2023-02-28"},{"lineNumber":141,"author":{"gitId":"chao2048"},"content":"\u003e\u003e unmark 1","lastModifiedDate":"2023-02-28"},{"lineNumber":142,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":143,"author":{"gitId":"chao2048"},"content":"1. [T][ ] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":144,"author":{"gitId":"chao2048"},"content":"2. [T][ ] play game","lastModifiedDate":"2023-02-28"},{"lineNumber":145,"author":{"gitId":"chao2048"},"content":"3. [T][ ] return book","lastModifiedDate":"2023-02-28"},{"lineNumber":146,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":148,"author":{"gitId":"chao2048"},"content":"### `find` - display tasks that contain the keyword entered by the user.","lastModifiedDate":"2023-02-28"},{"lineNumber":149,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":150,"author":{"gitId":"chao2048"},"content":"Example of usage:","lastModifiedDate":"2023-02-28"},{"lineNumber":151,"author":{"gitId":"chao2048"},"content":"`find \u003cKeyword\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":152,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":153,"author":{"gitId":"chao2048"},"content":"Expected outcome:","lastModifiedDate":"2023-02-28"},{"lineNumber":154,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":155,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":156,"author":{"gitId":"chao2048"},"content":"1. [T][X] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":157,"author":{"gitId":"chao2048"},"content":"2. [T][ ] play game","lastModifiedDate":"2023-02-28"},{"lineNumber":158,"author":{"gitId":"chao2048"},"content":"3. [T][ ] return book","lastModifiedDate":"2023-02-28"},{"lineNumber":159,"author":{"gitId":"chao2048"},"content":"\u003e\u003e find book","lastModifiedDate":"2023-02-28"},{"lineNumber":160,"author":{"gitId":"chao2048"},"content":"[T][X] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":161,"author":{"gitId":"chao2048"},"content":"[T][ ] return book","lastModifiedDate":"2023-02-28"},{"lineNumber":162,"author":{"gitId":"chao2048"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":163,"author":{"gitId":"chao2048"},"content":"### `delete` - delete the task in your list.","lastModifiedDate":"2023-02-28"},{"lineNumber":164,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":165,"author":{"gitId":"chao2048"},"content":"Example of usage:","lastModifiedDate":"2023-02-28"},{"lineNumber":166,"author":{"gitId":"chao2048"},"content":"`delete \u003cTask Index\u003e`","lastModifiedDate":"2023-02-28"},{"lineNumber":167,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":168,"author":{"gitId":"chao2048"},"content":"Expected outcome: ","lastModifiedDate":"2023-02-28"},{"lineNumber":169,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":170,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":171,"author":{"gitId":"chao2048"},"content":"1. [T][X] read book","lastModifiedDate":"2023-02-28"},{"lineNumber":172,"author":{"gitId":"chao2048"},"content":"2. [T][ ] play game","lastModifiedDate":"2023-02-28"},{"lineNumber":173,"author":{"gitId":"chao2048"},"content":"3. [T][ ] return book","lastModifiedDate":"2023-02-28"},{"lineNumber":174,"author":{"gitId":"chao2048"},"content":"\u003e\u003e delete 1","lastModifiedDate":"2023-02-28"},{"lineNumber":175,"author":{"gitId":"chao2048"},"content":"\u003e\u003e list","lastModifiedDate":"2023-02-28"},{"lineNumber":176,"author":{"gitId":"chao2048"},"content":"1. [T][ ] play game","lastModifiedDate":"2023-02-28"},{"lineNumber":177,"author":{"gitId":"chao2048"},"content":"2. [T][ ] return book","lastModifiedDate":"2023-02-28"},{"lineNumber":178,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"chao2048":150,"-":28}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"import duke.exceptions.FormatException;","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"import duke.exceptions.NoDescriptionException;","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"chao2048"},"content":"import java.text.ParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"chao2048"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-24"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":"import java.util.Date;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":" * The command class handles different types of commands.","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"chao2048"},"content":" * Including add todo, add deadline, add event, mark, unmark, and find task.","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"chao2048"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"public class Command {","lastModifiedDate":"2023-02-24"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"chao2048"},"content":"     * The function will check for the command entered by the user and chexk whether it is valid.","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"     * It will then call the corresponding methods to execute the command.","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"chao2048"},"content":"     * @param userInput The command entered by the user.","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"chao2048"},"content":"     * @throws InvalidCommandException If the command entered is not found, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"chao2048"},"content":"    public static void execute(ArrayList\u003cTask\u003e tasks, String userInput) throws InvalidCommandException {","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"chao2048"},"content":"        final String[] commandTypeAndParams \u003d new Parser().parseCommand(userInput);","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"chao2048"},"content":"        final String commandType \u003d commandTypeAndParams[0];","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"chao2048"},"content":"        final String commandArgs \u003d commandTypeAndParams[1];","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"chao2048"},"content":"        switch (commandType) {","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"chao2048"},"content":"        case \"list\":","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"chao2048"},"content":"            Ui.printListOfTasks(tasks);","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"chao2048"},"content":"            break;","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"chao2048"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"chao2048"},"content":"            try {","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"chao2048"},"content":"                addTodo(tasks, commandArgs);","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"chao2048"},"content":"                Ui.showAddTaskMessage(tasks);","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"chao2048"},"content":"            } catch (NoDescriptionException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to add todo again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"chao2048"},"content":"            break;","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"chao2048"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"chao2048"},"content":"            try {","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"chao2048"},"content":"                addDeadline(tasks, commandArgs);","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"chao2048"},"content":"                Ui.showAddTaskMessage(tasks);","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"chao2048"},"content":"            } catch (NoDescriptionException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to add deadline again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"chao2048"},"content":"            } catch (FormatException | ParseException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The format of entering deadline is incorrect.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to add deadline again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"chao2048"},"content":"            break;","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"chao2048"},"content":"        case \"event\":","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"chao2048"},"content":"            try {","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"chao2048"},"content":"                addEvent(tasks, commandArgs);","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"chao2048"},"content":"                Ui.showAddTaskMessage(tasks);","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"chao2048"},"content":"            } catch (NoDescriptionException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to add event again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"chao2048"},"content":"            } catch (FormatException | ParseException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The format of entering event is incorrect.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to add event again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":68,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"chao2048"},"content":"            break;","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"chao2048"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"chao2048"},"content":"            try {","lastModifiedDate":"2023-02-25"},{"lineNumber":72,"author":{"gitId":"chao2048"},"content":"                markTask(tasks, commandArgs);","lastModifiedDate":"2023-02-25"},{"lineNumber":73,"author":{"gitId":"chao2048"},"content":"            } catch (NoDescriptionException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":74,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The index of entering task must be stated.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":75,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to mark task again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":76,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":77,"author":{"gitId":"chao2048"},"content":"            } catch (IndexOutOfBoundsException | FormatException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":78,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The index of entering task is not valid.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to mark task again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":82,"author":{"gitId":"chao2048"},"content":"            break;","lastModifiedDate":"2023-02-25"},{"lineNumber":83,"author":{"gitId":"chao2048"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-25"},{"lineNumber":84,"author":{"gitId":"chao2048"},"content":"            try {","lastModifiedDate":"2023-02-25"},{"lineNumber":85,"author":{"gitId":"chao2048"},"content":"                unmarkTask(tasks, commandArgs);","lastModifiedDate":"2023-02-25"},{"lineNumber":86,"author":{"gitId":"chao2048"},"content":"            } catch (NoDescriptionException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The index of entering task must be stated.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to mark task again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":89,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":90,"author":{"gitId":"chao2048"},"content":"            } catch (IndexOutOfBoundsException | FormatException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The index of entering task is not valid.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":92,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to mark task again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":93,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":95,"author":{"gitId":"chao2048"},"content":"            break;","lastModifiedDate":"2023-02-25"},{"lineNumber":96,"author":{"gitId":"chao2048"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-25"},{"lineNumber":97,"author":{"gitId":"chao2048"},"content":"            try {","lastModifiedDate":"2023-02-25"},{"lineNumber":98,"author":{"gitId":"chao2048"},"content":"                TaskList.deleteTask(tasks, commandArgs);","lastModifiedDate":"2023-02-25"},{"lineNumber":99,"author":{"gitId":"chao2048"},"content":"            } catch (NoDescriptionException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":100,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The index of entering task must be stated.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":101,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to delete task again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":103,"author":{"gitId":"chao2048"},"content":"            } catch (IndexOutOfBoundsException | FormatException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":104,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOFS!!! The index of entering task is not valid.\");","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"Please try to delete task again υ´• ﻌ •`υ\");","lastModifiedDate":"2023-02-25"},{"lineNumber":106,"author":{"gitId":"chao2048"},"content":"                Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":107,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"chao2048"},"content":"            break;","lastModifiedDate":"2023-02-25"},{"lineNumber":109,"author":{"gitId":"chao2048"},"content":"        case \"help\":","lastModifiedDate":"2023-02-25"},{"lineNumber":110,"author":{"gitId":"chao2048"},"content":"            Ui.showHelpMessage();","lastModifiedDate":"2023-02-25"},{"lineNumber":111,"author":{"gitId":"chao2048"},"content":"            break;","lastModifiedDate":"2023-02-25"},{"lineNumber":112,"author":{"gitId":"chao2048"},"content":"        case \"find\":","lastModifiedDate":"2023-02-26"},{"lineNumber":113,"author":{"gitId":"chao2048"},"content":"            find(tasks, commandArgs);","lastModifiedDate":"2023-02-26"},{"lineNumber":114,"author":{"gitId":"chao2048"},"content":"            break;","lastModifiedDate":"2023-02-26"},{"lineNumber":115,"author":{"gitId":"chao2048"},"content":"        default:","lastModifiedDate":"2023-02-25"},{"lineNumber":116,"author":{"gitId":"chao2048"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2023-02-25"},{"lineNumber":117,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":120,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":121,"author":{"gitId":"chao2048"},"content":"     * Add a new todo to the tasks list.","lastModifiedDate":"2023-02-26"},{"lineNumber":122,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":123,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":124,"author":{"gitId":"chao2048"},"content":"     * @param commandArgs The task description entered by the user","lastModifiedDate":"2023-02-26"},{"lineNumber":125,"author":{"gitId":"chao2048"},"content":"     * @throws NoDescriptionException If the description is empty, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":126,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":127,"author":{"gitId":"chao2048"},"content":"    public static void addTodo(ArrayList\u003cTask\u003e tasks, String commandArgs) throws NoDescriptionException {","lastModifiedDate":"2023-02-24"},{"lineNumber":128,"author":{"gitId":"chao2048"},"content":"        final String taskDescription \u003d commandArgs.trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":129,"author":{"gitId":"chao2048"},"content":"        if (taskDescription.length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-26"},{"lineNumber":130,"author":{"gitId":"chao2048"},"content":"            throw new NoDescriptionException();","lastModifiedDate":"2023-02-24"},{"lineNumber":131,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":132,"author":{"gitId":"chao2048"},"content":"        TaskList.addTask(tasks, new Todo(commandArgs));","lastModifiedDate":"2023-02-24"},{"lineNumber":133,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":134,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":135,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":136,"author":{"gitId":"chao2048"},"content":"     * Add a new event item to the task list.","lastModifiedDate":"2023-02-26"},{"lineNumber":137,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":138,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":139,"author":{"gitId":"chao2048"},"content":"     * @param commandArgs The event description entered by the user.","lastModifiedDate":"2023-02-26"},{"lineNumber":140,"author":{"gitId":"chao2048"},"content":"     * @throws NoDescriptionException If the description is empty, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":141,"author":{"gitId":"chao2048"},"content":"     * @throws FormatException If the format of entering event description is wrong, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":142,"author":{"gitId":"chao2048"},"content":"     * @throws ParseException If the event date couldn\u0027t be parse into date type, the exceptino will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":143,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":144,"author":{"gitId":"chao2048"},"content":"    public static void addEvent(ArrayList\u003cTask\u003e tasks, String commandArgs)","lastModifiedDate":"2023-02-26"},{"lineNumber":145,"author":{"gitId":"chao2048"},"content":"            throws NoDescriptionException, FormatException, ParseException {","lastModifiedDate":"2023-02-26"},{"lineNumber":146,"author":{"gitId":"chao2048"},"content":"        final int indexOfFrom \u003d commandArgs.indexOf(\"from:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":147,"author":{"gitId":"chao2048"},"content":"        final int indexOfTo \u003d commandArgs.indexOf(\"to:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":148,"author":{"gitId":"chao2048"},"content":"        if (indexOfTo \u003d\u003d -1 || indexOfFrom \u003d\u003d -1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":149,"author":{"gitId":"chao2048"},"content":"            throw new FormatException();","lastModifiedDate":"2023-02-24"},{"lineNumber":150,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":151,"author":{"gitId":"chao2048"},"content":"        String eventDescription \u003d commandArgs.substring(0, indexOfFrom).trim();","lastModifiedDate":"2023-02-24"},{"lineNumber":152,"author":{"gitId":"chao2048"},"content":"        String from \u003d commandArgs.substring(indexOfFrom, indexOfTo).trim().replace(\"from:\", \"\").trim();","lastModifiedDate":"2023-02-24"},{"lineNumber":153,"author":{"gitId":"chao2048"},"content":"        String to \u003d commandArgs.substring(indexOfTo).trim().replace(\"to:\", \"\").trim();","lastModifiedDate":"2023-02-24"},{"lineNumber":154,"author":{"gitId":"chao2048"},"content":"        if (eventDescription.trim().length() \u003d\u003d 0 || from.length() \u003d\u003d 0 || to.length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-24"},{"lineNumber":155,"author":{"gitId":"chao2048"},"content":"            throw new NoDescriptionException();","lastModifiedDate":"2023-02-24"},{"lineNumber":156,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":157,"author":{"gitId":"chao2048"},"content":"        Date formattedFrom \u003d Parser.parseDate(from);","lastModifiedDate":"2023-02-25"},{"lineNumber":158,"author":{"gitId":"chao2048"},"content":"        Date formattedTo \u003d Parser.parseDate(to);","lastModifiedDate":"2023-02-25"},{"lineNumber":159,"author":{"gitId":"chao2048"},"content":"        if (formattedTo.before(formattedFrom)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":160,"author":{"gitId":"chao2048"},"content":"            throw new FormatException();","lastModifiedDate":"2023-02-25"},{"lineNumber":161,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":162,"author":{"gitId":"chao2048"},"content":"        TaskList.addTask(tasks, new Event(eventDescription, formattedFrom, formattedTo));","lastModifiedDate":"2023-02-25"},{"lineNumber":163,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":164,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":165,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":166,"author":{"gitId":"chao2048"},"content":"     * Add a new deadline item to the user\u0027s task list.","lastModifiedDate":"2023-02-26"},{"lineNumber":167,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":168,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":169,"author":{"gitId":"chao2048"},"content":"     * @param commandArgs The deadline description entered by the user.","lastModifiedDate":"2023-02-26"},{"lineNumber":170,"author":{"gitId":"chao2048"},"content":"     * @throws NoDescriptionException If the description is empty, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":171,"author":{"gitId":"chao2048"},"content":"     * @throws FormatException If format of entering deadline description is wrong, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":172,"author":{"gitId":"chao2048"},"content":"     * @throws ParseException If the event date couldn\u0027t be parse into date type, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":173,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":174,"author":{"gitId":"chao2048"},"content":"    public static void addDeadline(ArrayList\u003cTask\u003e tasks, String commandArgs)","lastModifiedDate":"2023-02-26"},{"lineNumber":175,"author":{"gitId":"chao2048"},"content":"            throws NoDescriptionException, FormatException, ParseException {","lastModifiedDate":"2023-02-26"},{"lineNumber":176,"author":{"gitId":"chao2048"},"content":"        final int indexOfDeadline \u003d commandArgs.indexOf(\"by:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":177,"author":{"gitId":"chao2048"},"content":"        if (indexOfDeadline \u003d\u003d -1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":178,"author":{"gitId":"chao2048"},"content":"            throw new FormatException();","lastModifiedDate":"2023-02-24"},{"lineNumber":179,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":180,"author":{"gitId":"chao2048"},"content":"        String deadlineDescription \u003d commandArgs.substring(0, indexOfDeadline).trim();","lastModifiedDate":"2023-02-24"},{"lineNumber":181,"author":{"gitId":"chao2048"},"content":"        String deadline \u003d commandArgs.substring(indexOfDeadline).replace(\"by:\", \"\").trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":182,"author":{"gitId":"chao2048"},"content":"        if (deadlineDescription.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-24"},{"lineNumber":183,"author":{"gitId":"chao2048"},"content":"            throw new NoDescriptionException();","lastModifiedDate":"2023-02-24"},{"lineNumber":184,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":185,"author":{"gitId":"chao2048"},"content":"        if (deadline.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-24"},{"lineNumber":186,"author":{"gitId":"chao2048"},"content":"            throw new NoDescriptionException();","lastModifiedDate":"2023-02-24"},{"lineNumber":187,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":188,"author":{"gitId":"chao2048"},"content":"        Date formattedDeadline \u003d Parser.parseDate(deadline);","lastModifiedDate":"2023-02-25"},{"lineNumber":189,"author":{"gitId":"chao2048"},"content":"        TaskList.addTask(tasks, new Deadline(deadlineDescription, formattedDeadline));","lastModifiedDate":"2023-02-25"},{"lineNumber":190,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":191,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":192,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":193,"author":{"gitId":"chao2048"},"content":"     * The function will go through all the tasks to find","lastModifiedDate":"2023-02-26"},{"lineNumber":194,"author":{"gitId":"chao2048"},"content":"     * and print out the task description containing keyword.","lastModifiedDate":"2023-02-26"},{"lineNumber":195,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":196,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":197,"author":{"gitId":"chao2048"},"content":"     * @param keyword The keyword that the user want to search for.","lastModifiedDate":"2023-02-26"},{"lineNumber":198,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":199,"author":{"gitId":"chao2048"},"content":"    public static void find(ArrayList\u003cTask\u003e tasks, String keyword) {","lastModifiedDate":"2023-02-25"},{"lineNumber":200,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Below are the tasks that contains \" + keyword + \": \");","lastModifiedDate":"2023-02-26"},{"lineNumber":201,"author":{"gitId":"chao2048"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {","lastModifiedDate":"2023-02-25"},{"lineNumber":202,"author":{"gitId":"chao2048"},"content":"            if (tasks.get(i).description.contains(keyword)) {","lastModifiedDate":"2023-02-25"},{"lineNumber":203,"author":{"gitId":"chao2048"},"content":"                System.out.print(i);","lastModifiedDate":"2023-02-26"},{"lineNumber":204,"author":{"gitId":"chao2048"},"content":"                System.out.print(\". \");","lastModifiedDate":"2023-02-26"},{"lineNumber":205,"author":{"gitId":"chao2048"},"content":"                System.out.println(tasks.get(i).toString());","lastModifiedDate":"2023-02-25"},{"lineNumber":206,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":207,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":208,"author":{"gitId":"chao2048"},"content":"        Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":209,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":210,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":211,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":212,"author":{"gitId":"chao2048"},"content":"     * Unmark the task index entered by the user.","lastModifiedDate":"2023-02-26"},{"lineNumber":213,"author":{"gitId":"chao2048"},"content":"     * If the task have not been marked, it will prompt the user about it.","lastModifiedDate":"2023-02-26"},{"lineNumber":214,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":215,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s task.","lastModifiedDate":"2023-02-26"},{"lineNumber":216,"author":{"gitId":"chao2048"},"content":"     * @param commandArgs The index description entered by the user.","lastModifiedDate":"2023-02-26"},{"lineNumber":217,"author":{"gitId":"chao2048"},"content":"     * @throws NoDescriptionException If the index description is empty, the exception will be thrown","lastModifiedDate":"2023-02-26"},{"lineNumber":218,"author":{"gitId":"chao2048"},"content":"     * @throws IndexOutOfBoundsException If the index is not within the size of the list, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":219,"author":{"gitId":"chao2048"},"content":"     * @throws FormatException If the index is not an integer, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":220,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":221,"author":{"gitId":"chao2048"},"content":"    public static void unmarkTask(ArrayList\u003cTask\u003e tasks, String commandArgs)","lastModifiedDate":"2023-02-26"},{"lineNumber":222,"author":{"gitId":"chao2048"},"content":"            throws NoDescriptionException, IndexOutOfBoundsException, FormatException {","lastModifiedDate":"2023-02-26"},{"lineNumber":223,"author":{"gitId":"chao2048"},"content":"        if (commandArgs.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-24"},{"lineNumber":224,"author":{"gitId":"chao2048"},"content":"            throw new NoDescriptionException();","lastModifiedDate":"2023-02-24"},{"lineNumber":225,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":226,"author":{"gitId":"chao2048"},"content":"        final int unmarkId \u003d Parser.parseIndex(commandArgs) - 1;","lastModifiedDate":"2023-02-26"},{"lineNumber":227,"author":{"gitId":"chao2048"},"content":"        if (unmarkId \u003c 0 || unmarkId \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-02-24"},{"lineNumber":228,"author":{"gitId":"chao2048"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2023-02-24"},{"lineNumber":229,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":230,"author":{"gitId":"chao2048"},"content":"        if (!tasks.get(unmarkId).isDone) {","lastModifiedDate":"2023-02-24"},{"lineNumber":231,"author":{"gitId":"chao2048"},"content":"            System.out.println(\"This task hasn\u0027t been marked as done yet ∪･ω･∪\");","lastModifiedDate":"2023-02-24"},{"lineNumber":232,"author":{"gitId":"chao2048"},"content":"        } else {","lastModifiedDate":"2023-02-24"},{"lineNumber":233,"author":{"gitId":"chao2048"},"content":"            tasks.get(unmarkId).markAsNotDone();","lastModifiedDate":"2023-02-24"},{"lineNumber":234,"author":{"gitId":"chao2048"},"content":"            System.out.println(\"I\u0027ve unmarked this task ∪･ω･∪:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":235,"author":{"gitId":"chao2048"},"content":"            System.out.println(tasks.get(unmarkId));","lastModifiedDate":"2023-02-24"},{"lineNumber":236,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":237,"author":{"gitId":"chao2048"},"content":"        Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":238,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":239,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":240,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":241,"author":{"gitId":"chao2048"},"content":"     * Mark the task index entered by the user.","lastModifiedDate":"2023-02-26"},{"lineNumber":242,"author":{"gitId":"chao2048"},"content":"     * If the task have been marked, it will prompt the user about it.","lastModifiedDate":"2023-02-26"},{"lineNumber":243,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":244,"author":{"gitId":"chao2048"},"content":"     * @param commandArgs The index description entered by the user.","lastModifiedDate":"2023-02-26"},{"lineNumber":245,"author":{"gitId":"chao2048"},"content":"     * @throws NoDescriptionException If the index description is empty, the exception will be thrown","lastModifiedDate":"2023-02-26"},{"lineNumber":246,"author":{"gitId":"chao2048"},"content":"     * @throws IndexOutOfBoundsException If the index is not within the size of the list, the exception will be thrown","lastModifiedDate":"2023-02-26"},{"lineNumber":247,"author":{"gitId":"chao2048"},"content":"     * @throws FormatException If the index is not an integer, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":248,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":249,"author":{"gitId":"chao2048"},"content":"    public static void markTask(ArrayList\u003cTask\u003e tasks, String commandArgs)","lastModifiedDate":"2023-02-26"},{"lineNumber":250,"author":{"gitId":"chao2048"},"content":"            throws NoDescriptionException, IndexOutOfBoundsException, FormatException {","lastModifiedDate":"2023-02-26"},{"lineNumber":251,"author":{"gitId":"chao2048"},"content":"        if (commandArgs.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-24"},{"lineNumber":252,"author":{"gitId":"chao2048"},"content":"            throw new NoDescriptionException();","lastModifiedDate":"2023-02-24"},{"lineNumber":253,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":254,"author":{"gitId":"chao2048"},"content":"        final int markId \u003d Parser.parseIndex(commandArgs) - 1;","lastModifiedDate":"2023-02-26"},{"lineNumber":255,"author":{"gitId":"chao2048"},"content":"        if (markId \u003c 0 || markId \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-02-24"},{"lineNumber":256,"author":{"gitId":"chao2048"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2023-02-24"},{"lineNumber":257,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":258,"author":{"gitId":"chao2048"},"content":"        if (tasks.get(markId).isDone) {","lastModifiedDate":"2023-02-24"},{"lineNumber":259,"author":{"gitId":"chao2048"},"content":"            System.out.println(\"This task has already been marked as done ੯•໒꒱❤︎\");","lastModifiedDate":"2023-02-24"},{"lineNumber":260,"author":{"gitId":"chao2048"},"content":"        } else {","lastModifiedDate":"2023-02-24"},{"lineNumber":261,"author":{"gitId":"chao2048"},"content":"            tasks.get(markId).markAsDone();","lastModifiedDate":"2023-02-24"},{"lineNumber":262,"author":{"gitId":"chao2048"},"content":"            System.out.println(\"I\u0027ve marked this task as done ੯•໒꒱❤︎:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":263,"author":{"gitId":"chao2048"},"content":"            System.out.println(tasks.get(markId));","lastModifiedDate":"2023-02-24"},{"lineNumber":264,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":265,"author":{"gitId":"chao2048"},"content":"        Ui.printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":266,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":267,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"chao2048":267}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"import java.text.DateFormat;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"import java.util.Date;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"chao2048"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"chao2048"},"content":" * The class represent a deadline item in the task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":" * It contains a Date by, indicating when should the deadline be finished by.","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"chao2048"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"chao2048"},"content":"    protected Date by;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"    public Deadline(String description, Date by) {","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"chao2048"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"chao2048"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"chao2048"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"chao2048"},"content":"        final DateFormat dateFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\");","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"chao2048"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dateFormat.format(by) + \") \";","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"chao2048"},"content":"    public String toStorage() {","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"chao2048"},"content":"        final DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-mm-dd\");","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"chao2048"},"content":"        return \"[D]\" + super.toStorage() + \" by: \" + dateFormat.format(by);","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"chao2048":29}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":7,"author":{"gitId":"chao2048"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"chao2048"},"content":" * Main class of Duke program, where the program start and end.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-24"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-24"},{"lineNumber":13,"author":{"gitId":"chao2048"},"content":"    static String FILEPATH \u003d \"duke.txt\";","lastModifiedDate":"2023-02-24"},{"lineNumber":14,"author":{"gitId":"chao2048"},"content":"    static ArrayList \u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"     * This function will start process user input and perform task correspondingly.","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"chao2048"},"content":"     * @param s The text entered by the user","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"chao2048"},"content":"     * @throws InvalidCommandException The exception will be thrown if the command doesn\u0027t any duke command.","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"chao2048"},"content":"    public static void process(String s) throws InvalidCommandException {","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"chao2048"},"content":"        Command command \u003d new Command();","lastModifiedDate":"2023-02-24"},{"lineNumber":25,"author":{"gitId":"chao2048"},"content":"        command.execute(tasks, s);","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"chao2048"},"content":"     * Scan in the user input and trim extra white space.","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"chao2048"},"content":"     * If there is no input, continue to scan the next line for input.","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"chao2048"},"content":"     * @return The string that the user entered","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"chao2048"},"content":"    private static String inputCommand() {","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"chao2048"},"content":"        Scanner scan \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"chao2048"},"content":"        String s;","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"chao2048"},"content":"        s \u003d scan.nextLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"chao2048"},"content":"        while (s.trim().isEmpty() || s.trim().charAt(0) \u003d\u003d \u0027#\u0027) {","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"chao2048"},"content":"            s \u003d scan.nextLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"chao2048"},"content":"        return s;","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"chao2048"},"content":"     * Initialize essential class for the program to start.","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"chao2048"},"content":"     * Including Ui Class, Storage CLass, and setting patterns for Parser Class.","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"chao2048"},"content":"    private void start() {","lastModifiedDate":"2023-02-24"},{"lineNumber":49,"author":{"gitId":"chao2048"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-02-24"},{"lineNumber":50,"author":{"gitId":"chao2048"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2023-02-24"},{"lineNumber":51,"author":{"gitId":"chao2048"},"content":"        Parser.setKnownPatterns();","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"chao2048"},"content":"        ui.showWelcomeMessage();","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"chao2048"},"content":"        storage.initializeStorage(tasks, FILEPATH);","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":55,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"chao2048"},"content":"     * Run the program after initialization,","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"chao2048"},"content":"     * it will continue to get user input until the target word trigger the program to end.","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"chao2048"},"content":"    public void run() {","lastModifiedDate":"2023-02-24"},{"lineNumber":62,"author":{"gitId":"chao2048"},"content":"        start();","lastModifiedDate":"2023-02-24"},{"lineNumber":63,"author":{"gitId":"chao2048"},"content":"        String s \u003d ui.getUserCommand();","lastModifiedDate":"2023-02-24"},{"lineNumber":64,"author":{"gitId":"chao2048"},"content":"        while (!s.equals(\"bye\")) {","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"chao2048"},"content":"            try {","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"chao2048"},"content":"                process(s);","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"chao2048"},"content":"            } catch (InvalidCommandException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"chao2048"},"content":"                System.out.println(\"WOOF!! The command is not found, please type \u0027help\u0027 for more info\");","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"chao2048"},"content":"                ui.printLine();","lastModifiedDate":"2023-02-28"},{"lineNumber":70,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"chao2048"},"content":"            s \u003d inputCommand();","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"chao2048"},"content":"        ui.showGoodByeMessage();","lastModifiedDate":"2023-02-24"},{"lineNumber":74,"author":{"gitId":"chao2048"},"content":"        storage.storeChanges(FILEPATH, tasks);","lastModifiedDate":"2023-02-24"},{"lineNumber":75,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":76,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":77,"author":{"gitId":"chao2048"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-24"},{"lineNumber":78,"author":{"gitId":"chao2048"},"content":"        new Duke().run();","lastModifiedDate":"2023-02-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"chao2048":77,"-":3}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"import java.util.Date;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"import java.text.DateFormat;","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"chao2048"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"chao2048"},"content":" * The class represent a todo item in the task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":" * It contains a Date from and a Date to, indicating when does the event start and end.","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"chao2048"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"chao2048"},"content":"    protected Date from;","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"chao2048"},"content":"    protected Date to;","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"    public Event(String description, Date from, Date to) {","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"chao2048"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"chao2048"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"chao2048"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"chao2048"},"content":"        final DateFormat dateFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\");","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"chao2048"},"content":"        return \"[E]\" + super.toString() +","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"chao2048"},"content":"                \" (from: \" + dateFormat.format(from) + \", to: \" + dateFormat.format(to) + \") \";","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"chao2048"},"content":"    public String toStorage() {","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"chao2048"},"content":"        final DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-mm-dd\");","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"chao2048"},"content":"        return \"[E]\" + super.toStorage() + \" from: \" + dateFormat.format(from)","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"chao2048"},"content":"                + \" to: \" + dateFormat.format(to);","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"chao2048":33}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"import duke.exceptions.FormatException;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"import java.text.DateFormat;","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"chao2048"},"content":"import java.text.ParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"chao2048"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"chao2048"},"content":"import java.util.Date;","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"chao2048"},"content":" * A class for parsing user command into proper format for duke to implement the functinos.","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"chao2048"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"public class Parser {","lastModifiedDate":"2023-02-24"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"    static ArrayList\u003cSimpleDateFormat\u003e knownPatterns \u003d new ArrayList\u003cSimpleDateFormat\u003e();","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"     * Add date format to the knowPatterns list.","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"chao2048"},"content":"     * This will allow duke to accept more different format of input date","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"chao2048"},"content":"    public static void setKnownPatterns() {","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"chao2048"},"content":"        knownPatterns.add(new SimpleDateFormat(\"dd/MM/yyyy\"));","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"chao2048"},"content":"        knownPatterns.add(new SimpleDateFormat(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"chao2048"},"content":"        knownPatterns.add(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ssZ\"));","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"chao2048"},"content":"        knownPatterns.add(new SimpleDateFormat(\"MMM d yyyy\"));","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"chao2048"},"content":"     * Parse the user input into command and description","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"chao2048"},"content":"     * @param userInputCommand The input entered by the user","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"chao2048"},"content":"     * @return A string array consist of two elements, the first element is the command,","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"chao2048"},"content":"     * and the second one is the description after the command","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"chao2048"},"content":"    public String[] parseCommand(String userInputCommand) {","lastModifiedDate":"2023-02-24"},{"lineNumber":37,"author":{"gitId":"chao2048"},"content":"        final String[] split \u003d userInputCommand.trim().split(\"\\\\s+\", 2);","lastModifiedDate":"2023-02-24"},{"lineNumber":38,"author":{"gitId":"chao2048"},"content":"        final String[] commandTypeAndParams \u003d split.length \u003d\u003d 2 ? split : new String[]{split[0], \"\"};","lastModifiedDate":"2023-02-24"},{"lineNumber":39,"author":{"gitId":"chao2048"},"content":"        return commandTypeAndParams;","lastModifiedDate":"2023-02-24"},{"lineNumber":40,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":41,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"chao2048"},"content":"     * @param userInputDate The string input date entered by the user","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"chao2048"},"content":"     * @return return data type Date date transformed from the string input date","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"chao2048"},"content":"     * @throws ParseException If the user input couldn\u0027t be parse into a Date type, the exception will be thrown.","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"chao2048"},"content":"    public static Date parseDate(String userInputDate) throws ParseException {","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"chao2048"},"content":"        for (SimpleDateFormat pattern : knownPatterns) {","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"chao2048"},"content":"            try {","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"chao2048"},"content":"                return new Date(pattern.parse(userInputDate).getTime());","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":52,"author":{"gitId":"chao2048"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"chao2048"},"content":"                // only show message when every format doesn\u0027t fit","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"chao2048"},"content":"        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"chao2048"},"content":"        Date time \u003d dateFormat.parse(userInputDate);","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"chao2048"},"content":"        return time;","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":62,"author":{"gitId":"chao2048"},"content":"     * Parse user input index for delete, mark, or unmark into integer.","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":64,"author":{"gitId":"chao2048"},"content":"     * @param userInputIndex The string index entered by the user","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"chao2048"},"content":"     * @return return date type Integer index transformed from the user input string","lastModifiedDate":"2023-02-28"},{"lineNumber":66,"author":{"gitId":"chao2048"},"content":"     * @throws FormatException If the user input couldn\u0027t be formatted into an Integer, the exception will be thrown.","lastModifiedDate":"2023-02-28"},{"lineNumber":67,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":68,"author":{"gitId":"chao2048"},"content":"    public static Integer parseIndex(String userInputIndex) throws FormatException{","lastModifiedDate":"2023-02-26"},{"lineNumber":69,"author":{"gitId":"chao2048"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"chao2048"},"content":"            return Integer.parseInt(userInputIndex);","lastModifiedDate":"2023-02-28"},{"lineNumber":71,"author":{"gitId":"chao2048"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"chao2048"},"content":"            System.out.println(\"OOPS, the index must be an number!\");","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"chao2048"},"content":"        return -1;","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"chao2048":76}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"import duke.exceptions.FormatException;","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"import duke.exceptions.NoDescriptionException;","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"import java.io.*;","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"chao2048"},"content":"import java.text.ParseException;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"chao2048"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-24"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-24"},{"lineNumber":10,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":" * The storage class deals with things related to data storage,","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"chao2048"},"content":" * including writing to file and write the date from file to the list.","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"chao2048"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"public class Storage {","lastModifiedDate":"2023-02-24"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"data.txt\";","lastModifiedDate":"2023-02-24"},{"lineNumber":17,"author":{"gitId":"chao2048"},"content":"    private static Command command \u003d new Command();","lastModifiedDate":"2023-02-24"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"chao2048"},"content":"     * Initialize and print the task list with the previous data stored in the txt file.","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"chao2048"},"content":"     * If the file doesn\u0027t exist, it will try to create a new file for future storage.","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list for storing tasks.","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"chao2048"},"content":"     * @param filepath The filepath to open the path, or create a new file.","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"chao2048"},"content":"    public void initializeStorage(ArrayList\u003cTask\u003e tasks, String filepath) {","lastModifiedDate":"2023-02-24"},{"lineNumber":27,"author":{"gitId":"chao2048"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":28,"author":{"gitId":"chao2048"},"content":"            printFileContents(tasks, filepath);","lastModifiedDate":"2023-02-24"},{"lineNumber":29,"author":{"gitId":"chao2048"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":30,"author":{"gitId":"chao2048"},"content":"            Ui.showInitErrorMessage();","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"chao2048"},"content":"            try {","lastModifiedDate":"2023-02-24"},{"lineNumber":32,"author":{"gitId":"chao2048"},"content":"                new File(filepath).createNewFile();","lastModifiedDate":"2023-02-24"},{"lineNumber":33,"author":{"gitId":"chao2048"},"content":"            } catch (IOException ioe) {","lastModifiedDate":"2023-02-24"},{"lineNumber":34,"author":{"gitId":"chao2048"},"content":"                throw new RuntimeException(\"Creation of file failed.\", ioe);","lastModifiedDate":"2023-02-24"},{"lineNumber":35,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-24"},{"lineNumber":36,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":37,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":38,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"chao2048"},"content":"     * Write in data into the txt file to store changes.","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"chao2048"},"content":"     * @param filePath The filepath to open the file and store date.","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks.","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"chao2048"},"content":"     * @throws IOException If error occurred when writing to file, the exception will be thrown.","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"chao2048"},"content":"    private static void writeToFile(String filePath, ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2023-02-24"},{"lineNumber":47,"author":{"gitId":"chao2048"},"content":"        BufferedWriter outputWriter;","lastModifiedDate":"2023-02-24"},{"lineNumber":48,"author":{"gitId":"chao2048"},"content":"        outputWriter \u003d new BufferedWriter(new FileWriter(filePath));","lastModifiedDate":"2023-02-24"},{"lineNumber":49,"author":{"gitId":"chao2048"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":50,"author":{"gitId":"chao2048"},"content":"            outputWriter.write(tasks.get(i).toStorage() + System.lineSeparator());","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":52,"author":{"gitId":"chao2048"},"content":"        outputWriter.flush();","lastModifiedDate":"2023-02-24"},{"lineNumber":53,"author":{"gitId":"chao2048"},"content":"        outputWriter.close();","lastModifiedDate":"2023-02-24"},{"lineNumber":54,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":55,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"chao2048"},"content":"     * Try to store changes in the file, it will call the writeToFile function for implementation.","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"chao2048"},"content":"     * @param filepath The filepath to open the file and store date.","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks.","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":62,"author":{"gitId":"chao2048"},"content":"    public void storeChanges(String filepath, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-24"},{"lineNumber":63,"author":{"gitId":"chao2048"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":64,"author":{"gitId":"chao2048"},"content":"            writeToFile(filepath, tasks);","lastModifiedDate":"2023-02-24"},{"lineNumber":65,"author":{"gitId":"chao2048"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":66,"author":{"gitId":"chao2048"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2023-02-24"},{"lineNumber":67,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":68,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":69,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":70,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":71,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":72,"author":{"gitId":"chao2048"},"content":"     * Print the contents in the file line by line, and add it into the task list.","lastModifiedDate":"2023-02-28"},{"lineNumber":73,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks","lastModifiedDate":"2023-02-28"},{"lineNumber":75,"author":{"gitId":"chao2048"},"content":"     * @param filePath The filepath to open the file and store date.","lastModifiedDate":"2023-02-28"},{"lineNumber":76,"author":{"gitId":"chao2048"},"content":"     * @throws FileNotFoundException If the file is not found by using filepath, the exception will be thrown.","lastModifiedDate":"2023-02-28"},{"lineNumber":77,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":78,"author":{"gitId":"chao2048"},"content":"    private static void printFileContents(ArrayList\u003cTask\u003e tasks, String filePath) throws FileNotFoundException {","lastModifiedDate":"2023-02-24"},{"lineNumber":79,"author":{"gitId":"chao2048"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-02-24"},{"lineNumber":80,"author":{"gitId":"chao2048"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-02-24"},{"lineNumber":81,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"These are the task from your file: \");","lastModifiedDate":"2023-02-24"},{"lineNumber":82,"author":{"gitId":"chao2048"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-02-24"},{"lineNumber":83,"author":{"gitId":"chao2048"},"content":"            String task \u003d s.nextLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":84,"author":{"gitId":"chao2048"},"content":"            System.out.println(task);","lastModifiedDate":"2023-02-24"},{"lineNumber":85,"author":{"gitId":"chao2048"},"content":"            String type \u003d task.substring(1,2);","lastModifiedDate":"2023-02-24"},{"lineNumber":86,"author":{"gitId":"chao2048"},"content":"            final int descriptionId \u003d task.lastIndexOf(\"]\");","lastModifiedDate":"2023-02-24"},{"lineNumber":87,"author":{"gitId":"chao2048"},"content":"            String taskDescription \u003d task.substring(descriptionId+1).trim();","lastModifiedDate":"2023-02-25"},{"lineNumber":88,"author":{"gitId":"chao2048"},"content":"            final int doneId \u003d task.indexOf(\"[X]\");","lastModifiedDate":"2023-02-24"},{"lineNumber":89,"author":{"gitId":"chao2048"},"content":"            switch(type) {","lastModifiedDate":"2023-02-24"},{"lineNumber":90,"author":{"gitId":"chao2048"},"content":"            case \"T\":","lastModifiedDate":"2023-02-24"},{"lineNumber":91,"author":{"gitId":"chao2048"},"content":"                try {","lastModifiedDate":"2023-02-24"},{"lineNumber":92,"author":{"gitId":"chao2048"},"content":"                    command.addTodo(tasks, taskDescription);","lastModifiedDate":"2023-02-24"},{"lineNumber":93,"author":{"gitId":"chao2048"},"content":"                    if (doneId !\u003d -1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":94,"author":{"gitId":"chao2048"},"content":"                        tasks.get(tasks.size()-1).markAsDone();","lastModifiedDate":"2023-02-24"},{"lineNumber":95,"author":{"gitId":"chao2048"},"content":"                    }","lastModifiedDate":"2023-02-24"},{"lineNumber":96,"author":{"gitId":"chao2048"},"content":"                } catch (NoDescriptionException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":97,"author":{"gitId":"chao2048"},"content":"                    System.out.println(\"WOOFS!!! Something went wrong\");","lastModifiedDate":"2023-02-24"},{"lineNumber":98,"author":{"gitId":"chao2048"},"content":"                    Ui.printLine();","lastModifiedDate":"2023-02-28"},{"lineNumber":99,"author":{"gitId":"chao2048"},"content":"                }","lastModifiedDate":"2023-02-24"},{"lineNumber":100,"author":{"gitId":"chao2048"},"content":"                break;","lastModifiedDate":"2023-02-24"},{"lineNumber":101,"author":{"gitId":"chao2048"},"content":"            case \"E\":","lastModifiedDate":"2023-02-24"},{"lineNumber":102,"author":{"gitId":"chao2048"},"content":"                try {","lastModifiedDate":"2023-02-24"},{"lineNumber":103,"author":{"gitId":"chao2048"},"content":"                    command.addEvent(tasks, taskDescription);","lastModifiedDate":"2023-02-24"},{"lineNumber":104,"author":{"gitId":"chao2048"},"content":"                    if (doneId !\u003d -1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":105,"author":{"gitId":"chao2048"},"content":"                        tasks.get(tasks.size()-1).markAsDone();","lastModifiedDate":"2023-02-24"},{"lineNumber":106,"author":{"gitId":"chao2048"},"content":"                    }","lastModifiedDate":"2023-02-24"},{"lineNumber":107,"author":{"gitId":"chao2048"},"content":"                } catch (NoDescriptionException | FormatException | ParseException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":108,"author":{"gitId":"chao2048"},"content":"                    System.out.println(\"WOOFS!!! Something went wrong\");","lastModifiedDate":"2023-02-24"},{"lineNumber":109,"author":{"gitId":"chao2048"},"content":"                    Ui.printLine();","lastModifiedDate":"2023-02-28"},{"lineNumber":110,"author":{"gitId":"chao2048"},"content":"                }","lastModifiedDate":"2023-02-24"},{"lineNumber":111,"author":{"gitId":"chao2048"},"content":"                break;","lastModifiedDate":"2023-02-24"},{"lineNumber":112,"author":{"gitId":"chao2048"},"content":"            case \"D\":","lastModifiedDate":"2023-02-24"},{"lineNumber":113,"author":{"gitId":"chao2048"},"content":"                try {","lastModifiedDate":"2023-02-24"},{"lineNumber":114,"author":{"gitId":"chao2048"},"content":"                    command.addDeadline(tasks, taskDescription);","lastModifiedDate":"2023-02-24"},{"lineNumber":115,"author":{"gitId":"chao2048"},"content":"                    if (doneId !\u003d -1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":116,"author":{"gitId":"chao2048"},"content":"                        tasks.get(tasks.size()-1).markAsDone();","lastModifiedDate":"2023-02-24"},{"lineNumber":117,"author":{"gitId":"chao2048"},"content":"                    }","lastModifiedDate":"2023-02-24"},{"lineNumber":118,"author":{"gitId":"chao2048"},"content":"                } catch (NoDescriptionException | FormatException | ParseException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"chao2048"},"content":"                    System.out.println(\"WOOFS!!! Something went wrong\");","lastModifiedDate":"2023-02-24"},{"lineNumber":120,"author":{"gitId":"chao2048"},"content":"                    Ui.printLine();","lastModifiedDate":"2023-02-28"},{"lineNumber":121,"author":{"gitId":"chao2048"},"content":"                }","lastModifiedDate":"2023-02-24"},{"lineNumber":122,"author":{"gitId":"chao2048"},"content":"                break;","lastModifiedDate":"2023-02-24"},{"lineNumber":123,"author":{"gitId":"chao2048"},"content":"            }","lastModifiedDate":"2023-02-24"},{"lineNumber":124,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":125,"author":{"gitId":"chao2048"},"content":"        Ui.printLine();","lastModifiedDate":"2023-02-28"},{"lineNumber":126,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":127,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":128,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"chao2048":128}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":" * The class of general task, which has three inheritors, event, todo, and deadline.","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"public class Task {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"chao2048"},"content":"    protected String description;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"chao2048"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"chao2048"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"chao2048"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"chao2048"},"content":"        String done \u003d \" \";","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"chao2048"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"chao2048"},"content":"            done \u003d \"X\";","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"chao2048"},"content":"        return \"[\" + done + \"] \" + description ;","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"chao2048"},"content":"    public String toStorage() {","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"chao2048"},"content":"        String done \u003d \" \";","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"chao2048"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"chao2048"},"content":"            done \u003d \"X\";","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"chao2048"},"content":"        return \"[\" + done + \"] \" + description ;","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"chao2048":35}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"import duke.exceptions.FormatException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"import duke.exceptions.NoDescriptionException;","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":8,"author":{"gitId":"chao2048"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":" * The TaskList class deals with modifying the task list, including add task or deleting task.","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"chao2048"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"public class TaskList {","lastModifiedDate":"2023-02-24"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"chao2048"},"content":"     * Add a new task to the list.","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"chao2048"},"content":"     * @param t The task that the user want to add","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"    public static void addTask(ArrayList\u003cTask\u003e tasks, Task t) {","lastModifiedDate":"2023-02-24"},{"lineNumber":20,"author":{"gitId":"chao2048"},"content":"        tasks.add(t);","lastModifiedDate":"2023-02-24"},{"lineNumber":21,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":22,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"chao2048"},"content":"     * Delete the task of the index entered by the user from the list.","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing the user\u0027s tasks.","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"chao2048"},"content":"     * @param commandArgs The index description entered by the user.","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"chao2048"},"content":"     * @throws NoDescriptionException If the index description is empty, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"chao2048"},"content":"     * @throws IndexOutOfBoundsException If the index is not within the size of the list, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"chao2048"},"content":"     * @throws FormatException If the index is not a Integer, the exception will be thrown.","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"chao2048"},"content":"    public static void deleteTask(ArrayList\u003cTask\u003e tasks, String commandArgs) throws NoDescriptionException, IndexOutOfBoundsException, FormatException {","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"chao2048"},"content":"        if (commandArgs.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-24"},{"lineNumber":34,"author":{"gitId":"chao2048"},"content":"            throw new NoDescriptionException();","lastModifiedDate":"2023-02-24"},{"lineNumber":35,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":36,"author":{"gitId":"chao2048"},"content":"        final int deleteId \u003d Parser.parseIndex(commandArgs) - 1;","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"chao2048"},"content":"        if (deleteId \u003c 0 || deleteId \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-02-24"},{"lineNumber":38,"author":{"gitId":"chao2048"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2023-02-24"},{"lineNumber":39,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":40,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"I\u0027ve deleted this task ∪･ω･∪:\");","lastModifiedDate":"2023-02-24"},{"lineNumber":41,"author":{"gitId":"chao2048"},"content":"        System.out.println(tasks.get(deleteId));","lastModifiedDate":"2023-02-24"},{"lineNumber":42,"author":{"gitId":"chao2048"},"content":"        Ui.printLine();","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"chao2048"},"content":"        tasks.remove(deleteId);","lastModifiedDate":"2023-02-24"},{"lineNumber":44,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":45,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"chao2048":45}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke;","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":" * The class represent a todo item in the task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"chao2048"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"chao2048"},"content":"        super(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"chao2048"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"        return \"[T]\" + super.toString() ;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"    public String toStorage() {","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"        return \"[T]\" + super.toStorage();","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"chao2048":21}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"chao2048"},"content":" * A class containing different methods which interact with the user.","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"chao2048"},"content":" * The methods show different kind of message for different situations.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"chao2048"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"chao2048"},"content":"public class Ui {","lastModifiedDate":"2023-02-24"},{"lineNumber":11,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"chao2048"},"content":"     * Show a brief user guide to the users.","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"chao2048"},"content":"    public static void showHelpMessage() {","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"chao2048"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"First time using Duke?\\n\" +","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"chao2048"},"content":"                \"No worries! Here is a simple guide for you to get familiar with Duke :)\");","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Format: \\n\" + \"\u003e\u003e [todo] \u003csomething\u003e, and the system will add a new todo to your list\");","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Example: \\n\" + \"\u003e\u003e todo read book\\n\" + \"\u003e\u003e Got it. I\u0027ve added this task: read book\");","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Format: \\n\" + \"\u003e\u003e [event] \u003csomething\u003e [from:] \u003cwhen\u003e [to:] \u003cwhen\u003e\" +","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"chao2048"},"content":"                \", and the system will add a new event to your list\");","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Example: \\n\" + \"\u003e\u003e event read book from: 2022-02-02 to: 2022-02-03\\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"chao2048"},"content":"                + \"\u003e\u003e Got it. I\u0027ve added this task: read book (from: 2022-02-02, to: 2022-02-03)\");","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Format: \\n\" + \"\u003e\u003e [deadline] \u003csomething\u003e [by:] \u003cwhen\u003e\" +","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"chao2048"},"content":"                \", and the system will add a new deadline to your list\");","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Example: \\n\" + \"\u003e\u003e deadline read book by: 2022-02-02\\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"chao2048"},"content":"                + \"\u003e\u003e Got it. I\u0027ve added this task: read book (by: 2022-02-02)\");","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Format: \\n\" + \"\u003e\u003e [find] \u003ckeyword\u003e\" +","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"chao2048"},"content":"                \", and the system will list all items containing keyword in your list\");","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Example: \\n\" + \"\u003e\u003e find book\\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"chao2048"},"content":"                + \"\u003e\u003e  Below are the tasks containing book ...\");","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Format: \\n\" + \"\u003e\u003e [mark] \u003cindex\u003e\" +","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"chao2048"},"content":"                \", and the system will mark the item with the index in list\");","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Example: \\n\" + \"\u003e\u003e mark 1 \\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"chao2048"},"content":"                + \"\u003e\u003e I\u0027ve marked this task as done ੯•໒꒱❤︎:\");","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Format: \\n\" + \"\u003e\u003e [unmark] \u003cindex\u003e\" +","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"chao2048"},"content":"                \", and the system will unmark the item with the index in list\");","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Example: \\n\" + \"\u003e\u003e unmark 1 \\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"chao2048"},"content":"                + \"\u003e\u003e I\u0027ve unmarked this task ∪･ω･∪:\");","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Format: \\n\" + \"\u003e\u003e [delete] \u003cindex\u003e\" +","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"chao2048"},"content":"                \", and the system will delete the item with the index in list\");","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Example: \\n\" + \"\u003e\u003e delete 1 \\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"chao2048"},"content":"                + \"\u003e\u003e I\u0027ve deleted this task ∪･ω･∪:\");","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Format: \\n\" + \"\u003e\u003e [bye]\" +","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"chao2048"},"content":"                \", and then Duke will say goodbye to you and close the program.\");","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Example: \\n\" + \"\u003e\u003e bye \\n\" + \"\u003e\u003e Bye. Hope to see you again soon!ﾉ~\");","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Hope it helps!! woof a nice day ੯•໒꒱❤︎\");","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"chao2048"},"content":"        printLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"chao2048"},"content":"     * Print a separation line","lastModifiedDate":"2023-02-28"},{"lineNumber":53,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"chao2048"},"content":"    public static void printLine() {","lastModifiedDate":"2023-02-24"},{"lineNumber":55,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-24"},{"lineNumber":56,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":57,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"chao2048"},"content":"     * Show welcome message to the user","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"chao2048"},"content":"    public static void showWelcomeMessage() {","lastModifiedDate":"2023-02-24"},{"lineNumber":62,"author":{"gitId":"chao2048"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-02-24"},{"lineNumber":63,"author":{"gitId":"chao2048"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-02-24"},{"lineNumber":64,"author":{"gitId":"chao2048"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-02-24"},{"lineNumber":65,"author":{"gitId":"chao2048"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-02-24"},{"lineNumber":66,"author":{"gitId":"chao2048"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-02-24"},{"lineNumber":67,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-02-24"},{"lineNumber":68,"author":{"gitId":"chao2048"},"content":"        printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":69,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Hello! I\u0027m Duke  U ´ᴥ` U\\n\" + \"What can I do for you?\");","lastModifiedDate":"2023-02-24"},{"lineNumber":70,"author":{"gitId":"chao2048"},"content":"        printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":71,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":72,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":73,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"chao2048"},"content":"     * Show error message when no previous file found","lastModifiedDate":"2023-02-28"},{"lineNumber":75,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":76,"author":{"gitId":"chao2048"},"content":"    public static void showInitErrorMessage() {","lastModifiedDate":"2023-02-24"},{"lineNumber":77,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"No previous file found, Duke will try to create a file to store your data.\");","lastModifiedDate":"2023-02-24"},{"lineNumber":78,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":79,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":80,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":81,"author":{"gitId":"chao2048"},"content":"     * Show goodby message when user exit the program","lastModifiedDate":"2023-02-28"},{"lineNumber":82,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":83,"author":{"gitId":"chao2048"},"content":"    public static void showGoodByeMessage() {","lastModifiedDate":"2023-02-24"},{"lineNumber":84,"author":{"gitId":"chao2048"},"content":"        printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":85,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Bye. Hope to see you again soon!ﾉ~\");","lastModifiedDate":"2023-02-24"},{"lineNumber":86,"author":{"gitId":"chao2048"},"content":"        printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":87,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":88,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":89,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":90,"author":{"gitId":"chao2048"},"content":"     * Scan in the user input and return it","lastModifiedDate":"2023-02-28"},{"lineNumber":91,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":92,"author":{"gitId":"chao2048"},"content":"     * @return the user input string","lastModifiedDate":"2023-02-28"},{"lineNumber":93,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":94,"author":{"gitId":"chao2048"},"content":"    public static String getUserCommand() {","lastModifiedDate":"2023-02-24"},{"lineNumber":95,"author":{"gitId":"chao2048"},"content":"        Scanner scan \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-24"},{"lineNumber":96,"author":{"gitId":"chao2048"},"content":"        String s;","lastModifiedDate":"2023-02-24"},{"lineNumber":97,"author":{"gitId":"chao2048"},"content":"        s \u003d scan.nextLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":98,"author":{"gitId":"chao2048"},"content":"        while (s.trim().isEmpty() || s.trim().charAt(0) \u003d\u003d \u0027#\u0027) {","lastModifiedDate":"2023-02-24"},{"lineNumber":99,"author":{"gitId":"chao2048"},"content":"            s \u003d scan.nextLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":100,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":101,"author":{"gitId":"chao2048"},"content":"        return s;","lastModifiedDate":"2023-02-24"},{"lineNumber":102,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":103,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":104,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":105,"author":{"gitId":"chao2048"},"content":"     * Show successfully add task message to the user.","lastModifiedDate":"2023-02-28"},{"lineNumber":106,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":107,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list of user\u0027s tasks","lastModifiedDate":"2023-02-28"},{"lineNumber":108,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":109,"author":{"gitId":"chao2048"},"content":"    public static void showAddTaskMessage(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-24"},{"lineNumber":110,"author":{"gitId":"chao2048"},"content":"        printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":111,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \\n\" + tasks.get(tasks.size()-1));","lastModifiedDate":"2023-02-24"},{"lineNumber":112,"author":{"gitId":"chao2048"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in your list. ^ ^\");","lastModifiedDate":"2023-02-24"},{"lineNumber":113,"author":{"gitId":"chao2048"},"content":"        printLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":114,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":115,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":116,"author":{"gitId":"chao2048"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":117,"author":{"gitId":"chao2048"},"content":"     * Print all of the user\u0027s tasks in sequence, including done status and task type.","lastModifiedDate":"2023-02-28"},{"lineNumber":118,"author":{"gitId":"chao2048"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":119,"author":{"gitId":"chao2048"},"content":"     * @param tasks The list containing user\u0027s tasks.","lastModifiedDate":"2023-02-28"},{"lineNumber":120,"author":{"gitId":"chao2048"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":121,"author":{"gitId":"chao2048"},"content":"    public static void printListOfTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-26"},{"lineNumber":122,"author":{"gitId":"chao2048"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {","lastModifiedDate":"2023-02-26"},{"lineNumber":123,"author":{"gitId":"chao2048"},"content":"            System.out.print(i + 1);","lastModifiedDate":"2023-02-26"},{"lineNumber":124,"author":{"gitId":"chao2048"},"content":"            System.out.print(\". \");","lastModifiedDate":"2023-02-26"},{"lineNumber":125,"author":{"gitId":"chao2048"},"content":"            System.out.println(tasks.get(i));","lastModifiedDate":"2023-02-26"},{"lineNumber":126,"author":{"gitId":"chao2048"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":127,"author":{"gitId":"chao2048"},"content":"        printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":128,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":129,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"chao2048":129}},{"path":"src/main/java/duke/exceptions/FormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke.exceptions;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"public class FormatException extends Exception{","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"    public FormatException(){}","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"chao2048":5}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke.exceptions;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"public class InvalidCommandException extends Exception{","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"    public InvalidCommandException(){}","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"chao2048":5}},{"path":"src/main/java/duke/exceptions/NoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chao2048"},"content":"package duke.exceptions;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"chao2048"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"chao2048"},"content":"public class NoDescriptionException extends Exception{","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"chao2048"},"content":"    public NoDescriptionException() {","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"chao2048"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"chao2048"},"content":"}","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"chao2048":6}}]
