[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"# Chronos project template","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"This is a project template for a greenfield Java project. It\u0027s named Chronos, the god of time. Given below are instructions on how to use it.","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"3. After that, locate the `src/chronos/java/Chronos.java` file, right-click it, and choose `Run Chronos.chronos()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"```java","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"        ░█████╗░██╗░░██╗██████╗░░█████╗░███╗░░██╗░█████╗░░██████╗","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"        ██╔══██╗██║░░██║██╔══██╗██╔══██╗████╗░██║██╔══██╗██╔════╝","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"        ██║░░╚═╝███████║██████╔╝██║░░██║██╔██╗██║██║░░██║╚█████╗░","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"        ██║░░██╗██╔══██║██╔══██╗██║░░██║██║╚████║██║░░██║░╚═══██╗","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"        ╚█████╔╝██║░░██║██║░░██║╚█████╔╝██║░╚███║╚█████╔╝██████╔╝","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"        ░╚════╝░╚═╝░░╚═╝╚═╝░░╚═╝░╚════╝░╚═╝░░╚══╝░╚════╝░╚═════╝░","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"        Tick, tick, boom! I\u0027m Chronos, your personal time manager.","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-02-06"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        Here are some useful commands to get you started!","lastModifiedDate":"2023-02-06"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-02-06"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"        1. todo \u003ctask name\u003e - Adds a todo task to the list.","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"        2. deadline \u003ctask name\u003e /due \u003cdate\u003e - Adds a deadline task to the list.","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"        3. event \u003ctask name\u003e /start \u003cdate/time\u003e /end \u003cdate/time\u003e - Adds an event task to the list.","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"        4. list - Lists all tasks in the list.","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"        5. mark \u003ctask number\u003e - Marks a task as done.","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"        6. unmark \u003ctask_number\u003e: Unmarks task as not done","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"        7. help - If you forgot how to use me, don\u0027t be afraid to ask!.","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"        8. timer - starts a 25 minute Pomodoro timer","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"        9. done - Exits Chronos.","lastModifiedDate":"2023-02-27"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"        10. find \u003ckeyword\u003e - Finds a task and displays all tasks with corresponding keywords","lastModifiedDate":"2023-02-27"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-02-06"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"        What is your name? (Please enter name)","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"        \u003e\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":36,"-":15}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"Chronos is a **desktop productivity app for managing tasks, optimized for use via a Command Line Interface** (CLI).","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"If you can type fast, Chronos can get your task management done faster than traditional GUI apps. Chronos is capable of","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"helping you **keeping track of your tasks, deadlines and events and has a productivity timer.**","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"## Table of Contents","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"1. [Quick Start](#quick-start)","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"2. [Features](#features)","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"    1. [Viewing help: `help`](#viewing-help-help)","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"    2. [Listing all tasks: `list`](#listing-all-tasks-list)","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"    3. [Adding a todo task: `todo`](#adding-a-todo-task-todo)","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"    4. [Adding a deadline task: `deadline`](#adding-a-deadline-task-deadline)","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"    5. [Adding an event task: `event`](#adding-an-event-task-event)","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    6. [Marking a task as done: `mark`](#marking-a-task-as-done-mark)","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"    7. [Marking a task as undone: `unmark`](#marking-a-task-as-undone-unmark)","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"    8. [Deleting a task: `delete`](#deleting-a-task-delete)","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"    9. [Starting a timer: `timer`](#starting-a-timer-timer)","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"   10. [Finding a task by keyword: `find`](#finding-a-task-by-keyword-find)","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"   11. [Exiting the program: `done`](#exiting-the-program-bye)","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"3. [FAQ](#faq)","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"## Quick Start","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"1. Ensure you have Java 11 or above installed in your Computer.","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"2. Download the latest ip.jar from [here]().","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"3. Copy the file to the folder you want to use as the home folder for your Chronos.","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"4. Open a command terminal, cd into the folder you put the jar file in, and use the java -jar","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"   ip.jar command to run the application.","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"5. Type the command in the command box and press Enter to execute it.","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"   e.g. typing `help` and pressing Enter will display the list of commands available in Chronos.","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2023-02-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"### Viewing help: `help`","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"Shows a message explaining the usage of each command and the required format of each command.","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `help`","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"### Listing all tasks: `list`","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"Displays a list of all current tasks in the task list as well their status. The task List is saved and updated from","lastModifiedDate":"2023-02-27"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"the user\u0027s hard disk each time Chronos is started.","lastModifiedDate":"2023-02-27"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `list`","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"### Adding a todo task: `todo`","lastModifiedDate":"2023-02-27"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"Adds a todo task to the task list.","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `todo \u003cTASK_DESCRIPTION\u003e`","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"- Adds a Task with the description `\u003cTASK_DESCRIPTION\u003e` to the task list.","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"- The `\u003cTASK_DESCRIPTION\u003e` should not be empty.","lastModifiedDate":"2023-02-27"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"Examples:","lastModifiedDate":"2023-02-27"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"- `todo Study for Midterms`","lastModifiedDate":"2023-02-27"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"- `todo Finish EE2026 Assignment`","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"### Adding a deadline task: `deadline`","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"Adds a deadline task to the task list.","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `deadline \u003cTASK_DESCRIPTION\u003e /due \u003cDEADLINE\u003e`","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"- Adds a Task with the description `\u003cTASK_DESCRIPTION\u003e` and deadline `\u003cDEADLINE\u003e` to the task list.","lastModifiedDate":"2023-02-27"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"- The `\u003cTASK_DESCRIPTION\u003e` should not be empty.","lastModifiedDate":"2023-02-27"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"- The `/due` keyword is required.","lastModifiedDate":"2023-02-27"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"Examples:","lastModifiedDate":"2023-02-27"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"- `deadline Study for Midterms /due 2023-03-15`","lastModifiedDate":"2023-02-27"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"- `deadline Finish EE2026 Assigment /due 2023-02-22`","lastModifiedDate":"2023-02-27"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":74,"author":{"gitId":"T-Wan-Lin"},"content":"### Adding an event task: `event`","lastModifiedDate":"2023-02-27"},{"lineNumber":75,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":76,"author":{"gitId":"T-Wan-Lin"},"content":"Adds an event task to the task list.","lastModifiedDate":"2023-02-27"},{"lineNumber":77,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":78,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `event \u003cTASK_DESCRIPTION\u003e /start \u003cSTART_TIME\u003e /end \u003cEND_TIME\u003e`","lastModifiedDate":"2023-02-27"},{"lineNumber":79,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":80,"author":{"gitId":"T-Wan-Lin"},"content":"- Adds a Task with the description `\u003cTASK_DESCRIPTION\u003e`, start time `\u003cSTART_TIME\u003e`","lastModifiedDate":"2023-02-27"},{"lineNumber":81,"author":{"gitId":"T-Wan-Lin"},"content":"  and end time `\u003cEND_TIME\u003e` to the task list.","lastModifiedDate":"2023-02-27"},{"lineNumber":82,"author":{"gitId":"T-Wan-Lin"},"content":"- The `\u003cTASK_DESCRIPTION\u003e` should not be empty.","lastModifiedDate":"2023-02-27"},{"lineNumber":83,"author":{"gitId":"T-Wan-Lin"},"content":"- The `/from` and `/to` keywords are required.","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":85,"author":{"gitId":"T-Wan-Lin"},"content":"Examples:","lastModifiedDate":"2023-02-27"},{"lineNumber":86,"author":{"gitId":"T-Wan-Lin"},"content":"- `event CS2113 Project Meeting /start 2023-03-15 1400 /end 2023-03-15 1500`","lastModifiedDate":"2023-02-27"},{"lineNumber":87,"author":{"gitId":"T-Wan-Lin"},"content":"- `event Movie Date /start 2023-02-14 1400 /end 2023-02-14 1700`","lastModifiedDate":"2023-02-27"},{"lineNumber":88,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":89,"author":{"gitId":"T-Wan-Lin"},"content":"### Marking a task as done: `mark`","lastModifiedDate":"2023-02-27"},{"lineNumber":90,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":91,"author":{"gitId":"T-Wan-Lin"},"content":"Marks a task as done.","lastModifiedDate":"2023-02-27"},{"lineNumber":92,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":93,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `mark \u003cTASK_INDEX\u003e`","lastModifiedDate":"2023-02-27"},{"lineNumber":94,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":95,"author":{"gitId":"T-Wan-Lin"},"content":"- Marks the task at the specified `\u003cTASK_INDEX\u003e` of the list as done.","lastModifiedDate":"2023-02-27"},{"lineNumber":96,"author":{"gitId":"T-Wan-Lin"},"content":"- The `\u003cTASK_INDEX\u003e` should be a positive integer between 1 to the latest task count.","lastModifiedDate":"2023-02-27"},{"lineNumber":97,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":98,"author":{"gitId":"T-Wan-Lin"},"content":"Examples:","lastModifiedDate":"2023-02-27"},{"lineNumber":99,"author":{"gitId":"T-Wan-Lin"},"content":"- `mark 1` marks the first task in the list as done.","lastModifiedDate":"2023-02-27"},{"lineNumber":100,"author":{"gitId":"T-Wan-Lin"},"content":"- `mark 2` marks the second task in the list as done.","lastModifiedDate":"2023-02-27"},{"lineNumber":101,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":102,"author":{"gitId":"T-Wan-Lin"},"content":"### Marking a task as undone: `unmark`","lastModifiedDate":"2023-02-27"},{"lineNumber":103,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":104,"author":{"gitId":"T-Wan-Lin"},"content":"Marks a task as undone.","lastModifiedDate":"2023-02-27"},{"lineNumber":105,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":106,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `unmark \u003cTASK_INDEX\u003e`","lastModifiedDate":"2023-02-27"},{"lineNumber":107,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":108,"author":{"gitId":"T-Wan-Lin"},"content":"- Marks the task at the specified `\u003cTASK_INDEX\u003e` of the list as not done.","lastModifiedDate":"2023-02-27"},{"lineNumber":109,"author":{"gitId":"T-Wan-Lin"},"content":"- The `\u003cTASK_INDEX\u003e` should be a positive integer between 1 to the latest task count.","lastModifiedDate":"2023-02-27"},{"lineNumber":110,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":111,"author":{"gitId":"T-Wan-Lin"},"content":"Examples:","lastModifiedDate":"2023-02-27"},{"lineNumber":112,"author":{"gitId":"T-Wan-Lin"},"content":"- `unmark 1` marks the first task in the list as not done.","lastModifiedDate":"2023-02-27"},{"lineNumber":113,"author":{"gitId":"T-Wan-Lin"},"content":"- `unmark 2` marks the second task in the list as not done.","lastModifiedDate":"2023-02-27"},{"lineNumber":114,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":115,"author":{"gitId":"T-Wan-Lin"},"content":"### Deleting a task: `delete`","lastModifiedDate":"2023-02-27"},{"lineNumber":116,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":117,"author":{"gitId":"T-Wan-Lin"},"content":"Deletes a task from the task list.","lastModifiedDate":"2023-02-27"},{"lineNumber":118,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":119,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `delete \u003cTASK_INDEX\u003e`","lastModifiedDate":"2023-02-27"},{"lineNumber":120,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":121,"author":{"gitId":"T-Wan-Lin"},"content":"- Deletes the task at the specified `\u003cTASK_INDEX\u003e` of the list.","lastModifiedDate":"2023-02-27"},{"lineNumber":122,"author":{"gitId":"T-Wan-Lin"},"content":"- The `\u003cTASK_INDEX\u003e` should be a positive integer between 1 to the latest task count.","lastModifiedDate":"2023-02-27"},{"lineNumber":123,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":124,"author":{"gitId":"T-Wan-Lin"},"content":"Examples:","lastModifiedDate":"2023-02-27"},{"lineNumber":125,"author":{"gitId":"T-Wan-Lin"},"content":"- `delete 1` deletes the first task in the list.","lastModifiedDate":"2023-02-27"},{"lineNumber":126,"author":{"gitId":"T-Wan-Lin"},"content":"- `delete 2` deletes the second task in the list.","lastModifiedDate":"2023-02-27"},{"lineNumber":127,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":128,"author":{"gitId":"T-Wan-Lin"},"content":"### Starting a Timer: `timer`","lastModifiedDate":"2023-02-27"},{"lineNumber":129,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":130,"author":{"gitId":"T-Wan-Lin"},"content":"Starts a 25 minute Pomodoro timer, hit enter to start a break timer","lastModifiedDate":"2023-02-27"},{"lineNumber":131,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":132,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `timer`","lastModifiedDate":"2023-02-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":134,"author":{"gitId":"T-Wan-Lin"},"content":"### Finding a task by keyword: `find`","lastModifiedDate":"2023-02-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":136,"author":{"gitId":"T-Wan-Lin"},"content":"Finds tasks whose description contains the given keyword.","lastModifiedDate":"2023-02-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":138,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `find \u003cKEYWORD\u003e`","lastModifiedDate":"2023-02-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":140,"author":{"gitId":"T-Wan-Lin"},"content":"- Finds tasks whose description contains the given `\u003cKEYWORD\u003e`.","lastModifiedDate":"2023-02-27"},{"lineNumber":141,"author":{"gitId":"T-Wan-Lin"},"content":"- The `\u003cKEYWORD\u003e` should not be empty.","lastModifiedDate":"2023-02-27"},{"lineNumber":142,"author":{"gitId":"T-Wan-Lin"},"content":"- The search is case-insensitive. e.g `read` will match `Read`","lastModifiedDate":"2023-02-27"},{"lineNumber":143,"author":{"gitId":"T-Wan-Lin"},"content":"- The `\u003cKEYWORD\u003e` should only be a single word.","lastModifiedDate":"2023-02-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":145,"author":{"gitId":"T-Wan-Lin"},"content":"Examples:","lastModifiedDate":"2023-02-27"},{"lineNumber":146,"author":{"gitId":"T-Wan-Lin"},"content":"- `find midterms` returns tasks with descriptions containing the word \"midterms\".","lastModifiedDate":"2023-02-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":148,"author":{"gitId":"T-Wan-Lin"},"content":"### Exiting the program: `done`","lastModifiedDate":"2023-02-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":150,"author":{"gitId":"T-Wan-Lin"},"content":"Exits Chronos.","lastModifiedDate":"2023-02-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":152,"author":{"gitId":"T-Wan-Lin"},"content":"Format: `done`","lastModifiedDate":"2023-02-27"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":154,"author":{"gitId":"T-Wan-Lin"},"content":"## FAQ","lastModifiedDate":"2023-02-27"},{"lineNumber":155,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":156,"author":{"gitId":"T-Wan-Lin"},"content":"**Q**: How do I save my data in my hard disk?  ","lastModifiedDate":"2023-02-27"},{"lineNumber":157,"author":{"gitId":"T-Wan-Lin"},"content":"**A**: Chronos saves your data in your hard disk automatically after each command. Then, search for the file \u0027taskList.txt\u0027 ","lastModifiedDate":"2023-02-27"},{"lineNumber":158,"author":{"gitId":"T-Wan-Lin"},"content":"        in your PC search/spotlight (for MacOS) to obtain your list.","lastModifiedDate":"2023-02-27"},{"lineNumber":159,"author":{"gitId":"T-Wan-Lin"},"content":"        ","lastModifiedDate":"2023-02-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"T-Wan-Lin":139,"-":24}},{"path":"src/main/java/chronos/Chronos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.inoutput.Input;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.inoutput.Output;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.tasktype.Stash;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.userinterface.TaskManager;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.userinterface.UserHandler;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"import java.io.File;","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"public class Chronos {","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"    private static Input inOut;","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"    private static Stash stash;","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"    private static TaskManager taskManager;","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"    private static UserHandler userHandler;","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"        inOut \u003d new Input();","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"        stash \u003d new Stash();","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"        taskManager \u003d new TaskManager(inOut, stash);","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"        userHandler \u003d new UserHandler(inOut);","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"        Output.printWelcome();","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"        Output.printHelp();","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"        userHandler.getUserName();","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"        fileInit();","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"        fileWriter();","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        taskManager.inputCommands();","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"    private static void fileInit() {","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"        File file \u003d new File(\"./taskList.txt\");","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"            file.createNewFile();","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"    private static void fileWriter() {","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"        Runtime.getRuntime().addShutdownHook(new Thread() {","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"            public void run() {","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"                stash.saveTasksToFile();","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"        });","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":50}},{"path":"src/main/java/chronos/commandhandler/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.commandhandler;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":" * Represents all user commands, which is broken down into action, details of task added. In the case of an \u0027event\u0027","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":" * the user command will contain the respective start and end times/date. In the case of a \u0027deadline, the user command","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * will contain the due date/time","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"public class Command {","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"    private static final String EXAMPLE \u003d \"event EE2026 midterms /start 4 March 3 pm /end 4 March 4.30pm\";","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"    private String action; //the type of task or command","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"    private String details; //the accompanying details after the user has defined the action","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"    private String start; //for an event, if applicable","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    private String end; // for an event, if applicable","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"    private String due; //for a deadline, if applicable","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructs a Command object with the given action, details, start time, end time, and due time.","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"     * This will be parsed in InputParser","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param action  The action of the user command","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param details The details of the user command","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param start   The start time of the user command in the case of an event type task","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param end     The end time of the command in the case of an event type task","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param time    The due time of the command in the case of a deadline type task","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"    public Command(String action, String details, String start, String end, String time) {","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"        this.action \u003d action;","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"        this.details \u003d details;","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        this.due \u003d time;","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"    public String getAction() {","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"        return action;","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"    public String getDetails() {","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"        return details;","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"    public String getStart() {","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"        return start;","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"    public String getEnd() {","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"        return end;","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"    public String getDue() {","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"        return due;","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"     * Returns a string representation of this command object.","lastModifiedDate":"2023-02-27"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"     * The string representation contains the type of the command,","lastModifiedDate":"2023-02-27"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"     * its body, start time, end time, and due date.","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return a string representation of this command object","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"    public String toString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"        return String.format(\"Command[type\u003d%s, body\u003d%s, start\u003d%s, end\u003d%s, due\u003d%s]\", action, details, start, end, due);","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":67}},{"path":"src/main/java/chronos/commandhandler/InputParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.commandhandler;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":" * The InputParser class contains a single public static method named parseInput.","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":" * This method is used to parse the input string into a Command object so that it can","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * be more easily handled by the machine.","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"public class InputParser {","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"     * Parses the input string into a Command object.","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param input The input string to be parsed","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return The Command object created from the input string that has been parsed","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"    public static Command parseInput(String input) {","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"        /**","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"         * Command object with several fields: action, details, start, end, and due.","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"         * It does this by first splitting the input string on /, then splitting the","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"         * first part on the first space to separate the action from any details.","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"         * It then iterates over the remaining parts and checks for each one whether it","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"         * corresponds to start, end, or due, and sets the appropriate field in the Command objects","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"         */","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"        String[] parts \u003d input.split(\" /\");","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"        String[] mainPart \u003d parts[0].split(\" \", 2);","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"        String action \u003d mainPart[0];","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"        //checks if there is anything after the action command \u0027todo\u0027 if there is nothing it is null","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"        String details \u003d mainPart.length \u003e 1 ? mainPart[1] : null;","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        String end \u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        String start \u003d null;","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"        String due \u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"        for (int i \u003d 1; i \u003c parts.length; i++) {","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"            String[] option \u003d parts[i].split(\" \", 2);","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"            String optionName \u003d option[0];","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"            String optionValue \u003d option.length \u003e 1 ? option[1] : null;","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"            switch (optionName) {","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"            case \"start\":","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"                start \u003d optionValue;","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"                break;","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"            case \"end\":","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"                end \u003d optionValue;","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"                break;","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"            case \"due\":","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"                due \u003d optionValue;","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"                break;","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"            default:","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"                System.err.println(\"INVALID COMMAND FORMAT\");","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"        //for each component, eliminate trailing white spaces for easier processing","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"        if (action !\u003d null) {","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"            action \u003d action.trim();","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"        if (details !\u003d null) {","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"            details \u003d details.trim();","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"        if (start !\u003d null) {","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"            start \u003d start.trim();","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"        if (end !\u003d null) {","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"            end \u003d end.trim();","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"        if (due !\u003d null) {","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"            due \u003d due.trim();","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"        return new Command(action, details, start, end, due);","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":75}},{"path":"src/main/java/chronos/exceptions/ChronosExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.exceptions;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":" * This class defines custom exceptions for the Chronos application.","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"public class ChronosExceptions extends Exception {","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructor for the ChronosExceptions class.","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param message The error message associated with the exception.","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"    public ChronosExceptions(String message) {","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"        super(message);","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"     * Custom exception for handling invalid user input in the Chronos application.","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"    public static class InvalidInputException extends ChronosExceptions {","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"        /**","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"         * Constructor for the InvalidInputException class.","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"         *","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"         * @param message The error message associated with the exception.","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"         */","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"        public InvalidInputException(String message) {","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"            super(message);","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"T-Wan-Lin":28}},{"path":"src/main/java/chronos/inoutput/Input.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.inoutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * The IO class is responsible for handling user inputs for the program.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":" * It uses a Scanner object to read input from the user, and provides a","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":" * readInput() method to retrieve the input as a string.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":" * \"\u003e\u003e\" is used as a prompt for the user to enter their next command.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"public class Input {","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"    private Scanner toRead;","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"     * The constructor IO creates a new instance of the class and initializes","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"     * a Scanner object to read input from the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"    public Input() {","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"        this.toRead \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"     * The readInput() method retrieves a line of input from the user and returns it as a string.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return A string containing the input entered by the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"    public String readInput() {","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\u003e\u003e \");","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        return toRead.nextLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"T-Wan-Lin":34}},{"path":"src/main/java/chronos/inoutput/Output.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.inoutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.tasktype.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.tasktype.Stash;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" * The Output class provides various methods to display messages and information to the user via the console.","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"public class Output {","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"     * Displays the Chronos logo on the console.","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    private static void printLogo() {","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"        String logo \u003d","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"                \"░█████╗░██╗░░██╗██████╗░░█████╗░███╗░░██╗░█████╗░░██████╗\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"                        \"██╔══██╗██║░░██║██╔══██╗██╔══██╗████╗░██║██╔══██╗██╔════╝\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"                        \"██║░░╚═╝███████║██████╔╝██║░░██║██╔██╗██║██║░░██║╚█████╗░\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"                        \"██║░░██╗██╔══██║██╔══██╗██║░░██║██║╚████║██║░░██║░╚═══██╗\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"                        \"╚█████╔╝██║░░██║██║░░██║╚█████╔╝██║░╚███║╚█████╔╝██████╔╝\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"                        \"░╚════╝░╚═╝░░╚═╝╚═╝░░╚═╝░╚════╝░╚═╝░░╚══╝░╚════╝░╚═════╝░\\n\";","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(logo);","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"     * Displays a welcome message to the user on the console, including the Chronos logo.","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"    public static void printWelcome() {","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Hello from\\n\");","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"        printLogo();","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Tick, tick, boom! I\u0027m Chronos, your personal time manager.\\n\");","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"     * Displays a help menu to the user on the console.","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"     * The menu includes several useful commands to get started with Chronos.","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"    public static void printHelp() {","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"        String lineBreak \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\";","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"        String initMessage \u003d \"Here are some useful commands to get you started!\\n\";","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"        String helpMenu \u003d \"1. todo \u003ctask name\u003e - Adds a todo task to the list.\\n\" +","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"                \"2. deadline \u003ctask name\u003e /due \u003cdate\u003e - Adds a deadline task to the list.\\n\" +","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"                \"3. event \u003ctask name\u003e /start \u003cdate/time\u003e /end \u003cdate/time\u003e - Adds an event task to the list.\\n\" +","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"                \"4. list - Lists all tasks in the list.\\n\" + \"5. mark \u003ctask number\u003e - Marks a task as done.\\n\" +","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"                \"6. unmark \u003ctask_number\u003e: Unmarks task as not done\\n\" + \"7. help - If you forgot how to use me, don\u0027t be afraid to ask!.\\n\"","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"                + \"8. Timer - starts a 25 minute Pomodoro timer\\n\" + \"9. done - Exits Chronos. \\n\" +","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"                \"10. find \u003ckeyword\u003e - Finds a task and displays all tasks with corresponding keywords\\n\";","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(lineBreak + initMessage + lineBreak + helpMenu + lineBreak);","lastModifiedDate":"2023-02-22"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"    public static void printList(Stash stash) {","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Here\u0027s what you have to do:\");","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"        stash.printTasks();","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-22"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"     * Prints the status of a task at a given index in a Stash object.","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param stash The Stash object containing the task.","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param index The index of the task to be printed.","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"    public static void printIsDone(Stash stash, int index) {","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"        Task task \u003d stash.getTask(index);","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.printf(\"This task has been marked as %s\", task.isDone() ? \"done! Good job!\" : \"undone. Please start on it.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-22"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.printf(\"  %s\", task);","lastModifiedDate":"2023-02-22"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-22"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"    public static void printNewTask(Task task, int stashSize) {","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"Added New Task: \");","lastModifiedDate":"2023-02-22"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-22"},{"lineNumber":74,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.printf(\" %s\", task.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-22"},{"lineNumber":76,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.printf(\"You now have %d task(s) in the list.\", stashSize);","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-22"},{"lineNumber":78,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":80,"author":{"gitId":"T-Wan-Lin"},"content":"     * Prints information about a task that was deleted from a Stash object.","lastModifiedDate":"2023-02-27"},{"lineNumber":81,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param task The Task object that was deleted from the Stash.","lastModifiedDate":"2023-02-27"},{"lineNumber":82,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param stashSize The number of tasks in the Stash after the task was deleted.","lastModifiedDate":"2023-02-27"},{"lineNumber":83,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"T-Wan-Lin"},"content":"    public static void printDeletedTask(Task task, int stashSize) {","lastModifiedDate":"2023-02-12"},{"lineNumber":85,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"Deleted Task \");","lastModifiedDate":"2023-02-22"},{"lineNumber":86,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-22"},{"lineNumber":87,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.printf(\" %s\", task.toString());","lastModifiedDate":"2023-02-12"},{"lineNumber":88,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-22"},{"lineNumber":89,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.printf(\"You now have %d task(s) in the list.\", stashSize);","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-22"},{"lineNumber":91,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":92,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":93,"author":{"gitId":"T-Wan-Lin"},"content":"     * Prints the results of a search for tasks in a Stash object that contain a given keyword.","lastModifiedDate":"2023-02-27"},{"lineNumber":94,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param stash The Stash object to be searched.","lastModifiedDate":"2023-02-27"},{"lineNumber":95,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param keyword The keyword to search for in the tasks.","lastModifiedDate":"2023-02-27"},{"lineNumber":96,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":97,"author":{"gitId":"T-Wan-Lin"},"content":"    public static void printSearchResults(Stash stash, String keyword){","lastModifiedDate":"2023-02-25"},{"lineNumber":98,"author":{"gitId":"T-Wan-Lin"},"content":"        String searchBreak \u003d \"----------------------------------------------------\";","lastModifiedDate":"2023-02-25"},{"lineNumber":99,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(searchBreak);","lastModifiedDate":"2023-02-25"},{"lineNumber":100,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Here are the tasks matching the keyword you have input\\n\");","lastModifiedDate":"2023-02-25"},{"lineNumber":101,"author":{"gitId":"T-Wan-Lin"},"content":"        stash.searchTask(keyword);","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\u0027\\n\u0027);","lastModifiedDate":"2023-02-27"},{"lineNumber":103,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(searchBreak);","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-25"},{"lineNumber":105,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":106,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":106}},{"path":"src/main/java/chronos/savehandler/Save.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.savehandler;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.tasktype.*;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" * The Save class represents a saved task, broken down into its individual components.","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"public class Save {","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"    //rough implementation: in this class the task to be saved will be broken down according to it\u0027s tags [T], [E] or [D]","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"    private String taskType;","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"    private String description;","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"    private String dueDate;","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    private String start;","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"    private String end;","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"    private boolean isDone;","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructs a Save object with the specified components.","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param taskType The type of task: [T] for Todo, [E] for Event, [D] for Deadline.","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param isDone Indicates if the task is completed.","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param dueDate The due date of the task. Null for Todo tasks.","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param start The start date of the task. Null for Deadline tasks.","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param end The end date of the task. Null for Deadline tasks.","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"    public Save(String taskType, boolean isDone, String description, String dueDate, String start, String end) {","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"     * Converts a Save object into a Todo task.","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return A new Todo task with the components from the Save object.","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"    public Todo convertToTodo() {","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"        return new Todo(this.isDone, this.description);","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"     * Converts a Save object into an Event task.","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return A new Event task with the components from the Save object.","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"    public Event convertToEvent() {","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"        return new Event(this.description, this.start, this.end, this.isDone);","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"     * Converts a Save object into a Deadline task.","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return A new Deadline task with the components from the Save object.","lastModifiedDate":"2023-02-27"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"    public Deadline convertToDeadline() {","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"        return new Deadline(this.description, this.dueDate, this.isDone);","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"     * Converts the Save object into the appropriate task based on its taskType.","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return A new Task object with the components from the Save object.","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"     * @throws RuntimeException If the taskType is not one of [T], [E], or [D].","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"    public Task bucketConverter() {","lastModifiedDate":"2023-02-12"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"        if (taskType.equals(\"[T]\")){","lastModifiedDate":"2023-02-22"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"           return convertToTodo();","lastModifiedDate":"2023-02-12"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"        else if (taskType.equals(\"[E]\")){","lastModifiedDate":"2023-02-22"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"            return convertToEvent();","lastModifiedDate":"2023-02-12"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"        else if (taskType.equals(\"[D]\")){","lastModifiedDate":"2023-02-22"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"           return convertToDeadline();","lastModifiedDate":"2023-02-12"},{"lineNumber":74,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":75,"author":{"gitId":"T-Wan-Lin"},"content":"        else {","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"T-Wan-Lin"},"content":"            throw new RuntimeException(\"Unknown Task Type\");","lastModifiedDate":"2023-02-22"},{"lineNumber":77,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":79,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":80,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"T-Wan-Lin":80}},{"path":"src/main/java/chronos/savehandler/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.savehandler;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.tasktype.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"import java.nio.file.*;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"import java.io.*;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":" * The Storage class provides methods to read and write tasks to a file.","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":" * The file is stored as a plain text file. FOR CLARIFICATION: Stash is what is compiled during runtime,","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":" * Storage is saved in the hard disk","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"public class Storage {","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(Storage.class.getName());","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"    private static final String FILE \u003d \"./taskList.txt\";","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"     * Writes the given content to a file located at the specified path.","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param path the path of the file to write to","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param content the content to write to the file","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"    private static void writeToFile(String path, String content) {","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"            Path absolutePath \u003d Paths.get(path);","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"            Files.createDirectories(absolutePath.getParent());","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"            Files.writeString(absolutePath, content, StandardOpenOption.CREATE,","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"                    StandardOpenOption.TRUNCATE_EXISTING);","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        } catch (IOException error) {","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"            LOGGER.warning(\"Failed to write to file: \" + error.getMessage());","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"     * Reads the contents of the file located at the specified path.","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param path the path of the file to read from","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return the contents of the file as a string","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"    private static String readFromFile(String path) {","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"            return Files.readString(Paths.get(path));","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"        } catch (IOException error){","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"            LOGGER.warning(\"Failed to read from file: \" + error.getMessage());","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"            return \"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"     * Reads the saved tasks from the file and returns them as an ArrayList.","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return an ArrayList of saved tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"    public static ArrayList\u003cTask\u003e readSavedTasks(){","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"        String savedTask \u003d readFromFile(FILE);","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"        return savedTask.isEmpty() ? new ArrayList\u003c\u003e() :","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"                Arrays.stream(savedTask.split(\"\\n\"))","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"                        .map(Task::new)","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"                        .collect(Collectors.toCollection(ArrayList::new));","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"     * Saves the given tasks to the file.","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param tasks the tasks to save","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"    public static void saveTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"        StringBuilder savedTask \u003d new StringBuilder();","lastModifiedDate":"2023-02-12"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"            savedTask.append(task.toString()).append(\"\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"        writeToFile(FILE, savedTask.toString());","lastModifiedDate":"2023-02-12"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"T-Wan-Lin":73}},{"path":"src/main/java/chronos/tasktype/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.tasktype;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.savehandler.Save;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * Represents the Deadline type task, a subclass of Task","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"    //the deadline of the user-specified task","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"    private String due;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructs a new Deadline object","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param description The description of deadline task","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param due         The deadline of the task","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"    public Deadline(String description, String due) {","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"        super(description);","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"        if (due \u003d\u003d null) {","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"            throw new IllegalArgumentException(\"Please provide a due date.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"        this.due \u003d due;","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructs a new {@link Deadline} object to be used for writing to the hard-disk file","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param description   The description of the deadline task","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param due           The deadline of the task","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param isDone        The completion status of the task","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"    public Deadline(String description, String due, boolean isDone) {","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        super(isDone, description);","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"        if (due \u003d\u003d null) {","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"            throw new IllegalArgumentException(\"Please provide a due date.\");","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"        this.due \u003d due;","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"    public String getDue() {","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"        return due;","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"     * Formats the deadline task for display in the command line interface","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return The string representation of a deadline task","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"    public String toString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"        return String.format(\"[D] %s (DUE: %s)\", super.toString(), getDue());","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param taskType","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return The String representation of a deadline task in the plain text file","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"    public Save toSave(String taskType) {","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"        return new Save(taskType, isDone(), getDescription(), due, \"\", \"\");","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":62}},{"path":"src/main/java/chronos/tasktype/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.tasktype;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.savehandler.Save;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * Represents an Event type task, a subclass of Task","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"//more inheritance","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"    private String start; //start time of an event type task","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"    private String end; //end time of an event type task","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"     * Creates a new {@code Event} task with the specified description and start/end times.","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param description a description of the event","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param start the start time of the event, in string format","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param end the end time of the event, in string format","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"     * @throws IllegalArgumentException if either the start or end time is null","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"        super(description);","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"        if (start \u003d\u003d null || end \u003d\u003d null) {","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"            throw new IllegalArgumentException(\"Please provide BOTH start and end times.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"     * Creates a new {@code Event} task with the specified description, start/end times, and completion status.","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param description a description of the event","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param start the start time of the event, in string format","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param end the end time of the event, in string format","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param isDone the completion status of the task","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"     * @throws IllegalArgumentException if either the start or end time is null","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"    public Event(String description, String start, String end, boolean isDone) {","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"        super(isDone, description);","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"        if (start \u003d\u003d null || end \u003d\u003d null) {","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"            throw new IllegalArgumentException(\"Please provide BOTH start and end times.\");","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"    public String getStart() {","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"        return start;","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"    public String getEnd() {","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"        return end;","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"     * Returns a string representation of this {@code Event} task, in the format \"[E] [task description] (start: [start time] end: [end time])\".","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return a string representation of this event task","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"    public String toString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"        return String.format(\"[E] %s (start: %s end: %s)\", super.toString(), getStart(), getEnd());","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"     * Creates a {@code Save} object representing this {@code Event} task.","lastModifiedDate":"2023-02-27"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param taskType the type of task (i.e. \"E\" for Event)","lastModifiedDate":"2023-02-27"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return a Save object representing this Event task","lastModifiedDate":"2023-02-27"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"    public Save toSave(String taskType) {","lastModifiedDate":"2023-02-12"},{"lineNumber":74,"author":{"gitId":"T-Wan-Lin"},"content":"        return new Save(taskType, isDone(), getDescription(), \"\", start, end);","lastModifiedDate":"2023-02-12"},{"lineNumber":75,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":77}},{"path":"src/main/java/chronos/tasktype/Stash.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.tasktype;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.savehandler.Save;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.savehandler.Storage;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"//this class stores all the tasks","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"public class Stash {","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructs a new, empty {@code Stash} object.","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"    public Stash() {","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();;","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"     * Adds a new task to this {@code Stash}.","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param task the task to add","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"    public void addNewTask(Task task) {","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"     * Adds a specified number of copies of the given task to this {@code Stash}.","lastModifiedDate":"2023-02-27"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param count the number of copies to add","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param task the task to add","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"    public void generateTask(int count, Task task){","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"     * Returns the task at the specified index in this {@code Stash}.","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param index the index of the task to retrieve","lastModifiedDate":"2023-02-27"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return the task at the specified index","lastModifiedDate":"2023-02-27"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"     * @throws IndexOutOfBoundsException if the index is out of range (index \u003c 0 || index \u003e\u003d size())","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"     * Deletes the task at the specified index from this {@code Stash}.","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param index the index of the task to delete","lastModifiedDate":"2023-02-27"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"     * @throws IndexOutOfBoundsException if the index is out of range (index \u003c 0 || index \u003e\u003d size())","lastModifiedDate":"2023-02-27"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"    public void deleteTask(int index){","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"     * Returns the number of tasks in this {@code Stash}.","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return the number of tasks in this {@code Stash}","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"    public int ObtainTaskCount() {","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"        int curr \u003d this.tasks.size();","lastModifiedDate":"2023-02-12"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"        return curr;","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"     * Prints all the tasks in this {@code Stash} to the console, followed by the","lastModifiedDate":"2023-02-27"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"     * number of tasks in the Stash.","lastModifiedDate":"2023-02-27"},{"lineNumber":74,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":75,"author":{"gitId":"T-Wan-Lin"},"content":"    public void printTasks() {","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"T-Wan-Lin"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"T-Wan-Lin"},"content":"            System.out.printf(\" %s\", task.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":78,"author":{"gitId":"T-Wan-Lin"},"content":"            System.out.print(\"\\n\");","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.printf(\"Currently, you have %d tasks(s) in your ToDo list.\", ObtainTaskCount());","lastModifiedDate":"2023-02-12"},{"lineNumber":81,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"T-Wan-Lin"},"content":"     * Searches for all tasks in this {@code Stash} whose description contains the","lastModifiedDate":"2023-02-27"},{"lineNumber":85,"author":{"gitId":"T-Wan-Lin"},"content":"     * specified keyword, and prints their string representations to the console.","lastModifiedDate":"2023-02-27"},{"lineNumber":86,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":87,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param keyword the keyword to search for in task descriptions","lastModifiedDate":"2023-02-27"},{"lineNumber":88,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":89,"author":{"gitId":"T-Wan-Lin"},"content":"    public void searchTask(String keyword){","lastModifiedDate":"2023-02-27"},{"lineNumber":90,"author":{"gitId":"T-Wan-Lin"},"content":"        for (Task task: tasks){","lastModifiedDate":"2023-02-27"},{"lineNumber":91,"author":{"gitId":"T-Wan-Lin"},"content":"            if (task.getDescription().contains(keyword)){","lastModifiedDate":"2023-02-27"},{"lineNumber":92,"author":{"gitId":"T-Wan-Lin"},"content":"                System.out.printf(\" %s\", task.toString());","lastModifiedDate":"2023-02-27"},{"lineNumber":93,"author":{"gitId":"T-Wan-Lin"},"content":"            }","lastModifiedDate":"2023-02-27"},{"lineNumber":94,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-27"},{"lineNumber":95,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-27"},{"lineNumber":96,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":97,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":98,"author":{"gitId":"T-Wan-Lin"},"content":"     * Saves the list of tasks to a file. Each task is converted to a Save object and stored in an ArrayList.","lastModifiedDate":"2023-02-27"},{"lineNumber":99,"author":{"gitId":"T-Wan-Lin"},"content":"     * The Save objects are then passed to the Storage class for saving to file.","lastModifiedDate":"2023-02-27"},{"lineNumber":100,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":101,"author":{"gitId":"T-Wan-Lin"},"content":"    public void saveTasksToFile() {","lastModifiedDate":"2023-02-12"},{"lineNumber":102,"author":{"gitId":"T-Wan-Lin"},"content":"        ArrayList\u003cSave\u003e saveTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-12"},{"lineNumber":103,"author":{"gitId":"T-Wan-Lin"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":104,"author":{"gitId":"T-Wan-Lin"},"content":"            if (task instanceof Todo) {","lastModifiedDate":"2023-02-12"},{"lineNumber":105,"author":{"gitId":"T-Wan-Lin"},"content":"                Todo todo \u003d (Todo) task;","lastModifiedDate":"2023-02-12"},{"lineNumber":106,"author":{"gitId":"T-Wan-Lin"},"content":"                saveTasks.add(new Save(\"[T]\", todo.isDone(), todo.getDescription(), \"\", \"\", \"\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":107,"author":{"gitId":"T-Wan-Lin"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2023-02-12"},{"lineNumber":108,"author":{"gitId":"T-Wan-Lin"},"content":"                Event event \u003d (Event) task;","lastModifiedDate":"2023-02-12"},{"lineNumber":109,"author":{"gitId":"T-Wan-Lin"},"content":"                saveTasks.add(new Save(\"[E]\", event.isDone(), event.getDescription(), \"\", event.getStart(), event.getEnd()));","lastModifiedDate":"2023-02-12"},{"lineNumber":110,"author":{"gitId":"T-Wan-Lin"},"content":"            } else if (task instanceof Deadline) {","lastModifiedDate":"2023-02-12"},{"lineNumber":111,"author":{"gitId":"T-Wan-Lin"},"content":"                Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2023-02-12"},{"lineNumber":112,"author":{"gitId":"T-Wan-Lin"},"content":"                saveTasks.add(new Save(\"[D]\", deadline.isDone(), deadline.getDescription(), deadline.getDue(), \"\", \"\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":113,"author":{"gitId":"T-Wan-Lin"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":114,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":115,"author":{"gitId":"T-Wan-Lin"},"content":"        Storage.saveTasks(saveTasks.stream().map(Save::bucketConverter).collect(Collectors.toCollection(ArrayList::new)));","lastModifiedDate":"2023-02-12"},{"lineNumber":116,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":117,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":118,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":119,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":120,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":120}},{"path":"src/main/java/chronos/tasktype/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.tasktype;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.savehandler.*;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":" *","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"public class Task {","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"    private boolean isDone;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"    private String description;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructs a new Task Object","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param isDone        The complete status of the task","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param description   The details of the","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"    public Task(boolean isDone, String description) {","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"     * Creates a new Task Object","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param description               The details of the task","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"     * @throws IllegalArgumentException If the user does not provide any description,","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"     *                                  Chronos will prompt the user to do so","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"    public Task(String description){","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"        if (description \u003d\u003d null){","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"            throw new IllegalArgumentException(\"This field cannot be empty.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"    public String getDescription() {","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"        return description;","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"    public boolean isDone(){","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"        return isDone;","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"     * Returns a character symbol to represent the completion status of a task","lastModifiedDate":"2023-02-27"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"     * If the task is marked as done, the symbol will be a checked box (\u0027√\u0027);","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"     *  * otherwise, the symbol will be an empty box (\u0027□\u0027).","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return a character symbol representing the completion status of a task","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"    public char setCheckMark() {","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"        char icon \u003d \u0027□\u0027;","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"        if (this.isDone \u003d\u003d true) {","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"            icon \u003d \u0027√\u0027;","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"        return icon;","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"     * Toggles the completion status of a task, if the task is currently marked","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"     * as done, it will be marked as not done; if it\u0027s not done, it will be","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"     * marked as done.","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"    public void toggleDone(){","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"        this.isDone \u003d !this.isDone;","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"     * Returns a string representation of a task, including its completion status","lastModifiedDate":"2023-02-27"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"     * (represented by a checkmark symbol) and its description.","lastModifiedDate":"2023-02-27"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return a string representation of the task","lastModifiedDate":"2023-02-27"},{"lineNumber":74,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"T-Wan-Lin"},"content":"    public String toString(){","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"T-Wan-Lin"},"content":"        return String.format(\"%c %s\", setCheckMark(), getDescription());","lastModifiedDate":"2023-02-05"},{"lineNumber":78,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":81,"author":{"gitId":"T-Wan-Lin"},"content":"     * Creates a new instance of the {@code Save} class, using the current task\u0027s","lastModifiedDate":"2023-02-27"},{"lineNumber":82,"author":{"gitId":"T-Wan-Lin"},"content":"     * properties (description and completion status) and the specified task type.","lastModifiedDate":"2023-02-27"},{"lineNumber":83,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param taskType the type of task to be saved (e.g. \"todo\", \"deadline\", \"event\")","lastModifiedDate":"2023-02-27"},{"lineNumber":85,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return a new instance of the {@code Save} class representing the current task","lastModifiedDate":"2023-02-27"},{"lineNumber":86,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":87,"author":{"gitId":"T-Wan-Lin"},"content":"    public Save toSave(String taskType) {","lastModifiedDate":"2023-02-12"},{"lineNumber":88,"author":{"gitId":"T-Wan-Lin"},"content":"        return new Save(taskType, isDone, description, \"\", \"\", \"\");","lastModifiedDate":"2023-02-12"},{"lineNumber":89,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":90}},{"path":"src/main/java/chronos/tasktype/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.tasktype;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.savehandler.Save;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" * Represents a Todo type of task, subclass of Task","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"public class Todo extends Task{","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructs a new Todo object","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param description The description of the task","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"        super(description);","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"     * Creates a new instance of the {@code Todo} class with the specified completion status","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"     * and description.","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param isDone whether the task is completed (true) or not (false)","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param description a string describing the task","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"    public Todo(boolean isDone, String description) {","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"        super(isDone, description);","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"     * Returns a string representation of the {@code Todo} task, including its","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"     * task type (enclosed in square brackets) and its description and completion status.","lastModifiedDate":"2023-02-27"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return a string representation of the task","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"    public String toString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"        return String.format(\"[T] %s\", super.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"     * Creates a new instance of the {@code Save} class, using the current task\u0027s","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"     * properties (description and completion status) and the specified task type.","lastModifiedDate":"2023-02-27"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param taskType the type of task to be saved (e.g. \"todo\", \"deadline\", \"event\")","lastModifiedDate":"2023-02-27"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return a new instance of the {@code Save} class representing the current task","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"    public Save toSave(String taskType) {","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"        return new Save(taskType, isDone(), getDescription(), \"\", \"\", \"\");","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":51}},{"path":"src/main/java/chronos/timer/Break.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.timer;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.TimerTask;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * Represents a Break type timer, subclass of TimerTask","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"public class Break extends TimerTask{","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"     * Prints out a string that informs the users that the 5-minute break timer is running","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-02-06"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"    public void run() {","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Break time!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":16}},{"path":"src/main/java/chronos/timer/Clock.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.timer;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.Timer;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"public class Clock {","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"    /** workDuration is the time taken for the user to be productive*/","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"    protected static int workDuration \u003d 25 * 60 * 1000; // 25 minutes in milliseconds","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"    /** breakDuration is the time taken for the user to rest after they trigger the break timer*/","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"    protected static int breakDuration \u003d 5 * 60 * 1000; // 5 minutes in milliseconds","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"    static Timer timer;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"     * Initialises a new Clock object","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"    public Clock() {","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"        timer \u003d new Timer();","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"     * Triggers the 25 minutes work timer","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"    public void startWork() {","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"        timer.schedule(new WorkTask(), 0, workDuration);","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"     * Triggers the 5 minutes break timer","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"    public void startBreak() {","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        timer.schedule(new Break(), 0, breakDuration);","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"     * Cancels all clocks and application would resume as per normal","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"    public void cancelClock() {","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"        timer.cancel();","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":41}},{"path":"src/main/java/chronos/timer/WorkTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.timer;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.TimerTask;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" * Represents a WorkTask type of clock, subclass of TimerTask","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"public class WorkTask extends TimerTask{","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"     * Prints out a string to inform users that the Work timer is running","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    public void run() {","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Time to start work\");","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"T-Wan-Lin":17}},{"path":"src/main/java/chronos/userinterface/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.userinterface;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.commandhandler.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.commandhandler.InputParser;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.inoutput.Input;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.inoutput.Output;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.savehandler.Storage;","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.tasktype.Event;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.tasktype.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.tasktype.Stash;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.tasktype.Deadline;","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.tasktype.Todo;","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.exceptions.ChronosExceptions;","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.timer.Clock;","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":" * TaskManager class manages the input commands and the task stash.","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"public class TaskManager {","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"    private static Input inOut;","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"    private static Stash stash;","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructor for TaskManager class.","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param inOut The Input object used for input/output operations.","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param stash The Stash object used to store tasks.","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"    public TaskManager(Input inOut, Stash stash) {","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        this.inOut \u003d inOut;","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"        this.stash \u003d stash;","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"     * Adds a new task to the stash and prints a message indicating that the task was added","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param task the task to be added","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"    public void addNew(Task task) {","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"        stash.addNewTask(task);","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"        Output.printNewTask(task, stash.ObtainTaskCount());","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"     * Deletes a task from the task list based on the user input details.","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param details the details of the task to be deleted.","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"     * @throws ChronosExceptions.InvalidInputException if the input is invalid.","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"   public void deleteTask(String details) throws ChronosExceptions.InvalidInputException {","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"       try {","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"           int index \u003d Integer.parseInt(details) - 1;","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"           Task task \u003d stash.getTask(index);","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"           stash.deleteTask(index);","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"           //Output.printIsDone(stash, index);","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"           Output.printDeletedTask(task, stash.ObtainTaskCount());","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"       } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"           System.out.println(\"The index you have entered is invalid\");","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"       }","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"   }","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"     * Toggles the status of a task.","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param details the index of the task to toggle the status of","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"    public void toggleTaskStatus(String details) {","lastModifiedDate":"2023-02-10"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"            int index \u003d Integer.parseInt(details) - 1;","lastModifiedDate":"2023-02-10"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"            Task task \u003d stash.getTask(index);","lastModifiedDate":"2023-02-10"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"            task.toggleDone();","lastModifiedDate":"2023-02-10"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"            Output.printIsDone(stash, index);","lastModifiedDate":"2023-02-10"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"            System.out.println(\"The index you have entered is invalid\");","lastModifiedDate":"2023-02-10"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":74,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":75,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":76,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":77,"author":{"gitId":"T-Wan-Lin"},"content":"     * This method starts the timer module which allows users to keep track of their work and break times.","lastModifiedDate":"2023-02-27"},{"lineNumber":78,"author":{"gitId":"T-Wan-Lin"},"content":"     * Users can start a work session and then press Enter to start a break, or type \u0027cancel\u0027 to stop the timer.","lastModifiedDate":"2023-02-27"},{"lineNumber":79,"author":{"gitId":"T-Wan-Lin"},"content":"     * @throws IllegalStateException if the timer cannot be started","lastModifiedDate":"2023-02-27"},{"lineNumber":80,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":81,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":82,"author":{"gitId":"T-Wan-Lin"},"content":"    public void  timerModule() {","lastModifiedDate":"2023-02-10"},{"lineNumber":83,"author":{"gitId":"T-Wan-Lin"},"content":"        Scanner timerCommand \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-10"},{"lineNumber":84,"author":{"gitId":"T-Wan-Lin"},"content":"        Clock clock \u003d new Clock();","lastModifiedDate":"2023-02-10"},{"lineNumber":85,"author":{"gitId":"T-Wan-Lin"},"content":"        clock.startWork();","lastModifiedDate":"2023-02-10"},{"lineNumber":86,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Press Enter to start a break, or type \u0027cancel\u0027 to stop the timer: \");","lastModifiedDate":"2023-02-10"},{"lineNumber":87,"author":{"gitId":"T-Wan-Lin"},"content":"        while (timerCommand.hasNextLine()) {","lastModifiedDate":"2023-02-10"},{"lineNumber":88,"author":{"gitId":"T-Wan-Lin"},"content":"            String line \u003d timerCommand.nextLine();","lastModifiedDate":"2023-02-10"},{"lineNumber":89,"author":{"gitId":"T-Wan-Lin"},"content":"            if (line.equals(\"cancel\")) {","lastModifiedDate":"2023-02-10"},{"lineNumber":90,"author":{"gitId":"T-Wan-Lin"},"content":"                clock.cancelClock();","lastModifiedDate":"2023-02-10"},{"lineNumber":91,"author":{"gitId":"T-Wan-Lin"},"content":"                break;","lastModifiedDate":"2023-02-10"},{"lineNumber":92,"author":{"gitId":"T-Wan-Lin"},"content":"            } else {","lastModifiedDate":"2023-02-10"},{"lineNumber":93,"author":{"gitId":"T-Wan-Lin"},"content":"                clock.startBreak();","lastModifiedDate":"2023-02-10"},{"lineNumber":94,"author":{"gitId":"T-Wan-Lin"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":95,"author":{"gitId":"T-Wan-Lin"},"content":"            timerCommand.close();","lastModifiedDate":"2023-02-10"},{"lineNumber":96,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":97,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":98,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":99,"author":{"gitId":"T-Wan-Lin"},"content":"     * This method continuously reads input from the user and executes the corresponding action.","lastModifiedDate":"2023-02-27"},{"lineNumber":100,"author":{"gitId":"T-Wan-Lin"},"content":"     * The method will keep running until the user enters the \"done\" command.","lastModifiedDate":"2023-02-27"},{"lineNumber":101,"author":{"gitId":"T-Wan-Lin"},"content":"     * @throws ChronosExceptions.InvalidInputException if the user enters an invalid input","lastModifiedDate":"2023-02-27"},{"lineNumber":102,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":103,"author":{"gitId":"T-Wan-Lin"},"content":"    public void inputCommands() {","lastModifiedDate":"2023-02-10"},{"lineNumber":104,"author":{"gitId":"T-Wan-Lin"},"content":"        while (true) {","lastModifiedDate":"2023-02-10"},{"lineNumber":105,"author":{"gitId":"T-Wan-Lin"},"content":"            try {","lastModifiedDate":"2023-02-12"},{"lineNumber":106,"author":{"gitId":"T-Wan-Lin"},"content":"                Command userCommand \u003d InputParser.parseInput(inOut.readInput());","lastModifiedDate":"2023-02-10"},{"lineNumber":107,"author":{"gitId":"T-Wan-Lin"},"content":"                String category \u003d userCommand.getAction();","lastModifiedDate":"2023-02-10"},{"lineNumber":108,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":109,"author":{"gitId":"T-Wan-Lin"},"content":"                switch (category) {","lastModifiedDate":"2023-02-10"},{"lineNumber":110,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"list\":","lastModifiedDate":"2023-02-10"},{"lineNumber":111,"author":{"gitId":"T-Wan-Lin"},"content":"                    Output.printList(stash);","lastModifiedDate":"2023-02-10"},{"lineNumber":112,"author":{"gitId":"T-Wan-Lin"},"content":"                    continue;","lastModifiedDate":"2023-02-10"},{"lineNumber":113,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"mark\":","lastModifiedDate":"2023-02-10"},{"lineNumber":114,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"unmark\":","lastModifiedDate":"2023-02-10"},{"lineNumber":115,"author":{"gitId":"T-Wan-Lin"},"content":"                    toggleTaskStatus(userCommand.getDetails());","lastModifiedDate":"2023-02-10"},{"lineNumber":116,"author":{"gitId":"T-Wan-Lin"},"content":"                    continue;","lastModifiedDate":"2023-02-10"},{"lineNumber":117,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"help\":","lastModifiedDate":"2023-02-10"},{"lineNumber":118,"author":{"gitId":"T-Wan-Lin"},"content":"                    Output.printHelp();","lastModifiedDate":"2023-02-10"},{"lineNumber":119,"author":{"gitId":"T-Wan-Lin"},"content":"                    continue;","lastModifiedDate":"2023-02-10"},{"lineNumber":120,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"todo\":","lastModifiedDate":"2023-02-10"},{"lineNumber":121,"author":{"gitId":"T-Wan-Lin"},"content":"                    addNew(new Todo(userCommand.getDetails()));","lastModifiedDate":"2023-02-10"},{"lineNumber":122,"author":{"gitId":"T-Wan-Lin"},"content":"                    continue;","lastModifiedDate":"2023-02-10"},{"lineNumber":123,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"delete\":","lastModifiedDate":"2023-02-12"},{"lineNumber":124,"author":{"gitId":"T-Wan-Lin"},"content":"                    deleteTask(userCommand.getDetails());","lastModifiedDate":"2023-02-12"},{"lineNumber":125,"author":{"gitId":"T-Wan-Lin"},"content":"                    continue;","lastModifiedDate":"2023-02-12"},{"lineNumber":126,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"event\":","lastModifiedDate":"2023-02-10"},{"lineNumber":127,"author":{"gitId":"T-Wan-Lin"},"content":"                    addNew(new Event(userCommand.getDetails(), userCommand.getStart(), userCommand.getEnd()));","lastModifiedDate":"2023-02-10"},{"lineNumber":128,"author":{"gitId":"T-Wan-Lin"},"content":"                    continue;","lastModifiedDate":"2023-02-10"},{"lineNumber":129,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"deadline\":","lastModifiedDate":"2023-02-10"},{"lineNumber":130,"author":{"gitId":"T-Wan-Lin"},"content":"                    addNew(new Deadline((userCommand.getDetails()), userCommand.getDue()));","lastModifiedDate":"2023-02-10"},{"lineNumber":131,"author":{"gitId":"T-Wan-Lin"},"content":"                    continue;","lastModifiedDate":"2023-02-10"},{"lineNumber":132,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"find\":","lastModifiedDate":"2023-02-25"},{"lineNumber":133,"author":{"gitId":"T-Wan-Lin"},"content":"                    Output.printSearchResults(stash, userCommand.getDetails());","lastModifiedDate":"2023-02-25"},{"lineNumber":134,"author":{"gitId":"T-Wan-Lin"},"content":"                    continue;","lastModifiedDate":"2023-02-25"},{"lineNumber":135,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"done\":","lastModifiedDate":"2023-02-10"},{"lineNumber":136,"author":{"gitId":"T-Wan-Lin"},"content":"                    System.out.println(\"Bye bye, hope to see you some time soon!\");","lastModifiedDate":"2023-02-10"},{"lineNumber":137,"author":{"gitId":"T-Wan-Lin"},"content":"                    return;","lastModifiedDate":"2023-02-10"},{"lineNumber":138,"author":{"gitId":"T-Wan-Lin"},"content":"                case \"timer\":","lastModifiedDate":"2023-02-10"},{"lineNumber":139,"author":{"gitId":"T-Wan-Lin"},"content":"                    timerModule();","lastModifiedDate":"2023-02-10"},{"lineNumber":140,"author":{"gitId":"T-Wan-Lin"},"content":"                    continue;","lastModifiedDate":"2023-02-10"},{"lineNumber":141,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":142,"author":{"gitId":"T-Wan-Lin"},"content":"                default:","lastModifiedDate":"2023-02-10"},{"lineNumber":143,"author":{"gitId":"T-Wan-Lin"},"content":"                    System.out.println(\"Sorry, I do not understand the input at this point in time.\");","lastModifiedDate":"2023-02-10"},{"lineNumber":144,"author":{"gitId":"T-Wan-Lin"},"content":"                }","lastModifiedDate":"2023-02-10"},{"lineNumber":145,"author":{"gitId":"T-Wan-Lin"},"content":"            } catch(ChronosExceptions.InvalidInputException exceptions){","lastModifiedDate":"2023-02-12"},{"lineNumber":146,"author":{"gitId":"T-Wan-Lin"},"content":"                System.out.println(\"\\\"Sorry, I do not understand the input at this point in time.\\\"\");","lastModifiedDate":"2023-02-27"},{"lineNumber":147,"author":{"gitId":"T-Wan-Lin"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":148,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":149,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":150,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":151,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"T-Wan-Lin":151}},{"path":"src/main/java/chronos/userinterface/UserHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package chronos.userinterface;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import chronos.inoutput.Input;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * The UserHandler class is responsible for getting the user\u0027s name and displaying a welcome message","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" * with the option to view their To-Do list.","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"public class UserHandler {","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"    private static Input inOut;","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructs a UserHandler object with an Input object.","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param inOut the Input object used to get user input","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"    public UserHandler(Input inOut) {","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"        this.inOut \u003d inOut;","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"     * Prompts the user to enter their name and displays a welcome message","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"     * with the option to view their To-Do list.","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"    public void getUserName() {","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"What is your name? (Please enter name)\\n\");","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"        String userName \u003d inOut.readInput();","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Hello, \" + userName + \". You may enter \u0027list\u0027 to view your current To-Do list.\");","lastModifiedDate":"2023-02-10"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"T-Wan-Lin":29}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"javac  -cp ..\\src\\chronos\\java -Xlint:none -d ..\\bin ..\\src\\chronos\\java\\*.java","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"java -classpath ..\\bin Chronos \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"T-Wan-Lin":2,"-":19}}]
