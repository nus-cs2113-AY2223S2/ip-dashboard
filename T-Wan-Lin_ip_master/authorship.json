[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":" ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"|  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"| | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"| |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"|____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"T-Wan-Lin":1,"-":24}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"     * The main method is the entry point of the program. It prompts the user for their name,","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"     * instantiates a TaskMaster object, and handles user commands.","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param args Command-line arguments passed to the program.","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"        showWelcomeMessage();","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"        showHelpMessage();","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"        IO inOut \u003d new IO();","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"        String userName \u003d getUserName(inOut);","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"        TaskMaster compileItems \u003d new TaskMaster();","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"        instantiateList(inOut, userName, compileItems);","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"     * The markAsDone method marks a task as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param compileItems The TaskMaster object that contains the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param index        The index of the task to mark as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"    static void markAsDone(TaskMaster compileItems, int index) {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        TaskManager toBeDone \u003d compileItems.getTask(index);","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        boolean hasDukeMarked \u003d toBeDone.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"        if (hasDukeMarked \u003d\u003d true) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"            System.out.println(\"You have completed this task. Good job!!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"            System.out.println(\"This task has been marked before. Go on to another task.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"        toBeDone.printTaskAndStatus(index);","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"     * The markAsNotDone method marks a task as not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param compileItems The TaskMaster object that contains the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param index        The index of the task to mark as not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"    static void markAsNotDone(TaskMaster compileItems, int index) {","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"        TaskManager toBeDone \u003d compileItems.getTask(index);","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"        boolean hasDukeUnMarked \u003d toBeDone.markAsUndone();","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"        if (hasDukeUnMarked \u003d\u003d true) {","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"            System.out.println(\"I would strongly encourage you to start on this.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"            System.out.println(\"This task was never completed. I would strongly encourage you to start on it.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"        toBeDone.printTaskAndStatus(index);","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"     * The instantiateList method handles user commands and updates the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param inOut        The IO object used for reading user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param userName     The name of the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param compileItems The TaskMaster object that contains the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"    private static void instantiateList(IO inOut, String userName, TaskMaster compileItems) {","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"        while (true) {","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"            String userCommand \u003d inOut.readInput();","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"            //change to switch case","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"            switch (userCommand) {","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"            case (\"Done\"):","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"                System.out.println(\"Bye, \" + userName + \".\" + \" Hope to see you again soon!\\n\");","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"T-Wan-Lin"},"content":"                return;","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"T-Wan-Lin"},"content":"            case (\"See list\"):","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"T-Wan-Lin"},"content":"                seeList(compileItems);","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"T-Wan-Lin"},"content":"                continue;","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"T-Wan-Lin"},"content":"            case (\"Help\"):","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"T-Wan-Lin"},"content":"                showHelpMessage();","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"T-Wan-Lin"},"content":"                continue;","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"T-Wan-Lin"},"content":"            default:","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"T-Wan-Lin"},"content":"                if (userCommand.startsWith(\"mark\") || userCommand.startsWith(\"unmark\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"T-Wan-Lin"},"content":"                    String[] substring \u003d userCommand.split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"T-Wan-Lin"},"content":"                    int index \u003d Integer.parseInt(substring[1]) - 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"T-Wan-Lin"},"content":"                    if (substring[0].equals(\"mark\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"T-Wan-Lin"},"content":"                        markAsDone(compileItems, index);","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"T-Wan-Lin"},"content":"                    } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"T-Wan-Lin"},"content":"                        markAsNotDone(compileItems, index);","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"T-Wan-Lin"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"T-Wan-Lin"},"content":"                    continue;","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"T-Wan-Lin"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"T-Wan-Lin"},"content":"                compileItems.addNewItem(userCommand);","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"T-Wan-Lin"},"content":"                System.out.println(\"Understood. Added task: \" + userCommand + \".\" + \" Anything else?\");","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"T-Wan-Lin"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"T-Wan-Lin"},"content":"    private static void seeList(TaskMaster compileItems) {","lastModifiedDate":"2023-01-29"},{"lineNumber":102,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Understood. Retrieving To-Do list...\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"T-Wan-Lin"},"content":"        compileItems.printList();","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Would you like to add more tasks? Enter \u0027Done\u0027 if you are satisfied with this list.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"T-Wan-Lin"},"content":"    private static String getUserName(IO inOut) {","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"What is your name? (Please enter name)\\n\");","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"T-Wan-Lin"},"content":"        String userName \u003d inOut.readInput();","lastModifiedDate":"2023-01-28"},{"lineNumber":111,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Hello, \" + userName + \". You may enter \u0027See list\u0027 to view your current To-Do list.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":112,"author":{"gitId":"T-Wan-Lin"},"content":"        return userName;","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"T-Wan-Lin"},"content":"    private static void showHelpMessage() {","lastModifiedDate":"2023-01-29"},{"lineNumber":116,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":117,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Here are some useful commands to get you started!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":119,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"\u0027See list\u0027: Take a look at your To-Do list to get your day started!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":120,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"\u0027mark \u003ctask number\u003e\u0027: Marks task as done. Try entering \u0027mark 1\u0027 to mark your first task as done!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":121,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"\u0027unmark \u003ctask_number\u003e\u0027: Unmarks task as not done. Try entering \u0027unmark 1\u0027 to mark your first task as not done.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":122,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"\u0027Help\u0027: If you forgot how to use me, don\u0027t be afraid to ask!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"To add a task, enter a description of said task and I will add it into the list for you :) \\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":124,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"T-Wan-Lin"},"content":"    private static void showWelcomeMessage() {","lastModifiedDate":"2023-01-28"},{"lineNumber":128,"author":{"gitId":"T-Wan-Lin"},"content":"        String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\" + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-01-28"},{"lineNumber":130,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.println(\"Hello! I\u0027m Duke, your personal assistant.\\n\");","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"T-Wan-Lin":128,"-":5}},{"path":"src/main/java/IO.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":" * The IO class is responsible for handling user inputs for the program.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * It uses a Scanner object to read input from the user, and provides a","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":" * readInput() method to retrieve the input as a string.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":" * \"\u003e\u003e\" is used as a prompt for the user to enter their next command.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"public class IO {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"    private Scanner toRead;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"     * The constructor IO creates a new instance of the class and initializes","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"     * a Scanner object to read input from the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"    public IO() {","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"        this.toRead \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"     * The readInput() method retrieves a line of input from the user and returns it as a string.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return A string containing the input entered by the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"    public String readInput() {","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.print(\"\u003e\u003e \");","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"        return toRead.nextLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"T-Wan-Lin":32}},{"path":"src/main/java/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"//mark tasks as done/undone","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":" * The TaskManager class is used to manage tasks, allowing them to be marked as done or undone.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * It contains a String variable to store the task description and a boolean variable to keep track of whether the task is done or not.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":" * The class has methods to mark a task as done or undone, get the task description,","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":" * set a checkmark icon (√ or □) based on the task status, and print the task with its index and status.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"public class TaskManager {","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    private String aboutTask;","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"     * The constructor TaskManager creates a new instance of the class and initializes","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"     * the task description and sets isDone as false by default.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param aboutTask A string containing the task description.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"    public TaskManager(String aboutTask) {","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"        this.aboutTask \u003d aboutTask;","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"        //unless explicitly marked by user with Mark command, false by default","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"     * The getAboutTask() method returns the task description.","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return A string containing the task description.","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"    public String getAboutTask() {","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"        return aboutTask;","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"     * The markAsDone() method marks the task as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return A boolean value indicating whether the task was marked as done successfully.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"     * Returns false if the task is already marked as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"    public boolean markAsDone() {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"        //if it has already been marked once, don\u0027t remark it again. it makes the program\u0027s output strange","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"        if (this.isDone \u003d\u003d true) {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"            return false;","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"            return true;","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"     * The markAsUndone() method marks the task as undone.","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return A boolean value indicating whether the task was marked as undone successfully.","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"     * Returns false if the task is already marked as undone.","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"    public boolean markAsUndone() {","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"        if (this.isDone \u003d\u003d false) {","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"T-Wan-Lin"},"content":"            return false;","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"T-Wan-Lin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"T-Wan-Lin"},"content":"        return true;","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"T-Wan-Lin"},"content":"     * The setCheckMark() method sets a checkmark icon (√ or □) based on the task status.","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return A character representing the checkmark icon (√ or □).","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"T-Wan-Lin"},"content":"    public char setCheckMark() {","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"T-Wan-Lin"},"content":"        //false is empty box, too lazy to do the [X]","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"T-Wan-Lin"},"content":"        char icon \u003d \u0027□\u0027;","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"T-Wan-Lin"},"content":"        if (this.isDone \u003d\u003d true) {","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"T-Wan-Lin"},"content":"            icon \u003d \u0027√\u0027;","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"T-Wan-Lin"},"content":"        return icon;","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"T-Wan-Lin"},"content":"     * The printTaskAndStatus() method prints the task with its index and status.","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"T-Wan-Lin"},"content":"     * Acknowledgement: https://www.baeldung.com/java-printstream-printf","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param index An integer representing the index of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"T-Wan-Lin"},"content":"    public void printTaskAndStatus(int index) {","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"T-Wan-Lin"},"content":"        System.out.printf(\"%d: %c %s %n\", index + 1, setCheckMark(), getAboutTask());","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"T-Wan-Lin":93}},{"path":"src/main/java/TaskMaster.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":" * The TaskMaster class is responsible for managing and storing the tasks that are added by the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * It uses an array of TaskManager objects to store the tasks and provides methods for adding new tasks,","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":" * getting a specific task, and printing the list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"public class TaskMaster {","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"    //initialise an array to store the tasks","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"    private TaskManager[] toDo;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"     * Constructor for TaskMaster class. It initializes the array for storing tasks with a default size of 0.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"    public TaskMaster() {","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"        this.toDo \u003d new TaskManager[0];","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"T-Wan-Lin"},"content":"     * Method for adding a new task to the list of tasks. It takes a string as an input representing the task to be added.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"T-Wan-Lin"},"content":"     * The size of the array is increased by 1 and the new task is added to the end of the array.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param toAdd the task to be added to the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"    public void addNewItem(String toAdd) {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"        //instead of a fixed sized array, use an array that \u0027dynamically\u0027 increases in size for every task added","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"        int listLength \u003d toDo.length;","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"        this.toDo \u003d Arrays.copyOf(this.toDo, listLength + 1);","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"        this.toDo[listLength] \u003d new TaskManager(toAdd);","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"     * Method for getting a specific task from the list of tasks. It takes an integer as an input representing the index of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param index the index of the task to be retrieved.","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return the TaskManager object representing the task at the given index.","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"    public TaskManager getTask(int index) {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"T-Wan-Lin"},"content":"        return this.toDo[index];","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"T-Wan-Lin"},"content":"     * Method for printing the list of tasks. It prints a message if the list is empty.","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"T-Wan-Lin"},"content":"     * If not, it iterates through the array of tasks, printing each one along with its status.","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"    public void printList() {","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"        //this is only for UX purposes","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"T-Wan-Lin"},"content":"        if (this.toDo.length \u003d\u003d 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"T-Wan-Lin"},"content":"            System.out.println(\"Hm... It looks like you have not added any tasks.\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"        for (int i \u003d 0; i \u003c this.toDo.length; i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"            this.toDo[i].printTaskAndStatus(i);","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"T-Wan-Lin":57}}]
