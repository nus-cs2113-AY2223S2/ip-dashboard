[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"# Duke.Duke project template","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"douph810975"},"content":"3. After that, locate the `src/main/java/Duke.Duke.java` file, right-click it, and choose `Run Duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"douph810975":2,"-":22}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"This project, \u0027Duke\u0027, is","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"a Personal Assistant Chatbot that helps a person ","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":"to keep track of various things.","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"### Feature- 3 types of tasks","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"douph810975"},"content":"1. Todo. A todo is a task with description.","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"douph810975"},"content":"2. Deadline. A deadline is a task with description and a deadline.","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"douph810975"},"content":"3. Event. An event is a task with description, a start time and an end time.","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"douph810975"},"content":"### `Function` - List:","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"douph810975"},"content":"show the list of all the tasks added.","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"douph810975"},"content":"### `Function` - Add: ","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"douph810975"},"content":"add a task of todo, deadline or event type.","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"douph810975"},"content":"`Format:`","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"douph810975"},"content":"\u0027todo\u0027 + task description","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"douph810975"},"content":"\u0027deadline\u0027 + task description + /by + end time","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"douph810975"},"content":"\u0027event\u0027 + task description + /from +start time + by/ + end time","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"douph810975"},"content":"Example of usage (Sample input): ","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"douph810975"},"content":"`todo read book`","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"douph810975"},"content":"`deadline return book /by 3pm`","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"douph810975"},"content":"`event meeting /from 4pm /to 5pm`","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"douph810975"},"content":"Expected outcome:","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"douph810975"},"content":"list:","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"douph810975"},"content":"1.[T][ ]read book","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"douph810975"},"content":"2.[D][ ]return book /by 3pm","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"douph810975"},"content":"3.[E][ ]meeting /from 4pm /to 5pm`","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"douph810975"},"content":"### `Function` - mark/unmark","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"douph810975"},"content":"mark a task as done, or unmark a task as not done yet.","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"douph810975"},"content":"Example of usage (Sample input):","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"douph810975"},"content":"`mark 1`","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"douph810975"},"content":"`mark 2`","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"douph810975"},"content":"`unmark 1`","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":49,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"douph810975"},"content":"list:","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"douph810975"},"content":"\t1.[T][ ]read book","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"douph810975"},"content":"\t2.[D][X]return book /by 3pm","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"douph810975"},"content":"\t3.[E][ ]meeting /from 4pm /to 5pm","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"douph810975"},"content":"### `Function` - delete","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"douph810975"},"content":"delete a task by its index","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":58,"author":{"gitId":"douph810975"},"content":"Example of usage (Sample input):","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"douph810975"},"content":"`delete 3`","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"douph810975"},"content":"Expected outcome:","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"douph810975"},"content":"list:","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"douph810975"},"content":"\t1.[T][ ]read book","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"douph810975"},"content":"\t2.[D][X]return book /by 3pm","lastModifiedDate":"2023-03-03"},{"lineNumber":67,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":69,"author":{"gitId":"douph810975"},"content":"### `Function` - find","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"douph810975"},"content":"find all the task that contains the given content.","lastModifiedDate":"2023-03-03"},{"lineNumber":71,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"douph810975"},"content":"Example of usage (Sample input):","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"douph810975"},"content":"`find book`","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"douph810975"},"content":"Expected outcome:","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"douph810975"},"content":"Here are the matching task in your list:","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"douph810975"},"content":"\t[T][ ]read book","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"douph810975"},"content":"Here are the matching task in your list:","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"douph810975"},"content":"\t[D][X]return book /by 3pm","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"douph810975"},"content":"### `Function` - help","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"douph810975"},"content":"print the help list","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"douph810975"},"content":"Expected outcome:","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"douph810975"},"content":"Enter \"todo task_name\" to add a task.","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"douph810975"},"content":"Enter \"event task_name /from start_time /to end_time\" to add an event.","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"douph810975"},"content":"Enter \"deadline task_name /by end_time\" to add a deadline","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"douph810975"},"content":"Enter \"mark index\"to mark a task as done.","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"douph810975"},"content":"Enter \"unmark index\"to mark a task as not done.","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"douph810975"},"content":"Enter \"delete index\"to delete a task.","lastModifiedDate":"2023-03-03"},{"lineNumber":94,"author":{"gitId":"douph810975"},"content":"Enter \"find content\"to find task(s) that contain the content.","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"douph810975"},"content":"Enter \"list\" to print all the tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":96,"author":{"gitId":"douph810975"},"content":"Enter \"bye\" to terminate this program.","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"douph810975"},"content":"````","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"douph810975":83,"-":14}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"package Duke;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"import Duke.Tasks.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"douph810975"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"douph810975"},"content":" * The main file of this project.","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"douph810975"},"content":" * Consisting of processing the input command and run the program.","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"douph810975"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"douph810975"},"content":"public class Duke {","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"douph810975"},"content":"    public static final int MAX_TASK_LENGTH \u003d 100;","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"douph810975"},"content":"    private Storage storage;","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"douph810975"},"content":"    public static Task[] lists \u003d new Task[MAX_TASK_LENGTH];","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"douph810975"},"content":"    public static int index \u003d 0;","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"douph810975"},"content":"     * Read the user input line by line","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"douph810975"},"content":"     * Identify users\u0027 command based on the input","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"douph810975"},"content":"     * Process the command using the switch method","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"douph810975"},"content":"     * @param line is the user input string.","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"douph810975"},"content":"     * @throws IOException","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"douph810975"},"content":"    public static void readLines(String line) throws IOException {","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"douph810975"},"content":"        while (!line.equals(\"bye\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"douph810975"},"content":"            String[] input \u003d line.split(\" \", 2);","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"douph810975"},"content":"            String command \u003d input[0];","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"douph810975"},"content":"            try {","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"douph810975"},"content":"                switch (command) {","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"douph810975"},"content":"                case \"mark\":","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"douph810975"},"content":"                    TaskList.markTask(lists, input);","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"douph810975"},"content":"                    Storage.writeToFile(lists, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"douph810975"},"content":"                    break;","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"douph810975"},"content":"                case \"unmark\":","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"douph810975"},"content":"                    TaskList.unmarkTask(lists, input);","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"douph810975"},"content":"                    Storage.writeToFile(lists, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"douph810975"},"content":"                    break;","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"douph810975"},"content":"                case \"todo\":","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"douph810975"},"content":"                    TaskList.addTodo(lists, input, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"douph810975"},"content":"                    index++;","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"douph810975"},"content":"                    Storage.writeToFile(lists, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"douph810975"},"content":"                    break;","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"douph810975"},"content":"                case \"event\":","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"douph810975"},"content":"                    TaskList.addEvent(lists, input, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"douph810975"},"content":"                    index++;","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"douph810975"},"content":"                    Storage.writeToFile(lists, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"douph810975"},"content":"                    break;","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"douph810975"},"content":"                case \"deadline\":","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"douph810975"},"content":"                    TaskList.addDeadline(lists, input, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"douph810975"},"content":"                    index++;","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"douph810975"},"content":"                    Storage.writeToFile(lists, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"douph810975"},"content":"                    break;","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"douph810975"},"content":"                case \"delete\":","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"douph810975"},"content":"                    TaskList.deleteTask(lists, input, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":56,"author":{"gitId":"douph810975"},"content":"                    int deleteIndex\u003dInteger.parseInt(input[1]);","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"douph810975"},"content":"                    if(deleteIndex\u003e\u003d1 \u0026\u0026 deleteIndex\u003c\u003dindex){","lastModifiedDate":"2023-03-18"},{"lineNumber":58,"author":{"gitId":"douph810975"},"content":"                        index--;","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"douph810975"},"content":"                    }","lastModifiedDate":"2023-03-18"},{"lineNumber":60,"author":{"gitId":"douph810975"},"content":"                    Storage.writeToFile(lists, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"douph810975"},"content":"                    break;","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"douph810975"},"content":"                case \"find\":","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"douph810975"},"content":"                    TaskList.findTask(lists, input[1], index);","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"douph810975"},"content":"                    break;","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"douph810975"},"content":"                case \"list\":","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"douph810975"},"content":"                    Ui.printList(lists, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"douph810975"},"content":"                    break;","lastModifiedDate":"2023-03-02"},{"lineNumber":68,"author":{"gitId":"douph810975"},"content":"                case \"help\":","lastModifiedDate":"2023-03-02"},{"lineNumber":69,"author":{"gitId":"douph810975"},"content":"                    Ui.printHelp();","lastModifiedDate":"2023-03-02"},{"lineNumber":70,"author":{"gitId":"douph810975"},"content":"                    break;","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"douph810975"},"content":"                default:","lastModifiedDate":"2023-03-02"},{"lineNumber":72,"author":{"gitId":"douph810975"},"content":"                    Ui.printError();","lastModifiedDate":"2023-03-02"},{"lineNumber":73,"author":{"gitId":"douph810975"},"content":"                    break;","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"douph810975"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"douph810975"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"douph810975"},"content":"                System.out.println(\"Oops! Command should be followed by a number. \" +","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"douph810975"},"content":"                        \"(A valid index number should be separated by a space after the command)\");","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"douph810975"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":79,"author":{"gitId":"douph810975"},"content":"                System.out.println(\"Oops! Task index out of bound! \" +","lastModifiedDate":"2023-03-02"},{"lineNumber":80,"author":{"gitId":"douph810975"},"content":"                        \"(A valid index number should be separated by a space after the command)\");","lastModifiedDate":"2023-03-02"},{"lineNumber":81,"author":{"gitId":"douph810975"},"content":"            } catch (NullPointerException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":82,"author":{"gitId":"douph810975"},"content":"                System.out.println(\"Oops! Command index out of bound! \" +","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"douph810975"},"content":"                        \"(A valid index number should be separated by a space after the command)\");","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"douph810975"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":85,"author":{"gitId":"douph810975"},"content":"                System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2023-03-02"},{"lineNumber":86,"author":{"gitId":"douph810975"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":87,"author":{"gitId":"douph810975"},"content":"            line \u003d Ui.nextLine();","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":92,"author":{"gitId":"douph810975"},"content":"     * Print the welcome messages first and initialize the storage object.","lastModifiedDate":"2023-03-18"},{"lineNumber":93,"author":{"gitId":"douph810975"},"content":"     * Initialize the list based on the stored file(if any)","lastModifiedDate":"2023-03-18"},{"lineNumber":94,"author":{"gitId":"douph810975"},"content":"     * Read the input command and process the command using the readLines function.","lastModifiedDate":"2023-03-18"},{"lineNumber":95,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":96,"author":{"gitId":"douph810975"},"content":"     * @throws IOException","lastModifiedDate":"2023-03-18"},{"lineNumber":97,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":98,"author":{"gitId":"douph810975"},"content":"    public void run() throws IOException {","lastModifiedDate":"2023-03-02"},{"lineNumber":99,"author":{"gitId":"douph810975"},"content":"        Ui.welcomeMessage();","lastModifiedDate":"2023-03-02"},{"lineNumber":100,"author":{"gitId":"douph810975"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2023-03-02"},{"lineNumber":101,"author":{"gitId":"douph810975"},"content":"        index \u003d Storage.initializeList(lists);","lastModifiedDate":"2023-03-02"},{"lineNumber":102,"author":{"gitId":"douph810975"},"content":"        String line \u003d Ui.initializeLine();","lastModifiedDate":"2023-03-02"},{"lineNumber":103,"author":{"gitId":"douph810975"},"content":"        readLines(line);","lastModifiedDate":"2023-03-02"},{"lineNumber":104,"author":{"gitId":"douph810975"},"content":"        Ui.goodbyeMessage();","lastModifiedDate":"2023-03-02"},{"lineNumber":105,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":106,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":107,"author":{"gitId":"douph810975"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-03-02"},{"lineNumber":108,"author":{"gitId":"douph810975"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":109,"author":{"gitId":"douph810975"},"content":"            new Duke().run();","lastModifiedDate":"2023-03-02"},{"lineNumber":110,"author":{"gitId":"douph810975"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":111,"author":{"gitId":"douph810975"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-03-02"},{"lineNumber":112,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":113,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"douph810975":113,"-":1}},{"path":"src/main/java/Duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"package Duke;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"import java.io.File;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"douph810975"},"content":"import Duke.Tasks.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"douph810975"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"douph810975"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"douph810975"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"douph810975"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"douph810975"},"content":" * Deal with writing and reading file given a relative path.","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"douph810975"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"douph810975"},"content":"public class Storage {","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"douph810975"},"content":"    private static final String FILEPATH \u003d \".\\\\lists.txt\";","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"douph810975"},"content":"     * Write the content of the task list to a file","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"douph810975"},"content":"     * given the relative path of the file.","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"douph810975"},"content":"     * If the file does not exist, then create a new file and write.","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"douph810975"},"content":"     * @param Tasks the task list","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"douph810975"},"content":"     * @param index the length of the list","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"douph810975"},"content":"     * @throws IOException","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"douph810975"},"content":"    public static void writeToFile(Task[] Tasks, int index) throws IOException {","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"douph810975"},"content":"        File f \u003d new File(FILEPATH);","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"douph810975"},"content":"        if (!f.exists()) {","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"douph810975"},"content":"            f.createNewFile();","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"File created: \" + f.getName());","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"douph810975"},"content":"        FileWriter fw \u003d new FileWriter(FILEPATH);","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"douph810975"},"content":"        for (int i \u003d 0; i \u003c index; i++) {","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"douph810975"},"content":"            fw.write((i + 1) + \".\" + Tasks[i].toString() + \u0027\\n\u0027);","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"douph810975"},"content":"        fw.close();","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"douph810975"},"content":"     * Try to find whether the file exists based on the relative path.","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"douph810975"},"content":"     * If the file exists, write the content of the file line by line","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"douph810975"},"content":"     * to the task list in the parameter list.","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"douph810975"},"content":"     * If not, then do nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"douph810975"},"content":"     * @param lists The task list that the content of the file should be written to","lastModifiedDate":"2023-03-02"},{"lineNumber":47,"author":{"gitId":"douph810975"},"content":"     * @return the length of the list","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"douph810975"},"content":"     * @throws FileNotFoundException","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"douph810975"},"content":"    public static int initializeList(Task[] lists) throws FileNotFoundException {","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"douph810975"},"content":"        File f \u003d new File(FILEPATH);","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"douph810975"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"douph810975"},"content":"        if (f.exists()) {","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"douph810975"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"douph810975"},"content":"            String line;","lastModifiedDate":"2023-03-02"},{"lineNumber":56,"author":{"gitId":"douph810975"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2023-03-02"},{"lineNumber":57,"author":{"gitId":"douph810975"},"content":"                line \u003d s.nextLine();","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"douph810975"},"content":"                String taskType \u003d line.substring(0, 5);","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"douph810975"},"content":"                String[] contents \u003d line.substring(6).split(\"]\", 2);","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"douph810975"},"content":"                if (taskType.contains(\"T\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"douph810975"},"content":"                    TaskList.addTodo(lists, contents, count);","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"douph810975"},"content":"                } else if (taskType.contains(\"E\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"douph810975"},"content":"                    TaskList.addEvent(lists, contents, count);","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"douph810975"},"content":"                } else if (taskType.contains(\"D\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"douph810975"},"content":"                    TaskList.addDeadline(lists, contents, count);","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"douph810975"},"content":"                } else {","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"douph810975"},"content":"                    System.out.println(\"There\u0027s unexpected content in your file.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":68,"author":{"gitId":"douph810975"},"content":"                }","lastModifiedDate":"2023-03-02"},{"lineNumber":69,"author":{"gitId":"douph810975"},"content":"                if (line.substring(0, 7).contains(\"X\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":70,"author":{"gitId":"douph810975"},"content":"                    lists[count].isDone \u003d true;","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"douph810975"},"content":"                }","lastModifiedDate":"2023-03-02"},{"lineNumber":72,"author":{"gitId":"douph810975"},"content":"                count++;","lastModifiedDate":"2023-03-02"},{"lineNumber":73,"author":{"gitId":"douph810975"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"douph810975"},"content":"        return count;","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"douph810975"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"douph810975":77}},{"path":"src/main/java/Duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"package Duke;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"import Duke.Tasks.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":"import Duke.Tasks.Todo;","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"douph810975"},"content":"import Duke.Tasks.Event;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"douph810975"},"content":"import Duke.Tasks.Deadline;","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"douph810975"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"douph810975"},"content":" * Implement methods that operate on the tasks in the task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"douph810975"},"content":" * Including add tasks, delete task, find task, mark and unmark a task.","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"douph810975"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"douph810975"},"content":"public class TaskList {","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"douph810975"},"content":"    public static void printAddMessage(Task[] Tasks, int taskIndex) {","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"douph810975"},"content":"        System.out.println(Tasks[taskIndex].toString());","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Now you have \" + (taskIndex + 1) + \" task(s) in the list\");","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"douph810975"},"content":"     * Add a Todo task.","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"douph810975"},"content":"     * Print the message of adding a Todo.","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"douph810975"},"content":"     * @param list    The task list.","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"douph810975"},"content":"     * @param command The input message that needs to be further divided.","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"douph810975"},"content":"     * @param index   The number of tasks in the list.","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"douph810975"},"content":"    public static void addTodo(Task[] list, String[] command, int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"douph810975"},"content":"        list[index] \u003d new Todo(command[1]);","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"douph810975"},"content":"        printAddMessage(list, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"douph810975"},"content":"     * Split the input command to description, start time and end time","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"douph810975"},"content":"     * Add a new event to the list","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"douph810975"},"content":"     * @param list    The task list.","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"douph810975"},"content":"     * @param command The input message that needs to be further divided.","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"douph810975"},"content":"     * @param index   The number of tasks in the list.","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"douph810975"},"content":"    public static void addEvent(Task[] list, String[] command, int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"douph810975"},"content":"        String[] description \u003d command[1].split(\" /from \");","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"douph810975"},"content":"        String[] dates \u003d description[1].split(\" /to \");","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"douph810975"},"content":"        String start \u003d dates[0];","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"douph810975"},"content":"        String end \u003d dates[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":47,"author":{"gitId":"douph810975"},"content":"        list[index] \u003d new Event(description[0], start, end);","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"douph810975"},"content":"        printAddMessage(list, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"douph810975"},"content":"     * Split the input command to description and deadline time","lastModifiedDate":"2023-03-18"},{"lineNumber":53,"author":{"gitId":"douph810975"},"content":"     * Add a new deadline to the list","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"douph810975"},"content":"     * @param list    The task list.","lastModifiedDate":"2023-03-18"},{"lineNumber":56,"author":{"gitId":"douph810975"},"content":"     * @param command The input message that needs to be further divided.","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"douph810975"},"content":"     * @param index   The number of tasks in the list.","lastModifiedDate":"2023-03-18"},{"lineNumber":58,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"douph810975"},"content":"    public static void addDeadline(Task[] list, String[] command, int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"douph810975"},"content":"        String[] description \u003d command[1].split(\" /by \");","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"douph810975"},"content":"        String ddl \u003d description[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"douph810975"},"content":"        list[index] \u003d new Deadline(description[0], ddl);","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"douph810975"},"content":"        printAddMessage(list, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":67,"author":{"gitId":"douph810975"},"content":"     * Find the index of the command that you want to delete based on the input command","lastModifiedDate":"2023-03-18"},{"lineNumber":68,"author":{"gitId":"douph810975"},"content":"     * Delete the task","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":70,"author":{"gitId":"douph810975"},"content":"     * @param list    The task list.","lastModifiedDate":"2023-03-18"},{"lineNumber":71,"author":{"gitId":"douph810975"},"content":"     * @param command The input message that needs to be further divided.","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"douph810975"},"content":"     * @param index   The number of tasks in the list.","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"douph810975"},"content":"    public static void deleteTask(Task[] list, String[] command, int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"douph810975"},"content":"        String number \u003d command[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"douph810975"},"content":"        int deleteIndex \u003d Integer.parseInt(number);","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"douph810975"},"content":"        if (deleteIndex \u003d\u003d index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":79,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":80,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-03-02"},{"lineNumber":81,"author":{"gitId":"douph810975"},"content":"            System.out.println(list[deleteIndex - 1].toString());","lastModifiedDate":"2023-03-02"},{"lineNumber":82,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Now you have \" + (index - 1) + \" task(s) in the list\");","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"douph810975"},"content":"        } else if (deleteIndex \u003e\u003d 1 \u0026\u0026 deleteIndex \u003c\u003d index - 1) {","lastModifiedDate":"2023-03-02"},{"lineNumber":85,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":86,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-03-02"},{"lineNumber":87,"author":{"gitId":"douph810975"},"content":"            System.out.println(list[deleteIndex - 1].toString());","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Now you have \" + (index - 1) + \" task(s) in the list\");","lastModifiedDate":"2023-03-02"},{"lineNumber":89,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"douph810975"},"content":"            for (int i \u003d deleteIndex - 1; i \u003c index - 1; i++) {","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"douph810975"},"content":"                list[i] \u003d list[i + 1];","lastModifiedDate":"2023-03-02"},{"lineNumber":92,"author":{"gitId":"douph810975"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":93,"author":{"gitId":"douph810975"},"content":"        } else {","lastModifiedDate":"2023-03-02"},{"lineNumber":94,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Oops! Delete should be followed by a valid number. \");","lastModifiedDate":"2023-03-02"},{"lineNumber":95,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":96,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":97,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":98,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":99,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":100,"author":{"gitId":"douph810975"},"content":"     * Find the index of the command that you want to mark based on the input command","lastModifiedDate":"2023-03-18"},{"lineNumber":101,"author":{"gitId":"douph810975"},"content":"     * Set the task\u0027s isDone to true","lastModifiedDate":"2023-03-18"},{"lineNumber":102,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":103,"author":{"gitId":"douph810975"},"content":"     * @param list    The task list.","lastModifiedDate":"2023-03-18"},{"lineNumber":104,"author":{"gitId":"douph810975"},"content":"     * @param command The input message that needs to be further divided.","lastModifiedDate":"2023-03-18"},{"lineNumber":105,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":106,"author":{"gitId":"douph810975"},"content":"    public static void markTask(Task[] list, String[] command) {","lastModifiedDate":"2023-03-02"},{"lineNumber":107,"author":{"gitId":"douph810975"},"content":"        try {","lastModifiedDate":"2023-03-02"},{"lineNumber":108,"author":{"gitId":"douph810975"},"content":"            String number \u003d command[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":109,"author":{"gitId":"douph810975"},"content":"            int markIndex \u003d Integer.parseInt(number);","lastModifiedDate":"2023-03-02"},{"lineNumber":110,"author":{"gitId":"douph810975"},"content":"            list[markIndex - 1].isDone \u003d true;","lastModifiedDate":"2023-03-02"},{"lineNumber":111,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":112,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-03-02"},{"lineNumber":113,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"\\t\" + list[markIndex - 1].toString());","lastModifiedDate":"2023-03-02"},{"lineNumber":114,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":115,"author":{"gitId":"douph810975"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":116,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Oops! Mark should be followed by a number. \" +","lastModifiedDate":"2023-03-02"},{"lineNumber":117,"author":{"gitId":"douph810975"},"content":"                    \"(A valid index number should be separated by a space after the mark)\");","lastModifiedDate":"2023-03-02"},{"lineNumber":118,"author":{"gitId":"douph810975"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":119,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Oops! Mark index out of bound! \" +","lastModifiedDate":"2023-03-02"},{"lineNumber":120,"author":{"gitId":"douph810975"},"content":"                    \"(A valid index number should be separated by a space after the mark)\");","lastModifiedDate":"2023-03-02"},{"lineNumber":121,"author":{"gitId":"douph810975"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":122,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Oops! Mark index out of bound! \" +","lastModifiedDate":"2023-03-02"},{"lineNumber":123,"author":{"gitId":"douph810975"},"content":"                    \"(A valid index number should be separated by a space after the mark)\");","lastModifiedDate":"2023-03-02"},{"lineNumber":124,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":125,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":126,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":127,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":128,"author":{"gitId":"douph810975"},"content":"     * Find the index of the command that you want to unmark based on the input command","lastModifiedDate":"2023-03-18"},{"lineNumber":129,"author":{"gitId":"douph810975"},"content":"     * Set the task\u0027s isDone to false","lastModifiedDate":"2023-03-18"},{"lineNumber":130,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":131,"author":{"gitId":"douph810975"},"content":"     * @param list    The task list.","lastModifiedDate":"2023-03-18"},{"lineNumber":132,"author":{"gitId":"douph810975"},"content":"     * @param command The input message that needs to be further divided.","lastModifiedDate":"2023-03-18"},{"lineNumber":133,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":134,"author":{"gitId":"douph810975"},"content":"    public static void unmarkTask(Task[] list, String[] command) {","lastModifiedDate":"2023-03-02"},{"lineNumber":135,"author":{"gitId":"douph810975"},"content":"        try {","lastModifiedDate":"2023-03-02"},{"lineNumber":136,"author":{"gitId":"douph810975"},"content":"            String number \u003d command[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":137,"author":{"gitId":"douph810975"},"content":"            int unMarkIndex \u003d Integer.parseInt(number);","lastModifiedDate":"2023-03-02"},{"lineNumber":138,"author":{"gitId":"douph810975"},"content":"            list[unMarkIndex - 1].isDone \u003d false;","lastModifiedDate":"2023-03-02"},{"lineNumber":139,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":140,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-03-02"},{"lineNumber":141,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"\\t\" + list[unMarkIndex - 1].toString());","lastModifiedDate":"2023-03-02"},{"lineNumber":142,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":143,"author":{"gitId":"douph810975"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":144,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Oops! Unmark should be followed by a number. \" +","lastModifiedDate":"2023-03-02"},{"lineNumber":145,"author":{"gitId":"douph810975"},"content":"                    \"(A valid index number should be separated by a space after the unmark)\");","lastModifiedDate":"2023-03-02"},{"lineNumber":146,"author":{"gitId":"douph810975"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":147,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Oops! Unmark index out of bound! \" +","lastModifiedDate":"2023-03-02"},{"lineNumber":148,"author":{"gitId":"douph810975"},"content":"                    \"(A valid index number should be separated by a space after the unmark)\");","lastModifiedDate":"2023-03-02"},{"lineNumber":149,"author":{"gitId":"douph810975"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":150,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Oops! Unmark index out of bound! \" +","lastModifiedDate":"2023-03-02"},{"lineNumber":151,"author":{"gitId":"douph810975"},"content":"                    \"(A valid index number should be separated by a space after the unmark)\");","lastModifiedDate":"2023-03-02"},{"lineNumber":152,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":153,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":154,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":155,"author":{"gitId":"douph810975"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":156,"author":{"gitId":"douph810975"},"content":"     * Find the task that contains the task name in the task list.","lastModifiedDate":"2023-03-18"},{"lineNumber":157,"author":{"gitId":"douph810975"},"content":"     * If the nothing is found, print out the not found message.","lastModifiedDate":"2023-03-18"},{"lineNumber":158,"author":{"gitId":"douph810975"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":159,"author":{"gitId":"douph810975"},"content":"     * @param list       this is the task list where we find the task","lastModifiedDate":"2023-03-18"},{"lineNumber":160,"author":{"gitId":"douph810975"},"content":"     * @param whatToFind this is the task name that we want to find","lastModifiedDate":"2023-03-18"},{"lineNumber":161,"author":{"gitId":"douph810975"},"content":"     * @param index      this is the number of tasks in the task list","lastModifiedDate":"2023-03-18"},{"lineNumber":162,"author":{"gitId":"douph810975"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":163,"author":{"gitId":"douph810975"},"content":"    public static void findTask(Task[] list, String whatToFind, int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":164,"author":{"gitId":"douph810975"},"content":"        boolean contain \u003d false;","lastModifiedDate":"2023-03-02"},{"lineNumber":165,"author":{"gitId":"douph810975"},"content":"        for (int i \u003d 0; i \u003c index; i++) {","lastModifiedDate":"2023-03-02"},{"lineNumber":166,"author":{"gitId":"douph810975"},"content":"            if (list[i].toString().substring(6).contains(whatToFind)) {","lastModifiedDate":"2023-03-02"},{"lineNumber":167,"author":{"gitId":"douph810975"},"content":"                System.out.println(\"Here are the matching task in your list:\");","lastModifiedDate":"2023-03-03"},{"lineNumber":168,"author":{"gitId":"douph810975"},"content":"                System.out.println(\"\\t\" + list[i].toString());","lastModifiedDate":"2023-03-02"},{"lineNumber":169,"author":{"gitId":"douph810975"},"content":"                contain \u003d true;","lastModifiedDate":"2023-03-02"},{"lineNumber":170,"author":{"gitId":"douph810975"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":171,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":172,"author":{"gitId":"douph810975"},"content":"        if (!contain) {","lastModifiedDate":"2023-03-02"},{"lineNumber":173,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":174,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"Sorry I don\u0027t find any content related in the list.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":175,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":176,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":177,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":178,"author":{"gitId":"douph810975"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"douph810975":178}},{"path":"src/main/java/Duke/Tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"package Duke.Tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":" * Deadline inherits Task with a deadline time added.","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"douph810975"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"douph810975"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"    protected String by;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"douph810975"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"douph810975"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"douph810975"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"douph810975"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"douph810975"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"douph810975"},"content":"        return \"[D]\" + super.toString() + \" /by \" + by;","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"douph810975"},"content":"}","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"douph810975":19}},{"path":"src/main/java/Duke/Tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"package Duke.Tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":" * Event inherits Task with a start time and an end time added.","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"douph810975"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"douph810975"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"    protected String start;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"douph810975"},"content":"    protected String end;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"douph810975"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"douph810975"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"douph810975"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"douph810975"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"douph810975"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"douph810975"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"douph810975"},"content":"        return \"[E]\" + super.toString() + \" /from \" + start + \" /to \" + end;","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"douph810975"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"douph810975":21}},{"path":"src/main/java/Duke/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"package Duke.Tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":" * Represents a task consisting of the task description and whether the task is done.","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"douph810975"},"content":" * Deadline, Todo, and Event all inherit this class.","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"douph810975"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"public class Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"douph810975"},"content":"    protected String description;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"douph810975"},"content":"    public boolean isDone;","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"douph810975"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"douph810975"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"douph810975"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"douph810975"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"douph810975"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"douph810975"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"douph810975"},"content":"        return (\"[\" + getStatusIcon() + \"]\" + description);","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"douph810975"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"douph810975":25}},{"path":"src/main/java/Duke/Tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"package Duke.Tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":" * Todo is a task without more attributes added.","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"douph810975"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"douph810975"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"douph810975"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"douph810975"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"douph810975"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"douph810975"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"douph810975"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"douph810975"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"douph810975":18}},{"path":"src/main/java/Duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"package Duke;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"import Duke.Tasks.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"douph810975"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"douph810975"},"content":" * Showing all kinds of print messages to users.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"douph810975"},"content":" * Including print welcome messages, goodbye messages, error messages, list information and help list.","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"douph810975"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"douph810975"},"content":"public class Ui {","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"douph810975"},"content":"    public static Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"douph810975"},"content":"    public static void printHelp() {","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Enter \\\"todo task_name\\\" to add a task.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Enter \\\"event task_name /from start_time /to end_time\\\" to add an event.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Enter \\\"deadline task_name /by end_time\\\" to add a deadline\");","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Enter \\\"mark index\\\"to mark a task as done.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Enter \\\"unmark index\\\"to mark a task as not done.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Enter \\\"delete index\\\"to delete a task.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Enter \\\"find content\\\"to find task(s) that contain the content.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Enter \\\"list\\\" to print all the tasks.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Enter \\\"bye\\\" to terminate this program.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"douph810975"},"content":"    public static void printList(Task[] lists, int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"list:\");","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"douph810975"},"content":"        for (int i \u003d 0; i \u003c index; i++) {","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"\\t\" + (i + 1) + \".\" + lists[i].toString());","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"douph810975"},"content":"    public static void printError() {","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Sorry, I don\u0027t get your message.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"douph810975"},"content":"    public static String initializeLine() {","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"douph810975"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"douph810975"},"content":"        return in.nextLine();","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"douph810975"},"content":"    public static String nextLine() {","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"douph810975"},"content":"        return in.nextLine();","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":47,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"douph810975"},"content":"    public static void welcomeMessage() {","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Hello! I\u0027m Duke.Duke\");","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Enter \\\"help\\\" if you want to see the command.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":56,"author":{"gitId":"douph810975"},"content":"    public static void goodbyeMessage() {","lastModifiedDate":"2023-03-02"},{"lineNumber":57,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"douph810975"},"content":"        System.out.println(\"--------------------------------\");","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"douph810975"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"douph810975":61}},{"path":"src/main/java/Exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"package Exception;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":"    public DukeException(String str){","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"douph810975"},"content":"        super(str);","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"douph810975":7}},{"path":"src/main/java/Exception/EmptyLineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douph810975"},"content":"package Exception;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"douph810975"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"douph810975"},"content":"public class EmptyLineException {","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"douph810975"},"content":"    static void validate (String input){","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"douph810975"},"content":"        if(input.equals(\"\")){","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"douph810975"},"content":"            System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"douph810975"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"douph810975"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"douph810975"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"douph810975":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"douph810975"},"content":"java -classpath ..\\bin Duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"douph810975":1,"-":20}}]
