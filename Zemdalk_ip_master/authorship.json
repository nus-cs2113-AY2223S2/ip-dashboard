[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"# Duke assistant","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"This is an assistant named Duke that can help you manage your tasks!","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"## Install","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"Go to [Release Page](https://github.com/Zemdalk/ip/releases) and download the latest version of JAR file. Then you can run Duke assistant by running `java -jar Duke.jar`!","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":"## Usage","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"You can add, mark, unmark, delete tasks in Duke! Generally, there are three types of tasks that Duke can process: `todo`(no start time and end time), `deadline`(no start time but has a deadline) and `event`(has both start time and end time).","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"### Add a task","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"- You can add a `todo` task by entering:","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":"``` shell","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":"todo \u003ctask description\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"```","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"E.g. `todo Return books`.","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"- You can add a `deadline` task by entering:","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"``` shell","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"deadline \u003ctask description\u003e /by \u003cend time\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"```","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"We recommend you to write time in format of \"yyyy/MM/dd HH:mm\" so Duke can understand the time, e.g. `deadline Return books /by 2023/03/31 18:00`.","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"- You can add an `event` task by entering:","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"``` shell","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"event \u003ctask description\u003e /from \u003cstart time\u003e /to \u003cend time\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"```","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"E.g. `event CS2113 class /from 2023/03/03 16:00 /to 2023/03/03 18:00`.","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"### Show all tasks","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"Zemdalk"},"content":"Use `list` to show all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"Zemdalk"},"content":"### Mark a task as done","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"Zemdalk"},"content":"You can mark a task as done by entering:","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":47,"author":{"gitId":"Zemdalk"},"content":"``` shell","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"Zemdalk"},"content":"mark \u003cnumber of the task\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"Zemdalk"},"content":"```","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"Zemdalk"},"content":"Here \"number of the task\" is the index number of the task you want to mark when you run `list` command.","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"Zemdalk"},"content":"### Mark a task as not done","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"Zemdalk"},"content":"You can mark a task as not done by entering:","lastModifiedDate":"2023-03-02"},{"lineNumber":56,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":57,"author":{"gitId":"Zemdalk"},"content":"``` shell","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"Zemdalk"},"content":"unmark \u003cnumber of the task\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"Zemdalk"},"content":"```","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"Zemdalk"},"content":"### Find a task","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"Zemdalk"},"content":"- You can find tasks that has certain pattern string in their description by entering:","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"Zemdalk"},"content":"``` shell","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"Zemdalk"},"content":"find \u003cpattern\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"Zemdalk"},"content":"```","lastModifiedDate":"2023-03-02"},{"lineNumber":68,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":69,"author":{"gitId":"Zemdalk"},"content":"For example, use `find class` to find all tasks with the word \"class\" in their description.","lastModifiedDate":"2023-03-02"},{"lineNumber":70,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"Zemdalk"},"content":"- You can find tasks that end before certain date/time by entering:","lastModifiedDate":"2023-03-02"},{"lineNumber":72,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":73,"author":{"gitId":"Zemdalk"},"content":"``` shell","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"Zemdalk"},"content":"find /by \u003ctime\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":76,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"Zemdalk"},"content":"Here time can be either form of `yyyy/MM/dd` or `yyyy/MM/dd HH:mm`.","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":79,"author":{"gitId":"Zemdalk"},"content":"For example, use `find /by 2023/03/31` to find all tasks ending before March 31, 2023 and use `find /by 2023/03/31 20:00` to find all tasks ending before March 31, 2023 8pm.","lastModifiedDate":"2023-03-02"},{"lineNumber":80,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":81,"author":{"gitId":"Zemdalk"},"content":"### Delete a task","lastModifiedDate":"2023-03-02"},{"lineNumber":82,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"Zemdalk"},"content":"You can delete a task by entering:","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":85,"author":{"gitId":"Zemdalk"},"content":"``` shell","lastModifiedDate":"2023-03-02"},{"lineNumber":86,"author":{"gitId":"Zemdalk"},"content":"delete \u003cnumber of the task\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":88,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":89,"author":{"gitId":"Zemdalk"},"content":"### Exit the program","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"Zemdalk"},"content":"Use `bye` to exit the program.","lastModifiedDate":"2023-03-02"},{"lineNumber":92,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":93,"author":{"gitId":"Zemdalk"},"content":"Your tasks will be recorded and will not lose. So next time you run Duke assistant, all tasks will be restored!","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"-":6,"Zemdalk":87}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"import duke.command.Parser;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"import duke.command.Storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":"import duke.command.TodoList;","lastModifiedDate":"2023-02-09"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":"import duke.command.Ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":" * Main class that represents a Duke assistant.","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"    private TodoList todoList;","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"     * Constructor of \u003ccode\u003eDuke\u003c/code\u003e. It creates a \u003ccode\u003etodoList\u003c/code\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"     * that reads all tasks from \u003ccode\u003efilePath\u003c/code\u003e if the file exists.","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"     * @param filePath File that stores data(Tasks) that generated in last execution.","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"     * @throws IOException if any \u003ccode\u003eIOException\u003c/code\u003e was thrown in \u003ccode\u003eStorage\u003c/code\u003e and \u003ccode\u003eTodoList\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException if any \u003ccode\u003eDukeException\u003c/code\u003e was thrown in \u003ccode\u003eTodoList\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"    public Duke(String filePath) throws IOException, DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"            todoList \u003d new TodoList(storage.load());","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"            todoList \u003d new TodoList();","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"     * Main process running the \u003ccode\u003eDuke\u003c/code\u003e assistant.","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"Zemdalk"},"content":"    public void run() {","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"Zemdalk"},"content":"        Ui.showWelcome();","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"Zemdalk"},"content":"        while(true){","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"Zemdalk"},"content":"            try {","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"Zemdalk"},"content":"                String line \u003d ui.readCommand();","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"Zemdalk"},"content":"                Command cmd \u003d Parser.parse(line);","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"Zemdalk"},"content":"                if(cmd.isExit()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"Zemdalk"},"content":"                    break;","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"Zemdalk"},"content":"                }","lastModifiedDate":"2023-02-16"},{"lineNumber":50,"author":{"gitId":"Zemdalk"},"content":"                cmd.execute(todoList);","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"Zemdalk"},"content":"            } catch(DukeException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"Zemdalk"},"content":"                Ui.showError(e.getMessage());","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":54,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"Zemdalk"},"content":"        Ui.showExit();","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"Zemdalk"},"content":"     * Main function of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"Zemdalk"},"content":"     * @param args Arguments from CLI input[not used]","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"Zemdalk"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-08"},{"lineNumber":63,"author":{"gitId":"Zemdalk"},"content":"        try {","lastModifiedDate":"2023-02-16"},{"lineNumber":64,"author":{"gitId":"Zemdalk"},"content":"            new Duke(\"duke/data/duke.txt\").run();","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"Zemdalk"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"Zemdalk"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-16"},{"lineNumber":67,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":3,"Zemdalk":66}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":" * Exception happening specially in \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"    ","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":"     * Constructor for excetion \u003ccode\u003eDukeException\u003c/code\u003e. It prefixes ","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"     * input error message with \"😣OOPS!!! \".","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"     * @param message Error message of \u003ccode\u003eDukeException\u003c/code\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-02-09"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"        super(\"😣OOPS!!! \" + message);","lastModifiedDate":"2023-02-09"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"Zemdalk":16}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-24"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-24"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":" * Represent a command given to \u003ccode\u003eDuke\u003c/code\u003e assistant.","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":"public class Command {","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"    private String line;","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"    private String command;","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"    private String cmdContent;","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"    private int cmdIdx;","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"     * Set the command line.","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"     * @param line Input command line, e.g. \"list\", \"mark 1\" or \"deadline Return books /by 2023/03/31 18:00\".","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"    public void setLine(String line) {","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"        this.line \u003d line;","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"     * Get the command line.","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"     * @return Command line, e.g. \"list\", \"mark 1\" or \"deadline Return books /by 2023/03/31 18:00\".","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"    public String getLine() {","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"        return line;","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"Zemdalk"},"content":"     * Set the command.","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"Zemdalk"},"content":"     * @param command Input command, e.g. \"list\", \"mark\", \"unmark\", \"delete\", \"todo\", \"deadline\", \"event\".","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"Zemdalk"},"content":"    public void setCommand(String command) {","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"Zemdalk"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"Zemdalk"},"content":"     * Get the command.","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"Zemdalk"},"content":"     * @return Command, e.g. \"list\", \"mark\", \"unmark\", \"delete\", \"todo\", \"deadline\", \"event\".","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"Zemdalk"},"content":"    public String getCommand() {","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"Zemdalk"},"content":"        return command;","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"Zemdalk"},"content":"     * Set the content of the command, i.e. the part beside the command part \u003ccode\u003ecommand\u003c/code\u003e in command line \u003ccode\u003eline\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"Zemdalk"},"content":"     * @param cmdContent Content of the command.","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"Zemdalk"},"content":"    public void setCmdContent(String cmdContent) {","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"Zemdalk"},"content":"        this.cmdContent \u003d cmdContent;","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"Zemdalk"},"content":"     * Get the content of the command, i.e. the part beside the command part \u003ccode\u003ecommand\u003c/code\u003e in command line \u003ccode\u003eline\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"Zemdalk"},"content":"     * @return Content of the command.","lastModifiedDate":"2023-03-02"},{"lineNumber":68,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":69,"author":{"gitId":"Zemdalk"},"content":"    public String getCmdContent() {","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"Zemdalk"},"content":"        return cmdContent;","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"Zemdalk"},"content":"     * Set the index of the space behind \u003ccode\u003ecommand\u003c/code\u003e, ","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"Zemdalk"},"content":"     * or index of end of command line if \u003ccode\u003ecmdContent\u003c/code\u003e is null.","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"Zemdalk"},"content":"     * @param cmdIdx index of the space behind \u003ccode\u003ecommand\u003c/code\u003e,","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"Zemdalk"},"content":"     * or index of end of command line if \u003ccode\u003ecmdContent\u003c/code\u003e is null.","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":79,"author":{"gitId":"Zemdalk"},"content":"    public void setCmdIdx(int cmdIdx) {","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"Zemdalk"},"content":"        this.cmdIdx \u003d cmdIdx;","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"Zemdalk"},"content":"     * Get the index of the space behind \u003ccode\u003ecommand\u003c/code\u003e, ","lastModifiedDate":"2023-03-02"},{"lineNumber":85,"author":{"gitId":"Zemdalk"},"content":"     * or index of end of command line if \u003ccode\u003ecmdContent\u003c/code\u003e is null.","lastModifiedDate":"2023-03-02"},{"lineNumber":86,"author":{"gitId":"Zemdalk"},"content":"     * @return index of the space behind \u003ccode\u003ecommand\u003c/code\u003e,","lastModifiedDate":"2023-03-02"},{"lineNumber":87,"author":{"gitId":"Zemdalk"},"content":"     * or index of end of command line if \u003ccode\u003ecmdContent\u003c/code\u003e is null.","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":89,"author":{"gitId":"Zemdalk"},"content":"    public int getCmdIdx() {","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"Zemdalk"},"content":"        return cmdIdx;","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":94,"author":{"gitId":"Zemdalk"},"content":"     * Judge whether the command represents exit(\u003ccode\u003ecommand.equals(\"bye\")\u003c/code\u003e).","lastModifiedDate":"2023-03-02"},{"lineNumber":95,"author":{"gitId":"Zemdalk"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if the command represents exit and \u003ccode\u003efalse\u003c/code\u003e if it does not.","lastModifiedDate":"2023-03-02"},{"lineNumber":96,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":97,"author":{"gitId":"Zemdalk"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"Zemdalk"},"content":"        return (command.equals(\"bye\"));","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":102,"author":{"gitId":"Zemdalk"},"content":"     * Function interface for functions that accept a variable of type \u003ccode\u003eT\u003c/code\u003e, do not ","lastModifiedDate":"2023-03-02"},{"lineNumber":103,"author":{"gitId":"Zemdalk"},"content":"     * have return value, and throw \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":104,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":105,"author":{"gitId":"Zemdalk"},"content":"    @FunctionalInterface","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"Zemdalk"},"content":"    public interface Consumer\u003cT\u003e {","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"Zemdalk"},"content":"        void accept(T t) throws DukeException;","lastModifiedDate":"2023-02-23"},{"lineNumber":108,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":109,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":111,"author":{"gitId":"Zemdalk"},"content":"     * Execute the command.","lastModifiedDate":"2023-03-02"},{"lineNumber":112,"author":{"gitId":"Zemdalk"},"content":"     * @param todoList List of tasks that executing function may refer to and/or modify.","lastModifiedDate":"2023-03-02"},{"lineNumber":113,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If execution function throws \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":114,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":115,"author":{"gitId":"Zemdalk"},"content":"    public void execute(TodoList todoList) throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":116,"author":{"gitId":"Zemdalk"},"content":"        Consumer\u003cTodoList\u003e commandFunction \u003d ","lastModifiedDate":"2023-02-23"},{"lineNumber":117,"author":{"gitId":"Zemdalk"},"content":"            line.equals(\"list\")        ? this::list :","lastModifiedDate":"2023-02-23"},{"lineNumber":118,"author":{"gitId":"Zemdalk"},"content":"            command.equals(\"mark\")     ? this::mark : ","lastModifiedDate":"2023-02-23"},{"lineNumber":119,"author":{"gitId":"Zemdalk"},"content":"            command.equals(\"unmark\")   ? this::unmark :","lastModifiedDate":"2023-02-23"},{"lineNumber":120,"author":{"gitId":"Zemdalk"},"content":"            command.equals(\"todo\")     ? this::todo :","lastModifiedDate":"2023-02-23"},{"lineNumber":121,"author":{"gitId":"Zemdalk"},"content":"            command.equals(\"deadline\") ? this::deadline :","lastModifiedDate":"2023-02-23"},{"lineNumber":122,"author":{"gitId":"Zemdalk"},"content":"            command.equals(\"event\")    ? this::event :","lastModifiedDate":"2023-02-23"},{"lineNumber":123,"author":{"gitId":"Zemdalk"},"content":"            command.equals(\"delete\")   ? this::delete :","lastModifiedDate":"2023-02-23"},{"lineNumber":124,"author":{"gitId":"Zemdalk"},"content":"            command.equals(\"find\")     ? this::find :","lastModifiedDate":"2023-02-24"},{"lineNumber":125,"author":{"gitId":"Zemdalk"},"content":"                                         this::unknown ;","lastModifiedDate":"2023-02-23"},{"lineNumber":126,"author":{"gitId":"Zemdalk"},"content":"        commandFunction.accept(todoList);","lastModifiedDate":"2023-02-23"},{"lineNumber":127,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":128,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":129,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":130,"author":{"gitId":"Zemdalk"},"content":"     * Show all tasks in \u003ccode\u003etodoList\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":131,"author":{"gitId":"Zemdalk"},"content":"     * @param todoList The \u003ccode\u003etodoList\u003c/code\u003e storing all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":132,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If it throws \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":133,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":134,"author":{"gitId":"Zemdalk"},"content":"    public void list(TodoList todoList) throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":135,"author":{"gitId":"Zemdalk"},"content":"        todoList.showList();","lastModifiedDate":"2023-02-23"},{"lineNumber":136,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":137,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":138,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":139,"author":{"gitId":"Zemdalk"},"content":"     * Mark the work as done.","lastModifiedDate":"2023-03-02"},{"lineNumber":140,"author":{"gitId":"Zemdalk"},"content":"     * @param todoList The \u003ccode\u003etodoList\u003c/code\u003e storing all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":141,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If it throws \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":142,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":143,"author":{"gitId":"Zemdalk"},"content":"    public void mark(TodoList todoList) throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":144,"author":{"gitId":"Zemdalk"},"content":"        // mark work as done","lastModifiedDate":"2023-02-23"},{"lineNumber":145,"author":{"gitId":"Zemdalk"},"content":"        int index;","lastModifiedDate":"2023-02-23"},{"lineNumber":146,"author":{"gitId":"Zemdalk"},"content":"        try {                        ","lastModifiedDate":"2023-02-23"},{"lineNumber":147,"author":{"gitId":"Zemdalk"},"content":"            index \u003d Integer.parseInt(line.substring(cmdIdx + 1, line.length())) - 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":148,"author":{"gitId":"Zemdalk"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":149,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"Wrong number format: \" + line.substring(cmdIdx+1, line.length()));","lastModifiedDate":"2023-02-23"},{"lineNumber":150,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":151,"author":{"gitId":"Zemdalk"},"content":"        todoList.markItem(index, true);","lastModifiedDate":"2023-02-23"},{"lineNumber":152,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":153,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":154,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":155,"author":{"gitId":"Zemdalk"},"content":"     * Mark the work as not done.","lastModifiedDate":"2023-03-02"},{"lineNumber":156,"author":{"gitId":"Zemdalk"},"content":"     * @param todoList The \u003ccode\u003etodoList\u003c/code\u003e storing all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":157,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If it throws \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":158,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":159,"author":{"gitId":"Zemdalk"},"content":"    public void unmark(TodoList todoList) throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":160,"author":{"gitId":"Zemdalk"},"content":"        // mark work as unfinished","lastModifiedDate":"2023-02-23"},{"lineNumber":161,"author":{"gitId":"Zemdalk"},"content":"        int index;","lastModifiedDate":"2023-02-23"},{"lineNumber":162,"author":{"gitId":"Zemdalk"},"content":"        try {                        ","lastModifiedDate":"2023-02-23"},{"lineNumber":163,"author":{"gitId":"Zemdalk"},"content":"            index \u003d Integer.parseInt(cmdContent) - 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":164,"author":{"gitId":"Zemdalk"},"content":"        } catch(NumberFormatException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":165,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"Wrong number format: \" + cmdContent);","lastModifiedDate":"2023-02-23"},{"lineNumber":166,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":167,"author":{"gitId":"Zemdalk"},"content":"        todoList.markItem(index, false);","lastModifiedDate":"2023-02-23"},{"lineNumber":168,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":169,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":170,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":171,"author":{"gitId":"Zemdalk"},"content":"     * Add a \u003ccode\u003eTodo\u003c/code\u003e task to the end of \u003ccode\u003etodoList\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":172,"author":{"gitId":"Zemdalk"},"content":"     * @param todoList The \u003ccode\u003etodoList\u003c/code\u003e storing all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":173,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If it throws \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":174,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":175,"author":{"gitId":"Zemdalk"},"content":"    public void todo(TodoList todoList) throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":176,"author":{"gitId":"Zemdalk"},"content":"        Todo todo \u003d Todo.toTodo(cmdContent);","lastModifiedDate":"2023-02-23"},{"lineNumber":177,"author":{"gitId":"Zemdalk"},"content":"        todoList.addItem(todo);","lastModifiedDate":"2023-02-23"},{"lineNumber":178,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":179,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":180,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":181,"author":{"gitId":"Zemdalk"},"content":"     * Add a \u003ccode\u003eDeadline\u003c/code\u003e task to the end of \u003ccode\u003etodoList\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":182,"author":{"gitId":"Zemdalk"},"content":"     * @param todoList The \u003ccode\u003etodoList\u003c/code\u003e storing all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":183,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If it throws \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":184,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":185,"author":{"gitId":"Zemdalk"},"content":"    public void deadline(TodoList todoList) throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":186,"author":{"gitId":"Zemdalk"},"content":"        Deadline deadline \u003d Deadline.toDeadline(cmdContent);","lastModifiedDate":"2023-02-23"},{"lineNumber":187,"author":{"gitId":"Zemdalk"},"content":"        todoList.addItem(deadline);","lastModifiedDate":"2023-02-23"},{"lineNumber":188,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":189,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":190,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":191,"author":{"gitId":"Zemdalk"},"content":"     * Add an \u003ccode\u003eEvent\u003c/code\u003e task to the end of \u003ccode\u003etodoList\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":192,"author":{"gitId":"Zemdalk"},"content":"     * @param todoList The \u003ccode\u003etodoList\u003c/code\u003e storing all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":193,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If it throws \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":194,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":195,"author":{"gitId":"Zemdalk"},"content":"    public void event(TodoList todoList) throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":196,"author":{"gitId":"Zemdalk"},"content":"        Event event \u003d Event.toEvent(cmdContent);","lastModifiedDate":"2023-02-23"},{"lineNumber":197,"author":{"gitId":"Zemdalk"},"content":"        todoList.addItem(event);","lastModifiedDate":"2023-02-23"},{"lineNumber":198,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":199,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":200,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":201,"author":{"gitId":"Zemdalk"},"content":"     * Add a task from \u003ccode\u003etodoList\u003c/code\u003e by the number it appears in the list.","lastModifiedDate":"2023-03-02"},{"lineNumber":202,"author":{"gitId":"Zemdalk"},"content":"     * @param todoList The \u003ccode\u003etodoList\u003c/code\u003e storing all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":203,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If it throws \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":204,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":205,"author":{"gitId":"Zemdalk"},"content":"    public void delete(TodoList todoList) throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":206,"author":{"gitId":"Zemdalk"},"content":"        try {                        ","lastModifiedDate":"2023-02-23"},{"lineNumber":207,"author":{"gitId":"Zemdalk"},"content":"            int index \u003d Integer.parseInt(cmdContent);","lastModifiedDate":"2023-02-23"},{"lineNumber":208,"author":{"gitId":"Zemdalk"},"content":"            if(index \u003e 0) {","lastModifiedDate":"2023-02-23"},{"lineNumber":209,"author":{"gitId":"Zemdalk"},"content":"                todoList.deleteItem(--index);","lastModifiedDate":"2023-02-23"},{"lineNumber":210,"author":{"gitId":"Zemdalk"},"content":"            } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":211,"author":{"gitId":"Zemdalk"},"content":"                throw new DukeException(\"Wrong number format: \" + cmdContent);","lastModifiedDate":"2023-02-23"},{"lineNumber":212,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":213,"author":{"gitId":"Zemdalk"},"content":"        } catch(NumberFormatException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":214,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"Wrong number format: \" + cmdContent);","lastModifiedDate":"2023-02-23"},{"lineNumber":215,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":216,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":217,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":218,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":219,"author":{"gitId":"Zemdalk"},"content":"     * Find a task from \u003ccode\u003etodoList\u003c/code\u003e. \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":220,"author":{"gitId":"Zemdalk"},"content":"     * 1) If \"/by\" is in the command, it will find all tasks ending before the time after \"/by\", which should be ","lastModifiedDate":"2023-03-02"},{"lineNumber":221,"author":{"gitId":"Zemdalk"},"content":"     * in format of \"yyyy/MM/dd\" or \"yyyy/MM/dd HH:mm\". \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":222,"author":{"gitId":"Zemdalk"},"content":"     * 2) If \"/by\" is not in the command, it will find all tasks that have \u003ccode\u003ecmdContent\u003c/code\u003e in its description.","lastModifiedDate":"2023-03-02"},{"lineNumber":223,"author":{"gitId":"Zemdalk"},"content":"     * @param todoList The \u003ccode\u003etodoList\u003c/code\u003e storing all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":224,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If it throws \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":225,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":226,"author":{"gitId":"Zemdalk"},"content":"    public void find(TodoList todoList) throws DukeException {","lastModifiedDate":"2023-02-24"},{"lineNumber":227,"author":{"gitId":"Zemdalk"},"content":"        int byIdx \u003d line.indexOf(\"/by\");","lastModifiedDate":"2023-02-24"},{"lineNumber":228,"author":{"gitId":"Zemdalk"},"content":"        if(byIdx !\u003d -1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":229,"author":{"gitId":"Zemdalk"},"content":"            String timeBeforeStr \u003d line.substring(byIdx + \"/by \".length());","lastModifiedDate":"2023-02-24"},{"lineNumber":230,"author":{"gitId":"Zemdalk"},"content":"            LocalDateTime timeBefore;","lastModifiedDate":"2023-02-24"},{"lineNumber":231,"author":{"gitId":"Zemdalk"},"content":"            try {","lastModifiedDate":"2023-02-24"},{"lineNumber":232,"author":{"gitId":"Zemdalk"},"content":"                timeBefore \u003d LocalDateTime.parse(timeBeforeStr, Task.parseFormatter);","lastModifiedDate":"2023-02-24"},{"lineNumber":233,"author":{"gitId":"Zemdalk"},"content":"            } catch(DateTimeParseException e1) {","lastModifiedDate":"2023-02-24"},{"lineNumber":234,"author":{"gitId":"Zemdalk"},"content":"                try {","lastModifiedDate":"2023-02-24"},{"lineNumber":235,"author":{"gitId":"Zemdalk"},"content":"                    LocalDate dateBefore \u003d LocalDate.parse(timeBeforeStr, DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));","lastModifiedDate":"2023-02-24"},{"lineNumber":236,"author":{"gitId":"Zemdalk"},"content":"                    LocalTime endOfDay \u003d LocalTime.parse(\"23:59\", DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2023-02-24"},{"lineNumber":237,"author":{"gitId":"Zemdalk"},"content":"                    timeBefore \u003d LocalDateTime.of(dateBefore, endOfDay);","lastModifiedDate":"2023-02-24"},{"lineNumber":238,"author":{"gitId":"Zemdalk"},"content":"                } catch(DateTimeParseException e2) {","lastModifiedDate":"2023-02-24"},{"lineNumber":239,"author":{"gitId":"Zemdalk"},"content":"                    throw new DukeException(\"Wrong time format!\");","lastModifiedDate":"2023-02-24"},{"lineNumber":240,"author":{"gitId":"Zemdalk"},"content":"                }","lastModifiedDate":"2023-02-24"},{"lineNumber":241,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-24"},{"lineNumber":242,"author":{"gitId":"Zemdalk"},"content":"            todoList.findEndTimeBefore(timeBefore);","lastModifiedDate":"2023-02-24"},{"lineNumber":243,"author":{"gitId":"Zemdalk"},"content":"        } else {","lastModifiedDate":"2023-02-24"},{"lineNumber":244,"author":{"gitId":"Zemdalk"},"content":"            todoList.findDesc(cmdContent);","lastModifiedDate":"2023-02-24"},{"lineNumber":245,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":246,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":247,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":248,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":249,"author":{"gitId":"Zemdalk"},"content":"     * An unknown command. It will throw a \u003ccode\u003eDukeException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":250,"author":{"gitId":"Zemdalk"},"content":"     * @param todoList The \u003ccode\u003etodoList\u003c/code\u003e storing all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":251,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException \u003ccode\u003eDukeException\u003c/code\u003e indicating that the command is of unkown type.","lastModifiedDate":"2023-03-02"},{"lineNumber":252,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":253,"author":{"gitId":"Zemdalk"},"content":"    public void unknown(TodoList todoList) throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":254,"author":{"gitId":"Zemdalk"},"content":"        throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-02-23"},{"lineNumber":255,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":256,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":257,"author":{"gitId":"Zemdalk"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"Zemdalk":257}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":" * Parses the command from a \u003ccode\u003eString\u003c/code\u003e into a \u003ccode\u003eCommand\u003c/code\u003e type","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":" * that can be understood by \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"public class Parser {","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":"    ","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"     * Main function parsing the command from \u003ccode\u003eString\u003c/code\u003e into \u003ccode\u003eCommand\u003c/code\u003e type.","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"     * @param line Command line in \u003ccode\u003eString\u003c/code\u003e type.","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"     * @return A \u003ccode\u003eCommand\u003c/code\u003e type object constructed from input \u003ccode\u003eline\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"    public static Command parse(String line) {","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"        Command cmd \u003d new Command();","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"        String command;","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":"        String cmdContent;","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":"        int cmdIdx;","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"        cmd.setLine(line);","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"        cmdIdx \u003d line.indexOf(\" \");","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"        if(cmdIdx \u003d\u003d -1) {","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"            cmdIdx \u003d line.length();","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"        cmd.setCmdIdx(cmdIdx);","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"        command \u003d line.substring(0, cmdIdx);","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"        cmd.setCommand(command);","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"        if(cmdIdx \u003d\u003d line.length()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"            cmdContent \u003d \"\";","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"        } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"            cmdContent \u003d line.substring(cmdIdx + 1);","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"        cmd.setCmdContent(cmdContent);","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"        return cmd;","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"Zemdalk":40}},{"path":"src/main/java/duke/command/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"import java.io.File;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":" * Contains the operations involving with file I/O.","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"public class Storage {","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"    private File listFile;","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"    private int listnum;","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"     * Get the number of items in task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"     * @return Number of items in task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"    public int getListnum() {","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"        return listnum;","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"     * Get the list of tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"     * @return List of tasks in \u003ccode\u003eArrayList\u003cTask\u003e\u003c/code\u003e type.","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"        return tasks;","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"Zemdalk"},"content":"     * Constructor of \u003ccode\u003eStorage\u003c/code\u003e class.","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"Zemdalk"},"content":"     * @param filePath File which stores data of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"Zemdalk"},"content":"     * @throws IOException If \u003ccode\u003eIOException\u003c/code\u003e appears in reading or creating the file.","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"Zemdalk"},"content":"    public Storage(String filePath) throws IOException {","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"Zemdalk"},"content":"        listFile \u003d new File(filePath);","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"Zemdalk"},"content":"        // create file `f` if it does not exist","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"Zemdalk"},"content":"        if(!listFile.exists()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":50,"author":{"gitId":"Zemdalk"},"content":"            if(!listFile.getParentFile().exists()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":51,"author":{"gitId":"Zemdalk"},"content":"                listFile.getParentFile().mkdirs();","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"Zemdalk"},"content":"            listFile.createNewFile();","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"Zemdalk"},"content":"        listnum \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"Zemdalk"},"content":"     * Save \u003ccode\u003eDuke\u003c/code\u003e data(the \u003ccode\u003etodoList\u003c/code\u003e) to data file.","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"Zemdalk"},"content":"     * @throws IOException If saver encounters \u003ccode\u003eIOException\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"Zemdalk"},"content":"    public void save() throws IOException {","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"Zemdalk"},"content":"        FileWriter saver \u003d new FileWriter(listFile);","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"Zemdalk"},"content":"        listnum \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"Zemdalk"},"content":"        for(Task task : tasks) {","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"Zemdalk"},"content":"            // construct one line in file","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"Zemdalk"},"content":"            String line \u003d task.getTypeIcon() + \" | \" ","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"Zemdalk"},"content":"                        + (task.getStatusIcon().equals(\"X\") ? \"1\" : \"0\") + \" | \" ","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"Zemdalk"},"content":"                        + task.getDescription();","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"Zemdalk"},"content":"            if(task.getTypeIcon() \u003d\u003d \u0027D\u0027 || task.getTypeIcon() \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"Zemdalk"},"content":"                line +\u003d \" | \" + task.getTimeBound();","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"Zemdalk"},"content":"            saver.append(line + System.lineSeparator());","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"Zemdalk"},"content":"            listnum++;","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"Zemdalk"},"content":"        saver.close();","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":80,"author":{"gitId":"Zemdalk"},"content":"     * Load \u003ccode\u003eDuke\u003c/code\u003e data(the \u003ccode\u003etodoList\u003c/code\u003e) from data file.","lastModifiedDate":"2023-03-02"},{"lineNumber":81,"author":{"gitId":"Zemdalk"},"content":"     * @return The \u003ccode\u003eStorage\u003c/code\u003e class containing all data read from data file.","lastModifiedDate":"2023-03-02"},{"lineNumber":82,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If data in data file is not written in correct form,","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"Zemdalk"},"content":"     * e.g. the type is not \u0027T\u0027, \u0027D\u0027 or \u0027E\u0027.","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":85,"author":{"gitId":"Zemdalk"},"content":"    public Storage load() throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"Zemdalk"},"content":"        try (Scanner in \u003d new Scanner(listFile)) {","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"Zemdalk"},"content":"            while(in.hasNext()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"Zemdalk"},"content":"                String line \u003d in.nextLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"Zemdalk"},"content":"                Task task;","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"Zemdalk"},"content":"                int typeIdx \u003d line.indexOf(\" | \");","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"Zemdalk"},"content":"                String type \u003d line.substring(0, typeIdx);","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"Zemdalk"},"content":"                int doneIdx \u003d line.indexOf(\" | \", typeIdx + \" | \".length());","lastModifiedDate":"2023-02-23"},{"lineNumber":95,"author":{"gitId":"Zemdalk"},"content":"                String done \u003d line.substring(typeIdx + \" | \".length(), doneIdx);","lastModifiedDate":"2023-02-23"},{"lineNumber":96,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":97,"author":{"gitId":"Zemdalk"},"content":"                if(type.equals(\"T\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"Zemdalk"},"content":"                    String desc \u003d line.substring(doneIdx + \" | \".length());","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"Zemdalk"},"content":"                    task \u003d new Todo(desc);","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"Zemdalk"},"content":"                } else if(type.equals(\"D\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"Zemdalk"},"content":"                    int descIdx \u003d line.indexOf(\" | \", doneIdx + \" | \".length());","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"Zemdalk"},"content":"                    String desc \u003d line.substring(doneIdx + \" | \".length(), descIdx);","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"Zemdalk"},"content":"                    ","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"Zemdalk"},"content":"                    String by \u003d line.substring(descIdx + \" | \".length());","lastModifiedDate":"2023-02-23"},{"lineNumber":105,"author":{"gitId":"Zemdalk"},"content":"                    task \u003d new Deadline(desc, by);","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"Zemdalk"},"content":"                } else if(type.equals(\"E\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"Zemdalk"},"content":"                    int descIdx \u003d line.indexOf(\" | \", doneIdx + \" | \".length());","lastModifiedDate":"2023-02-23"},{"lineNumber":108,"author":{"gitId":"Zemdalk"},"content":"                    String desc \u003d line.substring(doneIdx + \" | \".length(), descIdx);","lastModifiedDate":"2023-02-23"},{"lineNumber":109,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"Zemdalk"},"content":"                    int fromIdx \u003d line.indexOf(\"-\", descIdx + \" | \".length());","lastModifiedDate":"2023-02-23"},{"lineNumber":111,"author":{"gitId":"Zemdalk"},"content":"                    String from \u003d line.substring(descIdx + \" | \".length(), fromIdx);","lastModifiedDate":"2023-02-23"},{"lineNumber":112,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":113,"author":{"gitId":"Zemdalk"},"content":"                    String to \u003d line.substring(fromIdx + \"-\".length());","lastModifiedDate":"2023-02-23"},{"lineNumber":114,"author":{"gitId":"Zemdalk"},"content":"                    task \u003d new Event(desc, from, to);","lastModifiedDate":"2023-02-23"},{"lineNumber":115,"author":{"gitId":"Zemdalk"},"content":"                } else {","lastModifiedDate":"2023-02-23"},{"lineNumber":116,"author":{"gitId":"Zemdalk"},"content":"                    in.close();","lastModifiedDate":"2023-02-23"},{"lineNumber":117,"author":{"gitId":"Zemdalk"},"content":"                    throw new DukeException(\"Unknown task type!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":118,"author":{"gitId":"Zemdalk"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":119,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":120,"author":{"gitId":"Zemdalk"},"content":"                task.setIsDone(done.equals(\"1\") ? true : false);","lastModifiedDate":"2023-02-23"},{"lineNumber":121,"author":{"gitId":"Zemdalk"},"content":"                tasks.add(task);","lastModifiedDate":"2023-02-23"},{"lineNumber":122,"author":{"gitId":"Zemdalk"},"content":"                listnum++;","lastModifiedDate":"2023-02-23"},{"lineNumber":123,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":124,"author":{"gitId":"Zemdalk"},"content":"            in.close();","lastModifiedDate":"2023-02-23"},{"lineNumber":125,"author":{"gitId":"Zemdalk"},"content":"        } catch(FileNotFoundException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":126,"author":{"gitId":"Zemdalk"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-23"},{"lineNumber":127,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":128,"author":{"gitId":"Zemdalk"},"content":"        return this;","lastModifiedDate":"2023-02-23"},{"lineNumber":129,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":130,"author":{"gitId":"Zemdalk"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"Zemdalk":130}},{"path":"src/main/java/duke/command/TodoList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke.command;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":" * Manages all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"public class TodoList {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"    private static final int MAXLISTNUM \u003d 100;","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"    private static final String SPLITTER \u003d \"    ____________________________________________________________\";","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":"    ","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"    private int listnum;","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"     * Constructor of TodoList. It will get data from \u003ccode\u003eStorage\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object containing \u003ccode\u003eArrayList\u003c/code\u003e for all tasks.","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"     * @throws IOException If any \u003ccode\u003eIOException\u003c/code\u003e occurs in file I/O.","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If any \u003ccode\u003eDukeException\u003c/code\u003e occurs in file I/O.","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"    public TodoList(Storage storage) throws IOException, DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"        this.tasks \u003d storage.getTasks();","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"        this.listnum \u003d storage.getListnum();","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"     * Constructor for TodoList. It will construct a TodoList object with no data.","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"     * @throws IOException If any \u003ccode\u003eIOException\u003c/code\u003e occurs in file I/O.","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If any \u003ccode\u003eDukeException\u003c/code\u003e occurs in file I/O.","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"    public TodoList() throws IOException, DukeException {","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"        listnum \u003d 0;","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"Zemdalk"},"content":"     * Return number of items in task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"Zemdalk"},"content":"     * @return Number of items in task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":47,"author":{"gitId":"Zemdalk"},"content":"    public int getListnum() {","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"Zemdalk"},"content":"        return listnum;","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"Zemdalk"},"content":"     * Set number of items in task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"Zemdalk"},"content":"     * @param listnum Number of items in task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"Zemdalk"},"content":"    public void setListnum(int listnum) {","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"Zemdalk"},"content":"        this.listnum \u003d listnum;","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"Zemdalk"},"content":"     * Add one task to the end of the task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"Zemdalk"},"content":"     * @param task Task to be added.","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"Zemdalk"},"content":"     * @return 0 if exception occurs and 1 if task is successfully added.","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If any \u003ccode\u003eDukeException\u003c/code\u003e occurs.","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"Zemdalk"},"content":"    public int addItem(Task task) throws DukeException {","lastModifiedDate":"2023-02-16"},{"lineNumber":66,"author":{"gitId":"Zemdalk"},"content":"        if(listnum \u003c MAXLISTNUM) {","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"Zemdalk"},"content":"            tasks.add(task);","lastModifiedDate":"2023-02-16"},{"lineNumber":68,"author":{"gitId":"Zemdalk"},"content":"            listnum++;","lastModifiedDate":"2023-02-16"},{"lineNumber":69,"author":{"gitId":"Zemdalk"},"content":"            System.out.println(SPLITTER);","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"Zemdalk"},"content":"            System.out.println(\"    \" + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"Zemdalk"},"content":"            // System.out.println(\"      \" + task.toString());","lastModifiedDate":"2023-02-24"},{"lineNumber":72,"author":{"gitId":"Zemdalk"},"content":"            Ui.showTask(task, 6);","lastModifiedDate":"2023-02-24"},{"lineNumber":73,"author":{"gitId":"Zemdalk"},"content":"            System.out.println(\"    \" + \"Now you have \" + listnum + \" task\" + ((listnum\u003e1) ? \"s\" : \"\") + \" in the list.\");","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"Zemdalk"},"content":"            System.out.println(SPLITTER);","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"Zemdalk"},"content":"            System.out.println();","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"Zemdalk"},"content":"            ","lastModifiedDate":"2023-02-16"},{"lineNumber":77,"author":{"gitId":"Zemdalk"},"content":"            // save to file","lastModifiedDate":"2023-02-16"},{"lineNumber":78,"author":{"gitId":"Zemdalk"},"content":"            try {","lastModifiedDate":"2023-02-16"},{"lineNumber":79,"author":{"gitId":"Zemdalk"},"content":"                storage.save();","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"Zemdalk"},"content":"            } catch(IOException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":81,"author":{"gitId":"Zemdalk"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-02-16"},{"lineNumber":82,"author":{"gitId":"Zemdalk"},"content":"                return 0;","lastModifiedDate":"2023-02-16"},{"lineNumber":83,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":84,"author":{"gitId":"Zemdalk"},"content":"            return 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"Zemdalk"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"This task does not exist!\");","lastModifiedDate":"2023-02-16"},{"lineNumber":87,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"Zemdalk"},"content":"     * Delete one task according to its number in list.","lastModifiedDate":"2023-03-02"},{"lineNumber":92,"author":{"gitId":"Zemdalk"},"content":"     * @param num Number of the item to be deleted in task list.","lastModifiedDate":"2023-03-02"},{"lineNumber":93,"author":{"gitId":"Zemdalk"},"content":"     * @return 0 if exception occurs and 1 if the task is successfully deleted.","lastModifiedDate":"2023-03-02"},{"lineNumber":94,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If any \u003ccode\u003eDukeException\u003c/code\u003e occurs, e.g. ","lastModifiedDate":"2023-03-02"},{"lineNumber":95,"author":{"gitId":"Zemdalk"},"content":"     * deleting a task that does not exist.","lastModifiedDate":"2023-03-02"},{"lineNumber":96,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":97,"author":{"gitId":"Zemdalk"},"content":"    public int deleteItem(int num) throws DukeException {","lastModifiedDate":"2023-02-16"},{"lineNumber":98,"author":{"gitId":"Zemdalk"},"content":"        if(tasks.size() \u003e num) {","lastModifiedDate":"2023-02-16"},{"lineNumber":99,"author":{"gitId":"Zemdalk"},"content":"            System.out.println(SPLITTER);","lastModifiedDate":"2023-02-16"},{"lineNumber":100,"author":{"gitId":"Zemdalk"},"content":"            System.out.println(\"    \" + \"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-02-16"},{"lineNumber":101,"author":{"gitId":"Zemdalk"},"content":"            // System.out.println(\"      \" + tasks.get(num));","lastModifiedDate":"2023-02-24"},{"lineNumber":102,"author":{"gitId":"Zemdalk"},"content":"            Ui.showTask(tasks.get(num), 6);","lastModifiedDate":"2023-02-24"},{"lineNumber":103,"author":{"gitId":"Zemdalk"},"content":"            System.out.println(\"    \" + \"Now you have \" + --listnum + \" task\" + ((listnum\u003e1) ? \"s\" : \"\") + \" in the list.\");","lastModifiedDate":"2023-02-16"},{"lineNumber":104,"author":{"gitId":"Zemdalk"},"content":"            System.out.println(SPLITTER);","lastModifiedDate":"2023-02-16"},{"lineNumber":105,"author":{"gitId":"Zemdalk"},"content":"            System.out.println();","lastModifiedDate":"2023-02-16"},{"lineNumber":106,"author":{"gitId":"Zemdalk"},"content":"            tasks.remove(num);","lastModifiedDate":"2023-02-16"},{"lineNumber":107,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":108,"author":{"gitId":"Zemdalk"},"content":"            // save to file","lastModifiedDate":"2023-02-16"},{"lineNumber":109,"author":{"gitId":"Zemdalk"},"content":"            try {","lastModifiedDate":"2023-02-16"},{"lineNumber":110,"author":{"gitId":"Zemdalk"},"content":"                storage.save();","lastModifiedDate":"2023-02-23"},{"lineNumber":111,"author":{"gitId":"Zemdalk"},"content":"            } catch(IOException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":112,"author":{"gitId":"Zemdalk"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-02-16"},{"lineNumber":113,"author":{"gitId":"Zemdalk"},"content":"                return 0;","lastModifiedDate":"2023-02-16"},{"lineNumber":114,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":115,"author":{"gitId":"Zemdalk"},"content":"            return 1;","lastModifiedDate":"2023-02-16"},{"lineNumber":116,"author":{"gitId":"Zemdalk"},"content":"        } else {","lastModifiedDate":"2023-02-16"},{"lineNumber":117,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"This task does not exist!\");","lastModifiedDate":"2023-02-16"},{"lineNumber":118,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":119,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":120,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":121,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":122,"author":{"gitId":"Zemdalk"},"content":"     * Mark a task as done/not done.","lastModifiedDate":"2023-03-02"},{"lineNumber":123,"author":{"gitId":"Zemdalk"},"content":"     * @param num Number of the task in the list.","lastModifiedDate":"2023-03-02"},{"lineNumber":124,"author":{"gitId":"Zemdalk"},"content":"     * @param mark 1 for done and 0 for not done.","lastModifiedDate":"2023-03-02"},{"lineNumber":125,"author":{"gitId":"Zemdalk"},"content":"     * @return 0 if any exception occurs and 1 if the task is successfully marked.","lastModifiedDate":"2023-03-02"},{"lineNumber":126,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If any \u003ccode\u003eDukeException\u003c/code\u003e occurs, e.g. ","lastModifiedDate":"2023-03-02"},{"lineNumber":127,"author":{"gitId":"Zemdalk"},"content":"     * marking a task that does not exist.","lastModifiedDate":"2023-03-02"},{"lineNumber":128,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":129,"author":{"gitId":"Zemdalk"},"content":"    public int markItem(int num, boolean mark) throws DukeException {","lastModifiedDate":"2023-02-09"},{"lineNumber":130,"author":{"gitId":"Zemdalk"},"content":"        if(num \u003c listnum \u0026\u0026 num \u003e\u003d 0) {","lastModifiedDate":"2023-01-26"},{"lineNumber":131,"author":{"gitId":"Zemdalk"},"content":"            tasks.get(num).mark(mark);","lastModifiedDate":"2023-02-16"},{"lineNumber":132,"author":{"gitId":"Zemdalk"},"content":"            if(mark) {","lastModifiedDate":"2023-01-26"},{"lineNumber":133,"author":{"gitId":"Zemdalk"},"content":"                System.out.println(SPLITTER);","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"Zemdalk"},"content":"                System.out.println(\"    Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-01-26"},{"lineNumber":135,"author":{"gitId":"Zemdalk"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":136,"author":{"gitId":"Zemdalk"},"content":"                System.out.println(SPLITTER);","lastModifiedDate":"2023-02-02"},{"lineNumber":137,"author":{"gitId":"Zemdalk"},"content":"                System.out.println(\"    OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-01-26"},{"lineNumber":138,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":139,"author":{"gitId":"Zemdalk"},"content":"            // System.out.print(\"      \");","lastModifiedDate":"2023-02-24"},{"lineNumber":140,"author":{"gitId":"Zemdalk"},"content":"            // System.out.println(tasks.get(num));","lastModifiedDate":"2023-02-24"},{"lineNumber":141,"author":{"gitId":"Zemdalk"},"content":"            Ui.showTask(tasks.get(num), 6);","lastModifiedDate":"2023-02-24"},{"lineNumber":142,"author":{"gitId":"Zemdalk"},"content":"            System.out.println(SPLITTER);","lastModifiedDate":"2023-01-26"},{"lineNumber":143,"author":{"gitId":"Zemdalk"},"content":"            System.out.println();","lastModifiedDate":"2023-01-26"},{"lineNumber":144,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":145,"author":{"gitId":"Zemdalk"},"content":"            // save to file","lastModifiedDate":"2023-02-16"},{"lineNumber":146,"author":{"gitId":"Zemdalk"},"content":"            try {","lastModifiedDate":"2023-02-16"},{"lineNumber":147,"author":{"gitId":"Zemdalk"},"content":"                storage.save();","lastModifiedDate":"2023-02-23"},{"lineNumber":148,"author":{"gitId":"Zemdalk"},"content":"            } catch(IOException e) {","lastModifiedDate":"2023-02-16"},{"lineNumber":149,"author":{"gitId":"Zemdalk"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-02-16"},{"lineNumber":150,"author":{"gitId":"Zemdalk"},"content":"                return 0;","lastModifiedDate":"2023-02-16"},{"lineNumber":151,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":152,"author":{"gitId":"Zemdalk"},"content":"            return 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":153,"author":{"gitId":"Zemdalk"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":154,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"Index out of bound!\");","lastModifiedDate":"2023-02-09"},{"lineNumber":155,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":156,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":157,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":158,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":159,"author":{"gitId":"Zemdalk"},"content":"     * Show all tasks in the list.","lastModifiedDate":"2023-03-02"},{"lineNumber":160,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":161,"author":{"gitId":"Zemdalk"},"content":"    public void showList() {","lastModifiedDate":"2023-01-26"},{"lineNumber":162,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(SPLITTER);","lastModifiedDate":"2023-01-26"},{"lineNumber":163,"author":{"gitId":"Zemdalk"},"content":"        for(int i \u003d 0; i \u003c listnum; i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":164,"author":{"gitId":"Zemdalk"},"content":"            Ui.showTask(i + 1, tasks.get(i), 4);","lastModifiedDate":"2023-02-24"},{"lineNumber":165,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":166,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(SPLITTER);","lastModifiedDate":"2023-01-26"},{"lineNumber":167,"author":{"gitId":"Zemdalk"},"content":"        System.out.println();","lastModifiedDate":"2023-01-26"},{"lineNumber":168,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":169,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":170,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":171,"author":{"gitId":"Zemdalk"},"content":"     * Used when executing \"find\" command with \"/by\". It will find all tasks","lastModifiedDate":"2023-03-02"},{"lineNumber":172,"author":{"gitId":"Zemdalk"},"content":"     * that ends before \u003ccode\u003eendTimeBefore\u003c/code\u003e and print them out.","lastModifiedDate":"2023-03-02"},{"lineNumber":173,"author":{"gitId":"Zemdalk"},"content":"     * @param endTimeBefore Time provided.","lastModifiedDate":"2023-03-02"},{"lineNumber":174,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If any \u003ccode\u003eDukeException\u003c/code\u003e occurs.","lastModifiedDate":"2023-03-02"},{"lineNumber":175,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":176,"author":{"gitId":"Zemdalk"},"content":"    public void findEndTimeBefore(LocalDateTime endTimeBefore) throws DukeException {","lastModifiedDate":"2023-02-24"},{"lineNumber":177,"author":{"gitId":"Zemdalk"},"content":"        Ui.showLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":178,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(\"     Here are the task(s) ending before \" + ","lastModifiedDate":"2023-02-24"},{"lineNumber":179,"author":{"gitId":"Zemdalk"},"content":"                            endTimeBefore.format(Task.printFormatter) + \" in your list: \");","lastModifiedDate":"2023-02-24"},{"lineNumber":180,"author":{"gitId":"Zemdalk"},"content":"        int counter \u003d 0;","lastModifiedDate":"2023-02-24"},{"lineNumber":181,"author":{"gitId":"Zemdalk"},"content":"        for(Task task : tasks) {","lastModifiedDate":"2023-02-24"},{"lineNumber":182,"author":{"gitId":"Zemdalk"},"content":"            if(!task.haveValidDate()) {","lastModifiedDate":"2023-02-24"},{"lineNumber":183,"author":{"gitId":"Zemdalk"},"content":"                continue;","lastModifiedDate":"2023-02-24"},{"lineNumber":184,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-24"},{"lineNumber":185,"author":{"gitId":"Zemdalk"},"content":"            if(task.getEndTime().isBefore(endTimeBefore) || task.getEndTime().isEqual(endTimeBefore)) {","lastModifiedDate":"2023-02-24"},{"lineNumber":186,"author":{"gitId":"Zemdalk"},"content":"                Ui.showTask(++counter, task, 5);","lastModifiedDate":"2023-02-24"},{"lineNumber":187,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-24"},{"lineNumber":188,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":189,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(\"     (Total \" + counter + \")\");","lastModifiedDate":"2023-02-24"},{"lineNumber":190,"author":{"gitId":"Zemdalk"},"content":"        Ui.showLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":191,"author":{"gitId":"Zemdalk"},"content":"        System.out.println();","lastModifiedDate":"2023-02-24"},{"lineNumber":192,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":193,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":194,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":195,"author":{"gitId":"Zemdalk"},"content":"     * Used when executing \"find\" command without \"/by\". It will find all tasks","lastModifiedDate":"2023-03-02"},{"lineNumber":196,"author":{"gitId":"Zemdalk"},"content":"     * that has \u003ccode\u003epattern\u003c/code\u003e substring in its description.","lastModifiedDate":"2023-03-02"},{"lineNumber":197,"author":{"gitId":"Zemdalk"},"content":"     * @param pattern Pattern string provided.","lastModifiedDate":"2023-03-02"},{"lineNumber":198,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If any \u003ccode\u003eDukeException\u003c/code\u003e occurs.","lastModifiedDate":"2023-03-02"},{"lineNumber":199,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":200,"author":{"gitId":"Zemdalk"},"content":"    public void findDesc(String pattern) throws DukeException {","lastModifiedDate":"2023-02-24"},{"lineNumber":201,"author":{"gitId":"Zemdalk"},"content":"        Ui.showLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":202,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(\"     Here are the matching task(s) in your list: \");","lastModifiedDate":"2023-02-24"},{"lineNumber":203,"author":{"gitId":"Zemdalk"},"content":"        int counter \u003d 0;","lastModifiedDate":"2023-02-24"},{"lineNumber":204,"author":{"gitId":"Zemdalk"},"content":"        for(Task task : tasks) {","lastModifiedDate":"2023-02-24"},{"lineNumber":205,"author":{"gitId":"Zemdalk"},"content":"            if(task.getDescription().contains(pattern)){","lastModifiedDate":"2023-02-24"},{"lineNumber":206,"author":{"gitId":"Zemdalk"},"content":"                Ui.showTask(++counter, task, 5);","lastModifiedDate":"2023-02-24"},{"lineNumber":207,"author":{"gitId":"Zemdalk"},"content":"            }","lastModifiedDate":"2023-02-24"},{"lineNumber":208,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":209,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(\"     (Total \" + counter + \")\");","lastModifiedDate":"2023-02-24"},{"lineNumber":210,"author":{"gitId":"Zemdalk"},"content":"        Ui.showLine();","lastModifiedDate":"2023-02-24"},{"lineNumber":211,"author":{"gitId":"Zemdalk"},"content":"        System.out.println();","lastModifiedDate":"2023-02-24"},{"lineNumber":212,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":213,"author":{"gitId":"Zemdalk"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"Zemdalk":213}},{"path":"src/main/java/duke/command/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke.command;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":" * Represents the UI interface interacting with users.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"public class Ui {","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"    ","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"    private static final String SPLITTER \u003d \"    ____________________________________________________________\";","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"    private static final String logo \u003d ","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"          \" ____        _        \\n\"","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"        + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"        + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":"        + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":"        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"    private static final String enterGreet \u003d \"     Hello! I\u0027m Duke\\n\" + \"     What can I do for you?\";","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"    private static final String exitPrompt \u003d \"     Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"    ","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"    private Scanner in;","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"     * Constructor for \u003ccode\u003eUi\u003c/code\u003e class. It will create a ","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"     * \u003ccode\u003eUi\u003c/code\u003e object accepting standard input as its input stream.","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"    public Ui() {","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"     * Read one line of command.","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"     * @return The command line read.","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"    public String readCommand() {","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"        return in.nextLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"Zemdalk"},"content":"     * Show the \u003ccode\u003eSPLITTER\u003c/code\u003e, i.e. \"    ____________________________________________________________\".","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"Zemdalk"},"content":"    public static void showLine() {","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(SPLITTER);","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"Zemdalk"},"content":"     * Show the error message.","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"Zemdalk"},"content":"     * @param errMsg Error message provided.","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"Zemdalk"},"content":"    public static void showError(String errMsg) {","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"Zemdalk"},"content":"        showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(\"     \" + errMsg);","lastModifiedDate":"2023-02-23"},{"lineNumber":54,"author":{"gitId":"Zemdalk"},"content":"        showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"Zemdalk"},"content":"        System.out.println();","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"Zemdalk"},"content":"     * Show welcome message.","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"Zemdalk"},"content":"    public static void showWelcome() {","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"Zemdalk"},"content":"        showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(enterGreet);","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"Zemdalk"},"content":"        showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"Zemdalk"},"content":"        System.out.println();","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":70,"author":{"gitId":"Zemdalk"},"content":"     * Show information of a task.","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"Zemdalk"},"content":"     * @param num Number of the task.","lastModifiedDate":"2023-03-02"},{"lineNumber":72,"author":{"gitId":"Zemdalk"},"content":"     * @param task Task provided.","lastModifiedDate":"2023-03-02"},{"lineNumber":73,"author":{"gitId":"Zemdalk"},"content":"     * @param leadingSpaceNum Number of leading spaces for better appearance.","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"Zemdalk"},"content":"    public static void showTask(int num, Task task, int leadingSpaceNum) {","lastModifiedDate":"2023-02-24"},{"lineNumber":76,"author":{"gitId":"Zemdalk"},"content":"        for(int i \u003d 0; i \u003c leadingSpaceNum; i++) {","lastModifiedDate":"2023-02-24"},{"lineNumber":77,"author":{"gitId":"Zemdalk"},"content":"            System.out.print(\" \");","lastModifiedDate":"2023-02-24"},{"lineNumber":78,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":79,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(num + \". \" + task);","lastModifiedDate":"2023-02-24"},{"lineNumber":80,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":81,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":82,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"Zemdalk"},"content":"     * Show information of a task.","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"Zemdalk"},"content":"     * @param task Task provided.","lastModifiedDate":"2023-03-02"},{"lineNumber":85,"author":{"gitId":"Zemdalk"},"content":"     * @param leadingSpaceNum Number of leading spaces for better appearance.","lastModifiedDate":"2023-03-02"},{"lineNumber":86,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":87,"author":{"gitId":"Zemdalk"},"content":"    public static void showTask(Task task, int leadingSpaceNum) {","lastModifiedDate":"2023-02-24"},{"lineNumber":88,"author":{"gitId":"Zemdalk"},"content":"        for(int i \u003d 0; i \u003c leadingSpaceNum; i++) {","lastModifiedDate":"2023-02-24"},{"lineNumber":89,"author":{"gitId":"Zemdalk"},"content":"            System.out.print(\" \");","lastModifiedDate":"2023-02-24"},{"lineNumber":90,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":91,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(task);","lastModifiedDate":"2023-02-24"},{"lineNumber":92,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":93,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":94,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":95,"author":{"gitId":"Zemdalk"},"content":"     * Show exit message.","lastModifiedDate":"2023-03-02"},{"lineNumber":96,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":97,"author":{"gitId":"Zemdalk"},"content":"    public static void showExit() {","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"Zemdalk"},"content":"        showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"Zemdalk"},"content":"        System.out.println(exitPrompt);","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"Zemdalk"},"content":"        showLine();","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"Zemdalk"},"content":"        System.out.println();","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"Zemdalk"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"Zemdalk":103}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke.task;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":" * Represents task that has a deadline.","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"    protected String by;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"    protected LocalDateTime localBy;","lastModifiedDate":"2023-02-24"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":"     * Converter for \u003ccode\u003eDeadline\u003c/code\u003e task. It accepts an input in format of an instruction and ","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":"     * returns the \u003ccode\u003eDeadline\u003c/code\u003e task object.","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"     * @param instruction Written in format of \"deadline \u003ccode\u003edescription\u003c/code\u003e /by \u003ccode\u003eby\u003c/code\u003e(deadline)\", ","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"     * e.g. \"deadline Return books /by 2023/03/31 18:00\".","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"     * @return \u003ccode\u003eDeadline\u003c/code\u003e object constructed from input \u003ccode\u003einstruction\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If 1) description is not given; 2) deadline is not given; 3) deadline is in wrong format.","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"    public static Deadline toDeadline(String instruction) throws DukeException {","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"        int contentIdx \u003d instruction.indexOf(\"/by\");","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"        if (contentIdx \u003d\u003d -1) {","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"Please add time of the deadline.\\n\" + \"    \" +","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"                                    \"(Event format: [Deadline Content] /by [Deadline])\");","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"        String deadlineContent \u003d instruction.substring(0, contentIdx);","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"        if (deadlineContent.trim().equals(\"\")) {","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-02-09"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"        String deadlineBy \u003d instruction.substring(contentIdx + \"/by \".length());","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"        ","lastModifiedDate":"2023-02-09"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"        if (deadlineBy.trim().equals(\"\")) {","lastModifiedDate":"2023-02-09"},{"lineNumber":41,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"The time of a deadline cannot be empty.\");","lastModifiedDate":"2023-02-09"},{"lineNumber":42,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":43,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":44,"author":{"gitId":"Zemdalk"},"content":"        return new Deadline(deadlineContent, deadlineBy);","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"Zemdalk"},"content":"     * Constructor for \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"Zemdalk"},"content":"     * @param description Description of \u003ccode\u003eDeadline\u003c/code\u003e task, e.g. \"Return books\".","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"Zemdalk"},"content":"     * @param by Deadline of \u003ccode\u003eDeadline\u003c/code\u003e task, e.g. \"2023/03/31 18:00\".","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"Zemdalk"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"Zemdalk"},"content":"        super(description, \u0027D\u0027);","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"Zemdalk"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"Zemdalk"},"content":"        convertDateTime(by);","lastModifiedDate":"2023-02-24"},{"lineNumber":56,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":57,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":58,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"Zemdalk"},"content":"     * Convert deadline time from \u003ccode\u003eString\u003c/code\u003e type to \u003ccode\u003eLocalDateTime\u003c/code\u003e type.","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"Zemdalk"},"content":"     * If \u003ccode\u003eby\u003c/code\u003e is not in the format of \"yyyy/MM/dd HH:mm\", converter will not work and ","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"Zemdalk"},"content":"     * set the result as \u003ccode\u003enull\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"Zemdalk"},"content":"     * @param by Deadline of the task in \u003ccode\u003eString\u003c/code\u003e type.","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"Zemdalk"},"content":"    private void convertDateTime(String by) {","lastModifiedDate":"2023-02-24"},{"lineNumber":65,"author":{"gitId":"Zemdalk"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":66,"author":{"gitId":"Zemdalk"},"content":"            localBy \u003d LocalDateTime.parse(by, parseFormatter);","lastModifiedDate":"2023-02-24"},{"lineNumber":67,"author":{"gitId":"Zemdalk"},"content":"        } catch(DateTimeParseException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":68,"author":{"gitId":"Zemdalk"},"content":"            localBy \u003d null;","lastModifiedDate":"2023-02-24"},{"lineNumber":69,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":70,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-16"},{"lineNumber":73,"author":{"gitId":"Zemdalk"},"content":"    public String getTimeBound() {","lastModifiedDate":"2023-02-16"},{"lineNumber":74,"author":{"gitId":"Zemdalk"},"content":"        return by;","lastModifiedDate":"2023-02-16"},{"lineNumber":75,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":76,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":77,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"Zemdalk"},"content":"    public String toString() {","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"Zemdalk"},"content":"        if(localBy \u003d\u003d null) {","lastModifiedDate":"2023-02-24"},{"lineNumber":80,"author":{"gitId":"Zemdalk"},"content":"            return super.toString() + \"(by: \" + by + \")\";","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"Zemdalk"},"content":"        }else {","lastModifiedDate":"2023-02-24"},{"lineNumber":82,"author":{"gitId":"Zemdalk"},"content":"            return super.toString() + \"(by: \" + localBy.format(printFormatter) + \")\";","lastModifiedDate":"2023-02-24"},{"lineNumber":83,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":84,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":85,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":86,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-24"},{"lineNumber":87,"author":{"gitId":"Zemdalk"},"content":"    public boolean haveValidDate() {","lastModifiedDate":"2023-02-24"},{"lineNumber":88,"author":{"gitId":"Zemdalk"},"content":"        return (localBy !\u003d null);","lastModifiedDate":"2023-02-24"},{"lineNumber":89,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":90,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":91,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-24"},{"lineNumber":92,"author":{"gitId":"Zemdalk"},"content":"    public LocalDateTime getEndTime() {","lastModifiedDate":"2023-02-24"},{"lineNumber":93,"author":{"gitId":"Zemdalk"},"content":"        return localBy;","lastModifiedDate":"2023-02-24"},{"lineNumber":94,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":95,"author":{"gitId":"Zemdalk"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"Zemdalk":95}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke.task;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":" * Represents task that has both start time and end time.","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"    ","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"    protected String from;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"    protected String to;","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"    protected LocalDateTime localFrom;","lastModifiedDate":"2023-02-24"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"    protected LocalDateTime localTo;","lastModifiedDate":"2023-02-24"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"     * Converter for \u003ccode\u003eEvent\u003c/code\u003e task. It accepts an input in format of an instruction and","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"     * returns the \u003ccode\u003eEvent\u003c/code\u003e task object.","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"     * @param instruction Written in format of \"event \u003ccode\u003edescription\u003c/code\u003e /from \u003ccode\u003efrom\u003c/code\u003e(start time) /to \u003ccode\u003eto\u003c/code\u003e(end time)\", ","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"     * e.g. \"event CS2113 class /from 2023/03/03 16:00 /to 2023/03/03 18:00\".","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"     * @return \u003ccode\u003eEvent\u003c/code\u003e object constructed from input \u003ccode\u003einstruction\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If 1) description is not given; 2) start time is not given; 3) end time is not given;","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"     * 4) start time is in wrong format; 5) end time is in wrong format.","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"    public static Event toEvent(String instruction) throws DukeException {","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"        int contentIdx \u003d instruction.indexOf(\"/from\");","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"        int fromIdx \u003d instruction.indexOf(\"/to\");","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"        if(contentIdx \u003d\u003d -1) {","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"Please add event\u0027s start time.\\n\" + \"    \" +","lastModifiedDate":"2023-02-09"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"                                    \"(Event format: [Event Content] /from [Start Time] /to [End Time])\");","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"        }else if(fromIdx \u003d\u003d -1) {","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"Please add event\u0027s end time.\\n\" + \"    \" +","lastModifiedDate":"2023-02-09"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"                                    \"(Event format: [Event Content] /from [Start Time] /to [End Time])\");","lastModifiedDate":"2023-02-09"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"        String eventContent \u003d instruction.substring(0, contentIdx);","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":41,"author":{"gitId":"Zemdalk"},"content":"        if(eventContent.trim().equals(\"\")) {","lastModifiedDate":"2023-02-09"},{"lineNumber":42,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"The content of an event cannot be empty.\");","lastModifiedDate":"2023-02-09"},{"lineNumber":43,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":44,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":45,"author":{"gitId":"Zemdalk"},"content":"        String eventFrom \u003d instruction.substring(contentIdx + \"/from \".length(), fromIdx);","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":47,"author":{"gitId":"Zemdalk"},"content":"        if(eventFrom.trim().equals(\"\")) {","lastModifiedDate":"2023-02-09"},{"lineNumber":48,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"The start time of an event cannot be empty.\");","lastModifiedDate":"2023-02-09"},{"lineNumber":49,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":50,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":51,"author":{"gitId":"Zemdalk"},"content":"        String eventTo \u003d instruction.substring(fromIdx + \"/to \".length());","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"Zemdalk"},"content":"        ","lastModifiedDate":"2023-02-09"},{"lineNumber":53,"author":{"gitId":"Zemdalk"},"content":"        if(eventTo.trim().equals(\"\")) {","lastModifiedDate":"2023-02-09"},{"lineNumber":54,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"The end time of an event cannot be empty.\");","lastModifiedDate":"2023-02-09"},{"lineNumber":55,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":56,"author":{"gitId":"Zemdalk"},"content":"        ","lastModifiedDate":"2023-02-09"},{"lineNumber":57,"author":{"gitId":"Zemdalk"},"content":"        return new Event(eventContent, eventFrom, eventTo);","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"Zemdalk"},"content":"     * Constructor for \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"Zemdalk"},"content":"     * @param description Description of \u003ccode\u003eEvent\u003c/code\u003e task, e.g. \"CS2113 class\".","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"Zemdalk"},"content":"     * @param from Start time of \u003ccode\u003eEvent\u003c/code\u003e task, e.g. \"2023/03/03 16:00\".","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"Zemdalk"},"content":"     * @param to End time of \u003ccode\u003eEvent\u003c/code\u003e task, e.g. \"2023/03/03 18:00\".","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"Zemdalk"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"Zemdalk"},"content":"        super(description, \u0027E\u0027);","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"Zemdalk"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"Zemdalk"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"Zemdalk"},"content":"        convertDateTime(from, to);","lastModifiedDate":"2023-02-24"},{"lineNumber":71,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":72,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":73,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"Zemdalk"},"content":"     * Convert start time and end time from \u003ccode\u003eString\u003c/code\u003e type to \u003ccode\u003eLocalDateTime\u003c/code\u003e type.","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"Zemdalk"},"content":"     * If \u003ccode\u003efrom\u003c/code\u003e and/or \u003ccode\u003eto\u003c/code\u003e is not in the format of \"yyyy/MM/dd HH:mm\", converter will not work and","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"Zemdalk"},"content":"     * set the result as \u003ccode\u003enull\u003c/code\u003e both.","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"Zemdalk"},"content":"     * @param from Start time of the task in \u003ccode\u003eString\u003c/code\u003e type.","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"Zemdalk"},"content":"     * @param to End time og the task in \u003ccode\u003eString\u003c/code\u003e type.","lastModifiedDate":"2023-03-02"},{"lineNumber":79,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":80,"author":{"gitId":"Zemdalk"},"content":"    private void convertDateTime(String from, String to) {","lastModifiedDate":"2023-02-24"},{"lineNumber":81,"author":{"gitId":"Zemdalk"},"content":"        try {","lastModifiedDate":"2023-02-24"},{"lineNumber":82,"author":{"gitId":"Zemdalk"},"content":"            from \u003d from.substring(0, from.length() - 1);","lastModifiedDate":"2023-02-24"},{"lineNumber":83,"author":{"gitId":"Zemdalk"},"content":"            localFrom \u003d LocalDateTime.parse(from, parseFormatter);","lastModifiedDate":"2023-02-24"},{"lineNumber":84,"author":{"gitId":"Zemdalk"},"content":"            localTo   \u003d LocalDateTime.parse(to  , parseFormatter);","lastModifiedDate":"2023-02-24"},{"lineNumber":85,"author":{"gitId":"Zemdalk"},"content":"        } catch(DateTimeParseException e) {","lastModifiedDate":"2023-02-24"},{"lineNumber":86,"author":{"gitId":"Zemdalk"},"content":"            localFrom \u003d null;","lastModifiedDate":"2023-02-24"},{"lineNumber":87,"author":{"gitId":"Zemdalk"},"content":"            localTo   \u003d null;","lastModifiedDate":"2023-02-24"},{"lineNumber":88,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":89,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":91,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-16"},{"lineNumber":92,"author":{"gitId":"Zemdalk"},"content":"    public String getTimeBound() {","lastModifiedDate":"2023-02-16"},{"lineNumber":93,"author":{"gitId":"Zemdalk"},"content":"        return from + \"-\" + to;","lastModifiedDate":"2023-02-16"},{"lineNumber":94,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":95,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":96,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"Zemdalk"},"content":"    public String toString() {","lastModifiedDate":"2023-02-02"},{"lineNumber":98,"author":{"gitId":"Zemdalk"},"content":"        if (localFrom \u003d\u003d null || localTo \u003d\u003d null) {","lastModifiedDate":"2023-02-24"},{"lineNumber":99,"author":{"gitId":"Zemdalk"},"content":"            return super.toString() + \"(from: \" + from + \"to: \" + to + \")\";","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"Zemdalk"},"content":"        } else {            ","lastModifiedDate":"2023-02-24"},{"lineNumber":101,"author":{"gitId":"Zemdalk"},"content":"            return super.toString() + \"(from: \" + localFrom.format(printFormatter) + \" to: \" + localTo.format(printFormatter) + \")\";","lastModifiedDate":"2023-02-24"},{"lineNumber":102,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-24"},{"lineNumber":103,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":104,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":105,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-24"},{"lineNumber":106,"author":{"gitId":"Zemdalk"},"content":"    public boolean haveValidDate() {","lastModifiedDate":"2023-02-24"},{"lineNumber":107,"author":{"gitId":"Zemdalk"},"content":"        return (localFrom !\u003d null) \u0026\u0026 (localTo !\u003d null);","lastModifiedDate":"2023-02-24"},{"lineNumber":108,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":109,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":110,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-24"},{"lineNumber":111,"author":{"gitId":"Zemdalk"},"content":"    public LocalDateTime getEndTime() {","lastModifiedDate":"2023-02-24"},{"lineNumber":112,"author":{"gitId":"Zemdalk"},"content":"        return localTo;","lastModifiedDate":"2023-02-24"},{"lineNumber":113,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":114,"author":{"gitId":"Zemdalk"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"Zemdalk":114}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke.task;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":" * Represents a task to be processed by \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":" * It has three child classes: \u003ccode\u003eTodo\u003c/code\u003e, \u003ccode\u003eDeadline\u003c/code\u003e and \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-16"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"    public static final String dateTimeParseFormat \u003d \"yyyy/MM/dd\u0027 \u0027HH:mm\";","lastModifiedDate":"2023-02-24"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"    public static final String dateTimePrintFormat \u003d \"MMM dd yyyy hh:mm a\";","lastModifiedDate":"2023-02-24"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"    public static final DateTimeFormatter parseFormatter \u003d DateTimeFormatter.ofPattern(dateTimeParseFormat);","lastModifiedDate":"2023-02-24"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"    public static final DateTimeFormatter printFormatter \u003d DateTimeFormatter.ofPattern(dateTimePrintFormat);","lastModifiedDate":"2023-02-24"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"    ","lastModifiedDate":"2023-02-24"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":"    protected String description;","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"    protected char type;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"     * Constructor of \u003ccode\u003eTask\u003c/code\u003e. It constructs a \u003ccode\u003eTask\u003c/code\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"     * with input description and type of the task.","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"     * @param description Task description, e.g. \"Return books\".","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"     * @param type \u003ccode\u003eTodo\u003c/code\u003e(\u0027T\u0027), \u003ccode\u003eDeadline\u003c/code\u003e(\u0027D\u0027) or \u003ccode\u003eEvent\u003c/code\u003e(\u0027E\u0027).","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"    public Task(String description, char type) {","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"     * Set task description.","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"     * @param description Task description, e.g. \"Return books\".","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"Zemdalk"},"content":"     * Return description of a task.","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"Zemdalk"},"content":"     * @return Task description, e.g. \"Return books\".","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"Zemdalk"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Zemdalk"},"content":"        return description;","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"Zemdalk"},"content":"     * Set the mark whether the task is done.","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"Zemdalk"},"content":"     * @param isDone \u003ccode\u003etrue\u003c/code\u003e for done and \u003ccode\u003efalse\u003c/code\u003e for not done yet.","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"Zemdalk"},"content":"    public void setIsDone(boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"Zemdalk"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"Zemdalk"},"content":"     * Return the mark whether the task is done.","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"Zemdalk"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e for done and \u003ccode\u003efalse\u003c/code\u003e for not done yet.","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"Zemdalk"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"Zemdalk"},"content":"        return isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"Zemdalk"},"content":"     * Return the status icon for whether the task it done.","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"Zemdalk"},"content":"     * @return \" \" if the task is done and \"X\" if the task is done yet.","lastModifiedDate":"2023-03-02"},{"lineNumber":68,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":69,"author":{"gitId":"Zemdalk"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"Zemdalk"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"Zemdalk"},"content":"     * Return the type of the task.","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"Zemdalk"},"content":"     * @return \u0027T\u0027 for \u003ccode\u003eTodo\u003c/code\u003e task, \u0027D\u0027 for \u003ccode\u003eDeadline\u003c/code\u003e task and \u0027E\u0027 for \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"Zemdalk"},"content":"    public char getTypeIcon() {","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"Zemdalk"},"content":"        return type;","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":82,"author":{"gitId":"Zemdalk"},"content":"     * Mark the task as done or not done.","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"Zemdalk"},"content":"     * @param done \u003ccode\u003etrue\u003c/code\u003e to mark the task as done and \u003ccode\u003efalse\u003c/code\u003e for not done yet.","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":85,"author":{"gitId":"Zemdalk"},"content":"    public void mark(boolean done) {","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"Zemdalk"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"Zemdalk"},"content":"     * Get the start time and end time of the task if they exist.","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"Zemdalk"},"content":"     * @return \"\" for \u003ccode\u003eTodo\u003c/code\u003e, \"\u003ccode\u003eby\u003c/code\u003e\" for \u003ccode\u003eDeadline\u003c/code\u003e and \"\u003ccode\u003efrom\u003c/code\u003e- \u003ccode\u003eto\u003c/code\u003e\" for \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":92,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":93,"author":{"gitId":"Zemdalk"},"content":"    public abstract String getTimeBound();","lastModifiedDate":"2023-02-16"},{"lineNumber":94,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":95,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":96,"author":{"gitId":"Zemdalk"},"content":"     * Returns whether input of the time(s) of the task is represented in format corresponding to the ","lastModifiedDate":"2023-03-02"},{"lineNumber":97,"author":{"gitId":"Zemdalk"},"content":"     * required time format that can be handled by \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":98,"author":{"gitId":"Zemdalk"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if it is written in format \"yyyy/MM/dd HH:mm\" and \u003ccode\u003efalse\u003c/code\u003e if it is not.","lastModifiedDate":"2023-03-02"},{"lineNumber":99,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":100,"author":{"gitId":"Zemdalk"},"content":"    public abstract boolean haveValidDate();","lastModifiedDate":"2023-02-24"},{"lineNumber":101,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":102,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":103,"author":{"gitId":"Zemdalk"},"content":"     * Returns the end time of the task. Note that input format of the time(s) of the task must be handleable by \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":104,"author":{"gitId":"Zemdalk"},"content":"     * @return End time of the task in \u003ccode\u003eLocalDateTime\u003c/code\u003e type.","lastModifiedDate":"2023-03-02"},{"lineNumber":105,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":106,"author":{"gitId":"Zemdalk"},"content":"    public abstract LocalDateTime getEndTime();","lastModifiedDate":"2023-02-24"},{"lineNumber":107,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":108,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":109,"author":{"gitId":"Zemdalk"},"content":"    public String toString() {","lastModifiedDate":"2023-02-02"},{"lineNumber":110,"author":{"gitId":"Zemdalk"},"content":"        return (\"[\" + getTypeIcon() + \"] \" + \"[\" + getStatusIcon() + \"] \" + getDescription());","lastModifiedDate":"2023-02-02"},{"lineNumber":111,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":112,"author":{"gitId":"Zemdalk"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"Zemdalk":112}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"package duke.task;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":" * Represents task that has no start time and end time.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"Zemdalk"},"content":"     * Converter for \u003ccode\u003eTodo\u003c/code\u003e task. It accepts an input in format of an instruction and ","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"Zemdalk"},"content":"     * returns the \u003ccode\u003eTodo\u003c/code\u003e task object.","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"Zemdalk"},"content":"     * @param instruction Written in format of \"todo \u003ccode\u003edescription\u003c/code\u003e\", ","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"Zemdalk"},"content":"     * e.g. \"todo Return books\".","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"Zemdalk"},"content":"     * @return \u003ccode\u003eTodo\u003c/code\u003e object constructed from input \u003ccode\u003einstruction\u003c/code\u003e.","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"Zemdalk"},"content":"     * @throws DukeException If the description is not given.","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"Zemdalk"},"content":"    public static Todo toTodo(String instruction) throws DukeException {","lastModifiedDate":"2023-02-09"},{"lineNumber":21,"author":{"gitId":"Zemdalk"},"content":"        if(instruction.equals(\"\")) {","lastModifiedDate":"2023-02-09"},{"lineNumber":22,"author":{"gitId":"Zemdalk"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-02-09"},{"lineNumber":23,"author":{"gitId":"Zemdalk"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":24,"author":{"gitId":"Zemdalk"},"content":"        ","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"Zemdalk"},"content":"        return new Todo(instruction);","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"Zemdalk"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"Zemdalk"},"content":"     * Constructor for \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"Zemdalk"},"content":"     * @param description Description of \u003ccode\u003eTodo\u003c/code\u003e task, e.g. \"Return books\".","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"Zemdalk"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"Zemdalk"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"Zemdalk"},"content":"        super(description, \u0027T\u0027);","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":36,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-16"},{"lineNumber":37,"author":{"gitId":"Zemdalk"},"content":"    public String getTimeBound() {","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"Zemdalk"},"content":"        return \"\";","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":41,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-24"},{"lineNumber":42,"author":{"gitId":"Zemdalk"},"content":"    public boolean haveValidDate() {","lastModifiedDate":"2023-02-24"},{"lineNumber":43,"author":{"gitId":"Zemdalk"},"content":"        return false;","lastModifiedDate":"2023-02-24"},{"lineNumber":44,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":45,"author":{"gitId":"Zemdalk"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":46,"author":{"gitId":"Zemdalk"},"content":"    @Override","lastModifiedDate":"2023-02-24"},{"lineNumber":47,"author":{"gitId":"Zemdalk"},"content":"    public LocalDateTime getEndTime() {","lastModifiedDate":"2023-02-24"},{"lineNumber":48,"author":{"gitId":"Zemdalk"},"content":"        return null;","lastModifiedDate":"2023-02-24"},{"lineNumber":49,"author":{"gitId":"Zemdalk"},"content":"    }","lastModifiedDate":"2023-02-24"},{"lineNumber":50,"author":{"gitId":"Zemdalk"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"Zemdalk":50}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Zemdalk"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"Zemdalk"},"content":"todo write java codes","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"Zemdalk"},"content":"todo see friend John","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"Zemdalk"},"content":"event group meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"Zemdalk"},"content":"deadline oop assignment /by Thu 5pm","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"Zemdalk"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"Zemdalk"},"content":"mark 2","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"Zemdalk"},"content":"mark 3","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"Zemdalk"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"Zemdalk"},"content":"unmark 2","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"Zemdalk"},"content":"list","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"Zemdalk"},"content":"bye","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"Zemdalk":12}}]
