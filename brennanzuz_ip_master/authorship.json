[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"brennanzuz"},"content":"# DukeNUS project template","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"brennanzuz"},"content":"3. After that, locate the `src/main/java/DukeNUS.java` file, right-click it, and choose `Run DukeNUS.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"brennanzuz":2,"-":22}},{"path":"src/main/java/DukeNUS.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brennanzuz"},"content":"import io.DukeNUSPrinter;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"brennanzuz"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"brennanzuz"},"content":"import tasks.Event;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"brennanzuz"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"brennanzuz"},"content":"import tasks.Todo;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"brennanzuz"},"content":"import java.util.Objects;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"brennanzuz"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"brennanzuz"},"content":"import static java.lang.Integer.parseInt;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"brennanzuz"},"content":"public class DukeNUS {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"brennanzuz"},"content":"    private static Task[] tasks \u003d new Task[100]; //Assuming the user will not have more than 100 tasks.","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"brennanzuz"},"content":"    private static int taskCount \u003d 0; //The count of the valid objects in the tasks array that is incremented on pushing into it.","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"brennanzuz"},"content":"     * @param todo A newly constructed todo object as a child of Task that has a user-defined description.","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"brennanzuz"},"content":"    public static void addTodo(Todo todo) {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"brennanzuz"},"content":"        tasks[taskCount] \u003d todo;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"brennanzuz"},"content":"        taskCount +\u003d 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"brennanzuz"},"content":"        DukeNUSPrinter.printAddedTask(todo.getTaskString(), taskCount);","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"brennanzuz"},"content":"     * @param deadline A newly constructed deadline object as a child of Task that has a user-defined description","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"brennanzuz"},"content":"     *                 and due date.","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"brennanzuz"},"content":"    public static void addDeadline(Deadline deadline) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"brennanzuz"},"content":"        tasks[taskCount] \u003d deadline;","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"brennanzuz"},"content":"        taskCount +\u003d 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"brennanzuz"},"content":"        DukeNUSPrinter.printAddedTask(deadline.getTaskString(), taskCount);","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"brennanzuz"},"content":"     * @param event A newly constructed event object as a child of Task that has a user-defined description,","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"brennanzuz"},"content":"     *              from date, and to date.","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"brennanzuz"},"content":"    public static void addEvent(Event event) {","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"brennanzuz"},"content":"        tasks[taskCount] \u003d event;","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"brennanzuz"},"content":"        taskCount +\u003d 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"brennanzuz"},"content":"        DukeNUSPrinter.printAddedTask(event.getTaskString(), taskCount);","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"brennanzuz"},"content":"     * @param taskIndex The 1-based index of the task the user is referring to. Will cause the isDone property of the","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"brennanzuz"},"content":"     *                  task to be true.","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"brennanzuz"},"content":"    public static void markTask(int taskIndex) {","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"brennanzuz"},"content":"        tasks[taskIndex - 1].setDone(true);","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"brennanzuz"},"content":"        DukeNUSPrinter.printMarkedTask(tasks[taskIndex - 1].getTaskString());","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"brennanzuz"},"content":"     * @param taskIndex The 1-based index of the task the user is referring to. Will cause the isDone property of the","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"brennanzuz"},"content":"     *                  task to be false.","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"brennanzuz"},"content":"    public static void unmarkTask(int taskIndex) {","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"brennanzuz"},"content":"        tasks[taskIndex - 1].setDone(false);","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"brennanzuz"},"content":"        DukeNUSPrinter.printUnmarkedTask(tasks[taskIndex - 1].getTaskString());","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":63,"author":{"gitId":"brennanzuz"},"content":"     * Directs the input to execute the correct command.","lastModifiedDate":"2023-02-07"},{"lineNumber":64,"author":{"gitId":"brennanzuz"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":65,"author":{"gitId":"brennanzuz"},"content":"     * @param userInputWords The complete sentence the user inputted, often consisting of the command as the first word","lastModifiedDate":"2023-02-07"},{"lineNumber":66,"author":{"gitId":"brennanzuz"},"content":"     *                       and its arguments as its subsequent words.","lastModifiedDate":"2023-02-07"},{"lineNumber":67,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":68,"author":{"gitId":"brennanzuz"},"content":"    private static void interpret_command(String[] userInputWords) {","lastModifiedDate":"2023-02-07"},{"lineNumber":69,"author":{"gitId":"brennanzuz"},"content":"        switch (userInputWords[0]) {","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"brennanzuz"},"content":"        case \"list\":","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"brennanzuz"},"content":"            if (taskCount \u003d\u003d 0) {","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printMessage(\"You have no tasks. ¯\\\\_(ツ)_/¯\");","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"brennanzuz"},"content":"            } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printTasks(tasks, taskCount);","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"brennanzuz"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"brennanzuz"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"brennanzuz"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"brennanzuz"},"content":"            try {","lastModifiedDate":"2023-02-07"},{"lineNumber":79,"author":{"gitId":"brennanzuz"},"content":"                markTask(parseInt(userInputWords[1]));","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"brennanzuz"},"content":"            } catch (ArrayIndexOutOfBoundsException exception) {","lastModifiedDate":"2023-02-07"},{"lineNumber":81,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printMessage(\"☹ Error: The index of the task is missing or out of bounds.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":82,"author":{"gitId":"brennanzuz"},"content":"            } catch (NumberFormatException exception) {","lastModifiedDate":"2023-02-07"},{"lineNumber":83,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printMessage(\"☹ Error: The task index you have entered is not a number.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":84,"author":{"gitId":"brennanzuz"},"content":"            } catch (NullPointerException exception) {","lastModifiedDate":"2023-02-07"},{"lineNumber":85,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printMessage(\"☹ Error: The task index you have provided returns a null task.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":86,"author":{"gitId":"brennanzuz"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"brennanzuz"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"brennanzuz"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"brennanzuz"},"content":"            try {","lastModifiedDate":"2023-02-07"},{"lineNumber":90,"author":{"gitId":"brennanzuz"},"content":"                unmarkTask(parseInt(userInputWords[1]));","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"brennanzuz"},"content":"            } catch (ArrayIndexOutOfBoundsException exception) {","lastModifiedDate":"2023-02-07"},{"lineNumber":92,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printMessage(\"☹ Error: The index of the task is missing or out of bounds.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":93,"author":{"gitId":"brennanzuz"},"content":"            } catch (NumberFormatException exception) {","lastModifiedDate":"2023-02-07"},{"lineNumber":94,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printMessage(\"☹ Error: The task index you have entered is not a number.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":95,"author":{"gitId":"brennanzuz"},"content":"            } catch (NullPointerException exception) {","lastModifiedDate":"2023-02-07"},{"lineNumber":96,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printMessage(\"☹ Error: The task index you have provided returns a null task.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":97,"author":{"gitId":"brennanzuz"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"brennanzuz"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"brennanzuz"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"brennanzuz"},"content":"            try {","lastModifiedDate":"2023-02-07"},{"lineNumber":101,"author":{"gitId":"brennanzuz"},"content":"                addTodo(new Todo(userInputWords[1]));","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"brennanzuz"},"content":"            } catch (ArrayIndexOutOfBoundsException exception) {","lastModifiedDate":"2023-02-07"},{"lineNumber":103,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printMessage(\"☹ Error: please specify the description of the todo.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":104,"author":{"gitId":"brennanzuz"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":105,"author":{"gitId":"brennanzuz"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"brennanzuz"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"brennanzuz"},"content":"            try {","lastModifiedDate":"2023-02-07"},{"lineNumber":108,"author":{"gitId":"brennanzuz"},"content":"                String[] deadlineInput \u003d userInputWords[1].split(\"/\", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"brennanzuz"},"content":"                addDeadline(new Deadline(deadlineInput[0], deadlineInput[1]));","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"brennanzuz"},"content":"            } catch (ArrayIndexOutOfBoundsException exception) {","lastModifiedDate":"2023-02-07"},{"lineNumber":111,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printMessage(\"☹ Error: incorrect syntax. Correct usage: \" +","lastModifiedDate":"2023-02-07"},{"lineNumber":112,"author":{"gitId":"brennanzuz"},"content":"                        \"`deadline [description] /by [deadline]`.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":113,"author":{"gitId":"brennanzuz"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":114,"author":{"gitId":"brennanzuz"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"brennanzuz"},"content":"        case \"event\":","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"brennanzuz"},"content":"            try {","lastModifiedDate":"2023-02-07"},{"lineNumber":117,"author":{"gitId":"brennanzuz"},"content":"                String[] eventInput \u003d userInputWords[1].split(\"/\", 3);","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"brennanzuz"},"content":"                addEvent(new Event(eventInput[0], eventInput[1], eventInput[2]));","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"brennanzuz"},"content":"            } catch (ArrayIndexOutOfBoundsException exception) {","lastModifiedDate":"2023-02-07"},{"lineNumber":120,"author":{"gitId":"brennanzuz"},"content":"                DukeNUSPrinter.printMessage(\"☹ Error: incorrect syntax. Correct usage: \" +","lastModifiedDate":"2023-02-07"},{"lineNumber":121,"author":{"gitId":"brennanzuz"},"content":"                        \"`event [description] /from [start_date] /to [end_date]`.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":122,"author":{"gitId":"brennanzuz"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":123,"author":{"gitId":"brennanzuz"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":124,"author":{"gitId":"brennanzuz"},"content":"        default:","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"brennanzuz"},"content":"            DukeNUSPrinter.printMessage(\"☹ Error: Unknown command. Please try again.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":126,"author":{"gitId":"brennanzuz"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":127,"author":{"gitId":"brennanzuz"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":129,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":130,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":131,"author":{"gitId":"brennanzuz"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-07"},{"lineNumber":132,"author":{"gitId":"brennanzuz"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-07"},{"lineNumber":133,"author":{"gitId":"brennanzuz"},"content":"        DukeNUSPrinter.printWelcomeMessage();","lastModifiedDate":"2023-02-07"},{"lineNumber":134,"author":{"gitId":"brennanzuz"},"content":"        String userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-02-07"},{"lineNumber":135,"author":{"gitId":"brennanzuz"},"content":"        String[] userInputWords \u003d userInput.split(\" \", 2); //Contains 2 strings from the user delimited by spaces. The first word is the command and the subsequent words are arguments.","lastModifiedDate":"2023-02-07"},{"lineNumber":136,"author":{"gitId":"brennanzuz"},"content":"        //Continue reading the first word until \"bye\" is said.","lastModifiedDate":"2023-02-07"},{"lineNumber":137,"author":{"gitId":"brennanzuz"},"content":"        while (!Objects.equals(userInput, \"bye\")) {","lastModifiedDate":"2023-02-07"},{"lineNumber":138,"author":{"gitId":"brennanzuz"},"content":"            interpret_command(userInputWords);","lastModifiedDate":"2023-02-07"},{"lineNumber":139,"author":{"gitId":"brennanzuz"},"content":"            userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":140,"author":{"gitId":"brennanzuz"},"content":"            userInputWords \u003d userInput.split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":141,"author":{"gitId":"brennanzuz"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":142,"author":{"gitId":"brennanzuz"},"content":"        DukeNUSPrinter.printFarewellMessage();","lastModifiedDate":"2023-02-01"},{"lineNumber":143,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":144,"author":{"gitId":"brennanzuz"},"content":"}","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":146,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"brennanzuz":146}},{"path":"src/main/java/io/DukeNUSPrinter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brennanzuz"},"content":"package io;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"brennanzuz"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"brennanzuz"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"brennanzuz"},"content":" * A tool to print messages to the terminal. Used by Duke chatbot.","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"brennanzuz"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"brennanzuz"},"content":"public class DukeNUSPrinter {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"brennanzuz"},"content":"    public static final String LOGO \u003d \"\"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"brennanzuz"},"content":"            + \"     ____        _          __    _ _   _ ______\\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"brennanzuz"},"content":"            + \"    |  _ \\\\ _   _| | _____  |   \\\\ | | | | | _____|\\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"brennanzuz"},"content":"            + \"    | | | | | | | |/ / _ \\\\ | |\\\\ \\\\| | | | |_____ |\\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"brennanzuz"},"content":"            + \"    | |_| | |_| |   \u003c  __/ | | \\\\ \\\\ | |_| |____| | \\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"brennanzuz"},"content":"            + \"    |____/ \\\\__,_|_|\\\\_\\\\___| |_|  \\\\__|_____|______|\\n\";","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"brennanzuz"},"content":"    public static final String INDENT \u003d \"    \";","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"brennanzuz"},"content":"    public static void printHorizontalLine() {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"brennanzuz"},"content":"        System.out.println(INDENT + \"____________________________________________________________\");","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"brennanzuz"},"content":"     * Prints a DukeNUS message bound by horizontal lines above and below to the console. Only single lines should be used.","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"brennanzuz"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"brennanzuz"},"content":"     * @param message The single line message to be bound by horizontal lines","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"brennanzuz"},"content":"    public static void printMessage(String message) {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"brennanzuz"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"brennanzuz"},"content":"        System.out.println(INDENT + message);","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"brennanzuz"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"brennanzuz"},"content":"     * Prints a message to the console whenever a task is added to the tasks array.","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"brennanzuz"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"brennanzuz"},"content":"     * @param taskDisplayDescription The formatted description of the task with indications of its isDone and Task object type.","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"brennanzuz"},"content":"     * @param taskCount              The total number of tasks in the tasks array that is not null.","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"brennanzuz"},"content":"    public static void printAddedTask(String taskDisplayDescription, int taskCount) {","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"brennanzuz"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"brennanzuz"},"content":"        System.out.println(INDENT + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"brennanzuz"},"content":"        System.out.println(INDENT + taskDisplayDescription);","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"brennanzuz"},"content":"        System.out.println(INDENT + \"You now have \" + taskCount + \" tasks in the list.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"brennanzuz"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":47,"author":{"gitId":"brennanzuz"},"content":"     * Prints a message to the console whenever a task is marked.","lastModifiedDate":"2023-02-07"},{"lineNumber":48,"author":{"gitId":"brennanzuz"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":49,"author":{"gitId":"brennanzuz"},"content":"     * @param taskDisplayDescription The formatted description of the task with indications of its isDone and Task object type.","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"brennanzuz"},"content":"    public static void printMarkedTask(String taskDisplayDescription) {","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"brennanzuz"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"brennanzuz"},"content":"        System.out.println(INDENT + \"Congratulations! You have finished this task:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"brennanzuz"},"content":"        System.out.println(INDENT + taskDisplayDescription);","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"brennanzuz"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":59,"author":{"gitId":"brennanzuz"},"content":"     * Prints a message to the console whenever a task is unmarked.","lastModifiedDate":"2023-02-07"},{"lineNumber":60,"author":{"gitId":"brennanzuz"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":61,"author":{"gitId":"brennanzuz"},"content":"     * @param taskDisplayDescription The formatted description of the task with indications of its isDone and Task object type","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"brennanzuz"},"content":"    public static void printUnmarkedTask(String taskDisplayDescription) {","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"brennanzuz"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"brennanzuz"},"content":"        System.out.println(INDENT + \"The following task is now marked as undone:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"brennanzuz"},"content":"        System.out.println(INDENT + taskDisplayDescription);","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"brennanzuz"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":71,"author":{"gitId":"brennanzuz"},"content":"     * Prints all tasks in the tasks array that is not null.","lastModifiedDate":"2023-02-07"},{"lineNumber":72,"author":{"gitId":"brennanzuz"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":73,"author":{"gitId":"brennanzuz"},"content":"     * @param tasks     The array of tasks. The array used in practice is of fixed size 100.","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"brennanzuz"},"content":"     * @param taskCount The number of non-null tasks already pushed into the array.","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"brennanzuz"},"content":"    public static void printTasks(Task[] tasks, int taskCount) {","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"brennanzuz"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"brennanzuz"},"content":"        System.out.println(INDENT + \"Here are the tasks in your list:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"brennanzuz"},"content":"        for (int i \u003d 0; i \u003c taskCount; i +\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"brennanzuz"},"content":"            System.out.println(INDENT + (i + 1) + \u0027.\u0027 + tasks[i].getTaskString());","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"brennanzuz"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"brennanzuz"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"brennanzuz"},"content":"    public static void printWelcomeMessage() {","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"brennanzuz"},"content":"        printMessage(\"Hello from\\n\" + LOGO + INDENT + \"Hello! I\u0027m Duke-NUS Medical School. \\n\" + INDENT + \"What can I do for you?\");","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"brennanzuz"},"content":"    public static void printFarewellMessage() {","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"brennanzuz"},"content":"        printMessage(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"brennanzuz"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"brennanzuz":92}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brennanzuz"},"content":"package tasks;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"brennanzuz"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"brennanzuz"},"content":" * A Deadline object is a Task object that has a due date.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"brennanzuz"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"brennanzuz"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"brennanzuz"},"content":"    private String by;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"brennanzuz"},"content":"    public String getBy() {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"brennanzuz"},"content":"        return by;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"brennanzuz"},"content":"    public void setBy(String by) {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"brennanzuz"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"brennanzuz"},"content":"        setDescription(getDescription() + \u0027(\u0027 + by + \u0027)\u0027);","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"brennanzuz"},"content":"    /** Upon creating the Deadline, the by date will be concatenated into the displayed description.","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"brennanzuz"},"content":"     * @param description The description of this task.","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"brennanzuz"},"content":"     * @param by The date this task has to be done.","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"brennanzuz"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"brennanzuz"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"brennanzuz"},"content":"        setBy(by);","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"brennanzuz"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"brennanzuz":26}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brennanzuz"},"content":"package tasks;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"brennanzuz"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"brennanzuz"},"content":"    private String from;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"brennanzuz"},"content":"    private String to;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"brennanzuz"},"content":"    public String getFrom() {","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"brennanzuz"},"content":"        return from;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"brennanzuz"},"content":"    public void setFrom(String from) {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"brennanzuz"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"brennanzuz"},"content":"        setDescription(getDescription() + \u0027(\u0027 + from);","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"brennanzuz"},"content":"    public String getTo() {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"brennanzuz"},"content":"        return to;","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"brennanzuz"},"content":"    public void setTo(String to) {","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"brennanzuz"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"brennanzuz"},"content":"        setDescription(getDescription() + to + \u0027)\u0027);","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"brennanzuz"},"content":"    /** Upon creating the event, the from and to dates will be concatenated to the displayed description.","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"brennanzuz"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"brennanzuz"},"content":"     * @param from The date this event begins.","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"brennanzuz"},"content":"     * @param to The date this event ends.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"brennanzuz"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"brennanzuz"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"brennanzuz"},"content":"        setFrom(from);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"brennanzuz"},"content":"        setTo(to);","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"brennanzuz"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"brennanzuz":35}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brennanzuz"},"content":"package tasks;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"brennanzuz"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"brennanzuz"},"content":" * A Task object contains a description of the task, and isDone boolean to indicate whether this task has been completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"brennanzuz"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"brennanzuz"},"content":"public class Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"brennanzuz"},"content":"    private String description;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"brennanzuz"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"brennanzuz"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"brennanzuz"},"content":"        return description;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"brennanzuz"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"brennanzuz"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"brennanzuz"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"brennanzuz"},"content":"        return isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"brennanzuz"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"brennanzuz"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"brennanzuz"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"brennanzuz"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"brennanzuz"},"content":"        setDescription(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"brennanzuz"},"content":"        setDone(false);","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"brennanzuz"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"brennanzuz"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"brennanzuz"},"content":"            return \"X\";","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"brennanzuz"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"brennanzuz"},"content":"            return \" \";","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"brennanzuz"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"brennanzuz"},"content":"     * @return A formatted string that indicates the type of the task using a single letter \u0027T\u0027, \u0027D\u0027, or \u0027E\u0027 in brackets","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"brennanzuz"},"content":"     * \"[]\" corresponding to a \"Todo\", \"Deadline\", or \"Event\" respectively. Followed by a space \u0027 \u0027 or a \u0027X\u0027 indicating an","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"brennanzuz"},"content":"     * undone or done task respectively. Followed by the description of the task.","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"brennanzuz"},"content":"    public String getTaskString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"brennanzuz"},"content":"        return \u0027[\u0027 + this.getClass().getSimpleName().substring(0, 1) + \"][\" + getStatusIcon() + \"] \" + getDescription();","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"brennanzuz"},"content":"}","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"brennanzuz":51}},{"path":"src/main/java/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brennanzuz"},"content":"package tasks;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"brennanzuz"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"brennanzuz"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"brennanzuz"},"content":" * A Todo object is simply a Task object with only a description.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"brennanzuz"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"brennanzuz"},"content":"public class Todo extends Task{","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"brennanzuz"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"brennanzuz"},"content":"     * @param description The description of the task to be done.","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"brennanzuz"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"brennanzuz"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"brennanzuz"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"brennanzuz"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"brennanzuz"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"brennanzuz":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"brennanzuz"},"content":"java -classpath ..\\bin DukeNUS \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"brennanzuz":1,"-":20}}]
