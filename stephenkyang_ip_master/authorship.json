[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"stephenkyang"},"content":"### Stores and saves your tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"stephenkyang"},"content":"If you need a quick checklist, you can use this CLI-based digital checklist that saves your previous tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"stephenkyang"},"content":"### Ability to mark tasks as complete and delete tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"stephenkyang"},"content":"After completion, users can mark their tasks and delete them as they wish.","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"stephenkyang"},"content":"### `Keyword` - todo","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"stephenkyang"},"content":"Creates a task with no startdate or deadline. Ability to mark tasks as completed and delete them.","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"stephenkyang"},"content":"todo task0","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"stephenkyang"},"content":"After listing (see list), your list should have:","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"stephenkyang"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"stephenkyang"},"content":"0. [T] [ ] task0","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"stephenkyang"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"stephenkyang"},"content":"### `Keyword` - deadline","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"stephenkyang"},"content":"Creates a task with a deadline. Ability to mark tasks as completed and delete them. The deadline is defined by any characters after the first delimiter \"/\".","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"stephenkyang"},"content":"Example of usage: ","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"stephenkyang"},"content":"deadline task1 /tomorrow","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"stephenkyang"},"content":"After listing (see list), your list should have:","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"stephenkyang"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"stephenkyang"},"content":"0. [T] [ ] task0","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"stephenkyang"},"content":"1. [D] [ ] task1 (by: tomorrow)","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"stephenkyang"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"stephenkyang"},"content":"### `Keyword` - event","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"stephenkyang"},"content":"Creates a task with a start and deadline. Ability to mark tasks as completed and delete them. The start is defined by any characters after the first delimiter \"/\" and before the second delimiter \"/\". The end is defined as any characters after the second delimiter \"/\".","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"stephenkyang"},"content":"Example of usage: ","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"stephenkyang"},"content":"event task2 /start /end","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"stephenkyang"},"content":"After listing (see list), your list should have:","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"stephenkyang"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"stephenkyang"},"content":"0. [T] [ ] task0","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"stephenkyang"},"content":"1. [D] [ ] task1 (by: tomorrow)","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"stephenkyang"},"content":"2. [E] [ ] task2 (from: start to: end)","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"stephenkyang"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"stephenkyang"},"content":"### `Keyword` - list","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"stephenkyang"},"content":"Lists all tasks currently in the tasklist","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"stephenkyang"},"content":"Example of usage: ","lastModifiedDate":"2023-03-03"},{"lineNumber":67,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"stephenkyang"},"content":"list","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":71,"author":{"gitId":"stephenkyang"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"stephenkyang"},"content":"0. [T] [ ] task0","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"stephenkyang"},"content":"1. [D] [ ] task1 (by: tomorrow)","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"stephenkyang"},"content":"2. [E] [ ] task2 (from: start to: end)","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":76,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"stephenkyang"},"content":"### `Keyword` - delete","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"stephenkyang"},"content":"Deletes task based on index on list. ","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"stephenkyang"},"content":"Example of usage: ","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"stephenkyang"},"content":"delete 2","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"stephenkyang"},"content":"After listing (see list), your list should have:","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"stephenkyang"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"stephenkyang"},"content":"0. [T] [ ] task0","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"stephenkyang"},"content":"1. [D] [ ] task1 (by: tomorrow)","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"stephenkyang"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"stephenkyang"},"content":"### `Keyword` - mark","lastModifiedDate":"2023-03-03"},{"lineNumber":94,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"stephenkyang"},"content":"Marks task as complete based on index on list. ","lastModifiedDate":"2023-03-03"},{"lineNumber":96,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"stephenkyang"},"content":"Example of usage: ","lastModifiedDate":"2023-03-03"},{"lineNumber":98,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":99,"author":{"gitId":"stephenkyang"},"content":"mark 0","lastModifiedDate":"2023-03-03"},{"lineNumber":100,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":101,"author":{"gitId":"stephenkyang"},"content":"After listing (see list), your list should have:","lastModifiedDate":"2023-03-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":104,"author":{"gitId":"stephenkyang"},"content":"0. [T] [X] task0","lastModifiedDate":"2023-03-03"},{"lineNumber":105,"author":{"gitId":"stephenkyang"},"content":"1. [D] [ ] task1 (by: tomorrow)","lastModifiedDate":"2023-03-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"-":23,"stephenkyang":83}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"stephenkyang"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"stephenkyang"},"content":"import Parser.Parser;","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"stephenkyang"},"content":"import Storage.Storage;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"stephenkyang"},"content":"import TaskList.TaskList;","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"stephenkyang"},"content":"import Tasks.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"stephenkyang"},"content":"import UI.UserInterface;","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"stephenkyang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"stephenkyang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"stephenkyang"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"stephenkyang"},"content":"    private Storage storage;","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"stephenkyang"},"content":"    private UserInterface ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"stephenkyang"},"content":"    private Path filepath;","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"stephenkyang"},"content":"     * The main function of Duke. The path is defined here. Therefore, if one wants to store multiple checklists, they","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"stephenkyang"},"content":"     * just need to edit the file path here.","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"stephenkyang"},"content":"    public Duke(Path filePath) {","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"stephenkyang"},"content":"        this.filepath \u003d filePath;","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"stephenkyang"},"content":"        ui \u003d dukeStart();","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"stephenkyang"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"stephenkyang"},"content":"        try {","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"stephenkyang"},"content":"            tasks \u003d new TaskList(storage.readFromFile(filePath));","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"stephenkyang"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"stephenkyang"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"stephenkyang"},"content":"            tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"stephenkyang"},"content":"     * Starts running Duke. This method will run Parser.readCommand which will wait for input. If an exception is thrown","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"stephenkyang"},"content":"     * the program will catch the exception, print the error message, and then call run() again.","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"stephenkyang"},"content":"    public void run() {","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"stephenkyang"},"content":"        try {","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"stephenkyang"},"content":"            Parser.readCommand(ui, tasks, storage, this.filepath);","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"stephenkyang"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"stephenkyang"},"content":"            this.run();","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"stephenkyang"},"content":"     * The main function of Duke. The path is defined here. Therefore, if one wants to store multiple checklists, they","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"stephenkyang"},"content":"     * just need to edit the file path here.","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"stephenkyang"},"content":"    public static void main(String[] args) throws Exception {","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"stephenkyang"},"content":"        String home \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"stephenkyang"},"content":"        java.nio.file.Path path \u003d java.nio.file.Paths.get(home,\"savefile\");","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"stephenkyang"},"content":"        new Duke(path).run();","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"stephenkyang"},"content":"    // Printing the startup code","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"stephenkyang"},"content":"    public static UserInterface dukeStart() {","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":64,"author":{"gitId":"stephenkyang"},"content":"        UserInterface ui \u003d  new UserInterface();","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"stephenkyang"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"stephenkyang"},"content":"        return ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":9,"stephenkyang":59}},{"path":"src/main/java/Exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"stephenkyang"},"content":"package Exceptions;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"stephenkyang"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"stephenkyang"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"stephenkyang"},"content":"        super(message);","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"stephenkyang"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"stephenkyang":7}},{"path":"src/main/java/Parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"stephenkyang"},"content":"package Parser;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"stephenkyang"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"stephenkyang"},"content":"import Storage.Storage;","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"stephenkyang"},"content":"import TaskList.TaskList;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"stephenkyang"},"content":"import Tasks.Deadline;","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"stephenkyang"},"content":"import Tasks.Event;","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"stephenkyang"},"content":"import Tasks.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"stephenkyang"},"content":"import UI.UserInterface;","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"stephenkyang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"stephenkyang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"stephenkyang"},"content":"import java.util.List;","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"stephenkyang"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"stephenkyang"},"content":"public class Parser {","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"stephenkyang"},"content":"    public Parser() {","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"stephenkyang"},"content":"     * The method that parses through user input. It will find the different valid commands that the code is able to run","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"stephenkyang"},"content":"     * and then find the one that the user input matches. If the user input matches none of the commands, then the method","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"stephenkyang"},"content":"     * outputs \"Command does not exist.\"","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"stephenkyang"},"content":"    public static void readCommand(UserInterface ui, TaskList tasks,  Storage storage, Path path) throws DukeException {","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"stephenkyang"},"content":"        ArrayList\u003cTask\u003e list \u003d tasks.getList();","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"stephenkyang"},"content":"        Scanner inputScanner \u003d ui.getScanner();","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"stephenkyang"},"content":"        while (true) {","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"stephenkyang"},"content":"            String nextLine \u003d inputScanner.nextLine();","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"stephenkyang"},"content":"            if (nextLine.equals(\"list\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"stephenkyang"},"content":"                System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"stephenkyang"},"content":"                dukeCommandList(list);","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"stephenkyang"},"content":"            } else if (nextLine.split(\" \", 0)[0].equals(\"mark\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"stephenkyang"},"content":"                dukeCommandMark(nextLine, list);","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"stephenkyang"},"content":"            } else if (nextLine.split(\" \", 0)[0].equals(\"find\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"stephenkyang"},"content":"                dukeCommandFind(nextLine, list);","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"stephenkyang"},"content":"            } else if (nextLine.split(\" \", 0)[0].equals(\"deadline\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"stephenkyang"},"content":"                dukeCommandDeadline(nextLine, list);","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"stephenkyang"},"content":"            } else if (nextLine.split(\" \", 0)[0].equals(\"todo\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"stephenkyang"},"content":"                dukeCommandToDo(nextLine, list);","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"stephenkyang"},"content":"            } else if (nextLine.split(\" \", 0)[0].equals(\"delete\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"stephenkyang"},"content":"                dukeCommandDelete(nextLine, list);","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"stephenkyang"},"content":"            } else if (nextLine.split(\" \", 0)[0].equals(\"event\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"stephenkyang"},"content":"                dukeCommandEvent(nextLine, list);","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"stephenkyang"},"content":"            } else if (nextLine.equals(\"bye\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"stephenkyang"},"content":"                System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"stephenkyang"},"content":"                dukeSaveList(list, storage, path);","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"stephenkyang"},"content":"                return;","lastModifiedDate":"2023-03-02"},{"lineNumber":47,"author":{"gitId":"stephenkyang"},"content":"            } else {","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"stephenkyang"},"content":"                System.out.println(\"Command does not exist\");","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"stephenkyang"},"content":"                continue;","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"stephenkyang"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"stephenkyang"},"content":"     * Finds all keyword-matching task names by iterating through the ArrayList and copying over all tasks that have match.","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"stephenkyang"},"content":"    private static void dukeCommandFind(String nextLine, ArrayList\u003cTask\u003e list) throws DukeException {","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"stephenkyang"},"content":"        String[] inputArray \u003d nextLine.split(\" \", 0);","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"stephenkyang"},"content":"        if (inputArray.length !\u003d 2) {","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"Try to remove all spaces in your keyword.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"stephenkyang"},"content":"        String key \u003d inputArray[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"stephenkyang"},"content":"        ArrayList\u003cTask\u003e containsSubstring \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"stephenkyang"},"content":"        for (Task task: list) {","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"stephenkyang"},"content":"            String taskName \u003d task.getTaskName();","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"stephenkyang"},"content":"            if (taskName.contains(key)) {","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"stephenkyang"},"content":"                containsSubstring.add(task);","lastModifiedDate":"2023-03-02"},{"lineNumber":68,"author":{"gitId":"stephenkyang"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":69,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":70,"author":{"gitId":"stephenkyang"},"content":"        if (containsSubstring.isEmpty()) {","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(\"No task names found with \" + key);","lastModifiedDate":"2023-03-02"},{"lineNumber":72,"author":{"gitId":"stephenkyang"},"content":"            return;","lastModifiedDate":"2023-03-02"},{"lineNumber":73,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"stephenkyang"},"content":"        System.out.println(\"Here are the following Tasks that have names containing your keyword:\");","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"stephenkyang"},"content":"        dukeCommandList(containsSubstring);","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":79,"author":{"gitId":"stephenkyang"},"content":"    private static void dukeSaveList(ArrayList\u003cTask\u003e list, Storage storage, Path path) throws DukeException {","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"stephenkyang"},"content":"        storage.save(list, path);","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":82,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"stephenkyang"},"content":"     * Deletes the task by iterating through all tasks in the ArrayList.","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"stephenkyang"},"content":"    private static void dukeCommandDelete(String nextLine, List\u003cTask\u003e list) throws DukeException {","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"stephenkyang"},"content":"        String[] inputArray \u003d nextLine.split(\" \", 0);","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"stephenkyang"},"content":"        if (inputArray.length !\u003d 2) {","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"Please just input a number after delete.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":93,"author":{"gitId":"stephenkyang"},"content":"        String indexString \u003d inputArray[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":94,"author":{"gitId":"stephenkyang"},"content":"        int index;","lastModifiedDate":"2023-03-02"},{"lineNumber":95,"author":{"gitId":"stephenkyang"},"content":"        try {","lastModifiedDate":"2023-03-02"},{"lineNumber":96,"author":{"gitId":"stephenkyang"},"content":"            index \u003d Integer.parseInt(indexString);","lastModifiedDate":"2023-03-02"},{"lineNumber":97,"author":{"gitId":"stephenkyang"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":98,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"The index \" + indexString +  \" cannot be interpreted as an int.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":99,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":100,"author":{"gitId":"stephenkyang"},"content":"        try {","lastModifiedDate":"2023-03-03"},{"lineNumber":101,"author":{"gitId":"stephenkyang"},"content":"            list.remove(index);","lastModifiedDate":"2023-03-02"},{"lineNumber":102,"author":{"gitId":"stephenkyang"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":103,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"Index out of bounds, try a smaller number than \" + index);","lastModifiedDate":"2023-03-03"},{"lineNumber":104,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":105,"author":{"gitId":"stephenkyang"},"content":"        System.out.println(\"Removed task at \" + index);","lastModifiedDate":"2023-03-02"},{"lineNumber":106,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":107,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":108,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":109,"author":{"gitId":"stephenkyang"},"content":"     * Lists tasks by iterating through the ArrayList. Uses helper functions to print out Tasks, Deadlines, and Events.","lastModifiedDate":"2023-03-03"},{"lineNumber":110,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":111,"author":{"gitId":"stephenkyang"},"content":"    private static void dukeCommandList (List\u003cTask\u003e list) {","lastModifiedDate":"2023-03-02"},{"lineNumber":112,"author":{"gitId":"stephenkyang"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++ ) {","lastModifiedDate":"2023-03-02"},{"lineNumber":113,"author":{"gitId":"stephenkyang"},"content":"            Task task \u003d list.get(i);","lastModifiedDate":"2023-03-02"},{"lineNumber":114,"author":{"gitId":"stephenkyang"},"content":"            if (task instanceof Event) {","lastModifiedDate":"2023-03-02"},{"lineNumber":115,"author":{"gitId":"stephenkyang"},"content":"                printEvent((Event) task, i);","lastModifiedDate":"2023-03-02"},{"lineNumber":116,"author":{"gitId":"stephenkyang"},"content":"            } else if (task instanceof Deadline) {","lastModifiedDate":"2023-03-02"},{"lineNumber":117,"author":{"gitId":"stephenkyang"},"content":"                printDeadline((Deadline) task, i);","lastModifiedDate":"2023-03-02"},{"lineNumber":118,"author":{"gitId":"stephenkyang"},"content":"            } else {","lastModifiedDate":"2023-03-02"},{"lineNumber":119,"author":{"gitId":"stephenkyang"},"content":"                printTodo(task, i);","lastModifiedDate":"2023-03-02"},{"lineNumber":120,"author":{"gitId":"stephenkyang"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":121,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":122,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":123,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":124,"author":{"gitId":"stephenkyang"},"content":"    // Helper functions for dukeCommandList","lastModifiedDate":"2023-03-02"},{"lineNumber":125,"author":{"gitId":"stephenkyang"},"content":"    private static void printEvent(Event event, int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":126,"author":{"gitId":"stephenkyang"},"content":"        if (event.isDone()) {","lastModifiedDate":"2023-03-02"},{"lineNumber":127,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(index + \". [E][X] \" + event.getTaskName() +","lastModifiedDate":"2023-03-02"},{"lineNumber":128,"author":{"gitId":"stephenkyang"},"content":"                    \" (from: \" + event.getStart() + \" to: \" + event.getDeadline() + \")\");","lastModifiedDate":"2023-03-02"},{"lineNumber":129,"author":{"gitId":"stephenkyang"},"content":"        } else {","lastModifiedDate":"2023-03-02"},{"lineNumber":130,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(index + \". [E][ ] \" + event.getTaskName() +","lastModifiedDate":"2023-03-02"},{"lineNumber":131,"author":{"gitId":"stephenkyang"},"content":"                    \" (from: \" + event.getStart() + \" to: \" + event.getDeadline() + \")\");","lastModifiedDate":"2023-03-02"},{"lineNumber":132,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":133,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":134,"author":{"gitId":"stephenkyang"},"content":"    private static void printDeadline(Deadline deadline, int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":135,"author":{"gitId":"stephenkyang"},"content":"        if (deadline.isDone()) {","lastModifiedDate":"2023-03-02"},{"lineNumber":136,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(index + \". [D][X] \" + deadline.getTaskName() +","lastModifiedDate":"2023-03-02"},{"lineNumber":137,"author":{"gitId":"stephenkyang"},"content":"                    \" (by: \" + deadline.getDeadline() + \")\");","lastModifiedDate":"2023-03-02"},{"lineNumber":138,"author":{"gitId":"stephenkyang"},"content":"        } else {","lastModifiedDate":"2023-03-02"},{"lineNumber":139,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(index + \". [D][ ] \" + deadline.getTaskName() +","lastModifiedDate":"2023-03-02"},{"lineNumber":140,"author":{"gitId":"stephenkyang"},"content":"                    \" (by: \" + deadline.getDeadline() + \")\");","lastModifiedDate":"2023-03-02"},{"lineNumber":141,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":142,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":143,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":144,"author":{"gitId":"stephenkyang"},"content":"    private static void printTodo(Task task, int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":145,"author":{"gitId":"stephenkyang"},"content":"        if (task.isDone()) {","lastModifiedDate":"2023-03-02"},{"lineNumber":146,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(index + \". [T][X] \" + task.getTaskName());","lastModifiedDate":"2023-03-02"},{"lineNumber":147,"author":{"gitId":"stephenkyang"},"content":"        } else {","lastModifiedDate":"2023-03-02"},{"lineNumber":148,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(index + \". [T][ ] \" + task.getTaskName());","lastModifiedDate":"2023-03-02"},{"lineNumber":149,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":150,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":151,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":152,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":153,"author":{"gitId":"stephenkyang"},"content":"     * Marks a task as done based on index. To check index, list out all tasks.","lastModifiedDate":"2023-03-03"},{"lineNumber":154,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":155,"author":{"gitId":"stephenkyang"},"content":"    private static void dukeCommandMark(String nextLine, List\u003cTask\u003e list) throws DukeException {","lastModifiedDate":"2023-03-03"},{"lineNumber":156,"author":{"gitId":"stephenkyang"},"content":"        String[] inputArray \u003d nextLine.split(\" \", 0);","lastModifiedDate":"2023-03-02"},{"lineNumber":157,"author":{"gitId":"stephenkyang"},"content":"        if (inputArray.length !\u003d 2) {","lastModifiedDate":"2023-03-02"},{"lineNumber":158,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"Try to only put a number after \u0027mark\u0027\");","lastModifiedDate":"2023-03-03"},{"lineNumber":159,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":160,"author":{"gitId":"stephenkyang"},"content":"        int index;","lastModifiedDate":"2023-03-02"},{"lineNumber":161,"author":{"gitId":"stephenkyang"},"content":"        try {","lastModifiedDate":"2023-03-02"},{"lineNumber":162,"author":{"gitId":"stephenkyang"},"content":"            index \u003d Integer.parseInt(inputArray[1]);","lastModifiedDate":"2023-03-02"},{"lineNumber":163,"author":{"gitId":"stephenkyang"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":164,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"The index \" + inputArray[1] +  \" cannot be interpreted as an int.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":165,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":166,"author":{"gitId":"stephenkyang"},"content":"        if (index \u003e list.size() - 1) {","lastModifiedDate":"2023-03-02"},{"lineNumber":167,"author":{"gitId":"stephenkyang"},"content":"            return;","lastModifiedDate":"2023-03-02"},{"lineNumber":168,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":169,"author":{"gitId":"stephenkyang"},"content":"        Task task \u003d list.get(index);","lastModifiedDate":"2023-03-02"},{"lineNumber":170,"author":{"gitId":"stephenkyang"},"content":"        if (!task.isDone()) {","lastModifiedDate":"2023-03-02"},{"lineNumber":171,"author":{"gitId":"stephenkyang"},"content":"            task.doTask();","lastModifiedDate":"2023-03-02"},{"lineNumber":172,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(\"Task marked as complete!\");","lastModifiedDate":"2023-03-03"},{"lineNumber":173,"author":{"gitId":"stephenkyang"},"content":"            return;","lastModifiedDate":"2023-03-03"},{"lineNumber":174,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":175,"author":{"gitId":"stephenkyang"},"content":"        System.out.println(\"Task already marked as complete!\");","lastModifiedDate":"2023-03-03"},{"lineNumber":176,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":177,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":178,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":179,"author":{"gitId":"stephenkyang"},"content":"     * Creates an event. Requires CLI input to be \u0027event [event name] /[start] /[end]","lastModifiedDate":"2023-03-03"},{"lineNumber":180,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":181,"author":{"gitId":"stephenkyang"},"content":"    private static void dukeCommandEvent(String nextLine, List\u003cTask\u003e list) throws DukeException {","lastModifiedDate":"2023-03-03"},{"lineNumber":182,"author":{"gitId":"stephenkyang"},"content":"        String lineWithoutCommand;","lastModifiedDate":"2023-03-02"},{"lineNumber":183,"author":{"gitId":"stephenkyang"},"content":"        try {","lastModifiedDate":"2023-03-02"},{"lineNumber":184,"author":{"gitId":"stephenkyang"},"content":"            lineWithoutCommand \u003d nextLine.split(\" \", 2)[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":185,"author":{"gitId":"stephenkyang"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":186,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"Incorrect number of arguments. Please do not use \u0027/\u0027 or \u0027|\u0027 in your arguments\");","lastModifiedDate":"2023-03-03"},{"lineNumber":187,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":188,"author":{"gitId":"stephenkyang"},"content":"        String[] regexOutput \u003d lineWithoutCommand.split(\"/\", 0);","lastModifiedDate":"2023-03-02"},{"lineNumber":189,"author":{"gitId":"stephenkyang"},"content":"        if (regexOutput.length !\u003d 3) {","lastModifiedDate":"2023-03-02"},{"lineNumber":190,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"Incorrect number of arguments. Please write the name of the task and then \u0027/[start] /[deadline]\u0027. Please do not use \u0027/\u0027 or \u0027|\u0027 in your arguments\");","lastModifiedDate":"2023-03-03"},{"lineNumber":191,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":192,"author":{"gitId":"stephenkyang"},"content":"        String eventName \u003d regexOutput[0];","lastModifiedDate":"2023-03-02"},{"lineNumber":193,"author":{"gitId":"stephenkyang"},"content":"        String startDate \u003d regexOutput[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":194,"author":{"gitId":"stephenkyang"},"content":"        String endDate \u003d regexOutput[2];","lastModifiedDate":"2023-03-02"},{"lineNumber":195,"author":{"gitId":"stephenkyang"},"content":"        Deadline deadline \u003d new Event(eventName, false, list.size(), startDate, endDate);","lastModifiedDate":"2023-03-02"},{"lineNumber":196,"author":{"gitId":"stephenkyang"},"content":"        list.add(deadline);","lastModifiedDate":"2023-03-02"},{"lineNumber":197,"author":{"gitId":"stephenkyang"},"content":"        System.out.println(\"event added\");","lastModifiedDate":"2023-03-02"},{"lineNumber":198,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":199,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":200,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":201,"author":{"gitId":"stephenkyang"},"content":"     * Creates an deadline. Requires CLI input to be \u0027deadline [deadline name] /[deadline]","lastModifiedDate":"2023-03-03"},{"lineNumber":202,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":203,"author":{"gitId":"stephenkyang"},"content":"    private static void dukeCommandDeadline(String nextLine, List\u003cTask\u003e list) throws DukeException {","lastModifiedDate":"2023-03-02"},{"lineNumber":204,"author":{"gitId":"stephenkyang"},"content":"//        System.out.println(nextLine);","lastModifiedDate":"2023-03-02"},{"lineNumber":205,"author":{"gitId":"stephenkyang"},"content":"        String lineWithoutCommand;","lastModifiedDate":"2023-03-02"},{"lineNumber":206,"author":{"gitId":"stephenkyang"},"content":"        try {","lastModifiedDate":"2023-03-02"},{"lineNumber":207,"author":{"gitId":"stephenkyang"},"content":"            lineWithoutCommand \u003d nextLine.split(\" \", 2)[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":208,"author":{"gitId":"stephenkyang"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":209,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"Incorrect number of arguments. Please do not use \u0027/\u0027 or \u0027|\u0027 in your arguments\");","lastModifiedDate":"2023-03-03"},{"lineNumber":210,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":211,"author":{"gitId":"stephenkyang"},"content":"        String[] regexOutput \u003d lineWithoutCommand.split(\"/\", 0);","lastModifiedDate":"2023-03-02"},{"lineNumber":212,"author":{"gitId":"stephenkyang"},"content":"        if (regexOutput.length !\u003d 2) {","lastModifiedDate":"2023-03-02"},{"lineNumber":213,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"Incorrect number of arguments. Please write the name of the task and then \u0027/[deadline]\u0027 Please do not use \u0027/\u0027 or \u0027|\u0027 in your arguments\");","lastModifiedDate":"2023-03-03"},{"lineNumber":214,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":215,"author":{"gitId":"stephenkyang"},"content":"        String deadlineName \u003d regexOutput[0];","lastModifiedDate":"2023-03-02"},{"lineNumber":216,"author":{"gitId":"stephenkyang"},"content":"        String deadlineDate \u003d regexOutput[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":217,"author":{"gitId":"stephenkyang"},"content":"        Deadline deadline \u003d new Deadline(deadlineName, false, list.size(), deadlineDate);","lastModifiedDate":"2023-03-02"},{"lineNumber":218,"author":{"gitId":"stephenkyang"},"content":"        list.add(deadline);","lastModifiedDate":"2023-03-02"},{"lineNumber":219,"author":{"gitId":"stephenkyang"},"content":"        System.out.println(\"deadline added\");","lastModifiedDate":"2023-03-02"},{"lineNumber":220,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":221,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":222,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":223,"author":{"gitId":"stephenkyang"},"content":"     * Creates an task. Requires CLI input to be \u0027task [task name]\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":224,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":225,"author":{"gitId":"stephenkyang"},"content":"    private static void dukeCommandToDo(String nextLine, List\u003cTask\u003e list) throws DukeException {","lastModifiedDate":"2023-03-03"},{"lineNumber":226,"author":{"gitId":"stephenkyang"},"content":"        String lineWithoutCommand;","lastModifiedDate":"2023-03-02"},{"lineNumber":227,"author":{"gitId":"stephenkyang"},"content":"        try {","lastModifiedDate":"2023-03-02"},{"lineNumber":228,"author":{"gitId":"stephenkyang"},"content":"            lineWithoutCommand \u003d nextLine.split(\" \", 2)[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":229,"author":{"gitId":"stephenkyang"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":230,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"Incorrect number of arguments. Please just wrte the task name.list Please do not use \u0027/\u0027 or \u0027|\u0027 in your arguments\");","lastModifiedDate":"2023-03-03"},{"lineNumber":231,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":232,"author":{"gitId":"stephenkyang"},"content":"        Task task \u003d new Task(lineWithoutCommand, list.size());","lastModifiedDate":"2023-03-02"},{"lineNumber":233,"author":{"gitId":"stephenkyang"},"content":"        list.add(task);","lastModifiedDate":"2023-03-02"},{"lineNumber":234,"author":{"gitId":"stephenkyang"},"content":"        System.out.println(\"task/todo added\");","lastModifiedDate":"2023-03-02"},{"lineNumber":235,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":236,"author":{"gitId":"stephenkyang"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"stephenkyang":236}},{"path":"src/main/java/Storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"stephenkyang"},"content":"package Storage;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"stephenkyang"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"stephenkyang"},"content":"import Tasks.Deadline;","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"stephenkyang"},"content":"import Tasks.Event;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"stephenkyang"},"content":"import Tasks.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"stephenkyang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"stephenkyang"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"stephenkyang"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"stephenkyang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"stephenkyang"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"stephenkyang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"stephenkyang"},"content":"public class Storage {","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"stephenkyang"},"content":"    ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"stephenkyang"},"content":"    Path path;","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"stephenkyang"},"content":"    public Storage(Path path) {","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"stephenkyang"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"stephenkyang"},"content":"        this.path \u003d path;","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"stephenkyang"},"content":"    public ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"stephenkyang"},"content":"        return this.list;","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"stephenkyang"},"content":"     * Reads the file from the path from Duke class. If path cannot be read, creates a new file in that path and creates","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"stephenkyang"},"content":"     * a new file with an empty list.","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"stephenkyang"},"content":"    public ArrayList\u003cTask\u003e readFromFile(Path filePath) throws DukeException {","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"stephenkyang"},"content":"        //Frome https://www.sghill.net/2014/how-do-i-make-cross-platform-file-paths-in-java/","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"stephenkyang"},"content":"        byte[] tasksInByteForm \u003d new byte[1000000];","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"stephenkyang"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"stephenkyang"},"content":"        if (Files.exists(path)) {","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"stephenkyang"},"content":"            try {","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"stephenkyang"},"content":"                tasksInByteForm \u003d Files.readAllBytes(path);","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"stephenkyang"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"stephenkyang"},"content":"                throw new DukeException(\"File unreadable! Unable to call readAllBytes() on the path given\");","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"stephenkyang"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"stephenkyang"},"content":"            String tasksInStringForm \u003d new String(tasksInByteForm);","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"stephenkyang"},"content":"            String[] arrayOfTasks \u003d tasksInStringForm.split(\"\\n\");","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"stephenkyang"},"content":"            for (String task : arrayOfTasks) {","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"stephenkyang"},"content":"                Task recreatedTask \u003d createTaskFromString(task);","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"stephenkyang"},"content":"                if (recreatedTask \u003d\u003d null) {","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"stephenkyang"},"content":"                    System.out.println(\"Unable to create task \" + task);","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"stephenkyang"},"content":"                    continue;","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"stephenkyang"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"stephenkyang"},"content":"                list.add(recreatedTask);","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"stephenkyang"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"stephenkyang"},"content":"        return list;","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"stephenkyang"},"content":"    private static Task createTaskFromString(String string){","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"stephenkyang"},"content":"        String[] attributes \u003d string.split(\"\\\\|\");","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"stephenkyang"},"content":"        if (attributes.length \u003c 1) {","lastModifiedDate":"2023-03-02"},{"lineNumber":56,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(\"Wrong format for task\");","lastModifiedDate":"2023-03-02"},{"lineNumber":57,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"stephenkyang"},"content":"        String taskType \u003d attributes[0];","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"stephenkyang"},"content":"        boolean bool;","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"stephenkyang"},"content":"        String taskName;","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"stephenkyang"},"content":"        String boolString;","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"stephenkyang"},"content":"        String deadline;","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"stephenkyang"},"content":"        String start;","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"stephenkyang"},"content":"        switch(taskType) {","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"stephenkyang"},"content":"            case (\"class Tasks.Task\"):","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"stephenkyang"},"content":"                taskName \u003d attributes[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"stephenkyang"},"content":"                boolString \u003d attributes[2];","lastModifiedDate":"2023-03-02"},{"lineNumber":68,"author":{"gitId":"stephenkyang"},"content":"                bool \u003d boolString.equals(\"true\");","lastModifiedDate":"2023-03-02"},{"lineNumber":69,"author":{"gitId":"stephenkyang"},"content":"                return new Task(taskName, bool, 0);","lastModifiedDate":"2023-03-02"},{"lineNumber":70,"author":{"gitId":"stephenkyang"},"content":"            case (\"class Tasks.Deadline\"):","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"stephenkyang"},"content":"                taskName \u003d attributes[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":72,"author":{"gitId":"stephenkyang"},"content":"                boolString \u003d attributes[2];","lastModifiedDate":"2023-03-02"},{"lineNumber":73,"author":{"gitId":"stephenkyang"},"content":"                deadline \u003d attributes[3];","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"stephenkyang"},"content":"                bool \u003d boolString.equals(\"true\");","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"stephenkyang"},"content":"                return new Deadline(taskName, bool, 0, deadline);","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"stephenkyang"},"content":"            case (\"class Tasks.Event\"):","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"stephenkyang"},"content":"                taskName \u003d attributes[1];","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"stephenkyang"},"content":"                boolString \u003d attributes[2];","lastModifiedDate":"2023-03-02"},{"lineNumber":79,"author":{"gitId":"stephenkyang"},"content":"                deadline \u003d attributes[3];","lastModifiedDate":"2023-03-02"},{"lineNumber":80,"author":{"gitId":"stephenkyang"},"content":"                start \u003d attributes[4];","lastModifiedDate":"2023-03-02"},{"lineNumber":81,"author":{"gitId":"stephenkyang"},"content":"                bool \u003d boolString.equals(\"true\");","lastModifiedDate":"2023-03-02"},{"lineNumber":82,"author":{"gitId":"stephenkyang"},"content":"                return new Event(taskName, bool, 0, start, deadline);","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"stephenkyang"},"content":"            default:","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"stephenkyang"},"content":"                System.out.println(taskType + \" is not an accepted task type\");","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"stephenkyang"},"content":"                return null;","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":87,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"stephenkyang"},"content":"     * Saves list of tasks to the file path given. If fails, nothing is saved.","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"stephenkyang"},"content":"    public void save(ArrayList\u003cTask\u003e list, Path path) throws DukeException {","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"stephenkyang"},"content":"        if (list.isEmpty()) {","lastModifiedDate":"2023-03-03"},{"lineNumber":94,"author":{"gitId":"stephenkyang"},"content":"            try {","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"stephenkyang"},"content":"                System.out.println(\"Nothing in tasklist, deleting file if exists.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":96,"author":{"gitId":"stephenkyang"},"content":"                Files.deleteIfExists(path);","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"stephenkyang"},"content":"                return;","lastModifiedDate":"2023-03-03"},{"lineNumber":98,"author":{"gitId":"stephenkyang"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":99,"author":{"gitId":"stephenkyang"},"content":"                throw new DukeException(\"Something wrong happened when deleting the file. \" +","lastModifiedDate":"2023-03-03"},{"lineNumber":100,"author":{"gitId":"stephenkyang"},"content":"                        \"This should not significantly impact anything. When starting in the future, it will print some comment.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":101,"author":{"gitId":"stephenkyang"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":102,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":103,"author":{"gitId":"stephenkyang"},"content":"        boolean directoryExists \u003d java.nio.file.Files.exists(path);","lastModifiedDate":"2023-03-03"},{"lineNumber":104,"author":{"gitId":"stephenkyang"},"content":"        if (!directoryExists) {","lastModifiedDate":"2023-03-03"},{"lineNumber":105,"author":{"gitId":"stephenkyang"},"content":"            // from https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html","lastModifiedDate":"2023-03-03"},{"lineNumber":106,"author":{"gitId":"stephenkyang"},"content":"            try {","lastModifiedDate":"2023-03-03"},{"lineNumber":107,"author":{"gitId":"stephenkyang"},"content":"                Files.createFile(path);","lastModifiedDate":"2023-03-03"},{"lineNumber":108,"author":{"gitId":"stephenkyang"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":109,"author":{"gitId":"stephenkyang"},"content":"                throw new DukeException(\"Unable to create filepath\");","lastModifiedDate":"2023-03-03"},{"lineNumber":110,"author":{"gitId":"stephenkyang"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":111,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":112,"author":{"gitId":"stephenkyang"},"content":"        try {","lastModifiedDate":"2023-03-03"},{"lineNumber":113,"author":{"gitId":"stephenkyang"},"content":"            Files.deleteIfExists(path);","lastModifiedDate":"2023-03-03"},{"lineNumber":114,"author":{"gitId":"stephenkyang"},"content":"            Files.createFile(path);","lastModifiedDate":"2023-03-03"},{"lineNumber":115,"author":{"gitId":"stephenkyang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":116,"author":{"gitId":"stephenkyang"},"content":"            throw new DukeException(\"Unable to delete and then recreate file with given filepath\");","lastModifiedDate":"2023-03-03"},{"lineNumber":117,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":118,"author":{"gitId":"stephenkyang"},"content":"        for (Task task: list) {","lastModifiedDate":"2023-03-03"},{"lineNumber":119,"author":{"gitId":"stephenkyang"},"content":"            String taskType \u003d String.valueOf(task.getClass());","lastModifiedDate":"2023-03-03"},{"lineNumber":120,"author":{"gitId":"stephenkyang"},"content":"            ArrayList\u003cString\u003e attributesToStore \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2023-03-03"},{"lineNumber":121,"author":{"gitId":"stephenkyang"},"content":"            String taskInLineForm \u003d \"\";","lastModifiedDate":"2023-03-03"},{"lineNumber":122,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":123,"author":{"gitId":"stephenkyang"},"content":"            switch (taskType) {","lastModifiedDate":"2023-03-03"},{"lineNumber":124,"author":{"gitId":"stephenkyang"},"content":"                case (\"class Tasks.Task\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":125,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(taskType);","lastModifiedDate":"2023-03-03"},{"lineNumber":126,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(task.getTaskName());","lastModifiedDate":"2023-03-03"},{"lineNumber":127,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(String.valueOf(task.isDone()));","lastModifiedDate":"2023-03-03"},{"lineNumber":128,"author":{"gitId":"stephenkyang"},"content":"                    taskInLineForm \u003d deliminterAdder(attributesToStore);","lastModifiedDate":"2023-03-03"},{"lineNumber":129,"author":{"gitId":"stephenkyang"},"content":"                    break;","lastModifiedDate":"2023-03-03"},{"lineNumber":130,"author":{"gitId":"stephenkyang"},"content":"                case (\"class Tasks.Deadline\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":131,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(taskType);","lastModifiedDate":"2023-03-03"},{"lineNumber":132,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(task.getTaskName());","lastModifiedDate":"2023-03-03"},{"lineNumber":133,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(String.valueOf(task.isDone()));","lastModifiedDate":"2023-03-03"},{"lineNumber":134,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(((Deadline) task).getDeadline());","lastModifiedDate":"2023-03-03"},{"lineNumber":135,"author":{"gitId":"stephenkyang"},"content":"                    taskInLineForm \u003d deliminterAdder(attributesToStore);","lastModifiedDate":"2023-03-03"},{"lineNumber":136,"author":{"gitId":"stephenkyang"},"content":"                    break;","lastModifiedDate":"2023-03-03"},{"lineNumber":137,"author":{"gitId":"stephenkyang"},"content":"                case (\"class Tasks.Event\"):","lastModifiedDate":"2023-03-03"},{"lineNumber":138,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(taskType);","lastModifiedDate":"2023-03-03"},{"lineNumber":139,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(task.getTaskName());","lastModifiedDate":"2023-03-03"},{"lineNumber":140,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(String.valueOf(task.isDone()));","lastModifiedDate":"2023-03-03"},{"lineNumber":141,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(((Event) task).getDeadline());","lastModifiedDate":"2023-03-03"},{"lineNumber":142,"author":{"gitId":"stephenkyang"},"content":"                    attributesToStore.add(((Event) task).getStart());","lastModifiedDate":"2023-03-03"},{"lineNumber":143,"author":{"gitId":"stephenkyang"},"content":"                    taskInLineForm \u003d deliminterAdder(attributesToStore);","lastModifiedDate":"2023-03-03"},{"lineNumber":144,"author":{"gitId":"stephenkyang"},"content":"                default:","lastModifiedDate":"2023-03-03"},{"lineNumber":145,"author":{"gitId":"stephenkyang"},"content":"                    break;","lastModifiedDate":"2023-03-03"},{"lineNumber":146,"author":{"gitId":"stephenkyang"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":147,"author":{"gitId":"stephenkyang"},"content":"            taskInLineForm \u003d taskInLineForm.concat(\"\\n\");","lastModifiedDate":"2023-03-03"},{"lineNumber":148,"author":{"gitId":"stephenkyang"},"content":"            try {","lastModifiedDate":"2023-03-03"},{"lineNumber":149,"author":{"gitId":"stephenkyang"},"content":"                Files.write(path, taskInLineForm.getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND);","lastModifiedDate":"2023-03-03"},{"lineNumber":150,"author":{"gitId":"stephenkyang"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":151,"author":{"gitId":"stephenkyang"},"content":"                throw new DukeException(\"Unable to write the task to file, given the filepath\");","lastModifiedDate":"2023-03-03"},{"lineNumber":152,"author":{"gitId":"stephenkyang"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":153,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":154,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":155,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":156,"author":{"gitId":"stephenkyang"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":157,"author":{"gitId":"stephenkyang"},"content":"     * Creates a string based on the list of items. Combines them into one big string with the delimeter \"|\"","lastModifiedDate":"2023-03-03"},{"lineNumber":158,"author":{"gitId":"stephenkyang"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":159,"author":{"gitId":"stephenkyang"},"content":"    private static String deliminterAdder(ArrayList\u003cString\u003e items) {","lastModifiedDate":"2023-03-03"},{"lineNumber":160,"author":{"gitId":"stephenkyang"},"content":"        String taskInStringForm \u003d \"\";","lastModifiedDate":"2023-03-03"},{"lineNumber":161,"author":{"gitId":"stephenkyang"},"content":"        for (String item : items) {","lastModifiedDate":"2023-03-03"},{"lineNumber":162,"author":{"gitId":"stephenkyang"},"content":"            taskInStringForm \u003d taskInStringForm.concat(item + \"|\");","lastModifiedDate":"2023-03-03"},{"lineNumber":163,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":164,"author":{"gitId":"stephenkyang"},"content":"        return taskInStringForm;","lastModifiedDate":"2023-03-03"},{"lineNumber":165,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":166,"author":{"gitId":"stephenkyang"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"stephenkyang":166}},{"path":"src/main/java/TaskList/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"stephenkyang"},"content":"package TaskList;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"stephenkyang"},"content":"import Tasks.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"stephenkyang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"stephenkyang"},"content":"public class TaskList {","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"stephenkyang"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"stephenkyang"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"stephenkyang"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"stephenkyang"},"content":"    public ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"stephenkyang"},"content":"        return this.tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"stephenkyang"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"stephenkyang":15}},{"path":"src/main/java/Tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"stephenkyang"},"content":"package Tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"stephenkyang"},"content":"import Tasks.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"stephenkyang"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"stephenkyang"},"content":"    private final String deadline;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"stephenkyang"},"content":"    public Deadline(String taskName, boolean isDone, int index, String deadline) {","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"stephenkyang"},"content":"        super(taskName, isDone, index);","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"stephenkyang"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"stephenkyang"},"content":"    public String getDeadline() {","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"stephenkyang"},"content":"        return this.deadline;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"stephenkyang"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"stephenkyang":14}},{"path":"src/main/java/Tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"stephenkyang"},"content":"package Tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"stephenkyang"},"content":"public class Event extends Deadline {","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"stephenkyang"},"content":"    private final String start;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"stephenkyang"},"content":"    public Event(String taskName, boolean isDone, int index, String start, String deadline) {","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"stephenkyang"},"content":"        super(taskName, isDone, index, deadline);","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"stephenkyang"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"stephenkyang"},"content":"    public String getStart() {","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"stephenkyang"},"content":"        return this.start;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"stephenkyang"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"stephenkyang":12}},{"path":"src/main/java/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"stephenkyang"},"content":"package Tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"stephenkyang"},"content":"public class Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"stephenkyang"},"content":"    private final String taskName;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"stephenkyang"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"stephenkyang"},"content":"    private int index;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"stephenkyang"},"content":"    public Task(String taskName, int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"stephenkyang"},"content":"        this(taskName, false, index);","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"stephenkyang"},"content":"    public Task(String taskName, boolean isDone, int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"stephenkyang"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"stephenkyang"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"stephenkyang"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"stephenkyang"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"stephenkyang"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"stephenkyang"},"content":"    public String getTaskName() {","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"stephenkyang"},"content":"        return this.taskName;","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"stephenkyang"},"content":"    public int getIndex() {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"stephenkyang"},"content":"        return this.index;","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"stephenkyang"},"content":"    public void doTask() {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"stephenkyang"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(\"Tasks.Task is done already\");","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"stephenkyang"},"content":"            return;","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"stephenkyang"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"stephenkyang"},"content":"    public void undoTask() {","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"stephenkyang"},"content":"        if (!this.isDone) {","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"stephenkyang"},"content":"            System.out.println(\"Tasks.Task has not been started\");","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"stephenkyang"},"content":"            return;","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"stephenkyang"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"stephenkyang"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"stephenkyang"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"stephenkyang":45}},{"path":"src/main/java/UI/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"stephenkyang"},"content":"package UI;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"stephenkyang"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"stephenkyang"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"stephenkyang"},"content":"public class UserInterface {","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"stephenkyang"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"stephenkyang"},"content":"    public UserInterface() {","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"stephenkyang"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"stephenkyang"},"content":"    public Scanner getScanner() {","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"stephenkyang"},"content":"        return this.scanner;","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"stephenkyang"},"content":"    public void showError(Exception e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"stephenkyang"},"content":"        System.out.println(e.getMessage());","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"stephenkyang"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"stephenkyang"},"content":"        System.out.println(\"Savefile not there or corrupted! Starting fresh with a blank list.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"stephenkyang"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"stephenkyang"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"stephenkyang":19}}]
