[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":"### Add tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"Add 3 different kinds of tasks to your list","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":"1. todo tasks ","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":"2. deadline tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"3. event tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"### Display tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"Display all the tasks currently in the task list","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"TJW0911"},"content":"### Mark/Unmark tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"TJW0911"},"content":"Mark completed tasks with a \u0027X\u0027","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"TJW0911"},"content":"ability to unmark the \u0027X\u0027 if there was a mistake","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"TJW0911"},"content":"### Command validation","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"TJW0911"},"content":"Informs users if commands are invalid","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"TJW0911"},"content":"### Save/Load tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"TJW0911"},"content":"Duke remembers tasks saved from previous sessions and will load them up whenever a new session is started","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"TJW0911"},"content":"### Filter tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"TJW0911"},"content":"Filter the task list to display only tasks containing a specific keyword","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"TJW0911"},"content":"### `list` - Lists all tasks currently stored","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"TJW0911"},"content":"Example of list:","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"TJW0911"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"TJW0911"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"TJW0911"},"content":"1. [T][ ] cs1010 tutorial","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"TJW0911"},"content":"2. [D][ ] cs1010 lab1 (by: Tuesday)","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"TJW0911"},"content":"3. [E][ ] cs2101 project meeting (from: 2pm to: 5pm)","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"TJW0911"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"TJW0911"},"content":"### `todo` - creates a basic task","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"TJW0911"},"content":"`todo CS1231s Assignment 1`","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"TJW0911"},"content":"### `deadline` - creates a basic task with a deadline","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"TJW0911"},"content":"Use `/by` to indicate the deadline","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"TJW0911"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"TJW0911"},"content":"`deadline CS1231s Assignment 1 /by Sunday`","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"TJW0911"},"content":"### `event` - creates a basic task with a start and end time","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"TJW0911"},"content":"Use `/from` to indicate the start time and `/to` to indicate end time","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"TJW0911"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"TJW0911"},"content":"`event CS1231s Assignment 1 /from 2pm /to 6pm`","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"TJW0911"},"content":"### `mark` - checks task as completed","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"TJW0911"},"content":"use the command along with the index of the item to be marked","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"TJW0911"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"TJW0911"},"content":"`mark 1` - marks the first item in the list with \u0027X\u0027","lastModifiedDate":"2023-03-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":76,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"TJW0911"},"content":"### `unmark` - unchecks tasks as uncompleted","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"TJW0911"},"content":"use the command along with the index of the item to be marked","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"TJW0911"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"TJW0911"},"content":"`unmark 1` unmark any \u0027X\u0027 from the first item on the list","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"TJW0911"},"content":"### `delete` - deletes a task from the list","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"TJW0911"},"content":"use the command along with the index of the item to be deleted","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"TJW0911"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"TJW0911"},"content":"`delete 1` - deletes the first item on the list","lastModifiedDate":"2023-03-01"},{"lineNumber":92,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":93,"author":{"gitId":"TJW0911"},"content":"### `find` - filters the list to see only tasks containing a certain keyword","lastModifiedDate":"2023-03-01"},{"lineNumber":94,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":95,"author":{"gitId":"TJW0911"},"content":"use the command along with the queried keyword","lastModifiedDate":"2023-03-01"},{"lineNumber":96,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":97,"author":{"gitId":"TJW0911"},"content":"Example of usage:","lastModifiedDate":"2023-03-01"},{"lineNumber":98,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"TJW0911"},"content":"`find cs1010` ","lastModifiedDate":"2023-03-01"},{"lineNumber":100,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":101,"author":{"gitId":"TJW0911"},"content":"Standard list:","lastModifiedDate":"2023-03-01"},{"lineNumber":102,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":103,"author":{"gitId":"TJW0911"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":104,"author":{"gitId":"TJW0911"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-03-01"},{"lineNumber":105,"author":{"gitId":"TJW0911"},"content":"1. [T][ ] cs1010 tutorial","lastModifiedDate":"2023-03-01"},{"lineNumber":106,"author":{"gitId":"TJW0911"},"content":"2. [D][ ] cs1010 lab1 (by: Tuesday)","lastModifiedDate":"2023-03-01"},{"lineNumber":107,"author":{"gitId":"TJW0911"},"content":"3. [E][ ] cs2101 project meeting (from: 2pm to: 5pm)","lastModifiedDate":"2023-03-01"},{"lineNumber":108,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":109,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":110,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":111,"author":{"gitId":"TJW0911"},"content":"Expected output for `find cs1010`:","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":114,"author":{"gitId":"TJW0911"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"TJW0911"},"content":"1: [T][ ] cs1010 tutorial","lastModifiedDate":"2023-03-01"},{"lineNumber":116,"author":{"gitId":"TJW0911"},"content":"2: [D][ ] cs1010 lab1    (by: Tuesday)","lastModifiedDate":"2023-03-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-03-01"},{"lineNumber":118,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":119,"author":{"gitId":"TJW0911"},"content":"### `bye` - Ends the current session of Duke","lastModifiedDate":"2023-03-01"},{"lineNumber":120,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"TJW0911":98,"-":22}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TJW0911"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"TJW0911"},"content":" * Class for a Deadline Task.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"TJW0911"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"TJW0911"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":"    private String by;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":"     * Constructor for Deadline task","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"     * @param name the name of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"TJW0911"},"content":"     * @param by the deadline of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"TJW0911"},"content":"    public Deadline(String name, String by) {","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"        super(name);","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"TJW0911"},"content":"     * Overrides the string to the format of a deadline task","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"TJW0911"},"content":"     * @return a string representing the details of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"TJW0911"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"TJW0911"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"TJW0911"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"TJW0911"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"TJW0911":27}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"TJW0911"},"content":"    private final static String LOAD_PATH \u003d \"save/tasks.txt\";","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"TJW0911"},"content":"    private final Parser parser;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"TJW0911"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"     * Constructs a Duke object for program to run by","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"TJW0911"},"content":"     * Initialising the ui, storage, parser and task list","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"     * to be used for the program.","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"    public Duke() {","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"TJW0911"},"content":"        storage \u003d new Storage(LOAD_PATH);","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"TJW0911"},"content":"        ui.showGreetingMessage();","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"TJW0911"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":19,"author":{"gitId":"TJW0911"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"TJW0911"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"TJW0911"},"content":"            ui.showLoadErrorMessage();","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"TJW0911"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"TJW0911"},"content":"        parser \u003d new Parser(ui, storage, tasks);","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"TJW0911"},"content":"        new Duke().run();","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"TJW0911"},"content":"     * Runs the Duke program","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"TJW0911"},"content":"    public void run() {","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"TJW0911"},"content":"        try {","lastModifiedDate":"2023-02-06"},{"lineNumber":36,"author":{"gitId":"TJW0911"},"content":"            String input \u003d ui.requestUserInput();","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"TJW0911"},"content":"            parser.run(tasks, input);","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"TJW0911"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"TJW0911"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"TJW0911":38,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TJW0911"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"TJW0911"},"content":" * Class to throw exceptions specific to Duke","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"TJW0911"},"content":" * when unexpected behaviour occurs during runtime.","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"TJW0911"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-06"},{"lineNumber":6,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-06"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":"     * Constructor for DukeException that informs user about problems and errors.","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"     * @param message The error message to be printed to user.","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-02-06"},{"lineNumber":13,"author":{"gitId":"TJW0911"},"content":"        super(message);","lastModifiedDate":"2023-02-06"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-06"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"}","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"TJW0911":15}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TJW0911"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"TJW0911"},"content":" * Class for an Event Task.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"TJW0911"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"TJW0911"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":"    private String startTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"TJW0911"},"content":"    private String endTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":"     * Constructor for event task","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"TJW0911"},"content":"     * @param description name of task.","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"     * @param startTime time when task should start.","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"TJW0911"},"content":"     * @param endTime time when task should end.","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"    public Event(String description, String startTime, String endTime) {","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"TJW0911"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"TJW0911"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"TJW0911"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"TJW0911"},"content":"     * Overrides the string to the format of an event task","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"TJW0911"},"content":"     * @return a string representing the details of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"TJW0911"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"TJW0911"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"TJW0911"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.startTime + \" to: \" + this.endTime + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"TJW0911"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"TJW0911":30}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TJW0911"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"TJW0911"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"TJW0911"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":" * deals with making sense of the user command","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"TJW0911"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"public class Parser {","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":"    Ui ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":"    Storage storage;","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"    TaskList taskList;","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"    static final int SINGLE_ARG \u003d 2;","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"     * Constructor for a parser.","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"TJW0911"},"content":"     * @param ui       deals with interactions with the user","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"TJW0911"},"content":"     * @param storage  deals with loading tasks from the file and saving tasks in the file","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"TJW0911"},"content":"     * @param taskList contains the task list of the user","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"TJW0911"},"content":"    public Parser(Ui ui, Storage storage, TaskList taskList) {","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"TJW0911"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"TJW0911"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"TJW0911"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"TJW0911"},"content":"     * Continue receiving user inputs and runs the parser","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"TJW0911"},"content":"     * as long as the user does not input \"bye\"","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"TJW0911"},"content":"     * Outputs farewell message if user inputs \"bye\"","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"TJW0911"},"content":"     * @param tasks the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"TJW0911"},"content":"     * @param line  the user input","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"TJW0911"},"content":"    public static void run(TaskList tasks, String line) {","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"TJW0911"},"content":"        while (!line.equals(\"bye\")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"TJW0911"},"content":"            if (line.length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"TJW0911"},"content":"                line \u003d Ui.requestUserInput();","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"TJW0911"},"content":"                continue;","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"TJW0911"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"TJW0911"},"content":"            Parser.prepareInput(tasks, line);","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"TJW0911"},"content":"            line \u003d Ui.requestUserInput();","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"TJW0911"},"content":"        Ui.showFarewellMessage();","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":48,"author":{"gitId":"TJW0911"},"content":"     * Splits the line of user input into a list of words so","lastModifiedDate":"2023-02-21"},{"lineNumber":49,"author":{"gitId":"TJW0911"},"content":"     * that the command and arguments can be easily processed.","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"TJW0911"},"content":"     * Then process the input","lastModifiedDate":"2023-02-21"},{"lineNumber":51,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":52,"author":{"gitId":"TJW0911"},"content":"     * @param tasks the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"TJW0911"},"content":"     * @param line  the user input","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"TJW0911"},"content":"    public static void prepareInput(TaskList tasks, String line) {","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"TJW0911"},"content":"        String[] wordList \u003d line.split(\" \");","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"TJW0911"},"content":"        String command \u003d wordList[0];","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"TJW0911"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"TJW0911"},"content":"            Parser.processInput(line, tasks, wordList, command);","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"TJW0911"},"content":"        } catch (DukeException | IOException exception) {","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"TJW0911"},"content":"            System.out.println(exception);","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"TJW0911"},"content":"     * Adds the task into the list containing the user","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"TJW0911"},"content":"     * tasks and prints confirmation message","lastModifiedDate":"2023-02-21"},{"lineNumber":68,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"TJW0911"},"content":"     * @param tasks the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"TJW0911"},"content":"     * @param task  the task to be added","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":72,"author":{"gitId":"TJW0911"},"content":"    public static void addTask(TaskList tasks, Task task) {","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"TJW0911"},"content":"        tasks.add(task);","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"TJW0911"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"TJW0911"},"content":"        System.out.println(task);","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"TJW0911"},"content":"        System.out.printf(\"Now you have %d tasks in the list\\n\", tasks.size());","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":80,"author":{"gitId":"TJW0911"},"content":"     * Marks the task indicated by the second argument of the user","lastModifiedDate":"2023-02-21"},{"lineNumber":81,"author":{"gitId":"TJW0911"},"content":"     * input as done","lastModifiedDate":"2023-02-21"},{"lineNumber":82,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":83,"author":{"gitId":"TJW0911"},"content":"     * @param tasks    the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":84,"author":{"gitId":"TJW0911"},"content":"     * @param wordList the line of user input stored as an array of strings","lastModifiedDate":"2023-02-21"},{"lineNumber":85,"author":{"gitId":"TJW0911"},"content":"     * @throws DukeException Thrown when number of arguments is incorrect","lastModifiedDate":"2023-02-21"},{"lineNumber":86,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":87,"author":{"gitId":"TJW0911"},"content":"    private static void markTask(TaskList tasks, String[] wordList) throws DukeException {","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"TJW0911"},"content":"        if (wordList.length !\u003d SINGLE_ARG) {","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"TJW0911"},"content":"            throw new DukeException(\"☹ OOPS!!! Wrong number of arguments for mark\");","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"TJW0911"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"TJW0911"},"content":"            int index \u003d Integer.parseInt(wordList[1]) - 1;","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"TJW0911"},"content":"            tasks.get(index).setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"TJW0911"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"TJW0911"},"content":"            System.out.println(tasks.get(index));","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":97,"author":{"gitId":"TJW0911"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"TJW0911"},"content":"            System.out.println(exception);","lastModifiedDate":"2023-02-20"},{"lineNumber":99,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":101,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":102,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":103,"author":{"gitId":"TJW0911"},"content":"     * Unmarks the task indicated by the second argument of the user","lastModifiedDate":"2023-02-21"},{"lineNumber":104,"author":{"gitId":"TJW0911"},"content":"     * input as not done","lastModifiedDate":"2023-02-21"},{"lineNumber":105,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":106,"author":{"gitId":"TJW0911"},"content":"     * @param tasks    the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":107,"author":{"gitId":"TJW0911"},"content":"     * @param wordList the line of user input stored as an array of strings","lastModifiedDate":"2023-02-21"},{"lineNumber":108,"author":{"gitId":"TJW0911"},"content":"     * @throws DukeException Thrown when number of arguments is incorrect","lastModifiedDate":"2023-02-21"},{"lineNumber":109,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":110,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":111,"author":{"gitId":"TJW0911"},"content":"    private static void unmarkTask(TaskList tasks, String[] wordList) throws DukeException {","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"TJW0911"},"content":"        if (wordList.length !\u003d SINGLE_ARG) {","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"TJW0911"},"content":"            throw new DukeException(\"☹ OOPS!!! Wrong number of arguments for unmark\");","lastModifiedDate":"2023-02-20"},{"lineNumber":114,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":115,"author":{"gitId":"TJW0911"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":116,"author":{"gitId":"TJW0911"},"content":"            int index \u003d Integer.parseInt(wordList[1]) - 1;","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"TJW0911"},"content":"            tasks.get(index).setDone(false);","lastModifiedDate":"2023-02-20"},{"lineNumber":118,"author":{"gitId":"TJW0911"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-02-20"},{"lineNumber":119,"author":{"gitId":"TJW0911"},"content":"            System.out.println(tasks.get(index));","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"TJW0911"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2023-02-20"},{"lineNumber":121,"author":{"gitId":"TJW0911"},"content":"            System.out.println(exception);","lastModifiedDate":"2023-02-20"},{"lineNumber":122,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":123,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":124,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":125,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":126,"author":{"gitId":"TJW0911"},"content":"     * Interprets the user input and adds an event task with its","lastModifiedDate":"2023-02-21"},{"lineNumber":127,"author":{"gitId":"TJW0911"},"content":"     * corresponding description, start and end time to the task list","lastModifiedDate":"2023-02-21"},{"lineNumber":128,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":129,"author":{"gitId":"TJW0911"},"content":"     * @param line  the user input","lastModifiedDate":"2023-02-21"},{"lineNumber":130,"author":{"gitId":"TJW0911"},"content":"     * @param tasks the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":131,"author":{"gitId":"TJW0911"},"content":"     * @throws DukeException thrown when the event description is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":132,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":133,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":134,"author":{"gitId":"TJW0911"},"content":"    private static void createEvent(String line, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-03-01"},{"lineNumber":135,"author":{"gitId":"TJW0911"},"content":"        if (line.length() \u003c\u003d 6 || line.substring(6).isBlank()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":136,"author":{"gitId":"TJW0911"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-02-20"},{"lineNumber":137,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":138,"author":{"gitId":"TJW0911"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":139,"author":{"gitId":"TJW0911"},"content":"            line \u003d line.substring(6);","lastModifiedDate":"2023-02-20"},{"lineNumber":140,"author":{"gitId":"TJW0911"},"content":"            String description \u003d line.split(\" /from \")[0];","lastModifiedDate":"2023-02-20"},{"lineNumber":141,"author":{"gitId":"TJW0911"},"content":"            String eventTime \u003d line.split(\" /from \")[1];","lastModifiedDate":"2023-02-20"},{"lineNumber":142,"author":{"gitId":"TJW0911"},"content":"            String startTime \u003d eventTime.split(\" /to \")[0];","lastModifiedDate":"2023-02-20"},{"lineNumber":143,"author":{"gitId":"TJW0911"},"content":"            String endTime \u003d eventTime.split(\" /to \")[1];","lastModifiedDate":"2023-02-20"},{"lineNumber":144,"author":{"gitId":"TJW0911"},"content":"            Event eventTask \u003d new Event(description, startTime, endTime);","lastModifiedDate":"2023-02-20"},{"lineNumber":145,"author":{"gitId":"TJW0911"},"content":"            addTask(tasks, eventTask);","lastModifiedDate":"2023-02-20"},{"lineNumber":146,"author":{"gitId":"TJW0911"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2023-02-20"},{"lineNumber":147,"author":{"gitId":"TJW0911"},"content":"            System.out.println(exception);","lastModifiedDate":"2023-02-20"},{"lineNumber":148,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":149,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":150,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":151,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":152,"author":{"gitId":"TJW0911"},"content":"     * Interprets the user input and adds a to-do task with","lastModifiedDate":"2023-02-21"},{"lineNumber":153,"author":{"gitId":"TJW0911"},"content":"     * its corresponding description into the task list","lastModifiedDate":"2023-02-21"},{"lineNumber":154,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":155,"author":{"gitId":"TJW0911"},"content":"     * @param line  the user input","lastModifiedDate":"2023-02-21"},{"lineNumber":156,"author":{"gitId":"TJW0911"},"content":"     * @param tasks the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":157,"author":{"gitId":"TJW0911"},"content":"     * @throws DukeException thrown when the to-do description is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":158,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":159,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":160,"author":{"gitId":"TJW0911"},"content":"    private static void createTodo(String line, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-03-01"},{"lineNumber":161,"author":{"gitId":"TJW0911"},"content":"        if (line.length() \u003c\u003d 5 || line.substring(5).isBlank()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":162,"author":{"gitId":"TJW0911"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-02-20"},{"lineNumber":163,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":164,"author":{"gitId":"TJW0911"},"content":"        String description \u003d line.substring(5);","lastModifiedDate":"2023-02-20"},{"lineNumber":165,"author":{"gitId":"TJW0911"},"content":"        Todo todoTask \u003d new Todo(description);","lastModifiedDate":"2023-02-20"},{"lineNumber":166,"author":{"gitId":"TJW0911"},"content":"        addTask(tasks, todoTask);","lastModifiedDate":"2023-02-20"},{"lineNumber":167,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":168,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":169,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":170,"author":{"gitId":"TJW0911"},"content":"     * Interprets the user input and adds a deadline task","lastModifiedDate":"2023-02-21"},{"lineNumber":171,"author":{"gitId":"TJW0911"},"content":"     * with its corresponding deadline and","lastModifiedDate":"2023-02-21"},{"lineNumber":172,"author":{"gitId":"TJW0911"},"content":"     * description into the task list","lastModifiedDate":"2023-02-21"},{"lineNumber":173,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":174,"author":{"gitId":"TJW0911"},"content":"     * @param line  the user input","lastModifiedDate":"2023-02-21"},{"lineNumber":175,"author":{"gitId":"TJW0911"},"content":"     * @param tasks the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":176,"author":{"gitId":"TJW0911"},"content":"     * @throws DukeException thrown when the deadline description is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":177,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":178,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":179,"author":{"gitId":"TJW0911"},"content":"    private static void createDeadline(String line, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-03-01"},{"lineNumber":180,"author":{"gitId":"TJW0911"},"content":"        if (line.length() \u003c\u003d 9 || line.substring(9).isBlank()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":181,"author":{"gitId":"TJW0911"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-02-20"},{"lineNumber":182,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":183,"author":{"gitId":"TJW0911"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":184,"author":{"gitId":"TJW0911"},"content":"            line \u003d line.substring(9);","lastModifiedDate":"2023-02-20"},{"lineNumber":185,"author":{"gitId":"TJW0911"},"content":"            String description \u003d line.split(\" /by \")[0];","lastModifiedDate":"2023-02-20"},{"lineNumber":186,"author":{"gitId":"TJW0911"},"content":"            String by \u003d line.split(\" /by \")[1];","lastModifiedDate":"2023-02-20"},{"lineNumber":187,"author":{"gitId":"TJW0911"},"content":"            Deadline deadlineTask \u003d new Deadline(description, by);","lastModifiedDate":"2023-02-20"},{"lineNumber":188,"author":{"gitId":"TJW0911"},"content":"            addTask(tasks, deadlineTask);","lastModifiedDate":"2023-02-20"},{"lineNumber":189,"author":{"gitId":"TJW0911"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2023-02-20"},{"lineNumber":190,"author":{"gitId":"TJW0911"},"content":"            System.out.println(exception);","lastModifiedDate":"2023-02-20"},{"lineNumber":191,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":192,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":193,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":194,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":195,"author":{"gitId":"TJW0911"},"content":"     * Prints out all the tasks the user currently have in","lastModifiedDate":"2023-02-21"},{"lineNumber":196,"author":{"gitId":"TJW0911"},"content":"     * their list","lastModifiedDate":"2023-02-21"},{"lineNumber":197,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":198,"author":{"gitId":"TJW0911"},"content":"     * @param tasks    the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":199,"author":{"gitId":"TJW0911"},"content":"     * @param wordList the line of user input stored as an array of strings","lastModifiedDate":"2023-02-21"},{"lineNumber":200,"author":{"gitId":"TJW0911"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-21"},{"lineNumber":201,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":202,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":203,"author":{"gitId":"TJW0911"},"content":"    private static void printList(TaskList tasks, String[] wordList) throws DukeException {","lastModifiedDate":"2023-02-20"},{"lineNumber":204,"author":{"gitId":"TJW0911"},"content":"        if (wordList.length \u003e 1) {","lastModifiedDate":"2023-02-20"},{"lineNumber":205,"author":{"gitId":"TJW0911"},"content":"            throw new DukeException(\"☹ OOPS!!! Too much arguments for list\");","lastModifiedDate":"2023-02-20"},{"lineNumber":206,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":207,"author":{"gitId":"TJW0911"},"content":"        if (tasks.size() \u003e 0) {","lastModifiedDate":"2023-02-20"},{"lineNumber":208,"author":{"gitId":"TJW0911"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-02-20"},{"lineNumber":209,"author":{"gitId":"TJW0911"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {","lastModifiedDate":"2023-02-20"},{"lineNumber":210,"author":{"gitId":"TJW0911"},"content":"                System.out.printf(\"%d. %s\\n\", i + 1, tasks.get(i));","lastModifiedDate":"2023-02-20"},{"lineNumber":211,"author":{"gitId":"TJW0911"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":212,"author":{"gitId":"TJW0911"},"content":"        } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":213,"author":{"gitId":"TJW0911"},"content":"            System.out.println(\"There is no tasks\");","lastModifiedDate":"2023-02-20"},{"lineNumber":214,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":215,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":216,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":217,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":218,"author":{"gitId":"TJW0911"},"content":"     * Deletes the task indicated by the second argument of the user","lastModifiedDate":"2023-02-21"},{"lineNumber":219,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":220,"author":{"gitId":"TJW0911"},"content":"     * @param tasks    the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":221,"author":{"gitId":"TJW0911"},"content":"     * @param wordList the line of user input stored as an array of strings","lastModifiedDate":"2023-02-21"},{"lineNumber":222,"author":{"gitId":"TJW0911"},"content":"     * @throws DukeException thrown when number of arguments is incorrect","lastModifiedDate":"2023-02-21"},{"lineNumber":223,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":224,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":225,"author":{"gitId":"TJW0911"},"content":"    private static void deleteTask(TaskList tasks, String[] wordList) throws DukeException {","lastModifiedDate":"2023-03-01"},{"lineNumber":226,"author":{"gitId":"TJW0911"},"content":"        if (wordList.length !\u003d SINGLE_ARG) {","lastModifiedDate":"2023-03-01"},{"lineNumber":227,"author":{"gitId":"TJW0911"},"content":"            throw new DukeException(\"☹ OOPS!!! Wrong number of arguments for delete\");","lastModifiedDate":"2023-02-20"},{"lineNumber":228,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":229,"author":{"gitId":"TJW0911"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":230,"author":{"gitId":"TJW0911"},"content":"            int index \u003d Integer.parseInt(wordList[1]) - 1;","lastModifiedDate":"2023-02-20"},{"lineNumber":231,"author":{"gitId":"TJW0911"},"content":"            if (index + 1 \u003e tasks.size()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":232,"author":{"gitId":"TJW0911"},"content":"                throw new DukeException(\"☹ OOPS!!! index out of bounds\");","lastModifiedDate":"2023-02-20"},{"lineNumber":233,"author":{"gitId":"TJW0911"},"content":"            } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":234,"author":{"gitId":"TJW0911"},"content":"                System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-02-20"},{"lineNumber":235,"author":{"gitId":"TJW0911"},"content":"                System.out.println(tasks.get(index));","lastModifiedDate":"2023-02-20"},{"lineNumber":236,"author":{"gitId":"TJW0911"},"content":"                tasks.remove(index);","lastModifiedDate":"2023-02-20"},{"lineNumber":237,"author":{"gitId":"TJW0911"},"content":"                System.out.printf(\"Now you have %d tasks in the list\\n\", tasks.size());","lastModifiedDate":"2023-02-20"},{"lineNumber":238,"author":{"gitId":"TJW0911"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":239,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":240,"author":{"gitId":"TJW0911"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2023-02-20"},{"lineNumber":241,"author":{"gitId":"TJW0911"},"content":"            System.out.println(exception);","lastModifiedDate":"2023-02-20"},{"lineNumber":242,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":243,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":244,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":245,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":246,"author":{"gitId":"TJW0911"},"content":"     * Filter the task list to print out tasks corresponding to","lastModifiedDate":"2023-02-21"},{"lineNumber":247,"author":{"gitId":"TJW0911"},"content":"     * a keyword input by the user.","lastModifiedDate":"2023-02-21"},{"lineNumber":248,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":249,"author":{"gitId":"TJW0911"},"content":"     * @param tasks    the list storing the users tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":250,"author":{"gitId":"TJW0911"},"content":"     * @param wordList the line of user input stored as an array of strings","lastModifiedDate":"2023-02-21"},{"lineNumber":251,"author":{"gitId":"TJW0911"},"content":"     * @throws DukeException thrown when number of arguments is wrong","lastModifiedDate":"2023-02-21"},{"lineNumber":252,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":253,"author":{"gitId":"TJW0911"},"content":"    private static void findTask(TaskList tasks, String[] wordList) throws DukeException {","lastModifiedDate":"2023-03-01"},{"lineNumber":254,"author":{"gitId":"TJW0911"},"content":"        if (wordList.length !\u003d SINGLE_ARG) {","lastModifiedDate":"2023-03-01"},{"lineNumber":255,"author":{"gitId":"TJW0911"},"content":"            throw new DukeException(\"☹ OOPS!!! Wrong number of arguments for find\");","lastModifiedDate":"2023-02-20"},{"lineNumber":256,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":257,"author":{"gitId":"TJW0911"},"content":"        String keyword \u003d wordList[1];","lastModifiedDate":"2023-02-20"},{"lineNumber":258,"author":{"gitId":"TJW0911"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d tasks.filterByKeyword(keyword);","lastModifiedDate":"2023-02-20"},{"lineNumber":259,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":260,"author":{"gitId":"TJW0911"},"content":"        if (filteredList.size() \u003e 0) {","lastModifiedDate":"2023-02-20"},{"lineNumber":261,"author":{"gitId":"TJW0911"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-02-20"},{"lineNumber":262,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":263,"author":{"gitId":"TJW0911"},"content":"            for (int i \u003d 0; i \u003c filteredList.size(); i +\u003d 1) {","lastModifiedDate":"2023-02-20"},{"lineNumber":264,"author":{"gitId":"TJW0911"},"content":"                System.out.println(i + 1 + \": \" + filteredList.get(i));","lastModifiedDate":"2023-02-20"},{"lineNumber":265,"author":{"gitId":"TJW0911"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":266,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":267,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":268,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":269,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":270,"author":{"gitId":"TJW0911"},"content":"     * interprets the user input and performs the corresponding actions,","lastModifiedDate":"2023-02-21"},{"lineNumber":271,"author":{"gitId":"TJW0911"},"content":"     * if possible, according to the command inputted by the user","lastModifiedDate":"2023-02-21"},{"lineNumber":272,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":273,"author":{"gitId":"TJW0911"},"content":"     * @param line     the user input","lastModifiedDate":"2023-02-21"},{"lineNumber":274,"author":{"gitId":"TJW0911"},"content":"     * @param tasks    the list storing the user\u0027s tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":275,"author":{"gitId":"TJW0911"},"content":"     * @param wordList the line of user input stored as an array of strings","lastModifiedDate":"2023-02-21"},{"lineNumber":276,"author":{"gitId":"TJW0911"},"content":"     * @param command  The command to be performed","lastModifiedDate":"2023-02-21"},{"lineNumber":277,"author":{"gitId":"TJW0911"},"content":"     * @throws DukeException thrown when the command cannot be interpreted","lastModifiedDate":"2023-02-21"},{"lineNumber":278,"author":{"gitId":"TJW0911"},"content":"     * @throws IOException   Thrown when file system encounters an error.","lastModifiedDate":"2023-02-21"},{"lineNumber":279,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":280,"author":{"gitId":"TJW0911"},"content":"    public static void processInput(String line, TaskList tasks, String[] wordList, String command) throws","lastModifiedDate":"2023-02-20"},{"lineNumber":281,"author":{"gitId":"TJW0911"},"content":"            DukeException, IOException {","lastModifiedDate":"2023-02-20"},{"lineNumber":282,"author":{"gitId":"TJW0911"},"content":"        switch (command) {","lastModifiedDate":"2023-02-20"},{"lineNumber":283,"author":{"gitId":"TJW0911"},"content":"        case \"list\":","lastModifiedDate":"2023-02-20"},{"lineNumber":284,"author":{"gitId":"TJW0911"},"content":"            printList(tasks, wordList);","lastModifiedDate":"2023-02-20"},{"lineNumber":285,"author":{"gitId":"TJW0911"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":286,"author":{"gitId":"TJW0911"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-20"},{"lineNumber":287,"author":{"gitId":"TJW0911"},"content":"            unmarkTask(tasks, wordList);","lastModifiedDate":"2023-03-01"},{"lineNumber":288,"author":{"gitId":"TJW0911"},"content":"            Storage.save(tasks);","lastModifiedDate":"2023-02-20"},{"lineNumber":289,"author":{"gitId":"TJW0911"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":290,"author":{"gitId":"TJW0911"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-20"},{"lineNumber":291,"author":{"gitId":"TJW0911"},"content":"            markTask(tasks, wordList);","lastModifiedDate":"2023-03-01"},{"lineNumber":292,"author":{"gitId":"TJW0911"},"content":"            Storage.save(tasks);","lastModifiedDate":"2023-02-20"},{"lineNumber":293,"author":{"gitId":"TJW0911"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":294,"author":{"gitId":"TJW0911"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-20"},{"lineNumber":295,"author":{"gitId":"TJW0911"},"content":"            createDeadline(line, tasks);","lastModifiedDate":"2023-03-01"},{"lineNumber":296,"author":{"gitId":"TJW0911"},"content":"            Storage.save(tasks);","lastModifiedDate":"2023-02-20"},{"lineNumber":297,"author":{"gitId":"TJW0911"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":298,"author":{"gitId":"TJW0911"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-20"},{"lineNumber":299,"author":{"gitId":"TJW0911"},"content":"            createTodo(line, tasks);","lastModifiedDate":"2023-03-01"},{"lineNumber":300,"author":{"gitId":"TJW0911"},"content":"            Storage.save(tasks);","lastModifiedDate":"2023-02-20"},{"lineNumber":301,"author":{"gitId":"TJW0911"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":302,"author":{"gitId":"TJW0911"},"content":"        case \"event\":","lastModifiedDate":"2023-02-20"},{"lineNumber":303,"author":{"gitId":"TJW0911"},"content":"            createEvent(line, tasks);","lastModifiedDate":"2023-03-01"},{"lineNumber":304,"author":{"gitId":"TJW0911"},"content":"            Storage.save(tasks);","lastModifiedDate":"2023-02-20"},{"lineNumber":305,"author":{"gitId":"TJW0911"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":306,"author":{"gitId":"TJW0911"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-20"},{"lineNumber":307,"author":{"gitId":"TJW0911"},"content":"            deleteTask(tasks, wordList);","lastModifiedDate":"2023-03-01"},{"lineNumber":308,"author":{"gitId":"TJW0911"},"content":"            Storage.save(tasks);","lastModifiedDate":"2023-02-20"},{"lineNumber":309,"author":{"gitId":"TJW0911"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":310,"author":{"gitId":"TJW0911"},"content":"        case \"find\":","lastModifiedDate":"2023-02-20"},{"lineNumber":311,"author":{"gitId":"TJW0911"},"content":"            findTask(tasks, wordList);","lastModifiedDate":"2023-03-01"},{"lineNumber":312,"author":{"gitId":"TJW0911"},"content":"            break;","lastModifiedDate":"2023-02-20"},{"lineNumber":313,"author":{"gitId":"TJW0911"},"content":"        default:","lastModifiedDate":"2023-02-20"},{"lineNumber":314,"author":{"gitId":"TJW0911"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-02-20"},{"lineNumber":315,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":316,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":317,"author":{"gitId":"TJW0911"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"TJW0911":317}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TJW0911"},"content":"import java.io.File;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"TJW0911"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"TJW0911"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"TJW0911"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":" * deals with loading tasks from the file and saving tasks in the file","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"public class Storage {","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"TJW0911"},"content":"    private final static String LOAD_PATH \u003d \"save/tasks.txt\";","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"    File file;","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"     * Constructor for Storage","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"TJW0911"},"content":"     * @param filePath Path to locate file relative to project root.","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"TJW0911"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"TJW0911"},"content":"        file \u003d new File(filePath);","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"TJW0911"},"content":"     * Writes current TaskList onto file on hard drive after","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"TJW0911"},"content":"     * checking if the directory the file is in and the file exists.","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"TJW0911"},"content":"     * If they do not exist, create them","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"TJW0911"},"content":"     * @param tasks TaskList with tasks in Duke.","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"TJW0911"},"content":"     * @throws IOException Thrown when file system encounters an error.","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"TJW0911"},"content":"    public static void save(TaskList tasks) throws IOException {","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"TJW0911"},"content":"        File file \u003d new File(LOAD_PATH);","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"TJW0911"},"content":"        if (!file.getParentFile().exists()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"TJW0911"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"TJW0911"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"TJW0911"},"content":"            file.createNewFile();","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"TJW0911"},"content":"        FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"TJW0911"},"content":"        for (Task task : tasks.asList()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"TJW0911"},"content":"            fileWriter.write(task.toString());","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"TJW0911"},"content":"            fileWriter.write(System.lineSeparator());","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"TJW0911"},"content":"        fileWriter.close();","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"TJW0911"},"content":"    private static Task getEventTask(String currTask, String taskDetails) {","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"TJW0911"},"content":"        Task task;","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"TJW0911"},"content":"        String eventName \u003d taskDetails.split(\" \\\\(from:\")[0];","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"TJW0911"},"content":"        String eventTime \u003d taskDetails.split(\"\\\\(from: \")[1];","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"TJW0911"},"content":"        String startTime \u003d eventTime.split(\" to: \")[0];","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"TJW0911"},"content":"        String endTime \u003d eventTime.split(\" to: \")[1].split(\"\\\\)\")[0];","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"TJW0911"},"content":"        task \u003d new Event(eventName, startTime, endTime);","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"TJW0911"},"content":"        if (currTask.substring(3, 7).contains(\"X\")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"TJW0911"},"content":"            task.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"TJW0911"},"content":"        return task;","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"TJW0911"},"content":"    private static Task getDeadlineTask(String currTask, String taskDetails) {","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"TJW0911"},"content":"        Task task;","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"TJW0911"},"content":"        String deadlineName \u003d taskDetails.split(\"\\\\(by:\")[0];","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"TJW0911"},"content":"        String by \u003d taskDetails.split(\" \\\\(by: \")[1].split(\"\\\\)\")[0];","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"TJW0911"},"content":"        task \u003d new Deadline(deadlineName, by);","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"TJW0911"},"content":"        if (currTask.substring(3, 7).contains(\"X\")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"TJW0911"},"content":"            task.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"TJW0911"},"content":"        return task;","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"TJW0911"},"content":"    private static Task getTodoTask(String currTask, String taskDetails) {","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"TJW0911"},"content":"        Task task;","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"TJW0911"},"content":"        task \u003d new Todo(taskDetails);","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"TJW0911"},"content":"        if (currTask.substring(3, 7).contains(\"X\")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"TJW0911"},"content":"            task.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"TJW0911"},"content":"        return task;","lastModifiedDate":"2023-03-01"},{"lineNumber":76,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"TJW0911"},"content":"    private static void prepareTasks(Scanner readFile, ArrayList\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"TJW0911"},"content":"        while (readFile.hasNextLine()) {","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"TJW0911"},"content":"            Task task;","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"TJW0911"},"content":"            String currTask \u003d readFile.nextLine();","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"TJW0911"},"content":"            String taskType \u003d currTask.substring(0, 3);","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"TJW0911"},"content":"            String taskDetails \u003d currTask.substring(7);","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"TJW0911"},"content":"            switch (taskType) {","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"TJW0911"},"content":"            case \"[T]\":","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"TJW0911"},"content":"                task \u003d getTodoTask(currTask, taskDetails);","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"TJW0911"},"content":"                break;","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"TJW0911"},"content":"            case \"[D]\":","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"TJW0911"},"content":"                task \u003d getDeadlineTask(currTask, taskDetails);","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"TJW0911"},"content":"                break;","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"TJW0911"},"content":"            case \"[E]\":","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"TJW0911"},"content":"                task \u003d getEventTask(currTask, taskDetails);","lastModifiedDate":"2023-03-01"},{"lineNumber":92,"author":{"gitId":"TJW0911"},"content":"                break;","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"TJW0911"},"content":"            default:","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"TJW0911"},"content":"                throw new DukeException(\"task type not saved properly\");","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"TJW0911"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"TJW0911"},"content":"            tasks.add(task);","lastModifiedDate":"2023-02-20"},{"lineNumber":97,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":100,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":101,"author":{"gitId":"TJW0911"},"content":"     * Retrieves data from a previous session of Duke, if it exists,","lastModifiedDate":"2023-03-01"},{"lineNumber":102,"author":{"gitId":"TJW0911"},"content":"     * and then format the data into an appropriate format to add into","lastModifiedDate":"2023-03-01"},{"lineNumber":103,"author":{"gitId":"TJW0911"},"content":"     * the task list","lastModifiedDate":"2023-03-01"},{"lineNumber":104,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":105,"author":{"gitId":"TJW0911"},"content":"     * @return An array of Tasks.","lastModifiedDate":"2023-03-01"},{"lineNumber":106,"author":{"gitId":"TJW0911"},"content":"     * @throws DukeException Thrown when unexpected behaviour occurs with Duke.","lastModifiedDate":"2023-03-01"},{"lineNumber":107,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":108,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":109,"author":{"gitId":"TJW0911"},"content":"    public Task[] load() throws DukeException {","lastModifiedDate":"2023-03-01"},{"lineNumber":110,"author":{"gitId":"TJW0911"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":111,"author":{"gitId":"TJW0911"},"content":"            if (file.exists()) {","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"TJW0911"},"content":"                Scanner readFile \u003d new Scanner(file);","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"TJW0911"},"content":"                ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-01"},{"lineNumber":114,"author":{"gitId":"TJW0911"},"content":"                prepareTasks(readFile, tasks);","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"TJW0911"},"content":"                if (tasks.size() \u003e 0) {","lastModifiedDate":"2023-02-20"},{"lineNumber":116,"author":{"gitId":"TJW0911"},"content":"                    Ui.showWelcomeBackMessage();","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"TJW0911"},"content":"                }","lastModifiedDate":"2023-02-20"},{"lineNumber":118,"author":{"gitId":"TJW0911"},"content":"                for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-01"},{"lineNumber":119,"author":{"gitId":"TJW0911"},"content":"                    System.out.println(i + 1 + \": \" + tasks.get(i));","lastModifiedDate":"2023-03-01"},{"lineNumber":120,"author":{"gitId":"TJW0911"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":121,"author":{"gitId":"TJW0911"},"content":"                return tasks.toArray(new Task[0]);","lastModifiedDate":"2023-02-20"},{"lineNumber":122,"author":{"gitId":"TJW0911"},"content":"            } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":123,"author":{"gitId":"TJW0911"},"content":"                return new Task[0];","lastModifiedDate":"2023-02-20"},{"lineNumber":124,"author":{"gitId":"TJW0911"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":125,"author":{"gitId":"TJW0911"},"content":"        } catch (DukeException | IOException exception) {","lastModifiedDate":"2023-02-20"},{"lineNumber":126,"author":{"gitId":"TJW0911"},"content":"            throw new DukeException(\"error reading load file\");","lastModifiedDate":"2023-02-20"},{"lineNumber":127,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":129,"author":{"gitId":"TJW0911"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"TJW0911":129}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TJW0911"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"TJW0911"},"content":" * Class to represent tasks created by Duke","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"TJW0911"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"TJW0911"},"content":"public class Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":"    protected String description;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"TJW0911"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":"     * Constructor for task","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"TJW0911"},"content":"     * @param description the name of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"TJW0911"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"TJW0911"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"TJW0911"},"content":"        return description;","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"TJW0911"},"content":"     * Sets the status of the task as done or not done","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"TJW0911"},"content":"     * based on the variable passes in","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"TJW0911"},"content":"     * @param done to determine whether to check or uncheck the task","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"TJW0911"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"TJW0911"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"TJW0911"},"content":"     * overrides the string to return the status of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"TJW0911"},"content":"     * along with its description","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"TJW0911"},"content":"     * @return a string representing the status and details of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"TJW0911"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"TJW0911"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"TJW0911"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"TJW0911"},"content":"            return \"[X] \" + this.description;","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"TJW0911"},"content":"        return \"[ ] \" + this.description;","lastModifiedDate":"2023-02-06"},{"lineNumber":45,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"TJW0911"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"TJW0911":46}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TJW0911"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"TJW0911"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"TJW0911"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":" * Class representing the task list of users","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"TJW0911"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"public class TaskList {","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":"    ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"TJW0911"},"content":"     * Constructor for TaskList when there are no prior Tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"     * from a previous session","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"TJW0911"},"content":"     * Constructor for TaskList when Tasks are present","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"TJW0911"},"content":"     * from a previous session","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"TJW0911"},"content":"     * @param loadedTasks Array of Tasks to be added.","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"TJW0911"},"content":"    public TaskList(Task[] loadedTasks) {","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"TJW0911"},"content":"        this();","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"TJW0911"},"content":"        tasks.addAll(Arrays.asList(loadedTasks));","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"TJW0911"},"content":"     * Adds a Task to the task list","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"TJW0911"},"content":"     * @param task Task to be added to current list.","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"TJW0911"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"TJW0911"},"content":"        tasks.add(task);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"TJW0911"},"content":"     * Returns a task at a given index.","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"TJW0911"},"content":"     * @param i Index where task is to be returned.","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"TJW0911"},"content":"     * @return The task requested by Duke.","lastModifiedDate":"2023-02-21"},{"lineNumber":44,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"TJW0911"},"content":"    public Task get(int i) {","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"TJW0911"},"content":"        return tasks.get(i);","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":49,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"TJW0911"},"content":"     * Removes task from list at given index.","lastModifiedDate":"2023-02-21"},{"lineNumber":51,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":52,"author":{"gitId":"TJW0911"},"content":"     * @param i Index where task is to be removed.","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"TJW0911"},"content":"    public void remove(int i) {","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"TJW0911"},"content":"        tasks.remove(i);","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"TJW0911"},"content":"     * Returns the number of items in the existing TaskList.","lastModifiedDate":"2023-02-21"},{"lineNumber":60,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":61,"author":{"gitId":"TJW0911"},"content":"     * @return Number of tasks in the TaskList.","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":63,"author":{"gitId":"TJW0911"},"content":"    public int size() {","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"TJW0911"},"content":"        return tasks.size();","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":68,"author":{"gitId":"TJW0911"},"content":"     * Returns an array of tasks stored in current Task List.","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"TJW0911"},"content":"     * @return An array of Tasks from current Task List.","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":72,"author":{"gitId":"TJW0911"},"content":"    public Task[] asList() {","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"TJW0911"},"content":"        return tasks.toArray(new Task[0]);","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":77,"author":{"gitId":"TJW0911"},"content":"     * Filter the task list to only return tasks with the","lastModifiedDate":"2023-02-21"},{"lineNumber":78,"author":{"gitId":"TJW0911"},"content":"     * specified keyword","lastModifiedDate":"2023-02-21"},{"lineNumber":79,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":80,"author":{"gitId":"TJW0911"},"content":"     * @param keyword the keyword which the filter is based on","lastModifiedDate":"2023-02-21"},{"lineNumber":81,"author":{"gitId":"TJW0911"},"content":"     * @return a list of tasks that all contains the keyword specified","lastModifiedDate":"2023-02-21"},{"lineNumber":82,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":83,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":84,"author":{"gitId":"TJW0911"},"content":"    public ArrayList\u003cTask\u003e filterByKeyword(String keyword) {","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"TJW0911"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":87,"author":{"gitId":"TJW0911"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"TJW0911"},"content":"            String taskName \u003d tasks.get(i).getDescription();","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"TJW0911"},"content":"            if (taskName.contains(keyword)) {","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"TJW0911"},"content":"                filteredTasks.add(tasks.get(i));","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"TJW0911"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"TJW0911"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"TJW0911"},"content":"        return filteredTasks;","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"TJW0911"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"TJW0911":95}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TJW0911"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"TJW0911"},"content":" * Class for a To-do Task.","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"TJW0911"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"TJW0911"},"content":"public class Todo extends Task{","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"     * Constructor for to-do Task.","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":"     * @param description name of Task.","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"TJW0911"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"TJW0911"},"content":"     * Overrides the string to the format of a to-do task","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"TJW0911"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"TJW0911"},"content":"     * @return a string representing the details of the task","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"TJW0911"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"TJW0911"},"content":"    public String toString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"TJW0911"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"TJW0911"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"TJW0911":24}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TJW0911"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"TJW0911"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"TJW0911"},"content":" * Class that deals with interactions with the user","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"TJW0911"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"TJW0911"},"content":"public class Ui {","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"TJW0911"},"content":"    private static Scanner scanner;","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"TJW0911"},"content":"     * Constructor for Ui","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"TJW0911"},"content":"    public Ui() {","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"TJW0911"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"TJW0911"},"content":"     * Reads in the next line of user input","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"TJW0911"},"content":"     * @return the line of user input","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"TJW0911"},"content":"    public static String requestUserInput() {","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"TJW0911"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"TJW0911"},"content":"     * Prints greetings message on starting Duke","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"TJW0911"},"content":"    public static void showGreetingMessage() {","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"TJW0911"},"content":"        System.out.println(\"How might I help you today?\");","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"TJW0911"},"content":"     * Prints error message if there is an error loading","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"TJW0911"},"content":"     * tasks from the save file","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"TJW0911"},"content":"    public static void showLoadErrorMessage() {","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"TJW0911"},"content":"        System.out.println(\"Error loading file from memory\");","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"TJW0911"},"content":"     * prints welcome back message if user has prior tasks saved","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"TJW0911"},"content":"    public static void showWelcomeBackMessage() {","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"TJW0911"},"content":"        System.out.println(\"Welcome back!\");","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"TJW0911"},"content":"        System.out.println(\"Here are the tasks from last time:\");","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"TJW0911"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"TJW0911"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":47,"author":{"gitId":"TJW0911"},"content":"     * prints farewell message after typing \"bye\" to Duke","lastModifiedDate":"2023-02-21"},{"lineNumber":48,"author":{"gitId":"TJW0911"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":49,"author":{"gitId":"TJW0911"},"content":"    public static void showFarewellMessage() {","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"TJW0911"},"content":"        System.out.println(\"Bye hope to see you again soon\");","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"TJW0911"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"TJW0911"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"TJW0911":52}}]
