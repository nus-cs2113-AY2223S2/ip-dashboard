[{"path":"data/tasklist.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"D|1|do something |2019-10-04|","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"T|0|i have forgotten|","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"D|0|the things forgot |2019-02-13|","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"superkaiba":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"# Duke - A chatbot to keep track of tasks","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"## Description","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"Duke is a command line chatbot which keeps track of your todos, events, and deadlines","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"## Accepted commands","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"### `list`","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"Lists current tasks","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"### `mark [TASK NUMBER]`","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"Marks task at index [TASK NUMBER] as done","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"### `unmark [TASK NUMBER]`","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"Marks task at index [TASK NUMBER] as not done","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"### `todo [DESCRIPTION]`","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"Adds a todo to the task list with the description [DESCRIPTION]","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"superkaiba"},"content":"### `deadline [DESCRIPTION] /by [DUE DATE]`","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"superkaiba"},"content":"Adds a deadline to the task list with the description [DESCRIPTION] and the due date [DUE DATE]","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"superkaiba"},"content":"### `event [DESCRIPTION] /from [START DATE] /to [END DATE]`","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"superkaiba"},"content":"Adds an event to the task list with the description [DESCRIPTION], start date [START DATE] and end date [END DATE]","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"superkaiba"},"content":"### `delete [TASK NUMBER]`","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"superkaiba"},"content":"Deletes task at index [TASK NUMBER]","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"superkaiba"},"content":"### `find [STRING]`","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"superkaiba"},"content":"Prints list of tasks which contain the substring [STRING]","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"superkaiba":20,"-":9}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":" * Enum representing all different accepted commands","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"public enum Command {","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"    DEADLINE,","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"    TODO,","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"    EVENT,","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"    DELETE,","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"    LIST,","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"    MARK,","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"    UNMARK,","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"superkaiba"},"content":"    FIND,","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"    BYE","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"superkaiba":16}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"import duke.addable.*;","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"import duke.exception.*;","lastModifiedDate":"2023-02-09"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"    private static TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"    private static Ui ui \u003d new Ui();","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"    private static Storage storage \u003d new Storage(ui);","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"        taskList.setTasks(storage.getTasks());","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"        ui.printIntro();","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"superkaiba"},"content":"        list();","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"superkaiba"},"content":"        mainLoop();","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"superkaiba"},"content":"        ui.printExit();","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"superkaiba"},"content":"     * Main loop for program, gets input, parses input, and executes user\u0027s commands","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"superkaiba"},"content":"    public static void mainLoop() {","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"superkaiba"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"superkaiba"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"superkaiba"},"content":"        String currentInput \u003d in.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"superkaiba"},"content":"        Command command \u003d null;","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"superkaiba"},"content":"        String[] parameters \u003d null;","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"superkaiba"},"content":"        while (command !\u003d Command.BYE) {","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"superkaiba"},"content":"            try {","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"superkaiba"},"content":"                parameters \u003d parser.getParameters(currentInput);","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"superkaiba"},"content":"                command \u003d parser.getCommand(currentInput);","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"superkaiba"},"content":"                switch (command) {","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"superkaiba"},"content":"                case TODO:","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"superkaiba"},"content":"                case DEADLINE:","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"superkaiba"},"content":"                case EVENT:","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"superkaiba"},"content":"                    handleAddTask(currentInput, command);","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"superkaiba"},"content":"                    break;","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"superkaiba"},"content":"                case DELETE:","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"superkaiba"},"content":"                    delete(parameters);","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"superkaiba"},"content":"                    break;","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"superkaiba"},"content":"                case LIST:","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"superkaiba"},"content":"                    list();","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"superkaiba"},"content":"                    break;","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"superkaiba"},"content":"                case MARK:","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"superkaiba"},"content":"                    mark(parameters);","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"superkaiba"},"content":"                    break;","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"superkaiba"},"content":"                case UNMARK:","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"superkaiba"},"content":"                    unmark(parameters);","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"superkaiba"},"content":"                    break;","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"superkaiba"},"content":"                case FIND:","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"superkaiba"},"content":"                    find(parameters);","lastModifiedDate":"2023-03-02"},{"lineNumber":56,"author":{"gitId":"superkaiba"},"content":"                    break;","lastModifiedDate":"2023-03-02"},{"lineNumber":57,"author":{"gitId":"superkaiba"},"content":"                case BYE:","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"superkaiba"},"content":"                    return;","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"superkaiba"},"content":"                default:","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"superkaiba"},"content":"                    throw new UnknownCommandException(\"Blank\");","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"superkaiba"},"content":"                }","lastModifiedDate":"2023-02-08"},{"lineNumber":62,"author":{"gitId":"superkaiba"},"content":"                storage.saveCurrentTaskList();","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"superkaiba"},"content":"            } catch (MarkNonexistentTaskException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":64,"author":{"gitId":"superkaiba"},"content":"                ui.printInvalidInputMessage(\"task \" + e.taskIndex + \" does not currently exist.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"superkaiba"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":66,"author":{"gitId":"superkaiba"},"content":"                ui.printInvalidInputMessage(\"Unknown command\");","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"superkaiba"},"content":"            } catch (UnknownCommandException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"superkaiba"},"content":"                ui.printInvalidInputMessage(\"Unknown command \\\u0027\" + e.unknownCommand + \"\\\u0027\");","lastModifiedDate":"2023-03-02"},{"lineNumber":69,"author":{"gitId":"superkaiba"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"superkaiba"},"content":"                ui.printInvalidInputMessage(\"Argument for mark/unmark/delete must be an integer\");","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"superkaiba"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-03-02"},{"lineNumber":72,"author":{"gitId":"superkaiba"},"content":"                ui.printInvalidInputMessage(\"Invalid format for date and/or time\");","lastModifiedDate":"2023-03-02"},{"lineNumber":73,"author":{"gitId":"superkaiba"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"superkaiba"},"content":"            currentInput \u003d in.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"superkaiba"},"content":"    // COMMAND HANDLERS","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":80,"author":{"gitId":"superkaiba"},"content":"     * Handles \"find\" command: finds and prints all tasks in list that contain a certain substring","lastModifiedDate":"2023-03-02"},{"lineNumber":81,"author":{"gitId":"superkaiba"},"content":"     * @param parameters Parameters passed by user","lastModifiedDate":"2023-03-02"},{"lineNumber":82,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"superkaiba"},"content":"    public static void find(String[] parameters) {","lastModifiedDate":"2023-03-02"},{"lineNumber":85,"author":{"gitId":"superkaiba"},"content":"        String toFind \u003d String.join(\" \", parameters);","lastModifiedDate":"2023-03-02"},{"lineNumber":86,"author":{"gitId":"superkaiba"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-02"},{"lineNumber":87,"author":{"gitId":"superkaiba"},"content":"        for (Task task : taskList.getTasks()) {","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"superkaiba"},"content":"            if (task.getDescription().contains(toFind)) {","lastModifiedDate":"2023-03-02"},{"lineNumber":89,"author":{"gitId":"superkaiba"},"content":"                foundTasks.add(task);","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"superkaiba"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":92,"author":{"gitId":"superkaiba"},"content":"        if (foundTasks.isEmpty()) {","lastModifiedDate":"2023-03-02"},{"lineNumber":93,"author":{"gitId":"superkaiba"},"content":"            ui.printMessage(\"No matching tasks found\");","lastModifiedDate":"2023-03-02"},{"lineNumber":94,"author":{"gitId":"superkaiba"},"content":"        } else {","lastModifiedDate":"2023-03-02"},{"lineNumber":95,"author":{"gitId":"superkaiba"},"content":"            ui.printMessage(ui.getFormattedList(\"Here are the matching tasks in your list:\", foundTasks));","lastModifiedDate":"2023-03-02"},{"lineNumber":96,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":97,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":98,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":99,"author":{"gitId":"superkaiba"},"content":"     * Handles \"delete\" command: deletes task at a certain index in list","lastModifiedDate":"2023-03-02"},{"lineNumber":100,"author":{"gitId":"superkaiba"},"content":"     * @param parameters Parameters passed by user","lastModifiedDate":"2023-03-02"},{"lineNumber":101,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":102,"author":{"gitId":"superkaiba"},"content":"     * @throws MarkNonexistentTaskException If user tries to delete a task at an index which is out of range of the list","lastModifiedDate":"2023-03-02"},{"lineNumber":103,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":104,"author":{"gitId":"superkaiba"},"content":"    public static void delete(String[] parameters) throws MarkNonexistentTaskException {","lastModifiedDate":"2023-03-02"},{"lineNumber":105,"author":{"gitId":"superkaiba"},"content":"        int taskIndex \u003d getTaskIndex(parameters[0]);","lastModifiedDate":"2023-03-02"},{"lineNumber":106,"author":{"gitId":"superkaiba"},"content":"        String[] taskDeletedMessage \u003d {","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"superkaiba"},"content":"                \"Noted. I\u0027ve removed this task:\",","lastModifiedDate":"2023-02-11"},{"lineNumber":108,"author":{"gitId":"superkaiba"},"content":"                taskList.get(taskIndex).toString(),","lastModifiedDate":"2023-03-02"},{"lineNumber":109,"author":{"gitId":"superkaiba"},"content":"                \"Now you have \" + (taskList.getLength() - 1) + \" tasks in the list.\"","lastModifiedDate":"2023-03-02"},{"lineNumber":110,"author":{"gitId":"superkaiba"},"content":"        };","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"superkaiba"},"content":"        taskList.remove(taskIndex);","lastModifiedDate":"2023-03-02"},{"lineNumber":112,"author":{"gitId":"superkaiba"},"content":"        ui.printMessage(taskDeletedMessage);","lastModifiedDate":"2023-03-02"},{"lineNumber":113,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":115,"author":{"gitId":"superkaiba"},"content":"     * Handles \"list\" command: lists all tasks in list in desired format","lastModifiedDate":"2023-03-02"},{"lineNumber":116,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":117,"author":{"gitId":"superkaiba"},"content":"    public static void list() {","lastModifiedDate":"2023-01-22"},{"lineNumber":118,"author":{"gitId":"superkaiba"},"content":"        ui.printMessage(ui.getFormattedList(\"Here are the tasks in your list:\", taskList.getTasks()));","lastModifiedDate":"2023-03-02"},{"lineNumber":119,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":120,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":121,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":122,"author":{"gitId":"superkaiba"},"content":"     * Gets index as integer from index as string and checks if index is in range","lastModifiedDate":"2023-03-02"},{"lineNumber":123,"author":{"gitId":"superkaiba"},"content":"     * @param index String of index to parse","lastModifiedDate":"2023-03-02"},{"lineNumber":124,"author":{"gitId":"superkaiba"},"content":"     * @return index as integer","lastModifiedDate":"2023-03-02"},{"lineNumber":125,"author":{"gitId":"superkaiba"},"content":"     * @throws MarkNonexistentTaskException If user tries to access a task at an index which is out of range of the list","lastModifiedDate":"2023-03-02"},{"lineNumber":126,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":127,"author":{"gitId":"superkaiba"},"content":"    public static int getTaskIndex(String index) throws MarkNonexistentTaskException {","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"superkaiba"},"content":"        int taskIndex \u003d Integer.parseInt(index) - 1;","lastModifiedDate":"2023-02-11"},{"lineNumber":129,"author":{"gitId":"superkaiba"},"content":"        if (taskIndex \u003e taskList.getLength() - 1 || taskIndex \u003c 0) {","lastModifiedDate":"2023-03-02"},{"lineNumber":130,"author":{"gitId":"superkaiba"},"content":"            throw new MarkNonexistentTaskException(taskIndex + 1);","lastModifiedDate":"2023-02-08"},{"lineNumber":131,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":132,"author":{"gitId":"superkaiba"},"content":"        return taskIndex;","lastModifiedDate":"2023-02-11"},{"lineNumber":133,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":134,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":135,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":136,"author":{"gitId":"superkaiba"},"content":"     * Handles \"mark\" command: marks task at a certain index in list as done and prints message accordingly","lastModifiedDate":"2023-03-02"},{"lineNumber":137,"author":{"gitId":"superkaiba"},"content":"     * @param parameters Parameters passed by user","lastModifiedDate":"2023-03-02"},{"lineNumber":138,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":139,"author":{"gitId":"superkaiba"},"content":"     * @throws MarkNonexistentTaskException If user tries to mark a task at an index which is out of range of the list","lastModifiedDate":"2023-03-02"},{"lineNumber":140,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":141,"author":{"gitId":"superkaiba"},"content":"    public static void mark(String[] parameters) throws MarkNonexistentTaskException {","lastModifiedDate":"2023-03-02"},{"lineNumber":142,"author":{"gitId":"superkaiba"},"content":"        int taskIndex \u003d getTaskIndex(parameters[0]);","lastModifiedDate":"2023-03-02"},{"lineNumber":143,"author":{"gitId":"superkaiba"},"content":"        taskList.get(taskIndex).setDone(true);","lastModifiedDate":"2023-03-02"},{"lineNumber":144,"author":{"gitId":"superkaiba"},"content":"        String[] message \u003d {","lastModifiedDate":"2023-01-22"},{"lineNumber":145,"author":{"gitId":"superkaiba"},"content":"                \"Cool! I\u0027ve marked this task as done:\",","lastModifiedDate":"2023-01-22"},{"lineNumber":146,"author":{"gitId":"superkaiba"},"content":"                taskList.get(taskIndex).toString()","lastModifiedDate":"2023-03-02"},{"lineNumber":147,"author":{"gitId":"superkaiba"},"content":"        };","lastModifiedDate":"2023-01-22"},{"lineNumber":148,"author":{"gitId":"superkaiba"},"content":"        ui.printMessage(message);","lastModifiedDate":"2023-03-02"},{"lineNumber":149,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":150,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":151,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":152,"author":{"gitId":"superkaiba"},"content":"     * Handles \"unmark\" command: unmarks task at a certain index in list as done and prints message accordingly","lastModifiedDate":"2023-03-02"},{"lineNumber":153,"author":{"gitId":"superkaiba"},"content":"     * @param parameters Parameters passed by user","lastModifiedDate":"2023-03-02"},{"lineNumber":154,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":155,"author":{"gitId":"superkaiba"},"content":"     * @throws MarkNonexistentTaskException If user tries to unmark a task at an index which is out of range of the list","lastModifiedDate":"2023-03-02"},{"lineNumber":156,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":157,"author":{"gitId":"superkaiba"},"content":"    public static void unmark(String[] parameters) throws MarkNonexistentTaskException {","lastModifiedDate":"2023-03-02"},{"lineNumber":158,"author":{"gitId":"superkaiba"},"content":"        int taskIndex \u003d getTaskIndex(parameters[0]);","lastModifiedDate":"2023-03-02"},{"lineNumber":159,"author":{"gitId":"superkaiba"},"content":"        taskList.get(taskIndex).setDone(false);","lastModifiedDate":"2023-03-02"},{"lineNumber":160,"author":{"gitId":"superkaiba"},"content":"        String[] message \u003d {","lastModifiedDate":"2023-01-22"},{"lineNumber":161,"author":{"gitId":"superkaiba"},"content":"                \"Ok, I\u0027ve marked this task as not done yet:\",","lastModifiedDate":"2023-01-22"},{"lineNumber":162,"author":{"gitId":"superkaiba"},"content":"                taskList.get(taskIndex).toString()","lastModifiedDate":"2023-03-02"},{"lineNumber":163,"author":{"gitId":"superkaiba"},"content":"        };","lastModifiedDate":"2023-01-30"},{"lineNumber":164,"author":{"gitId":"superkaiba"},"content":"        ui.printMessage(message);","lastModifiedDate":"2023-03-02"},{"lineNumber":165,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":166,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":167,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":168,"author":{"gitId":"superkaiba"},"content":"     * Handles \"todo\", \"deadline\", and \"event\" command: adds task to list and prints message accordingly","lastModifiedDate":"2023-03-02"},{"lineNumber":169,"author":{"gitId":"superkaiba"},"content":"     * @param input Words input by user","lastModifiedDate":"2023-03-02"},{"lineNumber":170,"author":{"gitId":"superkaiba"},"content":"     * @param command enum indicating which command was input by user","lastModifiedDate":"2023-03-02"},{"lineNumber":171,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":172,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":173,"author":{"gitId":"superkaiba"},"content":"    public static void handleAddTask(String input, Command command) {","lastModifiedDate":"2023-03-02"},{"lineNumber":174,"author":{"gitId":"superkaiba"},"content":"        Task addedTask \u003d null;","lastModifiedDate":"2023-02-08"},{"lineNumber":175,"author":{"gitId":"superkaiba"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":176,"author":{"gitId":"superkaiba"},"content":"            addedTask \u003d addTask(input, command);","lastModifiedDate":"2023-03-02"},{"lineNumber":177,"author":{"gitId":"superkaiba"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":178,"author":{"gitId":"superkaiba"},"content":"            ui.printInvalidInputMessage();","lastModifiedDate":"2023-03-02"},{"lineNumber":179,"author":{"gitId":"superkaiba"},"content":"        } catch (ArgumentBlankException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":180,"author":{"gitId":"superkaiba"},"content":"            ui.printInvalidInputMessage(","lastModifiedDate":"2023-03-02"},{"lineNumber":181,"author":{"gitId":"superkaiba"},"content":"                    \"Argument \\\u0027\" + e.argumentType + \"\\\u0027 cannot be blank for command \\\u0027\" +","lastModifiedDate":"2023-02-09"},{"lineNumber":182,"author":{"gitId":"superkaiba"},"content":"                            e.commandType + \"\\\u0027\"","lastModifiedDate":"2023-02-09"},{"lineNumber":183,"author":{"gitId":"superkaiba"},"content":"                    );","lastModifiedDate":"2023-02-09"},{"lineNumber":184,"author":{"gitId":"superkaiba"},"content":"        } catch (UnknownCommandException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":185,"author":{"gitId":"superkaiba"},"content":"            ui.printInvalidInputMessage(\"Unknown command \\\u0027\" + e.unknownCommand + \"\\\u0027\");","lastModifiedDate":"2023-03-02"},{"lineNumber":186,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":187,"author":{"gitId":"superkaiba"},"content":"        if (addedTask \u003d\u003d null) {","lastModifiedDate":"2023-01-30"},{"lineNumber":188,"author":{"gitId":"superkaiba"},"content":"            return;","lastModifiedDate":"2023-01-30"},{"lineNumber":189,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":190,"author":{"gitId":"superkaiba"},"content":"        ui.printAddTaskMessage(addedTask, taskList.getLength());","lastModifiedDate":"2023-03-02"},{"lineNumber":191,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":192,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":193,"author":{"gitId":"superkaiba"},"content":"     * Creates and returns task to add based on user input","lastModifiedDate":"2023-03-02"},{"lineNumber":194,"author":{"gitId":"superkaiba"},"content":"     * @param input Words input by user","lastModifiedDate":"2023-03-02"},{"lineNumber":195,"author":{"gitId":"superkaiba"},"content":"     * @param command enum indicating which command was input by user","lastModifiedDate":"2023-03-02"},{"lineNumber":196,"author":{"gitId":"superkaiba"},"content":"     * @return Task to add","lastModifiedDate":"2023-03-02"},{"lineNumber":197,"author":{"gitId":"superkaiba"},"content":"     * @throws ArgumentBlankException If one of the required arguments for a command is not provided","lastModifiedDate":"2023-03-02"},{"lineNumber":198,"author":{"gitId":"superkaiba"},"content":"     * @throws UnknownCommandException If the command provided is not one of the accepted commands","lastModifiedDate":"2023-03-02"},{"lineNumber":199,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":200,"author":{"gitId":"superkaiba"},"content":"    public static Task addTask(String input, Command command) throws ArgumentBlankException, UnknownCommandException {","lastModifiedDate":"2023-03-02"},{"lineNumber":201,"author":{"gitId":"superkaiba"},"content":"        String[] inputSections \u003d input.split(\"/\");","lastModifiedDate":"2023-01-30"},{"lineNumber":202,"author":{"gitId":"superkaiba"},"content":"        String[] firstSectionArguments \u003d inputSections[0].split(\" \", 2);","lastModifiedDate":"2023-02-08"},{"lineNumber":203,"author":{"gitId":"superkaiba"},"content":"        if (firstSectionArguments.length \u003c 2) {","lastModifiedDate":"2023-02-08"},{"lineNumber":204,"author":{"gitId":"superkaiba"},"content":"            throw new ArgumentBlankException(command.toString(), \"description\");","lastModifiedDate":"2023-03-02"},{"lineNumber":205,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":206,"author":{"gitId":"superkaiba"},"content":"        String taskDescription \u003d firstSectionArguments[1];","lastModifiedDate":"2023-02-08"},{"lineNumber":207,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":208,"author":{"gitId":"superkaiba"},"content":"        Task taskToAdd;","lastModifiedDate":"2023-01-30"},{"lineNumber":209,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":210,"author":{"gitId":"superkaiba"},"content":"        switch (command) {","lastModifiedDate":"2023-03-02"},{"lineNumber":211,"author":{"gitId":"superkaiba"},"content":"        case DEADLINE:","lastModifiedDate":"2023-03-02"},{"lineNumber":212,"author":{"gitId":"superkaiba"},"content":"            taskToAdd \u003d getNewDeadline(taskDescription, inputSections);","lastModifiedDate":"2023-01-30"},{"lineNumber":213,"author":{"gitId":"superkaiba"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":214,"author":{"gitId":"superkaiba"},"content":"        case EVENT:","lastModifiedDate":"2023-03-02"},{"lineNumber":215,"author":{"gitId":"superkaiba"},"content":"            taskToAdd \u003d getNewEvent(taskDescription, inputSections);","lastModifiedDate":"2023-01-30"},{"lineNumber":216,"author":{"gitId":"superkaiba"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":217,"author":{"gitId":"superkaiba"},"content":"        case TODO:","lastModifiedDate":"2023-03-02"},{"lineNumber":218,"author":{"gitId":"superkaiba"},"content":"            taskToAdd \u003d getNewTodo(taskDescription);","lastModifiedDate":"2023-01-30"},{"lineNumber":219,"author":{"gitId":"superkaiba"},"content":"            break;","lastModifiedDate":"2023-01-30"},{"lineNumber":220,"author":{"gitId":"superkaiba"},"content":"        default:","lastModifiedDate":"2023-01-30"},{"lineNumber":221,"author":{"gitId":"superkaiba"},"content":"            throw new UnknownCommandException(command.toString());","lastModifiedDate":"2023-03-02"},{"lineNumber":222,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":223,"author":{"gitId":"superkaiba"},"content":"        taskList.add(taskToAdd);","lastModifiedDate":"2023-03-02"},{"lineNumber":224,"author":{"gitId":"superkaiba"},"content":"        return taskToAdd;","lastModifiedDate":"2023-01-30"},{"lineNumber":225,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":226,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":227,"author":{"gitId":"superkaiba"},"content":"     * Creates and returns new Deadline task","lastModifiedDate":"2023-03-02"},{"lineNumber":228,"author":{"gitId":"superkaiba"},"content":"     * @param taskDescription Description of deadline","lastModifiedDate":"2023-03-02"},{"lineNumber":229,"author":{"gitId":"superkaiba"},"content":"     * @param inputSections Sections of user\u0027s input","lastModifiedDate":"2023-03-02"},{"lineNumber":230,"author":{"gitId":"superkaiba"},"content":"     * @return new Deadline task","lastModifiedDate":"2023-03-02"},{"lineNumber":231,"author":{"gitId":"superkaiba"},"content":"     * @throws ArgumentBlankException If one of the required arguments for a deadline is not provided (e.g. due date)","lastModifiedDate":"2023-03-02"},{"lineNumber":232,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":233,"author":{"gitId":"superkaiba"},"content":"    public static Deadline getNewDeadline(String taskDescription, String[] inputSections) throws ArgumentBlankException {","lastModifiedDate":"2023-02-08"},{"lineNumber":234,"author":{"gitId":"superkaiba"},"content":"        String date \u003d inputSections[1].replaceFirst(\"by\", \"\");","lastModifiedDate":"2023-02-08"},{"lineNumber":235,"author":{"gitId":"superkaiba"},"content":"        return new Deadline(","lastModifiedDate":"2023-01-30"},{"lineNumber":236,"author":{"gitId":"superkaiba"},"content":"                taskDescription,","lastModifiedDate":"2023-01-30"},{"lineNumber":237,"author":{"gitId":"superkaiba"},"content":"                date,","lastModifiedDate":"2023-02-12"},{"lineNumber":238,"author":{"gitId":"superkaiba"},"content":"                false","lastModifiedDate":"2023-02-12"},{"lineNumber":239,"author":{"gitId":"superkaiba"},"content":"        );","lastModifiedDate":"2023-01-30"},{"lineNumber":240,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":241,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":242,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":243,"author":{"gitId":"superkaiba"},"content":"     * Creates and returns new Event task","lastModifiedDate":"2023-03-02"},{"lineNumber":244,"author":{"gitId":"superkaiba"},"content":"     * @param taskDescription Description of event","lastModifiedDate":"2023-03-02"},{"lineNumber":245,"author":{"gitId":"superkaiba"},"content":"     * @param inputSections Sections of user\u0027s input","lastModifiedDate":"2023-03-02"},{"lineNumber":246,"author":{"gitId":"superkaiba"},"content":"     * @return new Event task","lastModifiedDate":"2023-03-02"},{"lineNumber":247,"author":{"gitId":"superkaiba"},"content":"     * @throws ArgumentBlankException If one of the required arguments for an event is not provided (e.g. start time)","lastModifiedDate":"2023-03-02"},{"lineNumber":248,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":249,"author":{"gitId":"superkaiba"},"content":"    public static Event getNewEvent(String taskDescription, String[] inputSections) throws ArgumentBlankException {","lastModifiedDate":"2023-02-08"},{"lineNumber":250,"author":{"gitId":"superkaiba"},"content":"        return new Event(","lastModifiedDate":"2023-01-30"},{"lineNumber":251,"author":{"gitId":"superkaiba"},"content":"                taskDescription,","lastModifiedDate":"2023-01-30"},{"lineNumber":252,"author":{"gitId":"superkaiba"},"content":"                inputSections[1].replaceFirst(\"from\", \"\"),","lastModifiedDate":"2023-01-30"},{"lineNumber":253,"author":{"gitId":"superkaiba"},"content":"                inputSections[2].replaceFirst(\"to\", \"\"),","lastModifiedDate":"2023-02-12"},{"lineNumber":254,"author":{"gitId":"superkaiba"},"content":"                false","lastModifiedDate":"2023-02-12"},{"lineNumber":255,"author":{"gitId":"superkaiba"},"content":"        );","lastModifiedDate":"2023-01-30"},{"lineNumber":256,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":257,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":258,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":259,"author":{"gitId":"superkaiba"},"content":"     * Creates and returns new Todo task","lastModifiedDate":"2023-03-02"},{"lineNumber":260,"author":{"gitId":"superkaiba"},"content":"     * @param taskDescription Description of deadline","lastModifiedDate":"2023-03-02"},{"lineNumber":261,"author":{"gitId":"superkaiba"},"content":"     * @return new Todo","lastModifiedDate":"2023-03-02"},{"lineNumber":262,"author":{"gitId":"superkaiba"},"content":"     * @throws ArgumentBlankException If one of the required arguments for a todo is not provided (e.g. description)","lastModifiedDate":"2023-03-02"},{"lineNumber":263,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":264,"author":{"gitId":"superkaiba"},"content":"    public static ToDo getNewTodo(String taskDescription) throws ArgumentBlankException {","lastModifiedDate":"2023-02-08"},{"lineNumber":265,"author":{"gitId":"superkaiba"},"content":"        return new ToDo(taskDescription, false);","lastModifiedDate":"2023-02-12"},{"lineNumber":266,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"superkaiba":264,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"import duke.addable.Deadline;","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"import duke.exception.UnknownCommandException;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":" * Class to parse user input and return parsed input","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"public class Parser {","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"    Scanner in;","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"    public Parser() {","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"superkaiba"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"superkaiba"},"content":"     * Returns command being run based on words input by user","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"superkaiba"},"content":"     *","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"superkaiba"},"content":"     * @param input Words input by user","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"superkaiba"},"content":"     * @return enum representing command that user is trying to run","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"superkaiba"},"content":"     * @throws UnknownCommandException if user inputs an unknown command","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"superkaiba"},"content":"    public Command getCommand(String input) throws UnknownCommandException {","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"superkaiba"},"content":"        String firstWord \u003d input.split(\" \")[0];","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"superkaiba"},"content":"        switch (firstWord) {","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"superkaiba"},"content":"        case \"deadline\":","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"superkaiba"},"content":"            return Command.DEADLINE;","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"superkaiba"},"content":"        case \"todo\":","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"superkaiba"},"content":"            return Command.TODO;","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"superkaiba"},"content":"        case \"event\":","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"superkaiba"},"content":"            return Command.EVENT;","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"superkaiba"},"content":"        case \"delete\":","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"superkaiba"},"content":"            return Command.DELETE;","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"superkaiba"},"content":"        case \"list\":","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"superkaiba"},"content":"            return Command.LIST;","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"superkaiba"},"content":"        case \"mark\":","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"superkaiba"},"content":"            return Command.MARK;","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"superkaiba"},"content":"        case \"unmark\":","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"superkaiba"},"content":"            return Command.UNMARK;","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"superkaiba"},"content":"        case \"find\":","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"superkaiba"},"content":"            return Command.FIND;","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"superkaiba"},"content":"        case \"bye\":","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"superkaiba"},"content":"            return Command.BYE;","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"superkaiba"},"content":"        default:","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"superkaiba"},"content":"            throw new UnknownCommandException(firstWord);","lastModifiedDate":"2023-03-02"},{"lineNumber":47,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"superkaiba"},"content":"     * Returns parameters of command being run by user","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"superkaiba"},"content":"     *","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"superkaiba"},"content":"     * @param input Words input by user","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"superkaiba"},"content":"     * @return ArrayList of parameters given by user","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":56,"author":{"gitId":"superkaiba"},"content":"    public String[] getParameters(String input) {","lastModifiedDate":"2023-03-02"},{"lineNumber":57,"author":{"gitId":"superkaiba"},"content":"        String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"superkaiba"},"content":"        return Arrays.copyOfRange(words, 1, words.length);","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"superkaiba":60}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"import duke.addable.*;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"import duke.exception.ArgumentBlankException;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":"import duke.Ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"import java.io.File;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"superkaiba"},"content":" * Class to store and load task list in file on hard disk","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"public class Storage {","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"superkaiba"},"content":"    private static final String FILE_PATH \u003d \"./data/tasklist.txt\";","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"superkaiba"},"content":"    private static final String[] FILE_ERROR_MESSAGE \u003d {","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"superkaiba"},"content":"            \"Something went wrong when opening the saved tasks file\"","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"superkaiba"},"content":"    };","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"superkaiba"},"content":"    private FileWriter fw;","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"superkaiba"},"content":"    private Ui ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"superkaiba"},"content":"    private File f;","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"superkaiba"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"superkaiba"},"content":"    public Storage(Ui ui) {","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"superkaiba"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"superkaiba"},"content":"            this.ui \u003d ui;","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"superkaiba"},"content":"            f \u003d new File(FILE_PATH);","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"superkaiba"},"content":"            f.getParentFile().mkdirs();","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"superkaiba"},"content":"            f.createNewFile();","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"superkaiba"},"content":"            readCurrentTaskList();","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"superkaiba"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"superkaiba"},"content":"            System.out.println(\"Couldn\u0027t find required file \" + FILE_PATH);","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"superkaiba"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"superkaiba"},"content":"        return tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"superkaiba"},"content":"    public void setTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"superkaiba"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"superkaiba"},"content":"    private void addTaskFromLine(String line) {","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"superkaiba"},"content":"        String[] fields \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"superkaiba"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"superkaiba"},"content":"            switch (fields[0]) {","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"superkaiba"},"content":"            case \"T\":","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"superkaiba"},"content":"                tasks.add(new ToDo(","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"superkaiba"},"content":"                        fields[2],","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"superkaiba"},"content":"                        fields[1].equals(\"0\") ? false : true","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"superkaiba"},"content":"                ));","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"superkaiba"},"content":"                break;","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"superkaiba"},"content":"            case \"D\":","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"superkaiba"},"content":"                tasks.add(new Deadline(","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"superkaiba"},"content":"                        fields[2],","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"superkaiba"},"content":"                        fields[3],","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"superkaiba"},"content":"                        fields[1].equals(\"0\") ? false : true","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"superkaiba"},"content":"                ));","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"superkaiba"},"content":"                break;","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"superkaiba"},"content":"            case \"E\":","lastModifiedDate":"2023-02-12"},{"lineNumber":63,"author":{"gitId":"superkaiba"},"content":"                tasks.add(new Event(","lastModifiedDate":"2023-02-12"},{"lineNumber":64,"author":{"gitId":"superkaiba"},"content":"                        fields[2],","lastModifiedDate":"2023-02-12"},{"lineNumber":65,"author":{"gitId":"superkaiba"},"content":"                        fields[3],","lastModifiedDate":"2023-02-12"},{"lineNumber":66,"author":{"gitId":"superkaiba"},"content":"                        fields[4],","lastModifiedDate":"2023-02-12"},{"lineNumber":67,"author":{"gitId":"superkaiba"},"content":"                        fields[1].equals(\"0\") ? false : true","lastModifiedDate":"2023-02-12"},{"lineNumber":68,"author":{"gitId":"superkaiba"},"content":"                ));","lastModifiedDate":"2023-02-12"},{"lineNumber":69,"author":{"gitId":"superkaiba"},"content":"                break;","lastModifiedDate":"2023-02-12"},{"lineNumber":70,"author":{"gitId":"superkaiba"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":71,"author":{"gitId":"superkaiba"},"content":"        } catch (ArgumentBlankException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":72,"author":{"gitId":"superkaiba"},"content":"            ui.printMessage(FILE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-02"},{"lineNumber":73,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":74,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":75,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"superkaiba"},"content":"    private void readCurrentTaskList() {","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"superkaiba"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":79,"author":{"gitId":"superkaiba"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-02-12"},{"lineNumber":80,"author":{"gitId":"superkaiba"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2023-02-12"},{"lineNumber":81,"author":{"gitId":"superkaiba"},"content":"                addTaskFromLine(s.nextLine());","lastModifiedDate":"2023-02-12"},{"lineNumber":82,"author":{"gitId":"superkaiba"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":83,"author":{"gitId":"superkaiba"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":84,"author":{"gitId":"superkaiba"},"content":"            System.out.println(FILE_ERROR_MESSAGE);","lastModifiedDate":"2023-02-12"},{"lineNumber":85,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":86,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":87,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":89,"author":{"gitId":"superkaiba"},"content":"     * Saves current task list to file","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":92,"author":{"gitId":"superkaiba"},"content":"    public void saveCurrentTaskList() {","lastModifiedDate":"2023-02-12"},{"lineNumber":93,"author":{"gitId":"superkaiba"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":94,"author":{"gitId":"superkaiba"},"content":"            fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2023-02-12"},{"lineNumber":95,"author":{"gitId":"superkaiba"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-02-12"},{"lineNumber":96,"author":{"gitId":"superkaiba"},"content":"                String line \u003d getFormattedTaskLine(tasks.get(i));","lastModifiedDate":"2023-02-12"},{"lineNumber":97,"author":{"gitId":"superkaiba"},"content":"                fw.write(line + \"\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":98,"author":{"gitId":"superkaiba"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":99,"author":{"gitId":"superkaiba"},"content":"            fw.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":100,"author":{"gitId":"superkaiba"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":101,"author":{"gitId":"superkaiba"},"content":"            System.out.println(FILE_ERROR_MESSAGE);","lastModifiedDate":"2023-02-12"},{"lineNumber":102,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":103,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":104,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":105,"author":{"gitId":"superkaiba"},"content":"    private String getFormattedTaskLine(Task task) {","lastModifiedDate":"2023-03-02"},{"lineNumber":106,"author":{"gitId":"superkaiba"},"content":"        String line \u003d \"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":107,"author":{"gitId":"superkaiba"},"content":"        line +\u003d task.getLetter() + \"|\";","lastModifiedDate":"2023-02-12"},{"lineNumber":108,"author":{"gitId":"superkaiba"},"content":"        line +\u003d (task.isDone() ? \"1\" : \"0\") + \"|\";","lastModifiedDate":"2023-02-12"},{"lineNumber":109,"author":{"gitId":"superkaiba"},"content":"        line +\u003d task.getDescription() + \"|\";","lastModifiedDate":"2023-02-12"},{"lineNumber":110,"author":{"gitId":"superkaiba"},"content":"        for (int i \u003d 0; i \u003c task.getExtraArguments().length; i ++) {","lastModifiedDate":"2023-02-12"},{"lineNumber":111,"author":{"gitId":"superkaiba"},"content":"            line +\u003d task.getExtraArguments()[i] + \"|\";","lastModifiedDate":"2023-02-12"},{"lineNumber":112,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":113,"author":{"gitId":"superkaiba"},"content":"        return line;","lastModifiedDate":"2023-02-12"},{"lineNumber":114,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":115,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"superkaiba":115}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"import duke.addable.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":" * Class to store a list of tasks","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"public class TaskList {","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"    public TaskList() {","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"superkaiba"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"superkaiba"},"content":"    public int getLength() {","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"superkaiba"},"content":"        return tasks.size();","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"superkaiba"},"content":"    public void remove(int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"superkaiba"},"content":"        tasks.remove(index);","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"superkaiba"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"superkaiba"},"content":"        tasks.add(task);","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"superkaiba"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"superkaiba"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"superkaiba"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"superkaiba"},"content":"        return tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"superkaiba"},"content":"    public void setTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"superkaiba"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"superkaiba":37}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke;","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"import duke.addable.Task;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":"import duke.exception.UnknownCommandException;","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":" * Class to print output to user","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"public class Ui {","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"    public Ui() {","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"superkaiba"},"content":"        return;","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"    private static final String[] INVALID_INPUT_MESSAGE \u003d {","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"superkaiba"},"content":"            \"Invalid input format\",","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"superkaiba"},"content":"            \"Please see below for a list of valid commands\",","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"superkaiba"},"content":"            \"- list\",","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"superkaiba"},"content":"            \"- mark [TASK NUMBER]\",","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"superkaiba"},"content":"            \"- unmark [TASK NUMBER]\",","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"superkaiba"},"content":"            \"- todo [TASK DESCRIPTION]\",","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"superkaiba"},"content":"            \"- event [EVENT DESCRIPTION] /from [START DATE] /to [END DATE]\",","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"superkaiba"},"content":"            \"- deadline [DEADLINE DESCRIPTION] /by [DUE DATE]\",","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"superkaiba"},"content":"            \"- delete [TASK NUMBER]\",","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"superkaiba"},"content":"            \"- find [STRING]\"","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"superkaiba"},"content":"    };","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"superkaiba"},"content":"    private static final String INDENT \u003d \"      \";","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"superkaiba"},"content":"     * Prints message saying that input is invalid and giving a list of valid inputs","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"superkaiba"},"content":"    public static void printInvalidInputMessage() {","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"superkaiba"},"content":"        printMessage(INVALID_INPUT_MESSAGE);","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"superkaiba"},"content":"     * Prints message saying that input is invalid, why input is invalid, and giving a list of valid inputs","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"superkaiba"},"content":"     * @param extraClarification Explanation as to why input is invalid","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"superkaiba"},"content":"    public static void printInvalidInputMessage(String extraClarification) {","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"superkaiba"},"content":"        String[] message \u003d Arrays.copyOf(INVALID_INPUT_MESSAGE, INVALID_INPUT_MESSAGE.length);","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"superkaiba"},"content":"        message[0] \u003d extraClarification;","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"superkaiba"},"content":"        printMessage(message);","lastModifiedDate":"2023-03-02"},{"lineNumber":47,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"superkaiba"},"content":"    private static String getFormattedTask(Task task, int number) {","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"superkaiba"},"content":"        return number + \". \" + task.toString();","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"superkaiba"},"content":"     * Constructs formatted list of tasks with a heading","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"superkaiba"},"content":"     *","lastModifiedDate":"2023-03-02"},{"lineNumber":56,"author":{"gitId":"superkaiba"},"content":"     * @param heading Heading for list","lastModifiedDate":"2023-03-02"},{"lineNumber":57,"author":{"gitId":"superkaiba"},"content":"     * @param tasks List of tasks to format","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"superkaiba"},"content":"     * @return formatted list of tasks with heading","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"superkaiba"},"content":"    public static String[] getFormattedList(String heading, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"superkaiba"},"content":"        int numTasks \u003d tasks.size();","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"superkaiba"},"content":"        String[] formattedList \u003d new String[numTasks + 1];","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"superkaiba"},"content":"        formattedList[0] \u003d heading;","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"superkaiba"},"content":"        for (int i \u003d 0; i \u003c numTasks; i++) {","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"superkaiba"},"content":"            formattedList[i + 1] \u003d getFormattedTask(tasks.get(i), i + 1);","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"superkaiba"},"content":"        return formattedList;","lastModifiedDate":"2023-03-02"},{"lineNumber":68,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":69,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":70,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"superkaiba"},"content":"     * Prints the introductory statement for the program","lastModifiedDate":"2023-03-02"},{"lineNumber":72,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":73,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"superkaiba"},"content":"    public static void printIntro() {","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"superkaiba"},"content":"        String[] intro \u003d {\"Hello! I\u0027m Duke\", \"What can I do for you?\\n Loading tasks from hard disk...\"};","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"superkaiba"},"content":"        printMessage(intro);","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":79,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":80,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":81,"author":{"gitId":"superkaiba"},"content":"     * Prints the final statement for the program","lastModifiedDate":"2023-03-02"},{"lineNumber":82,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"superkaiba"},"content":"    public static void printExit() {","lastModifiedDate":"2023-03-02"},{"lineNumber":85,"author":{"gitId":"superkaiba"},"content":"        printMessage(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-03-02"},{"lineNumber":86,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":87,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"superkaiba"},"content":"     * Prints formatted message (indented and surrounded by lines above and below)","lastModifiedDate":"2023-03-02"},{"lineNumber":89,"author":{"gitId":"superkaiba"},"content":"     * @param message String to print","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":92,"author":{"gitId":"superkaiba"},"content":"    public static void printMessage(String message) {","lastModifiedDate":"2023-03-02"},{"lineNumber":93,"author":{"gitId":"superkaiba"},"content":"        printSeparator();","lastModifiedDate":"2023-03-02"},{"lineNumber":94,"author":{"gitId":"superkaiba"},"content":"        printIndent();","lastModifiedDate":"2023-03-02"},{"lineNumber":95,"author":{"gitId":"superkaiba"},"content":"        System.out.print(message + \"\\n\");","lastModifiedDate":"2023-03-02"},{"lineNumber":96,"author":{"gitId":"superkaiba"},"content":"        printSeparator();","lastModifiedDate":"2023-03-02"},{"lineNumber":97,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":98,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":99,"author":{"gitId":"superkaiba"},"content":"     * Prints formatted message (indented and surrounded by lines above and below) from ArrayList of strings","lastModifiedDate":"2023-03-02"},{"lineNumber":100,"author":{"gitId":"superkaiba"},"content":"     * @param message ArrayList of strings to print","lastModifiedDate":"2023-03-02"},{"lineNumber":101,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":102,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":103,"author":{"gitId":"superkaiba"},"content":"    public static void printMessage(String[] message) {","lastModifiedDate":"2023-03-02"},{"lineNumber":104,"author":{"gitId":"superkaiba"},"content":"        printSeparator();","lastModifiedDate":"2023-03-02"},{"lineNumber":105,"author":{"gitId":"superkaiba"},"content":"        for (String line : message) {","lastModifiedDate":"2023-03-02"},{"lineNumber":106,"author":{"gitId":"superkaiba"},"content":"            if (!line.equals(\"\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":107,"author":{"gitId":"superkaiba"},"content":"                printIndent();","lastModifiedDate":"2023-03-02"},{"lineNumber":108,"author":{"gitId":"superkaiba"},"content":"                System.out.print(line + \"\\n\");","lastModifiedDate":"2023-03-02"},{"lineNumber":109,"author":{"gitId":"superkaiba"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":110,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":111,"author":{"gitId":"superkaiba"},"content":"        printSeparator();","lastModifiedDate":"2023-03-02"},{"lineNumber":112,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":113,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":114,"author":{"gitId":"superkaiba"},"content":"    private static void printIndent() {","lastModifiedDate":"2023-03-02"},{"lineNumber":115,"author":{"gitId":"superkaiba"},"content":"        System.out.print(INDENT);","lastModifiedDate":"2023-03-02"},{"lineNumber":116,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":117,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":118,"author":{"gitId":"superkaiba"},"content":"    private static void printSeparator() {","lastModifiedDate":"2023-03-02"},{"lineNumber":119,"author":{"gitId":"superkaiba"},"content":"        System.out.print(\"   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\");","lastModifiedDate":"2023-03-02"},{"lineNumber":120,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":121,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":122,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":123,"author":{"gitId":"superkaiba"},"content":"     * Prints formatted message for when task is added","lastModifiedDate":"2023-03-02"},{"lineNumber":124,"author":{"gitId":"superkaiba"},"content":"     * @param addedTask Task that has been added","lastModifiedDate":"2023-03-02"},{"lineNumber":125,"author":{"gitId":"superkaiba"},"content":"     * @param numTasks Current number of tasks in task list","lastModifiedDate":"2023-03-02"},{"lineNumber":126,"author":{"gitId":"superkaiba"},"content":"     * @return nothing","lastModifiedDate":"2023-03-02"},{"lineNumber":127,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":128,"author":{"gitId":"superkaiba"},"content":"    public static void printAddTaskMessage(Task addedTask, int numTasks) {","lastModifiedDate":"2023-03-02"},{"lineNumber":129,"author":{"gitId":"superkaiba"},"content":"        printMessage(getAddTaskMessage(addedTask, numTasks));","lastModifiedDate":"2023-03-02"},{"lineNumber":130,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":131,"author":{"gitId":"superkaiba"},"content":"    private static String[] getAddTaskMessage(Task addedTask, int numTasks) {","lastModifiedDate":"2023-03-02"},{"lineNumber":132,"author":{"gitId":"superkaiba"},"content":"        String[] message \u003d {","lastModifiedDate":"2023-03-02"},{"lineNumber":133,"author":{"gitId":"superkaiba"},"content":"                \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-03-02"},{"lineNumber":134,"author":{"gitId":"superkaiba"},"content":"                INDENT + addedTask.toString(),","lastModifiedDate":"2023-03-02"},{"lineNumber":135,"author":{"gitId":"superkaiba"},"content":"                \"Now you have \" + numTasks + \" tasks in the list.\"","lastModifiedDate":"2023-03-02"},{"lineNumber":136,"author":{"gitId":"superkaiba"},"content":"        };","lastModifiedDate":"2023-03-02"},{"lineNumber":137,"author":{"gitId":"superkaiba"},"content":"        return message;","lastModifiedDate":"2023-03-02"},{"lineNumber":138,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":139,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"superkaiba":139}},{"path":"src/main/java/duke/addable/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke.addable;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"import duke.exception.ArgumentBlankException;","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"    protected LocalDate by;","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"    protected final String commandString \u003d \"deadline\";","lastModifiedDate":"2023-02-09"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"    public Deadline(String description, String by, boolean isDone) throws ArgumentBlankException {","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"        super(description, isDone);","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"superkaiba"},"content":"        this.by \u003d LocalDate.parse(by.strip());","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"superkaiba"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":18,"author":{"gitId":"superkaiba"},"content":"    public String getCommandString() {","lastModifiedDate":"2023-02-09"},{"lineNumber":19,"author":{"gitId":"superkaiba"},"content":"        return commandString;","lastModifiedDate":"2023-02-09"},{"lineNumber":20,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":21,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":22,"author":{"gitId":"superkaiba"},"content":"    public String[] getExtraArguments() {","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"superkaiba"},"content":"        String[] extraArguments \u003d {this.by.toString()};","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"superkaiba"},"content":"        return extraArguments;","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"superkaiba"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"superkaiba"},"content":"    public String getLetter() {","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"superkaiba"},"content":"        return \"D\";","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"superkaiba"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"superkaiba"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"superkaiba"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getDateString(by) + \")\";","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"superkaiba":35}},{"path":"src/main/java/duke/addable/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke.addable;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"import duke.exception.ArgumentBlankException;","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"    protected LocalDate startTime;","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"    protected LocalDate endTime;","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"    public LocalDate getStartTime() {","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"        return startTime;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"    public void setStartTime(LocalDate startTime) {","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"superkaiba"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"superkaiba"},"content":"    public LocalDate getEndTime() {","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"superkaiba"},"content":"        return endTime;","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"superkaiba"},"content":"    public void setEndTime(LocalDate endTime) {","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"superkaiba"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"superkaiba"},"content":"    protected final String commandString \u003d \"event\";","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"superkaiba"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"superkaiba"},"content":"    public String getCommandString() {","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"superkaiba"},"content":"        return commandString;","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"superkaiba"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"superkaiba"},"content":"    public String getLetter() {","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"superkaiba"},"content":"        return \"E\";","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"superkaiba"},"content":"    public Event(String description, String startTime, String endTime, boolean isDone) throws ArgumentBlankException {","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"superkaiba"},"content":"        super(description, isDone);","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"superkaiba"},"content":"        this.startTime \u003d LocalDate.parse(startTime.strip());","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"superkaiba"},"content":"        this.endTime \u003d LocalDate.parse(endTime.strip());","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"superkaiba"},"content":"    public String[] getExtraArguments() {","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"superkaiba"},"content":"        String[] extraArguments \u003d {this.startTime.toString(), this.endTime.toString()};","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"superkaiba"},"content":"        return extraArguments;","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"superkaiba"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"superkaiba"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"superkaiba"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + getDateString(startTime) + \" to: \" + getDateString(endTime) + \")\";","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"superkaiba":51}},{"path":"src/main/java/duke/addable/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke.addable;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"import duke.exception.ArgumentBlankException;","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"    private String description;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"    private static String dateTimePattern \u003d \"MMM dd yyyy\";","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"    protected final String commandString \u003d \"task\";","lastModifiedDate":"2023-02-09"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"        return isDone;","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"superkaiba"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"superkaiba"},"content":"    public Task(String description, boolean isDone) throws ArgumentBlankException {","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"superkaiba"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"superkaiba"},"content":"            throw new ArgumentBlankException(this.getCommandString(), \"description\");","lastModifiedDate":"2023-02-09"},{"lineNumber":23,"author":{"gitId":"superkaiba"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"superkaiba"},"content":"        this.setDescription(description);","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"superkaiba"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"superkaiba"},"content":"    public String getCommandString() {","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"superkaiba"},"content":"        return commandString;","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"superkaiba"},"content":"     * Returns a date in the common format (based on dateTimePattern)","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"superkaiba"},"content":"     * @param localDate Date to reformat","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"superkaiba"},"content":"     * @returns localDate reformatted into the common format","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"superkaiba"},"content":"    public String getDateString(LocalDate localDate) {","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"superkaiba"},"content":"        return localDate.format(DateTimeFormatter.ofPattern(dateTimePattern));","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"superkaiba"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"superkaiba"},"content":"     * Returns letter for this kind of task (for display)","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"superkaiba"},"content":"     * @returns letter corresponding to this task type","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"superkaiba"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"superkaiba"},"content":"    public String getLetter() {","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"superkaiba"},"content":"        return \"A\";","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"superkaiba"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"superkaiba"},"content":"        return description;","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"superkaiba"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"superkaiba"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":56,"author":{"gitId":"superkaiba"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"superkaiba"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"superkaiba"},"content":"    public abstract String[] getExtraArguments();","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"superkaiba"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"superkaiba"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"superkaiba"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"superkaiba":64}},{"path":"src/main/java/duke/addable/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke.addable;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"import duke.exception.ArgumentBlankException;","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"    protected final String commandString \u003d \"todo\";","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"    public ToDo(String description, boolean isDone) throws ArgumentBlankException {","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"        super(description, isDone);","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"    public String getCommandString() {","lastModifiedDate":"2023-02-09"},{"lineNumber":14,"author":{"gitId":"superkaiba"},"content":"        return commandString;","lastModifiedDate":"2023-02-09"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"superkaiba"},"content":"    public String getLetter() {","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"superkaiba"},"content":"        return \"T\";","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"superkaiba"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"superkaiba"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"superkaiba"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"superkaiba"},"content":"    public String[] getExtraArguments() {","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"superkaiba"},"content":"        String[] extraArguments \u003d {};","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"superkaiba"},"content":"        return extraArguments;","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"superkaiba":29}},{"path":"src/main/java/duke/exception/ArgumentBlankException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke.exception;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"import duke.Command;","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":" * Exception thrown when user inputs a command but leaves one or more required arguments blank","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"public class ArgumentBlankException extends Exception {","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"    public String argumentType;","lastModifiedDate":"2023-02-09"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"    public String commandType;","lastModifiedDate":"2023-02-09"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"    public ArgumentBlankException(String commandType, String argumentType) {","lastModifiedDate":"2023-02-09"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"        this.argumentType \u003d argumentType;","lastModifiedDate":"2023-02-09"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2023-02-09"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"superkaiba":13}},{"path":"src/main/java/duke/exception/MarkNonexistentTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke.exception;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":" * Exception thrown when user tries to access a task at an index which is out of range of the current list","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"public class MarkNonexistentTaskException extends Exception {","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"    public int taskIndex;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"    public MarkNonexistentTaskException(int taskIndex) {","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"superkaiba":12}},{"path":"src/main/java/duke/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"package duke.exception;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"/**","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":" * Exception thrown when user inputs a command which is not part of the accepted commands","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":" */","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"public class UnknownCommandException extends Exception {","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"    public String unknownCommand;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"    public UnknownCommandException(String unknownCommand) {","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"        this.unknownCommand \u003d unknownCommand;","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"}","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"superkaiba":12}},{"path":"text-ui-test/data/tasklist.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"T|0|borrow book|","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"D|0|return book | Sunday|","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"E|0|project meeting | Mon 2pm | 4pm|","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"superkaiba":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"superkaiba"},"content":"list","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"superkaiba"},"content":"fdjks","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"superkaiba"},"content":"mark 1","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"superkaiba"},"content":"todo","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"superkaiba"},"content":"deadline","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"superkaiba"},"content":"todo borrow book","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"superkaiba"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"superkaiba"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"superkaiba"},"content":"mark 3","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"superkaiba"},"content":"mark 1","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"superkaiba"},"content":"list","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"superkaiba"},"content":"unmark 1","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"superkaiba"},"content":"unmark 3","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"superkaiba"},"content":"list","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"superkaiba"},"content":"fdsjk","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"bye","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"superkaiba":16}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"superkaiba"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"superkaiba"},"content":"java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"superkaiba":2,"-":36}}]
