[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"___","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"██████╗░░█████╗░██████╗░    ","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"██╔══██╗██╔══██╗██╔══██╗    ","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"██████╦╝██║░░██║██████╦╝    ","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"██╔══██╗██║░░██║██╔══██╗    ","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"██████╦╝╚█████╔╝██████╦╝    ","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"╚═════╝░░╚════╝░╚═════╝░ ","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":"Bob is a _command-line interface_ based solution to scheduling your tasks","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":"___","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"## Table of Contents","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"- [User Guide](#user-guide)","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"    * [Features](#features)","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"        + [Adding a `task`](#adding-a-task)","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"          1. [ToDo](#1-todo)","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"          2. [Deadline](#2-deadline)","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":"          3. [Event](#3-event)","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":"        + [Listing all `tasks`](#listing-all-tasks)","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"        + [Marking/Un-marking a `task` as done](#marking-or-un-marking-a-task-as-done)","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"        + [Deleting a `task`](#deleting-a-task)","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"        + [Finding a `task` using its name](#finding-a-task-using-its-name)","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":"        + [Finding a `task` using its date](#finding-a-task-using-its-date)","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"        + [Clearing all entries](#clearing-all-entries)","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"        + [Exiting the application](#exiting-the-application)","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"        + [Saving the data](#saving-the-data)","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"        + [Editing the datafile](#editing-the-datafile)","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"    * [FAQ](#faq)","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"    * [Command Summary](#command-summary)","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"___","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"### Adding a `task`","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"_There are three types of **`tasks`** supported:_","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"### 1. ToDo ","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"Format: `todo TASK_NAME`","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"- Adds a `task` of type `todo` to the application database","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"- `todo` is **_not_** case-sensitive","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"- `TASK_NAME` could be a **_String_** of multiple words","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"Examples:   ","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"todo Complete CS2113 weekly quiz","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"tODo finish breakfast","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"Todo homework","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"### 2. Deadline","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"Format: `deadline TASK_NAME /by BY_DATE`","lastModifiedDate":"2023-02-28"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"- Adds a `task` of type `deadline` to the application database","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"- `deadline` is **_not_** case-sensitive","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"- `TASK_NAME` could be a **_String_** of multiple words","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"- `/by` is **_compulsory_** or else the input is treated as **_invalid_**","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"- `BY_DATE` could be written as any **_String_** of multiple words","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"  - Alternatively, `BY_DATE` can be formatted as `YYYY-MM-DD` to enable `LocalDate` ","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"    based functions such as `date`","lastModifiedDate":"2023-02-28"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"    - `YYYY` represents the year _(example : `2023` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"    - `MM` represents the month _(example : `02` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":64,"author":{"gitId":"lohjooh"},"content":"    - `DD` represents the day _(example : `20` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"lohjooh"},"content":"    - Example : `2023-02-20` represents **20 February 2023**","lastModifiedDate":"2023-02-28"},{"lineNumber":66,"author":{"gitId":"lohjooh"},"content":"  - `BY_DATE` can also be certain **_keywords_**:","lastModifiedDate":"2023-02-28"},{"lineNumber":67,"author":{"gitId":"lohjooh"},"content":"    - `tomorrow` which sets `BY_DATE` to the next day the day you used this ","lastModifiedDate":"2023-02-28"},{"lineNumber":68,"author":{"gitId":"lohjooh"},"content":"      command","lastModifiedDate":"2023-02-28"},{"lineNumber":69,"author":{"gitId":"lohjooh"},"content":"    - `next TIME` which adds `TIME` to the day you used this command\u0027s date","lastModifiedDate":"2023-02-28"},{"lineNumber":70,"author":{"gitId":"lohjooh"},"content":"    - `NUMBER TIME` which adds `NUMBER` of `TIME` to the day you used this ","lastModifiedDate":"2023-02-28"},{"lineNumber":71,"author":{"gitId":"lohjooh"},"content":"      command\u0027s date","lastModifiedDate":"2023-02-28"},{"lineNumber":72,"author":{"gitId":"lohjooh"},"content":"    - `TIME` includes:","lastModifiedDate":"2023-02-28"},{"lineNumber":73,"author":{"gitId":"lohjooh"},"content":"      - `day`","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"lohjooh"},"content":"      - `week`","lastModifiedDate":"2023-02-28"},{"lineNumber":75,"author":{"gitId":"lohjooh"},"content":"      - `month`","lastModifiedDate":"2023-02-28"},{"lineNumber":76,"author":{"gitId":"lohjooh"},"content":"      - `year`","lastModifiedDate":"2023-02-28"},{"lineNumber":77,"author":{"gitId":"lohjooh"},"content":"      - `decade`","lastModifiedDate":"2023-02-28"},{"lineNumber":78,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":79,"author":{"gitId":"lohjooh"},"content":"Examples:","lastModifiedDate":"2023-02-28"},{"lineNumber":80,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":81,"author":{"gitId":"lohjooh"},"content":"_Below examples show `BY_DATE` as a random **_String_**_","lastModifiedDate":"2023-02-28"},{"lineNumber":82,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":83,"author":{"gitId":"lohjooh"},"content":"Deadline homework /by asap","lastModifiedDate":"2023-02-28"},{"lineNumber":84,"author":{"gitId":"lohjooh"},"content":"DeaDLinE Buy grocceries /by asap","lastModifiedDate":"2023-02-28"},{"lineNumber":85,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":86,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":87,"author":{"gitId":"lohjooh"},"content":"_Below example show `BY_DATE` formatted as `YYYY-MM-DD`_","lastModifiedDate":"2023-02-28"},{"lineNumber":88,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":89,"author":{"gitId":"lohjooh"},"content":"deadline assignment /by 2024-02-14","lastModifiedDate":"2023-02-28"},{"lineNumber":90,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":91,"author":{"gitId":"lohjooh"},"content":"_Below example shows `BY_DATE` formatted as **_keyword_**_","lastModifiedDate":"2023-02-28"},{"lineNumber":92,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":93,"author":{"gitId":"lohjooh"},"content":"deadline paint room /by tomorrow","lastModifiedDate":"2023-02-28"},{"lineNumber":94,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":95,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":96,"author":{"gitId":"lohjooh"},"content":"### 3. Event","lastModifiedDate":"2023-02-28"},{"lineNumber":97,"author":{"gitId":"lohjooh"},"content":"Format: `event TASK_NAME /from FROM_DATE /to TO_DATE`","lastModifiedDate":"2023-02-28"},{"lineNumber":98,"author":{"gitId":"lohjooh"},"content":"- Adds a `task` of type `event` to the application database","lastModifiedDate":"2023-02-28"},{"lineNumber":99,"author":{"gitId":"lohjooh"},"content":"- `task` is **_not_** case-sensitive","lastModifiedDate":"2023-02-28"},{"lineNumber":100,"author":{"gitId":"lohjooh"},"content":"- `TASK_NAME` could be a **_String_** of multiple words","lastModifiedDate":"2023-02-28"},{"lineNumber":101,"author":{"gitId":"lohjooh"},"content":"- `/from` and `/to` is **_compulsory_** or else the input is treated as **_invalid_**","lastModifiedDate":"2023-02-28"},{"lineNumber":102,"author":{"gitId":"lohjooh"},"content":"- `FROM_DATE` and `TO_DATE` could be written as any **_String_** of multiple words","lastModifiedDate":"2023-02-28"},{"lineNumber":103,"author":{"gitId":"lohjooh"},"content":"    - Alternatively, `FROM_DATE` and `TO_DATE` can be formatted as `YYYY-MM-DD` to enable `LocalDate`","lastModifiedDate":"2023-02-28"},{"lineNumber":104,"author":{"gitId":"lohjooh"},"content":"      based functions such as `date`","lastModifiedDate":"2023-02-28"},{"lineNumber":105,"author":{"gitId":"lohjooh"},"content":"        - `YYYY` represents the year _(example : `2023` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":106,"author":{"gitId":"lohjooh"},"content":"        - `MM` represents the month _(example : `02` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":107,"author":{"gitId":"lohjooh"},"content":"        - `DD` represents the day _(example : `20` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":108,"author":{"gitId":"lohjooh"},"content":"        - Example : `2023-02-20` represents **20 February 2023**","lastModifiedDate":"2023-02-28"},{"lineNumber":109,"author":{"gitId":"lohjooh"},"content":"    - `FROM_DATE` and `TO_DATE` can also be certain **_keywords_**:","lastModifiedDate":"2023-02-28"},{"lineNumber":110,"author":{"gitId":"lohjooh"},"content":"        - `tomorrow` which sets `BY_DATE` to the next day of the day you used this ","lastModifiedDate":"2023-02-28"},{"lineNumber":111,"author":{"gitId":"lohjooh"},"content":"          command","lastModifiedDate":"2023-02-28"},{"lineNumber":112,"author":{"gitId":"lohjooh"},"content":"        - `next TIME` which adds `TIME` to the day you used this command\u0027s date","lastModifiedDate":"2023-02-28"},{"lineNumber":113,"author":{"gitId":"lohjooh"},"content":"        - `NUMBER TIME` which adds `NUMBER` of `TIME` to the day you used this","lastModifiedDate":"2023-02-28"},{"lineNumber":114,"author":{"gitId":"lohjooh"},"content":"          command\u0027s date","lastModifiedDate":"2023-02-28"},{"lineNumber":115,"author":{"gitId":"lohjooh"},"content":"        - `TIME` includes:","lastModifiedDate":"2023-02-28"},{"lineNumber":116,"author":{"gitId":"lohjooh"},"content":"            - `day`","lastModifiedDate":"2023-02-28"},{"lineNumber":117,"author":{"gitId":"lohjooh"},"content":"            - `week`","lastModifiedDate":"2023-02-28"},{"lineNumber":118,"author":{"gitId":"lohjooh"},"content":"            - `month`","lastModifiedDate":"2023-02-28"},{"lineNumber":119,"author":{"gitId":"lohjooh"},"content":"            - `year`","lastModifiedDate":"2023-02-28"},{"lineNumber":120,"author":{"gitId":"lohjooh"},"content":"            - `decade`","lastModifiedDate":"2023-02-28"},{"lineNumber":121,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":122,"author":{"gitId":"lohjooh"},"content":"Examples:","lastModifiedDate":"2023-02-28"},{"lineNumber":123,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":124,"author":{"gitId":"lohjooh"},"content":"_Below example show `FROM_DATE` and `TO_DATE` as a random **_String_**_","lastModifiedDate":"2023-02-28"},{"lineNumber":125,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":126,"author":{"gitId":"lohjooh"},"content":"Event meeting friends /from just now /to now","lastModifiedDate":"2023-02-28"},{"lineNumber":127,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":128,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":129,"author":{"gitId":"lohjooh"},"content":"_Below example show `FROM_DATE` and `TO_DATE` formatted as `YYYY-MM-DD`_","lastModifiedDate":"2023-02-28"},{"lineNumber":130,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":131,"author":{"gitId":"lohjooh"},"content":"eVeNT assignment /from 2023-02-14 /to 2","lastModifiedDate":"2023-02-28"},{"lineNumber":132,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":133,"author":{"gitId":"lohjooh"},"content":"_Below examples shows `FROM_DATE` and `TO_DATE` formatted as **_keyword_**_","lastModifiedDate":"2023-02-28"},{"lineNumber":134,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":135,"author":{"gitId":"lohjooh"},"content":"event paint room /from tomorrow /to next week","lastModifiedDate":"2023-02-28"},{"lineNumber":136,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":137,"author":{"gitId":"lohjooh"},"content":"_Mixing of format for `FROM_DATE` and `TO_DATE` is possible_","lastModifiedDate":"2023-02-28"},{"lineNumber":138,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":139,"author":{"gitId":"lohjooh"},"content":"event dance party /from now /to tomorrow","lastModifiedDate":"2023-02-28"},{"lineNumber":140,"author":{"gitId":"lohjooh"},"content":"event play /from 2023-12-12 /to next decade","lastModifiedDate":"2023-02-28"},{"lineNumber":141,"author":{"gitId":"lohjooh"},"content":"````","lastModifiedDate":"2023-02-28"},{"lineNumber":142,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":143,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":144,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":145,"author":{"gitId":"lohjooh"},"content":"\u003e **WARNING :** Leaving fields blank is accepted but removes `find` and `date` functionality","lastModifiedDate":"2023-02-28"},{"lineNumber":146,"author":{"gitId":"lohjooh"},"content":"\u003e *_Applies for **ALL** `todo`, `deadline`, `event`_","lastModifiedDate":"2023-02-28"},{"lineNumber":147,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":148,"author":{"gitId":"lohjooh"},"content":"\u003e **WARNING :** Leading and trailing whitespaces are **discarded**","lastModifiedDate":"2023-02-28"},{"lineNumber":149,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":150,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":151,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":152,"author":{"gitId":"lohjooh"},"content":"### Listing all `tasks`","lastModifiedDate":"2023-02-28"},{"lineNumber":153,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":154,"author":{"gitId":"lohjooh"},"content":"_Shows a list of all `tasks` recorded in the application_","lastModifiedDate":"2023-02-28"},{"lineNumber":155,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":156,"author":{"gitId":"lohjooh"},"content":"Format: `list` ","lastModifiedDate":"2023-02-28"},{"lineNumber":157,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":158,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":159,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":160,"author":{"gitId":"lohjooh"},"content":"### Marking or un-marking a `task` as done","lastModifiedDate":"2023-02-28"},{"lineNumber":161,"author":{"gitId":"lohjooh"},"content":"_Marks a specific task as done_","lastModifiedDate":"2023-02-28"},{"lineNumber":162,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":163,"author":{"gitId":"lohjooh"},"content":"Format: `mark NUMBER_ID` or `unmark NUMBER_ID`","lastModifiedDate":"2023-02-28"},{"lineNumber":164,"author":{"gitId":"lohjooh"},"content":"- `NUMBER_ID` represents the order of the `task` in the list","lastModifiedDate":"2023-02-28"},{"lineNumber":165,"author":{"gitId":"lohjooh"},"content":"  - `NUMBER_ID` can be displayed using `list`","lastModifiedDate":"2023-02-28"},{"lineNumber":166,"author":{"gitId":"lohjooh"},"content":"    - Example output for `list`","lastModifiedDate":"2023-02-28"},{"lineNumber":167,"author":{"gitId":"lohjooh"},"content":"    ````","lastModifiedDate":"2023-02-28"},{"lineNumber":168,"author":{"gitId":"lohjooh"},"content":"        1.  [T][ ] this","lastModifiedDate":"2023-02-28"},{"lineNumber":169,"author":{"gitId":"lohjooh"},"content":"        2.  [D][ ] that (by: Mar 2 2023)","lastModifiedDate":"2023-02-28"},{"lineNumber":170,"author":{"gitId":"lohjooh"},"content":"    ````","lastModifiedDate":"2023-02-28"},{"lineNumber":171,"author":{"gitId":"lohjooh"},"content":"    - `1` would then be the `NUMBER_ID` for `this`","lastModifiedDate":"2023-02-28"},{"lineNumber":172,"author":{"gitId":"lohjooh"},"content":"- Only an `Integer` representing `NUMBER_ID` that already is in the list is accepted","lastModifiedDate":"2023-02-28"},{"lineNumber":173,"author":{"gitId":"lohjooh"},"content":"- A `task` that is already `marked`/`unmarked` would cause an error message to be printed","lastModifiedDate":"2023-02-28"},{"lineNumber":174,"author":{"gitId":"lohjooh"},"content":"- A `marked` `task` would display `[X]` when the `task` is printed","lastModifiedDate":"2023-02-28"},{"lineNumber":175,"author":{"gitId":"lohjooh"},"content":"- A `unmarked` `task` would display `[X]` when the `task` is printed","lastModifiedDate":"2023-02-28"},{"lineNumber":176,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":177,"author":{"gitId":"lohjooh"},"content":"Example:","lastModifiedDate":"2023-02-28"},{"lineNumber":178,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":179,"author":{"gitId":"lohjooh"},"content":"_Below shows an example of the procedure of `marking` a `task`_","lastModifiedDate":"2023-02-28"},{"lineNumber":180,"author":{"gitId":"lohjooh"},"content":"1. `list` is inputted into the **_command line_**","lastModifiedDate":"2023-02-28"},{"lineNumber":181,"author":{"gitId":"lohjooh"},"content":"    ````","lastModifiedDate":"2023-02-28"},{"lineNumber":182,"author":{"gitId":"lohjooh"},"content":"       1. [T][ ] this","lastModifiedDate":"2023-02-28"},{"lineNumber":183,"author":{"gitId":"lohjooh"},"content":"    ````","lastModifiedDate":"2023-02-28"},{"lineNumber":184,"author":{"gitId":"lohjooh"},"content":"2. A `task`, `this`, exists in the list with `NUMBER_ID` `1`","lastModifiedDate":"2023-02-28"},{"lineNumber":185,"author":{"gitId":"lohjooh"},"content":"3. `mark 1` is then inputted into the **_command line_**","lastModifiedDate":"2023-02-28"},{"lineNumber":186,"author":{"gitId":"lohjooh"},"content":"4. If `list` is now called, `this` would have its status updated","lastModifiedDate":"2023-02-28"},{"lineNumber":187,"author":{"gitId":"lohjooh"},"content":"   ````","lastModifiedDate":"2023-02-28"},{"lineNumber":188,"author":{"gitId":"lohjooh"},"content":"       1. [T][X] this","lastModifiedDate":"2023-02-28"},{"lineNumber":189,"author":{"gitId":"lohjooh"},"content":"   ````","lastModifiedDate":"2023-02-28"},{"lineNumber":190,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":191,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":192,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":193,"author":{"gitId":"lohjooh"},"content":"### Deleting a `task`","lastModifiedDate":"2023-02-28"},{"lineNumber":194,"author":{"gitId":"lohjooh"},"content":"_Deletes a specific `task` stored in the application_","lastModifiedDate":"2023-02-28"},{"lineNumber":195,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":196,"author":{"gitId":"lohjooh"},"content":"Format: `delete NUMBER_ID`","lastModifiedDate":"2023-02-28"},{"lineNumber":197,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":198,"author":{"gitId":"lohjooh"},"content":"- `NUMBER_ID` represents the order of the `task` in the list","lastModifiedDate":"2023-02-28"},{"lineNumber":199,"author":{"gitId":"lohjooh"},"content":"    - `NUMBER_ID` can be displayed using `list`","lastModifiedDate":"2023-02-28"},{"lineNumber":200,"author":{"gitId":"lohjooh"},"content":"        - Example output for `list`","lastModifiedDate":"2023-02-28"},{"lineNumber":201,"author":{"gitId":"lohjooh"},"content":"        ````","lastModifiedDate":"2023-02-28"},{"lineNumber":202,"author":{"gitId":"lohjooh"},"content":"            1.  [T][ ] this","lastModifiedDate":"2023-02-28"},{"lineNumber":203,"author":{"gitId":"lohjooh"},"content":"            2.  [D][ ] that (by: Mar 2 2023)","lastModifiedDate":"2023-02-28"},{"lineNumber":204,"author":{"gitId":"lohjooh"},"content":"        ````","lastModifiedDate":"2023-02-28"},{"lineNumber":205,"author":{"gitId":"lohjooh"},"content":"  - `1` would then be the `NUMBER_ID` for `this`","lastModifiedDate":"2023-02-28"},{"lineNumber":206,"author":{"gitId":"lohjooh"},"content":"- Only an `Integer` representing `NUMBER_ID` that already is in the list is accepted","lastModifiedDate":"2023-02-28"},{"lineNumber":207,"author":{"gitId":"lohjooh"},"content":"- After `delete` is successful, the `NUMBER_ID` of all the other `tasks` in the list would ","lastModifiedDate":"2023-02-28"},{"lineNumber":208,"author":{"gitId":"lohjooh"},"content":"  be updated depending on the order of the `tasks` within the list","lastModifiedDate":"2023-02-28"},{"lineNumber":209,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":210,"author":{"gitId":"lohjooh"},"content":"Example:","lastModifiedDate":"2023-02-28"},{"lineNumber":211,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":212,"author":{"gitId":"lohjooh"},"content":"_Below shows an example of the procedure of `deleting` a `task`_","lastModifiedDate":"2023-02-28"},{"lineNumber":213,"author":{"gitId":"lohjooh"},"content":"1. `list` is inputted into the **_command line_**","lastModifiedDate":"2023-02-28"},{"lineNumber":214,"author":{"gitId":"lohjooh"},"content":"    ````","lastModifiedDate":"2023-02-28"},{"lineNumber":215,"author":{"gitId":"lohjooh"},"content":"        1. [T][ ] this","lastModifiedDate":"2023-02-28"},{"lineNumber":216,"author":{"gitId":"lohjooh"},"content":"        2. [T][X] that","lastModifiedDate":"2023-02-28"},{"lineNumber":217,"author":{"gitId":"lohjooh"},"content":"        3. [E][ ] these (by: then)","lastModifiedDate":"2023-02-28"},{"lineNumber":218,"author":{"gitId":"lohjooh"},"content":"    ````","lastModifiedDate":"2023-02-28"},{"lineNumber":219,"author":{"gitId":"lohjooh"},"content":"2. A `task`, `that`, exists in the list with `NUMBER_ID` `2`","lastModifiedDate":"2023-02-28"},{"lineNumber":220,"author":{"gitId":"lohjooh"},"content":"3. `delete 2` is then inputted into the **_command line_**","lastModifiedDate":"2023-02-28"},{"lineNumber":221,"author":{"gitId":"lohjooh"},"content":"4. If `list` is now called, `that` would be gone from the list and `these` would have its","lastModifiedDate":"2023-02-28"},{"lineNumber":222,"author":{"gitId":"lohjooh"},"content":"   `NUMBER_ID` updated from `3` to `2` as it is now the second `task` int the list","lastModifiedDate":"2023-02-28"},{"lineNumber":223,"author":{"gitId":"lohjooh"},"content":"   ````","lastModifiedDate":"2023-02-28"},{"lineNumber":224,"author":{"gitId":"lohjooh"},"content":"        1. [T][ ] this","lastModifiedDate":"2023-02-28"},{"lineNumber":225,"author":{"gitId":"lohjooh"},"content":"        2. [E][ ] these (by: then)","lastModifiedDate":"2023-02-28"},{"lineNumber":226,"author":{"gitId":"lohjooh"},"content":"   ````","lastModifiedDate":"2023-02-28"},{"lineNumber":227,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":228,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":229,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":230,"author":{"gitId":"lohjooh"},"content":"### Finding a `task` using its name","lastModifiedDate":"2023-02-28"},{"lineNumber":231,"author":{"gitId":"lohjooh"},"content":"_Searches the database of the application for a `task` which contains the entered input_","lastModifiedDate":"2023-02-28"},{"lineNumber":232,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":233,"author":{"gitId":"lohjooh"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2023-02-28"},{"lineNumber":234,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":235,"author":{"gitId":"lohjooh"},"content":"- `KEYWORD` is case-sensitive","lastModifiedDate":"2023-02-28"},{"lineNumber":236,"author":{"gitId":"lohjooh"},"content":"- `KEYWORD` can be a single `String` or multiple `Strings`","lastModifiedDate":"2023-02-28"},{"lineNumber":237,"author":{"gitId":"lohjooh"},"content":"- Only the name of the `task` is searched","lastModifiedDate":"2023-02-28"},{"lineNumber":238,"author":{"gitId":"lohjooh"},"content":"- Only exact matches would be found","lastModifiedDate":"2023-02-28"},{"lineNumber":239,"author":{"gitId":"lohjooh"},"content":"- `Tasks` with a name which contains `KEYWORD` would be found","lastModifiedDate":"2023-02-28"},{"lineNumber":240,"author":{"gitId":"lohjooh"},"content":"- The `NUMBER_ID` of the found `tasks` would correspond to the order of the `tasks` ","lastModifiedDate":"2023-02-28"},{"lineNumber":241,"author":{"gitId":"lohjooh"},"content":"  entered and not the numbering in the returned list.","lastModifiedDate":"2023-02-28"},{"lineNumber":242,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":243,"author":{"gitId":"lohjooh"},"content":"Example:","lastModifiedDate":"2023-02-28"},{"lineNumber":244,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":245,"author":{"gitId":"lohjooh"},"content":"_Below shows an example of the procedure of using `find`_","lastModifiedDate":"2023-02-28"},{"lineNumber":246,"author":{"gitId":"lohjooh"},"content":"1. `list` is inputted into the **_command line_**","lastModifiedDate":"2023-02-28"},{"lineNumber":247,"author":{"gitId":"lohjooh"},"content":"    ````","lastModifiedDate":"2023-02-28"},{"lineNumber":248,"author":{"gitId":"lohjooh"},"content":"        1. [T][ ] this thing","lastModifiedDate":"2023-02-28"},{"lineNumber":249,"author":{"gitId":"lohjooh"},"content":"        2. [D][ ] these (by: then)","lastModifiedDate":"2023-02-28"},{"lineNumber":250,"author":{"gitId":"lohjooh"},"content":"        3. [E][X] this thingy (from: now to: after)","lastModifiedDate":"2023-02-28"},{"lineNumber":251,"author":{"gitId":"lohjooh"},"content":"    ````","lastModifiedDate":"2023-02-28"},{"lineNumber":252,"author":{"gitId":"lohjooh"},"content":"2. `find this` is inputted into the **_command line_**","lastModifiedDate":"2023-02-28"},{"lineNumber":253,"author":{"gitId":"lohjooh"},"content":"3. This would be shown","lastModifiedDate":"2023-02-28"},{"lineNumber":254,"author":{"gitId":"lohjooh"},"content":"   ````","lastModifiedDate":"2023-02-28"},{"lineNumber":255,"author":{"gitId":"lohjooh"},"content":"        1. [T][ ] this thing","lastModifiedDate":"2023-02-28"},{"lineNumber":256,"author":{"gitId":"lohjooh"},"content":"        3. [E][ ] this thingy (from: now to: after)","lastModifiedDate":"2023-02-28"},{"lineNumber":257,"author":{"gitId":"lohjooh"},"content":"   ````","lastModifiedDate":"2023-02-28"},{"lineNumber":258,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":259,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":260,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":261,"author":{"gitId":"lohjooh"},"content":"### Finding a `task` using its date","lastModifiedDate":"2023-02-28"},{"lineNumber":262,"author":{"gitId":"lohjooh"},"content":"_Searches the database of the application for a `task` which has the attribute `LocalDate`_","lastModifiedDate":"2023-02-28"},{"lineNumber":263,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":264,"author":{"gitId":"lohjooh"},"content":"Format: `date DATE`","lastModifiedDate":"2023-02-28"},{"lineNumber":265,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":266,"author":{"gitId":"lohjooh"},"content":"- Only the date of the `task` is searched","lastModifiedDate":"2023-02-28"},{"lineNumber":267,"author":{"gitId":"lohjooh"},"content":"- Only exact matches would be found","lastModifiedDate":"2023-02-28"},{"lineNumber":268,"author":{"gitId":"lohjooh"},"content":"- `Tasks` with a date of `DATE` would be found","lastModifiedDate":"2023-02-28"},{"lineNumber":269,"author":{"gitId":"lohjooh"},"content":"- The `NUMBER_ID` of the found `tasks` would correspond to the order of the `tasks`","lastModifiedDate":"2023-02-28"},{"lineNumber":270,"author":{"gitId":"lohjooh"},"content":"  entered and not the numbering in the returned list.","lastModifiedDate":"2023-02-28"},{"lineNumber":271,"author":{"gitId":"lohjooh"},"content":"- `DATE` **_must_** be formatted as `YYYY-MM-DD` or certain **_keywords_**","lastModifiedDate":"2023-02-28"},{"lineNumber":272,"author":{"gitId":"lohjooh"},"content":"  - `YYYY` represents the year _(example : `2023` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":273,"author":{"gitId":"lohjooh"},"content":"  - `MM` represents the month _(example : `02` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":274,"author":{"gitId":"lohjooh"},"content":"  - `DD` represents the day _(example : `20` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":275,"author":{"gitId":"lohjooh"},"content":"  - Example : `2023-02-20` represents **20 February 2023**","lastModifiedDate":"2023-02-28"},{"lineNumber":276,"author":{"gitId":"lohjooh"},"content":"  - **_Keywords_** include:    ","lastModifiedDate":"2023-02-28"},{"lineNumber":277,"author":{"gitId":"lohjooh"},"content":"    - `tomorrow` which sets `DATE` to the next day of the day you used this ","lastModifiedDate":"2023-02-28"},{"lineNumber":278,"author":{"gitId":"lohjooh"},"content":"      command\u0027s date","lastModifiedDate":"2023-02-28"},{"lineNumber":279,"author":{"gitId":"lohjooh"},"content":"    - `next TIME` which adds `TIME` to the day you used this command\u0027s date","lastModifiedDate":"2023-02-28"},{"lineNumber":280,"author":{"gitId":"lohjooh"},"content":"      - `TIME` includes:","lastModifiedDate":"2023-02-28"},{"lineNumber":281,"author":{"gitId":"lohjooh"},"content":"        - `day`","lastModifiedDate":"2023-02-28"},{"lineNumber":282,"author":{"gitId":"lohjooh"},"content":"        - `week`","lastModifiedDate":"2023-02-28"},{"lineNumber":283,"author":{"gitId":"lohjooh"},"content":"        - `month`","lastModifiedDate":"2023-02-28"},{"lineNumber":284,"author":{"gitId":"lohjooh"},"content":"        - `year`","lastModifiedDate":"2023-02-28"},{"lineNumber":285,"author":{"gitId":"lohjooh"},"content":"        - `decade`","lastModifiedDate":"2023-02-28"},{"lineNumber":286,"author":{"gitId":"lohjooh"},"content":"  - **_Keywords_** are **_not_** case-sensitive","lastModifiedDate":"2023-02-28"},{"lineNumber":287,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":288,"author":{"gitId":"lohjooh"},"content":"Example:","lastModifiedDate":"2023-02-28"},{"lineNumber":289,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":290,"author":{"gitId":"lohjooh"},"content":"_Below shows an example of the procedure of using `find`_","lastModifiedDate":"2023-02-28"},{"lineNumber":291,"author":{"gitId":"lohjooh"},"content":"1. `list` is inputted into the **_command line_**","lastModifiedDate":"2023-02-28"},{"lineNumber":292,"author":{"gitId":"lohjooh"},"content":"    ````","lastModifiedDate":"2023-02-28"},{"lineNumber":293,"author":{"gitId":"lohjooh"},"content":"        1. [T][ ] this thing ","lastModifiedDate":"2023-02-28"},{"lineNumber":294,"author":{"gitId":"lohjooh"},"content":"        2. [D][ ] these (by: Feb 22 2023)","lastModifiedDate":"2023-02-28"},{"lineNumber":295,"author":{"gitId":"lohjooh"},"content":"        3. [E][X] this thingy (from: Feb 20 2023 to: Feb 22 2023)","lastModifiedDate":"2023-02-28"},{"lineNumber":296,"author":{"gitId":"lohjooh"},"content":"    ````","lastModifiedDate":"2023-02-28"},{"lineNumber":297,"author":{"gitId":"lohjooh"},"content":"2. `date 2023-02-22` is inputted into the **_command line_**","lastModifiedDate":"2023-02-28"},{"lineNumber":298,"author":{"gitId":"lohjooh"},"content":"3. This would be shown","lastModifiedDate":"2023-02-28"},{"lineNumber":299,"author":{"gitId":"lohjooh"},"content":"   ````","lastModifiedDate":"2023-02-28"},{"lineNumber":300,"author":{"gitId":"lohjooh"},"content":"        2. [D][ ] these (by: Feb 22 2023)","lastModifiedDate":"2023-02-28"},{"lineNumber":301,"author":{"gitId":"lohjooh"},"content":"        3. [E][X] this thingy (from: Feb 20 2023 to: Feb 22 2023)","lastModifiedDate":"2023-02-28"},{"lineNumber":302,"author":{"gitId":"lohjooh"},"content":"   ````","lastModifiedDate":"2023-02-28"},{"lineNumber":303,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":304,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":305,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":306,"author":{"gitId":"lohjooh"},"content":"### Clearing all entries","lastModifiedDate":"2023-02-28"},{"lineNumber":307,"author":{"gitId":"lohjooh"},"content":"_Deletes all records stored within the application_","lastModifiedDate":"2023-02-28"},{"lineNumber":308,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":309,"author":{"gitId":"lohjooh"},"content":"Format: `clear`","lastModifiedDate":"2023-02-28"},{"lineNumber":310,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":311,"author":{"gitId":"lohjooh"},"content":"\u003e **WARNING** : Doing this clears **_all_** the records stored in the datafile as well","lastModifiedDate":"2023-02-28"},{"lineNumber":312,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":313,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":314,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":315,"author":{"gitId":"lohjooh"},"content":"### Exiting the application","lastModifiedDate":"2023-02-28"},{"lineNumber":316,"author":{"gitId":"lohjooh"},"content":"_Says bye to Bob_","lastModifiedDate":"2023-02-28"},{"lineNumber":317,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":318,"author":{"gitId":"lohjooh"},"content":"Format: `bye`","lastModifiedDate":"2023-02-28"},{"lineNumber":319,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":320,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":321,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":322,"author":{"gitId":"lohjooh"},"content":"### Saving the data","lastModifiedDate":"2023-02-28"},{"lineNumber":323,"author":{"gitId":"lohjooh"},"content":"_Data is saved automatically in a file at the path `[JAR FILE LOCATION]\\\\data\\\\tasks.txt`_","lastModifiedDate":"2023-02-28"},{"lineNumber":324,"author":{"gitId":"lohjooh"},"content":"\u003e**NOTE** : File and folder are generated automatically if the file and folder are not found","lastModifiedDate":"2023-02-28"},{"lineNumber":325,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":326,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":327,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":328,"author":{"gitId":"lohjooh"},"content":"### Editing the datafile","lastModifiedDate":"2023-02-28"},{"lineNumber":329,"author":{"gitId":"lohjooh"},"content":"_Data is stored in a file at the path `[JAR FILE LOCATION]\\\\data\\\\tasks.txt`_","lastModifiedDate":"2023-02-28"},{"lineNumber":330,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":331,"author":{"gitId":"lohjooh"},"content":"Advanced users are welcome to directly edit the datafile","lastModifiedDate":"2023-02-28"},{"lineNumber":332,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":333,"author":{"gitId":"lohjooh"},"content":"Format for `ToDo`: `T %   % TASK_NAME` or `T % X % TASK_NAME`","lastModifiedDate":"2023-02-28"},{"lineNumber":334,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":335,"author":{"gitId":"lohjooh"},"content":"Format for `Deadline`: `T %   % TASK_NAME % BY_DATE` or `T % X % TASK_NAME % BY_DATE`","lastModifiedDate":"2023-02-28"},{"lineNumber":336,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":337,"author":{"gitId":"lohjooh"},"content":"Format for `Event`: `T %   % TASK_NAME % FROM_DATE % TO_DATE` or ","lastModifiedDate":"2023-02-28"},{"lineNumber":338,"author":{"gitId":"lohjooh"},"content":"                    `T % X % TASK_NAME % FROM_DATE % TO_DATE`","lastModifiedDate":"2023-02-28"},{"lineNumber":339,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":340,"author":{"gitId":"lohjooh"},"content":"\u003e **NOTE** : ","lastModifiedDate":"2023-02-28"},{"lineNumber":341,"author":{"gitId":"lohjooh"},"content":"\u003e - `BY_DATE`, `FROM_DATE`, `TO_DATE` should be formatted as `YYYY-MM-DD`","lastModifiedDate":"2023-02-28"},{"lineNumber":342,"author":{"gitId":"lohjooh"},"content":"\u003e   - `YYYY` represents the year _(example : `2023` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":343,"author":{"gitId":"lohjooh"},"content":"\u003e   - `MM` represents the month _(example : `02` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":344,"author":{"gitId":"lohjooh"},"content":"\u003e   - `DD` represents the day _(example : `20` )_","lastModifiedDate":"2023-02-28"},{"lineNumber":345,"author":{"gitId":"lohjooh"},"content":"\u003e   - Example : `2023-02-20` represents **20 February 2023**","lastModifiedDate":"2023-02-28"},{"lineNumber":346,"author":{"gitId":"lohjooh"},"content":"\u003e - `TASK_NAME` can be a single or multiple `Strings`","lastModifiedDate":"2023-02-28"},{"lineNumber":347,"author":{"gitId":"lohjooh"},"content":"\u003e - `X` represents `marked` while ` ` represents `unmarked`","lastModifiedDate":"2023-02-28"},{"lineNumber":348,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":349,"author":{"gitId":"lohjooh"},"content":"\u003e **! WARNING !** : If your changes to the datafile makes its format invalid, all previous data","lastModifiedDate":"2023-02-28"},{"lineNumber":350,"author":{"gitId":"lohjooh"},"content":"\u003e  would be discarded and the datafile would be emptied.","lastModifiedDate":"2023-02-28"},{"lineNumber":351,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":352,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":354,"author":{"gitId":"lohjooh"},"content":"___","lastModifiedDate":"2023-02-28"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":356,"author":{"gitId":"lohjooh"},"content":"## FAQ","lastModifiedDate":"2023-02-28"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":358,"author":{"gitId":"lohjooh"},"content":"\u003e Q: How do I transfer my data to another Computer?","lastModifiedDate":"2023-02-28"},{"lineNumber":359,"author":{"gitId":"lohjooh"},"content":"\u003e ","lastModifiedDate":"2023-02-28"},{"lineNumber":360,"author":{"gitId":"lohjooh"},"content":"\u003e A: Run the application once in the new Computer and overwrite ","lastModifiedDate":"2023-02-28"},{"lineNumber":361,"author":{"gitId":"lohjooh"},"content":"\u003e `[JAR FILE LOCATION]\\\\data\\\\tasks.txt` with the same file from your old Computer.","lastModifiedDate":"2023-02-28"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":363,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":365,"author":{"gitId":"lohjooh"},"content":"___","lastModifiedDate":"2023-02-28"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":367,"author":{"gitId":"lohjooh"},"content":"## Command Summary","lastModifiedDate":"2023-02-28"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":369,"author":{"gitId":"lohjooh"},"content":"| Command      | Format                                        |","lastModifiedDate":"2023-02-28"},{"lineNumber":370,"author":{"gitId":"lohjooh"},"content":"|--------------|-----------------------------------------------|","lastModifiedDate":"2023-02-28"},{"lineNumber":371,"author":{"gitId":"lohjooh"},"content":"| **todo**     | `todo TASK_NAME`                              |","lastModifiedDate":"2023-02-28"},{"lineNumber":372,"author":{"gitId":"lohjooh"},"content":"| **deadline** | `deadline TASK_NAME /by BY_DATE`              |","lastModifiedDate":"2023-02-28"},{"lineNumber":373,"author":{"gitId":"lohjooh"},"content":"| **event**    | `event TASK_NAME /from FROM_DATE /to TO_DATE` |","lastModifiedDate":"2023-02-28"},{"lineNumber":374,"author":{"gitId":"lohjooh"},"content":"| **list**     | `list`                                        |","lastModifiedDate":"2023-02-28"},{"lineNumber":375,"author":{"gitId":"lohjooh"},"content":"| **mark**     | `mark NUMBER_ID`                              |","lastModifiedDate":"2023-02-28"},{"lineNumber":376,"author":{"gitId":"lohjooh"},"content":"| **unmark**   | `unmark NUMBER_ID`                            |","lastModifiedDate":"2023-02-28"},{"lineNumber":377,"author":{"gitId":"lohjooh"},"content":"| **delete**   | `delete NUMBER_ID`                            |","lastModifiedDate":"2023-02-28"},{"lineNumber":378,"author":{"gitId":"lohjooh"},"content":"| **find**     | `find KEYWORD`                                |","lastModifiedDate":"2023-02-28"},{"lineNumber":379,"author":{"gitId":"lohjooh"},"content":"| **date**     | `date DATE`                                   |","lastModifiedDate":"2023-02-28"},{"lineNumber":380,"author":{"gitId":"lohjooh"},"content":"| **clear**    | `clear`                                       |","lastModifiedDate":"2023-02-28"},{"lineNumber":381,"author":{"gitId":"lohjooh"},"content":"| **exit**     | `bye`                                         |","lastModifiedDate":"2023-02-28"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":383,"author":{"gitId":"lohjooh"},"content":"\u003cbr /\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":385,"author":{"gitId":"lohjooh"},"content":"___","lastModifiedDate":"2023-02-28"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":388,"author":{"gitId":"lohjooh"},"content":"                                                                 .###%%%%#%%###%#/                                      ","lastModifiedDate":"2023-02-28"},{"lineNumber":389,"author":{"gitId":"lohjooh"},"content":"                                                               %%\u0026\u0026\u0026\u0026\u0026@\u0026\u0026\u0026@\u0026\u0026%%%#%##%,                                  ","lastModifiedDate":"2023-02-28"},{"lineNumber":390,"author":{"gitId":"lohjooh"},"content":"                                                             %\u0026@@@@\u0026\u0026%%%\u0026\u0026\u0026\u0026\u0026@\u0026\u0026\u0026\u0026%%%%%(.                               ","lastModifiedDate":"2023-02-28"},{"lineNumber":391,"author":{"gitId":"lohjooh"},"content":"                                                            \u0026\u0026\u0026\u0026%#/,,...,,*(#%%\u0026\u0026@@@@@\u0026%#,                              ","lastModifiedDate":"2023-02-28"},{"lineNumber":392,"author":{"gitId":"lohjooh"},"content":"                                                           %\u0026%%%(*...........,,***(%\u0026@@@%#.                             ","lastModifiedDate":"2023-02-28"},{"lineNumber":393,"author":{"gitId":"lohjooh"},"content":"                                                          %%%###*,.................,*/#@\u0026%#.                            ","lastModifiedDate":"2023-02-28"},{"lineNumber":394,"author":{"gitId":"lohjooh"},"content":"                                                         %%%#/*,..................,,,,*%\u0026\u0026(.                            ","lastModifiedDate":"2023-02-28"},{"lineNumber":395,"author":{"gitId":"lohjooh"},"content":"                                                       .,%%\u0026*....,,,*/##(***,,,....,,,,/%%(                             ","lastModifiedDate":"2023-02-28"},{"lineNumber":396,"author":{"gitId":"lohjooh"},"content":"                                                      (**#((...,,*((#(#((,(/////((/**,*(\u0026#*                             ","lastModifiedDate":"2023-02-28"},{"lineNumber":397,"author":{"gitId":"lohjooh"},"content":"                                                      **(#**.......*(/(##/*,*(/((/*//(*(%/                              ","lastModifiedDate":"2023-02-28"},{"lineNumber":398,"author":{"gitId":"lohjooh"},"content":"                                                     .,/./.,.......,**,,,,..,(/(//(%#//%(                               ","lastModifiedDate":"2023-02-28"},{"lineNumber":399,"author":{"gitId":"lohjooh"},"content":"                                                      ,..,.......,,,**/.... .,,,.,,,,,#%                                ","lastModifiedDate":"2023-02-28"},{"lineNumber":400,"author":{"gitId":"lohjooh"},"content":"                                                       .,,,...,,**/*,,,/((((%//*,,.,,/(                                 ","lastModifiedDate":"2023-02-28"},{"lineNumber":401,"author":{"gitId":"lohjooh"},"content":"                                                         ..,,,,,,,*(*,,.,*****,*/***//                                  ","lastModifiedDate":"2023-02-28"},{"lineNumber":402,"author":{"gitId":"lohjooh"},"content":"                                                        ...,,,,,,,,,.***.*/%#//*//(/,                                   ","lastModifiedDate":"2023-02-28"},{"lineNumber":403,"author":{"gitId":"lohjooh"},"content":"                                                       ....,,*,,,,,.,**/*,,,,***//*                                     ","lastModifiedDate":"2023-02-28"},{"lineNumber":404,"author":{"gitId":"lohjooh"},"content":"                                                      ....,,****,,,,,,*////*,*///                                       ","lastModifiedDate":"2023-02-28"},{"lineNumber":405,"author":{"gitId":"lohjooh"},"content":"                                                    .......,,/(////******,,,*//                                         ","lastModifiedDate":"2023-02-28"},{"lineNumber":406,"author":{"gitId":"lohjooh"},"content":"                                                *((# ......,,*/((#((####(##(...                                         ","lastModifiedDate":"2023-02-28"},{"lineNumber":407,"author":{"gitId":"lohjooh"},"content":"                                        .(#######%%#. .....,,**//((######(,,.                                           ","lastModifiedDate":"2023-02-28"},{"lineNumber":408,"author":{"gitId":"lohjooh"},"content":"                                   ###(###########%%%......,,***//(((((((%#(                                            ","lastModifiedDate":"2023-02-28"},{"lineNumber":409,"author":{"gitId":"lohjooh"},"content":"                                ####################%%%.....,,,**///(((((#\u0026                                             ","lastModifiedDate":"2023-02-28"},{"lineNumber":410,"author":{"gitId":"lohjooh"},"content":"                               %######################%%%.. ....,******/**(                                             ","lastModifiedDate":"2023-02-28"},{"lineNumber":411,"author":{"gitId":"lohjooh"},"content":"                              #%%\u0026%%%%%######(((((######%%#    ......,,,..,                                             ","lastModifiedDate":"2023-02-28"},{"lineNumber":412,"author":{"gitId":"lohjooh"},"content":"                              %%%\u0026%%%%%%####((((((((((###%%%#     .........#                                            ","lastModifiedDate":"2023-02-28"},{"lineNumber":413,"author":{"gitId":"lohjooh"},"content":"                              %%\u0026\u0026%%%%%%%#######(((((((####%%%%.        ...%                                            ","lastModifiedDate":"2023-02-28"},{"lineNumber":414,"author":{"gitId":"lohjooh"},"content":"                              %%\u0026\u0026\u0026%%%%%%%###########((((#(###%%(###/    .%#                                            ","lastModifiedDate":"2023-02-28"},{"lineNumber":415,"author":{"gitId":"lohjooh"},"content":"                              \u0026%%\u0026\u0026\u0026%%%%%%%#%###########((#(####,,.%%\u0026\u0026\u0026\u0026%%(                                            ","lastModifiedDate":"2023-02-28"},{"lineNumber":416,"author":{"gitId":"lohjooh"},"content":"                              \u0026\u0026%\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%####%%############(.,,,#%%%%%%%                                             ","lastModifiedDate":"2023-02-28"},{"lineNumber":417,"author":{"gitId":"lohjooh"},"content":"                              \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%#%%%%%%#########/.,**####%%%##                                             ","lastModifiedDate":"2023-02-28"},{"lineNumber":418,"author":{"gitId":"lohjooh"},"content":"                              \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%%%%%%%%######..,**/#%###%%%#.                                            ","lastModifiedDate":"2023-02-28"},{"lineNumber":419,"author":{"gitId":"lohjooh"},"content":"                              \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%%%%#%%%%%,/*.......      ...*                                            ","lastModifiedDate":"2023-02-28"},{"lineNumber":420,"author":{"gitId":"lohjooh"},"content":"                             ,\u0026\u0026\u0026\u0026\u0026@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%%%#%%%/(**..............   .                                           ","lastModifiedDate":"2023-02-28"},{"lineNumber":421,"author":{"gitId":"lohjooh"},"content":"                             #\u0026\u0026\u0026\u0026\u0026@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%%%#%%//(,..................                                           ","lastModifiedDate":"2023-02-28"},{"lineNumber":422,"author":{"gitId":"lohjooh"},"content":"                             #\u0026@@@\u0026@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%\u0026%%%%%%(/.,,,,....,,,,,,*,...                                          ","lastModifiedDate":"2023-02-28"},{"lineNumber":423,"author":{"gitId":"lohjooh"},"content":"                             %\u0026@@@\u0026@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%%(........,,,,,,,,,*,,,.                                          ","lastModifiedDate":"2023-02-28"},{"lineNumber":424,"author":{"gitId":"lohjooh"},"content":"                             \u0026\u0026\u0026@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026#..........,,,,,,,**,,,,...                                          ","lastModifiedDate":"2023-02-28"},{"lineNumber":425,"author":{"gitId":"lohjooh"},"content":"                             \u0026\u0026\u0026\u0026@@@@@@@@@\u0026\u0026\u0026\u0026#.............,,,,,*,,,,*******,                                          ","lastModifiedDate":"2023-02-28"},{"lineNumber":426,"author":{"gitId":"lohjooh"},"content":"                             \u0026@@@@@@@@@@@/..............,,,,,,**********///                                             ","lastModifiedDate":"2023-02-28"},{"lineNumber":427,"author":{"gitId":"lohjooh"},"content":"                             @\u0026#/,,...............,..,..,,,,,******//,                                                  ","lastModifiedDate":"2023-02-28"},{"lineNumber":428,"author":{"gitId":"lohjooh"},"content":"                             ,.........,,,,,,,,,,*********//(#,                                                         ","lastModifiedDate":"2023-02-28"},{"lineNumber":429,"author":{"gitId":"lohjooh"},"content":"                             ,,,,,,,,,,*,*****/////((((%.                                                               ","lastModifiedDate":"2023-02-28"},{"lineNumber":430,"author":{"gitId":"lohjooh"},"content":"                             ******//////(((((((((#                                                                     ","lastModifiedDate":"2023-02-28"},{"lineNumber":431,"author":{"gitId":"lohjooh"},"content":"                            .((((((((###(((((##                                                                         ","lastModifiedDate":"2023-02-28"},{"lineNumber":432,"author":{"gitId":"lohjooh"},"content":"                            *##############.                                                                            ","lastModifiedDate":"2023-02-28"},{"lineNumber":433,"author":{"gitId":"lohjooh"},"content":"                            *#%%#%%####.                                                                                ","lastModifiedDate":"2023-02-28"},{"lineNumber":434,"author":{"gitId":"lohjooh"},"content":"                            /%%%#%(                                                                                     ","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"lohjooh":419,"-":15}},{"path":"src/main/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"import duke.tasklist.DataManager;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"import duke.ui.DukeMessages;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"import duke.util.DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":" * Main class for the application.","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":" * Initializes the application by running method to read datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"public class Duke {","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"    private final DataManager dm;","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"    private final DukeMessages ui;","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"    private final Parser parser;","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":"     * Runs the initialization for the application and runs the application.","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"     * @param path Path of datafile","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"    public Duke(String path) {","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":"        ui \u003d new DukeMessages();","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"        parser \u003d new Parser(ui);","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"        dm \u003d new DataManager(path, ui, parser);","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"        dm.initialize();","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"        run();","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"     * Starts user interaction.","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"     * Prints exit message and ends application when user types \u003ccode\u003ebye\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"     * Passes all user inputs into Parser object and returns a \u003ccode\u003eparsedCommand\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"     * \u003ccode\u003eparsedCommand\u003c/code\u003e is then sent to DataManager object.","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"    public void run() {","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"        dm.run();","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"        do {","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"            String parsedCommand \u003d parser.run();","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"            if (parsedCommand.equals(\"bye\")) {","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"            ui.printDiv();","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"            String next;","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"            try {","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"                next \u003d parser.check();","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"                ui.printError();","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"                ui.printDiv();","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"                continue;","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"            dm.command(parsedCommand, next);","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"            ui.printDiv();","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"        } while (true);","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"        ui.printBye();","lastModifiedDate":"2023-02-18"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"        String path \u003d \".\\\\data\\\\tasks.txt\";","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"        new Duke(path);","lastModifiedDate":"2023-02-18"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"lohjooh":63}},{"path":"src/main/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.parser;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"import duke.ui.DukeMessages;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"import duke.util.DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":" * This object takes in the user input \u003ccode\u003eString\u003c/code\u003e and converts it into a format that is readable by the","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":" * application.","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":" * This object also verifies the validity of the user input and throws error messages for invalid inputs.","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"public class Parser {","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"    private final DukeMessages ui;","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"    private final Scanner in;","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":"    private String next;","lastModifiedDate":"2023-02-18"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":"    private String cmd;","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"    private int num;","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":"     * Initializes this object with the user input from \u003ccode\u003eSystem.in\u003c/code\u003e and with the text UI being the","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"     * application\u0027s text UI.","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"     * @param ui The text UI of the application.","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"    public Parser(DukeMessages ui) {","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"        this.in \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"     * Converts user input \u003ccode\u003eString\u003c/code\u003e into a valid number id for task objects currently stored within the","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"     * application.","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"     * @param str The user input \u003ccode\u003eString\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"     * @param taskCount The upper-bound for valid number id.","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"     * @throws DukeException Throws an exception for invalid user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"    public void convertString(String str, int taskCount) throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"            num \u003d Integer.parseInt(str);","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"            ui.printNotNumber();","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"        if (num \u003c 1 || num \u003e taskCount) {","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"            ui.printNotInList();","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"     * Converts user input \u003ccode\u003eString\u003c/code\u003e into a valid positive number.","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"     * @param str The user input to convert into a number.","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"     * @throws DukeException Throws an exception if the user input is invalid.","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"    public void convertNum (String str) throws DukeException {","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"            num \u003d Integer.parseInt(str);","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":65,"author":{"gitId":"lohjooh"},"content":"        if (num \u003c 1) {","lastModifiedDate":"2023-02-19"},{"lineNumber":66,"author":{"gitId":"lohjooh"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":67,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":70,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"lohjooh"},"content":"     * Takes in the next user input and ignores it.","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"lohjooh"},"content":"    public void ignoreLine() {","lastModifiedDate":"2023-02-18"},{"lineNumber":74,"author":{"gitId":"lohjooh"},"content":"        in.nextLine();","lastModifiedDate":"2023-02-18"},{"lineNumber":75,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":76,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":77,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"lohjooh"},"content":"     * Takes in a single \u003ccode\u003eString\u003c/code\u003e as a command and prints messages for prompting user.","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"lohjooh"},"content":"     * @return The command as a single \u003ccode\u003eString\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"lohjooh"},"content":"    public String run() {","lastModifiedDate":"2023-02-18"},{"lineNumber":83,"author":{"gitId":"lohjooh"},"content":"        ui.printPrompt();","lastModifiedDate":"2023-02-18"},{"lineNumber":84,"author":{"gitId":"lohjooh"},"content":"        cmd \u003d in.next().toLowerCase();","lastModifiedDate":"2023-02-18"},{"lineNumber":85,"author":{"gitId":"lohjooh"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-18"},{"lineNumber":86,"author":{"gitId":"lohjooh"},"content":"        return cmd;","lastModifiedDate":"2023-02-18"},{"lineNumber":87,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":88,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":89,"author":{"gitId":"lohjooh"},"content":"    public int getNum() {","lastModifiedDate":"2023-02-18"},{"lineNumber":90,"author":{"gitId":"lohjooh"},"content":"        return num;","lastModifiedDate":"2023-02-18"},{"lineNumber":91,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":92,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"lohjooh"},"content":"     * Checks for commands which need additional user input and ignores the additional user input if additional","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"lohjooh"},"content":"     * user input is not required.","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":97,"author":{"gitId":"lohjooh"},"content":"     * @return The additional user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"lohjooh"},"content":"     * @throws DukeException Throws exception if additional user input not required.","lastModifiedDate":"2023-02-20"},{"lineNumber":99,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"lohjooh"},"content":"    public String check() throws DukeException {","lastModifiedDate":"2023-02-18"},{"lineNumber":101,"author":{"gitId":"lohjooh"},"content":"        switch (cmd) {","lastModifiedDate":"2023-02-18"},{"lineNumber":102,"author":{"gitId":"lohjooh"},"content":"        case \"list\":","lastModifiedDate":"2023-02-18"},{"lineNumber":103,"author":{"gitId":"lohjooh"},"content":"        case \"clear\":","lastModifiedDate":"2023-02-28"},{"lineNumber":104,"author":{"gitId":"lohjooh"},"content":"            ignoreLine();","lastModifiedDate":"2023-02-28"},{"lineNumber":105,"author":{"gitId":"lohjooh"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":106,"author":{"gitId":"lohjooh"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-18"},{"lineNumber":107,"author":{"gitId":"lohjooh"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-18"},{"lineNumber":108,"author":{"gitId":"lohjooh"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-18"},{"lineNumber":109,"author":{"gitId":"lohjooh"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-18"},{"lineNumber":110,"author":{"gitId":"lohjooh"},"content":"        case \"event\":","lastModifiedDate":"2023-02-18"},{"lineNumber":111,"author":{"gitId":"lohjooh"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-18"},{"lineNumber":112,"author":{"gitId":"lohjooh"},"content":"        case \"find\":","lastModifiedDate":"2023-02-20"},{"lineNumber":113,"author":{"gitId":"lohjooh"},"content":"        case \"date\":","lastModifiedDate":"2023-02-19"},{"lineNumber":114,"author":{"gitId":"lohjooh"},"content":"            next \u003d in.nextLine();","lastModifiedDate":"2023-02-18"},{"lineNumber":115,"author":{"gitId":"lohjooh"},"content":"            break;","lastModifiedDate":"2023-02-18"},{"lineNumber":116,"author":{"gitId":"lohjooh"},"content":"        default:","lastModifiedDate":"2023-02-18"},{"lineNumber":117,"author":{"gitId":"lohjooh"},"content":"            ignoreLine();","lastModifiedDate":"2023-02-18"},{"lineNumber":118,"author":{"gitId":"lohjooh"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-18"},{"lineNumber":119,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":120,"author":{"gitId":"lohjooh"},"content":"        return next;","lastModifiedDate":"2023-02-18"},{"lineNumber":121,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":122,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":123,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":124,"author":{"gitId":"lohjooh"},"content":"     * Checks if the user input \u003ccode\u003eString\u003c/code\u003e can be converted into a \u003ccode\u003eLocalDate\u003c/code\u003e and returns the","lastModifiedDate":"2023-02-20"},{"lineNumber":125,"author":{"gitId":"lohjooh"},"content":"     * \u003ccode\u003eLocalDate\u003c/code\u003e after conversion.","lastModifiedDate":"2023-02-20"},{"lineNumber":126,"author":{"gitId":"lohjooh"},"content":"     * Returns \u003ccode\u003enull\u003c/code\u003e otherwise.","lastModifiedDate":"2023-02-20"},{"lineNumber":127,"author":{"gitId":"lohjooh"},"content":"     * Valid keywords such as \u003ccode\u003etomorrow\u003c/code\u003e can be converted into \u003ccode\u003eLocalDate\u003c/code\u003e as well.","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":129,"author":{"gitId":"lohjooh"},"content":"     * @param byDate The user input \u003ccode\u003eString\u003c/code\u003e to convert into \u003ccode\u003eLocalDate\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":130,"author":{"gitId":"lohjooh"},"content":"     * @return The converted user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":131,"author":{"gitId":"lohjooh"},"content":"     * @throws DukeException Throws exception for user inputs not able to be converted into \u003ccode\u003eLocalDate\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":132,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":133,"author":{"gitId":"lohjooh"},"content":"    public LocalDate processDate (String byDate) throws DukeException {","lastModifiedDate":"2023-02-19"},{"lineNumber":134,"author":{"gitId":"lohjooh"},"content":"        LocalDate localByDate \u003d LocalDate.now();","lastModifiedDate":"2023-02-19"},{"lineNumber":135,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":136,"author":{"gitId":"lohjooh"},"content":"            localByDate \u003d LocalDate.parse(byDate);","lastModifiedDate":"2023-02-19"},{"lineNumber":137,"author":{"gitId":"lohjooh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":138,"author":{"gitId":"lohjooh"},"content":"            String str \u003d byDate.toLowerCase().trim();","lastModifiedDate":"2023-02-19"},{"lineNumber":139,"author":{"gitId":"lohjooh"},"content":"            String[] temp \u003d str.split(\" \",3);","lastModifiedDate":"2023-02-19"},{"lineNumber":140,"author":{"gitId":"lohjooh"},"content":"            if (temp.length \u003d\u003d 3) {","lastModifiedDate":"2023-02-19"},{"lineNumber":141,"author":{"gitId":"lohjooh"},"content":"                return localByDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":142,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-19"},{"lineNumber":143,"author":{"gitId":"lohjooh"},"content":"            switch (temp[0].trim()){","lastModifiedDate":"2023-02-20"},{"lineNumber":144,"author":{"gitId":"lohjooh"},"content":"            case \"next\":","lastModifiedDate":"2023-02-19"},{"lineNumber":145,"author":{"gitId":"lohjooh"},"content":"                try {","lastModifiedDate":"2023-02-19"},{"lineNumber":146,"author":{"gitId":"lohjooh"},"content":"                    switch (temp[1].trim()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":147,"author":{"gitId":"lohjooh"},"content":"                    case \"day\":","lastModifiedDate":"2023-02-19"},{"lineNumber":148,"author":{"gitId":"lohjooh"},"content":"                        localByDate \u003d localByDate.plusDays(1);","lastModifiedDate":"2023-02-19"},{"lineNumber":149,"author":{"gitId":"lohjooh"},"content":"                        break;","lastModifiedDate":"2023-02-19"},{"lineNumber":150,"author":{"gitId":"lohjooh"},"content":"                    case \"week\":","lastModifiedDate":"2023-02-19"},{"lineNumber":151,"author":{"gitId":"lohjooh"},"content":"                        localByDate \u003d localByDate.plusWeeks(1);","lastModifiedDate":"2023-02-19"},{"lineNumber":152,"author":{"gitId":"lohjooh"},"content":"                        break;","lastModifiedDate":"2023-02-19"},{"lineNumber":153,"author":{"gitId":"lohjooh"},"content":"                    case \"month\":","lastModifiedDate":"2023-02-19"},{"lineNumber":154,"author":{"gitId":"lohjooh"},"content":"                        localByDate \u003d localByDate.plusMonths(1);","lastModifiedDate":"2023-02-19"},{"lineNumber":155,"author":{"gitId":"lohjooh"},"content":"                        break;","lastModifiedDate":"2023-02-19"},{"lineNumber":156,"author":{"gitId":"lohjooh"},"content":"                    case \"year\":","lastModifiedDate":"2023-02-19"},{"lineNumber":157,"author":{"gitId":"lohjooh"},"content":"                        localByDate \u003d localByDate.plusYears(1);","lastModifiedDate":"2023-02-19"},{"lineNumber":158,"author":{"gitId":"lohjooh"},"content":"                        break;","lastModifiedDate":"2023-02-19"},{"lineNumber":159,"author":{"gitId":"lohjooh"},"content":"                    case \"decade\":","lastModifiedDate":"2023-02-19"},{"lineNumber":160,"author":{"gitId":"lohjooh"},"content":"                        localByDate \u003d localByDate.plusYears(10);","lastModifiedDate":"2023-02-19"},{"lineNumber":161,"author":{"gitId":"lohjooh"},"content":"                        break;","lastModifiedDate":"2023-02-19"},{"lineNumber":162,"author":{"gitId":"lohjooh"},"content":"                    default:","lastModifiedDate":"2023-02-19"},{"lineNumber":163,"author":{"gitId":"lohjooh"},"content":"                        throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":164,"author":{"gitId":"lohjooh"},"content":"                    }","lastModifiedDate":"2023-02-19"},{"lineNumber":165,"author":{"gitId":"lohjooh"},"content":"                } catch (IndexOutOfBoundsException f) {","lastModifiedDate":"2023-02-19"},{"lineNumber":166,"author":{"gitId":"lohjooh"},"content":"                    throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":167,"author":{"gitId":"lohjooh"},"content":"                }","lastModifiedDate":"2023-02-19"},{"lineNumber":168,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-20"},{"lineNumber":169,"author":{"gitId":"lohjooh"},"content":"            case \"tomorrow\":","lastModifiedDate":"2023-02-19"},{"lineNumber":170,"author":{"gitId":"lohjooh"},"content":"                localByDate \u003d localByDate.plusDays(1);","lastModifiedDate":"2023-02-19"},{"lineNumber":171,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-19"},{"lineNumber":172,"author":{"gitId":"lohjooh"},"content":"            default:","lastModifiedDate":"2023-02-19"},{"lineNumber":173,"author":{"gitId":"lohjooh"},"content":"                try {","lastModifiedDate":"2023-02-19"},{"lineNumber":174,"author":{"gitId":"lohjooh"},"content":"                    convertNum(temp[0]);","lastModifiedDate":"2023-02-19"},{"lineNumber":175,"author":{"gitId":"lohjooh"},"content":"                } catch (DukeException f) {","lastModifiedDate":"2023-02-19"},{"lineNumber":176,"author":{"gitId":"lohjooh"},"content":"                    throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":177,"author":{"gitId":"lohjooh"},"content":"                }","lastModifiedDate":"2023-02-19"},{"lineNumber":178,"author":{"gitId":"lohjooh"},"content":"                try {","lastModifiedDate":"2023-02-19"},{"lineNumber":179,"author":{"gitId":"lohjooh"},"content":"                    switch (temp[1]) {","lastModifiedDate":"2023-02-19"},{"lineNumber":180,"author":{"gitId":"lohjooh"},"content":"                    case \"day\":","lastModifiedDate":"2023-02-19"},{"lineNumber":181,"author":{"gitId":"lohjooh"},"content":"                    case \"days\":","lastModifiedDate":"2023-02-19"},{"lineNumber":182,"author":{"gitId":"lohjooh"},"content":"                        localByDate \u003d localByDate.plusDays(num);","lastModifiedDate":"2023-02-19"},{"lineNumber":183,"author":{"gitId":"lohjooh"},"content":"                        break;","lastModifiedDate":"2023-02-19"},{"lineNumber":184,"author":{"gitId":"lohjooh"},"content":"                    case \"week\":","lastModifiedDate":"2023-02-19"},{"lineNumber":185,"author":{"gitId":"lohjooh"},"content":"                    case \"weeks\":","lastModifiedDate":"2023-02-19"},{"lineNumber":186,"author":{"gitId":"lohjooh"},"content":"                        localByDate \u003d localByDate.plusWeeks(num);","lastModifiedDate":"2023-02-19"},{"lineNumber":187,"author":{"gitId":"lohjooh"},"content":"                        break;","lastModifiedDate":"2023-02-19"},{"lineNumber":188,"author":{"gitId":"lohjooh"},"content":"                    case \"month\":","lastModifiedDate":"2023-02-19"},{"lineNumber":189,"author":{"gitId":"lohjooh"},"content":"                    case \"months\":","lastModifiedDate":"2023-02-19"},{"lineNumber":190,"author":{"gitId":"lohjooh"},"content":"                        localByDate \u003d localByDate.plusMonths(num);","lastModifiedDate":"2023-02-19"},{"lineNumber":191,"author":{"gitId":"lohjooh"},"content":"                        break;","lastModifiedDate":"2023-02-19"},{"lineNumber":192,"author":{"gitId":"lohjooh"},"content":"                    case \"year\":","lastModifiedDate":"2023-02-19"},{"lineNumber":193,"author":{"gitId":"lohjooh"},"content":"                    case \"years\":","lastModifiedDate":"2023-02-19"},{"lineNumber":194,"author":{"gitId":"lohjooh"},"content":"                        localByDate \u003d localByDate.plusYears(num);","lastModifiedDate":"2023-02-19"},{"lineNumber":195,"author":{"gitId":"lohjooh"},"content":"                        break;","lastModifiedDate":"2023-02-19"},{"lineNumber":196,"author":{"gitId":"lohjooh"},"content":"                    default:","lastModifiedDate":"2023-02-19"},{"lineNumber":197,"author":{"gitId":"lohjooh"},"content":"                        throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":198,"author":{"gitId":"lohjooh"},"content":"                    }","lastModifiedDate":"2023-02-19"},{"lineNumber":199,"author":{"gitId":"lohjooh"},"content":"                } catch (IndexOutOfBoundsException f) {","lastModifiedDate":"2023-02-19"},{"lineNumber":200,"author":{"gitId":"lohjooh"},"content":"                    throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":201,"author":{"gitId":"lohjooh"},"content":"                }","lastModifiedDate":"2023-02-19"},{"lineNumber":202,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-19"},{"lineNumber":203,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":204,"author":{"gitId":"lohjooh"},"content":"        return localByDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":205,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":206,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"lohjooh":206}},{"path":"src/main/duke/storage/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.storage;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"import duke.tasklist.DateData;","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"import duke.tasklist.FindData;","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":"import duke.tasklist.TaskData;","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":"import duke.util.DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"import java.io.File;","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":" * This class contains all the methods to read and write to the datafile stored locally for saving the list of task","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":" * objects such that the task objects are carried between each instance of running the application.","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"public class FileManager {","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"    private static final ArrayList\u003cString\u003e storedData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"     * Reads the datafile stored locally if it exists.","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"     * @param path The path to the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"     * @throws FileNotFoundException Throws an exception if the datafile does not exist in the \u003ccode\u003epath\u003c/code\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"     * specified.","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"    public static void readFile(String path) throws FileNotFoundException {","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"        File f \u003d new File(path);","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"            storedData.add(s.nextLine());","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"        s.close();","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"     * Converts the task objects passed through \u003ccode\u003etasks\u003c/code\u003e into a readable format and stores them into the","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"     * datafile at the \u003ccode\u003epath\u003c/code\u003e specified.","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"     * This completely overwrites all contents in the datafile previously stored.","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"     * @param path The path to the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"     * @param tasks The \u003ccode\u003eHashmap\u003c/code\u003e containing all the task objects to write to the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"     * @throws IOException Throws an exception if this function fails to write to the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"    public static void writeFile(String path, HashMap\u003cInteger, Task\u003e tasks) throws IOException {","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"        //Overwrites previous text in file","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"        FileWriter fw \u003d new FileWriter(path, false);","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"        for (Task i: tasks.values()) {","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"            String t \u003d i.checkType();","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"            char done \u003d i.checkDone().charAt(1);","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"            String w \u003d t.charAt(1) + \" % \" + done + \" % \" + i.getTask() + \"\\n\";","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"            fw.write(w);","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"lohjooh"},"content":"        fw.close();","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"lohjooh"},"content":"     * Converts a single task object into a readable format and stores it into the datafile at the \u003ccode\u003epath\u003c/code\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"lohjooh"},"content":"     * specified.","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"lohjooh"},"content":"     * This appends to the end of the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"lohjooh"},"content":"     * @param path The path to the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"lohjooh"},"content":"     * @param task The single task object to write to the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"lohjooh"},"content":"     * @throws IOException Throws an exception if this function fails to write to the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"lohjooh"},"content":"    public static void writeTask(String path, Task task) throws IOException {","lastModifiedDate":"2023-02-17"},{"lineNumber":78,"author":{"gitId":"lohjooh"},"content":"        FileWriter fw \u003d new FileWriter(path, true);","lastModifiedDate":"2023-02-17"},{"lineNumber":79,"author":{"gitId":"lohjooh"},"content":"        String t \u003d task.checkType();","lastModifiedDate":"2023-02-17"},{"lineNumber":80,"author":{"gitId":"lohjooh"},"content":"        char done \u003d task.checkDone().charAt(1);","lastModifiedDate":"2023-02-17"},{"lineNumber":81,"author":{"gitId":"lohjooh"},"content":"        String w \u003d t.charAt(1) + \" % \" + done + \" % \" + task.getTask() + \"\\n\";","lastModifiedDate":"2023-02-17"},{"lineNumber":82,"author":{"gitId":"lohjooh"},"content":"        fw.write(w);","lastModifiedDate":"2023-02-17"},{"lineNumber":83,"author":{"gitId":"lohjooh"},"content":"        fw.close();","lastModifiedDate":"2023-02-17"},{"lineNumber":84,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":85,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":86,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":87,"author":{"gitId":"lohjooh"},"content":"     * Creates an empty datafile at the \u003ccode\u003epath\u003c/code\u003e specified.","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"lohjooh"},"content":"     * @param path The path to create the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"lohjooh"},"content":"    public static void createFile(String path) {","lastModifiedDate":"2023-02-13"},{"lineNumber":92,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":93,"author":{"gitId":"lohjooh"},"content":"            Path dir \u003d Paths.get(\"data\");","lastModifiedDate":"2023-02-13"},{"lineNumber":94,"author":{"gitId":"lohjooh"},"content":"            Files.createDirectories(dir);","lastModifiedDate":"2023-02-13"},{"lineNumber":95,"author":{"gitId":"lohjooh"},"content":"            File newFile \u003d new File(path);","lastModifiedDate":"2023-02-13"},{"lineNumber":96,"author":{"gitId":"lohjooh"},"content":"            if (newFile.createNewFile()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":97,"author":{"gitId":"lohjooh"},"content":"                System.out.println(\"File created\");","lastModifiedDate":"2023-02-28"},{"lineNumber":98,"author":{"gitId":"lohjooh"},"content":"            } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":99,"author":{"gitId":"lohjooh"},"content":"                System.out.println(\"File already exists\");","lastModifiedDate":"2023-02-28"},{"lineNumber":100,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":101,"author":{"gitId":"lohjooh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":102,"author":{"gitId":"lohjooh"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-13"},{"lineNumber":103,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":104,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":105,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":106,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":107,"author":{"gitId":"lohjooh"},"content":"     * Decodes the datafile such and converts them into an application readable format to pass to the \u003ccode\u003etasks\u003c/code\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":108,"author":{"gitId":"lohjooh"},"content":"     * object, \u003ccode\u003edates\u003c/code\u003e object, \u003ccode\u003efind\u003c/code\u003e object such that the previously stored task objects are","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"lohjooh"},"content":"     * stored in the current instance of the application.","lastModifiedDate":"2023-02-20"},{"lineNumber":110,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"lohjooh"},"content":"     * @param tasks The object containing all the task objects in the application.","lastModifiedDate":"2023-02-28"},{"lineNumber":112,"author":{"gitId":"lohjooh"},"content":"     * @param dates The object with the functionality related to \u003ccode\u003eLocalDate\u003c/code\u003e and \u003ccode\u003edate\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":113,"author":{"gitId":"lohjooh"},"content":"     * @param find The object with the functionality related to \u003ccode\u003efind\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":114,"author":{"gitId":"lohjooh"},"content":"     * @throws DukeException Throws an exception if the datafile finds an invalid format in the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":115,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":116,"author":{"gitId":"lohjooh"},"content":"    public static void handleFile(TaskData tasks, DateData dates, FindData find) throws DukeException {","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"lohjooh"},"content":"        for (String str: storedData) {","lastModifiedDate":"2023-02-13"},{"lineNumber":118,"author":{"gitId":"lohjooh"},"content":"            String[] temp \u003d str.split(\"%\",5);","lastModifiedDate":"2023-02-13"},{"lineNumber":119,"author":{"gitId":"lohjooh"},"content":"            switch (temp[0].trim()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":120,"author":{"gitId":"lohjooh"},"content":"            case (\"T\"):","lastModifiedDate":"2023-02-13"},{"lineNumber":121,"author":{"gitId":"lohjooh"},"content":"                ToDo todo \u003d tasks.handleTodo(temp[2].trim(), false);","lastModifiedDate":"2023-02-20"},{"lineNumber":122,"author":{"gitId":"lohjooh"},"content":"                if (temp[1].trim().equals(\"X\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":123,"author":{"gitId":"lohjooh"},"content":"                    tasks.handleMark(\"task\", temp[2].trim(), false);","lastModifiedDate":"2023-02-19"},{"lineNumber":124,"author":{"gitId":"lohjooh"},"content":"                }","lastModifiedDate":"2023-02-13"},{"lineNumber":125,"author":{"gitId":"lohjooh"},"content":"                find.addTask(todo, tasks.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":126,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":127,"author":{"gitId":"lohjooh"},"content":"            case (\"D\"):","lastModifiedDate":"2023-02-13"},{"lineNumber":128,"author":{"gitId":"lohjooh"},"content":"                try {","lastModifiedDate":"2023-02-13"},{"lineNumber":129,"author":{"gitId":"lohjooh"},"content":"                    Deadline deadline \u003d tasks.handleDeadline(temp[2].trim()","lastModifiedDate":"2023-02-20"},{"lineNumber":130,"author":{"gitId":"lohjooh"},"content":"                            + \"/by\" + temp[3], false);","lastModifiedDate":"2023-02-20"},{"lineNumber":131,"author":{"gitId":"lohjooh"},"content":"                    if (temp[1].trim().equals(\"X\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":132,"author":{"gitId":"lohjooh"},"content":"                        tasks.handleMark(\"task\", temp[2].trim(), false);","lastModifiedDate":"2023-02-19"},{"lineNumber":133,"author":{"gitId":"lohjooh"},"content":"                    }","lastModifiedDate":"2023-02-13"},{"lineNumber":134,"author":{"gitId":"lohjooh"},"content":"                    dates.addDeadline(deadline, tasks.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":135,"author":{"gitId":"lohjooh"},"content":"                    find.addTask(deadline, tasks.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":136,"author":{"gitId":"lohjooh"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":137,"author":{"gitId":"lohjooh"},"content":"                    throw new DukeException();","lastModifiedDate":"2023-02-13"},{"lineNumber":138,"author":{"gitId":"lohjooh"},"content":"                }","lastModifiedDate":"2023-02-13"},{"lineNumber":139,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":140,"author":{"gitId":"lohjooh"},"content":"            case (\"E\"):","lastModifiedDate":"2023-02-13"},{"lineNumber":141,"author":{"gitId":"lohjooh"},"content":"                try {","lastModifiedDate":"2023-02-13"},{"lineNumber":142,"author":{"gitId":"lohjooh"},"content":"                    Event event \u003d tasks.handleEvent(temp[2].trim() + \"/from\"","lastModifiedDate":"2023-02-20"},{"lineNumber":143,"author":{"gitId":"lohjooh"},"content":"                            + temp[3] + \"/to\" + temp[4], false);","lastModifiedDate":"2023-02-20"},{"lineNumber":144,"author":{"gitId":"lohjooh"},"content":"                    if (temp[1].trim().equals(\"X\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":145,"author":{"gitId":"lohjooh"},"content":"                        tasks.handleMark(\"task\", temp[2].trim(), false);","lastModifiedDate":"2023-02-19"},{"lineNumber":146,"author":{"gitId":"lohjooh"},"content":"                    }","lastModifiedDate":"2023-02-13"},{"lineNumber":147,"author":{"gitId":"lohjooh"},"content":"                    dates.addEvent(event, tasks.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":148,"author":{"gitId":"lohjooh"},"content":"                    find.addTask(event, tasks.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":149,"author":{"gitId":"lohjooh"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":150,"author":{"gitId":"lohjooh"},"content":"                    throw new DukeException();","lastModifiedDate":"2023-02-13"},{"lineNumber":151,"author":{"gitId":"lohjooh"},"content":"                }","lastModifiedDate":"2023-02-13"},{"lineNumber":152,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":153,"author":{"gitId":"lohjooh"},"content":"            default:","lastModifiedDate":"2023-02-28"},{"lineNumber":154,"author":{"gitId":"lohjooh"},"content":"                throw new DukeException();","lastModifiedDate":"2023-02-28"},{"lineNumber":155,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":156,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":157,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":158,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"lohjooh":158}},{"path":"src/main/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.task;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":" * This object represents a task object of deadline type. A deadline type task object contains a non-\u003ccode\u003enull\u003c/code\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":" * \u003ccode\u003ebyDate\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":" * If \u003ccode\u003ebyDate\u003c/code\u003e is in the format of \u003ccode\u003eLocalDate\u003c/code\u003e, \u003ccode\u003elocalByDate\u003c/code\u003e would be","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":" * non-\u003ccode\u003enull\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"    protected String byDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"     * Initializes a task object of type event.","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"     * Sets the task object\u0027s type to D.","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":"     * @param task The contents of the task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":"     * @param isDone The initialize status marked/unmarked of the task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"     * @param localByDate The \u003ccode\u003ebyDate\u003c/code\u003e in \u003ccode\u003eLocalDate\u003c/code\u003e format given that it is entered in an","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"     * eligible format.","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":"    public Deadline(String task, boolean isDone, String byDate, LocalDate localByDate) {","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"        super(task, isDone);","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"        this.type \u003d \"D\";","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"        this.byDate \u003d byDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"        this.localByDate \u003d localByDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"     * Override the template task getTask with additional attribute \u003ccode\u003ebyDate\u003c/code\u003e and prepares it for","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"     * storage in datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"     * @return Returns all attributes of the task object demarcated with \u003ccode\u003e%\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"    public String getTask() {","lastModifiedDate":"2023-02-09"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"        return super.getTask() + \" % \" + byDate;","lastModifiedDate":"2023-02-09"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"     * Overrides the template task toString with additional attribute \u003ccode\u003ebyDate\u003c/code\u003e and returns it as a","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"     * \u003ccode\u003eString\u003c/code\u003e representation of the task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"     * \u003ccode\u003ebyDate\u003c/code\u003e is instead returned as \u003ccode\u003eLocalDate\u003c/code\u003e if the format is eligible.","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"     * @return Return the task object\u0027s \u003ccode\u003eString\u003c/code\u003e representation with all its attributes.","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"        if (localByDate \u003d\u003d null) {","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"            return super.toString() + \" (by: \" + byDate + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"        return super.toString() + \" (by: \" + localByDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"lohjooh":56}},{"path":"src/main/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.task;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":" * This object represents a task object of deadline type. A deadline type task object contains a non-\u003ccode\u003enull\u003c/code\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":" * \u003ccode\u003ebyDate\u003c/code\u003e and \u003ccode\u003efromDate\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":" * If \u003ccode\u003ebyDate\u003c/code\u003e and \u003ccode\u003efromDate\u003c/code\u003e\u003c/code\u003e is in the format of","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":" * \u003ccode\u003eLocalDate\u003c/code\u003e, \u003ccode\u003elocalByDate\u003c/code\u003e and \u003ccode\u003elocalFromDate\u003c/code\u003e would be non-\u003ccode\u003enull\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"    protected String byDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"    protected String fromDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"     * Initializes a task object of type event.","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"     * Sets the task object\u0027s type to E.","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":"     * @param task The contents of the task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"     * @param isDone The initialize status marked/unmarked of the task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"     * @param fromDate The \u003ccode\u003efromDate\u003c/code\u003e in \u003ccode\u003eString\u003c/code\u003e format.","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"     * @param toDate The \u003ccode\u003ebyDate\u003c/code\u003e in \u003ccode\u003eString\u003c/code\u003e format.","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":"     * @param localByDate The \u003ccode\u003ebyDate\u003c/code\u003e in \u003ccode\u003eLocalDate\u003c/code\u003e format given that it is entered in an","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"     * eligible format.","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"     * @param localFromDate The \u003ccode\u003efromDate\u003c/code\u003e in \u003ccode\u003eLocalDate\u003c/code\u003e format given that it is entered in an","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"     * eligible format.","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"    public Event(String task, boolean isDone, String fromDate, String toDate, LocalDate localByDate","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"            , LocalDate localFromDate) {","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"        super(task, isDone);","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"        this.type \u003d \"E\";","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"        this.byDate \u003d toDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"        this.localByDate \u003d localByDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"        this.localFromDate \u003d localFromDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"     * Override the template task getTask with additional attribute \u003ccode\u003ebyDate\u003c/code\u003e and \u003ccode\u003efromDate\u003c/code\u003e and","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"     * prepares it for storage in datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"     * @return Returns all attributes of the task object demarcated with \u003ccode\u003e%\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"    public String getTask() {","lastModifiedDate":"2023-02-09"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"        return super.getTask() + \" % \" + fromDate + \" % \" + byDate;","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"    public LocalDate getLocalByDate() {","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"        return localByDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"    public LocalDate getLocalFromDate() {","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"        return localFromDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"     * Overrides the template task toString with additional attribute \u003ccode\u003ebyDate\u003c/code\u003e and \u003ccode\u003efromDate\u003c/code\u003e and","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"     * returns it as \u003ccode\u003eString\u003c/code\u003e representation of the task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"     * \u003ccode\u003ebyDate\u003c/code\u003e and \u003ccode\u003efromDate\u003c/code\u003e is instead returned as \u003ccode\u003eLocalDate\u003c/code\u003e if the format","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"     * is eligible.","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lohjooh"},"content":"     * @return Return the task object\u0027s \u003ccode\u003eString\u003c/code\u003e representation with all its attributes.","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"lohjooh"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"lohjooh"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"lohjooh"},"content":"        if (localFromDate \u003d\u003d null \u0026\u0026 localByDate \u003d\u003d null) {","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"lohjooh"},"content":"            return super.toString() + \" (from: \" + fromDate + \" to: \" + byDate + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"lohjooh"},"content":"        } else if (localFromDate \u003d\u003d null) {","lastModifiedDate":"2023-02-19"},{"lineNumber":71,"author":{"gitId":"lohjooh"},"content":"            return super.toString() + \" (from: \" + fromDate","lastModifiedDate":"2023-02-19"},{"lineNumber":72,"author":{"gitId":"lohjooh"},"content":"                    + \" to: \" + localByDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-02-19"},{"lineNumber":73,"author":{"gitId":"lohjooh"},"content":"        } else if (localByDate \u003d\u003d null) {","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"lohjooh"},"content":"            return super.toString() + \" (from: \" + localFromDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2023-02-19"},{"lineNumber":75,"author":{"gitId":"lohjooh"},"content":"                    + \" to: \" + byDate + \")\";","lastModifiedDate":"2023-02-19"},{"lineNumber":76,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"lohjooh"},"content":"        return super.toString() + \" (from: \" + localFromDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2023-02-28"},{"lineNumber":78,"author":{"gitId":"lohjooh"},"content":"                + \" to: \" + localByDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-02-28"},{"lineNumber":79,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":80,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"lohjooh":80}},{"path":"src/main/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.task;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":" * Template for a task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"public class Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":"    protected String task;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":"    protected String type;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"    protected LocalDate localByDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"    protected LocalDate localFromDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"    public String getTask() {","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"        return task;","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":"    public void setTask(String task) {","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"    public LocalDate getLocalByDate() {","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":"        return localByDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"    public LocalDate getLocalFromDate() {","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"        return localFromDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"     * Returns a string representation of marked/unmarked for a task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"     * @return \u003ccode\u003e[ ]\u003c/code\u003e if unmarked and \u003ccode\u003e[X]\u003c/code\u003e if marked.","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"    public String checkDone() {","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"            return \"[X]\";","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"        return \"[ ]\";","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"     * Returns a string representation of type for a task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"     * @return \u003ccode\u003e[ \"type\" ]\u003c/code\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"    public String checkType() {","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"        if (type !\u003d null) {","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"            return \"[\" + type + \"]\";","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"        return \"[ ]\";","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"     * Template for a task object with all of its parameters initialized.","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"     * @param task Contains the task contents.","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"     * @param isDone Contains the task status marked/unmarked.","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lohjooh"},"content":"    public Task(String task, boolean isDone) {","lastModifiedDate":"2023-02-09"},{"lineNumber":66,"author":{"gitId":"lohjooh"},"content":"        setTask(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"lohjooh"},"content":"        setDone(isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"lohjooh"},"content":"        localByDate \u003d null;","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"lohjooh"},"content":"        localFromDate \u003d null;","lastModifiedDate":"2023-02-19"},{"lineNumber":70,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"lohjooh"},"content":"     * Returns a \u003ccode\u003eString\u003c/code\u003e representation of this task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"lohjooh"},"content":"     * @return Returns the task object as a \u003ccode\u003eString\u003c/code\u003e in the form \u003ccode\u003e\"  \" + type + isDone()","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"lohjooh"},"content":"     * + \" \" + task\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"lohjooh"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"lohjooh"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"lohjooh"},"content":"        String [] temp \u003d this.getTask().split(\"%\", 2);","lastModifiedDate":"2023-02-09"},{"lineNumber":81,"author":{"gitId":"lohjooh"},"content":"        if (temp.length \u003d\u003d 2) {","lastModifiedDate":"2023-02-09"},{"lineNumber":82,"author":{"gitId":"lohjooh"},"content":"            return \"  \" + this.checkType() + this.checkDone() + \" \" + temp[0].trim();","lastModifiedDate":"2023-02-12"},{"lineNumber":83,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":84,"author":{"gitId":"lohjooh"},"content":"        return \"  \" + this.checkType() + this.checkDone() + \" \" + getTask();","lastModifiedDate":"2023-02-09"},{"lineNumber":85,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"lohjooh"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"lohjooh"},"content":"        return this.isDone;","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":90,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"lohjooh":90}},{"path":"src/main/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package  duke.task;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"     * Initializes a task object of type todo.","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"     * Sets the task object\u0027s type to T.","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"     * @param task The contents of the task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":"     * @param isDone The initialize status marked/unmarked of the task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":"    public ToDo(String task, boolean isDone) {","lastModifiedDate":"2023-02-09"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"        super(task, isDone);","lastModifiedDate":"2023-02-09"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"        this.type \u003d \"T\";","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"lohjooh":15}},{"path":"src/main/duke/tasklist/DataManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.tasklist;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"import duke.storage.FileManager;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"import duke.util.DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":"import duke.ui.DukeMessages;","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"import java.util.LinkedHashSet;","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":" * Manages all functions of the application.","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":" * Calls the function concerned depending on user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":" * Calls the functions to modify all the data in the application.","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":" * Contains all the data for the application.","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"public class DataManager {","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"    private DateData dates;","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":"    private final DukeMessages ui;","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"    private FindData find;","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"    private final Parser parser;","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"    protected String path;","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"    private TaskData tasks;","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"     * Initializes all the data in the application.","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"     * @param path Path to datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"     * @param ui Text UI for the application.","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"     * @param parser User input parser which processes user input into application readable code.","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"    public DataManager(String path, DukeMessages ui, Parser parser) {","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"        this.dates \u003d new DateData();","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"        this.find \u003d new FindData();","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"        this.parser \u003d parser;","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"        this.path \u003d path;","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"        this.tasks \u003d new TaskData(ui, parser, path);","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"     * Deletes all the tasks recorded in this application and clears all entries in the datafile","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"    public void clearAll() {","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"        this.dates \u003d new DateData();","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"        this.find \u003d new FindData();","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"        this.tasks \u003d new TaskData(ui, parser, path);","lastModifiedDate":"2023-02-28"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"        tasks.rewriteFile(path);","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"        ui.printClear();","lastModifiedDate":"2023-02-28"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"     * Calls the functions concerned for each data types depending on the parsed user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"     * Error message printed if command is invalid.","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"     * Data saved locally in datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"     * @param parsedCommand The user input parsed by the \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"     * @param next The user input after the command keyword.","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lohjooh"},"content":"    public void command(String parsedCommand, String next) {","lastModifiedDate":"2023-02-19"},{"lineNumber":66,"author":{"gitId":"lohjooh"},"content":"        boolean isFromCommand \u003d true;","lastModifiedDate":"2023-02-17"},{"lineNumber":67,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"lohjooh"},"content":"            switch (parsedCommand) {","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"lohjooh"},"content":"            case \"list\":","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"lohjooh"},"content":"                tasks.listOut();","lastModifiedDate":"2023-02-19"},{"lineNumber":71,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":72,"author":{"gitId":"lohjooh"},"content":"            case \"mark\":","lastModifiedDate":"2023-02-13"},{"lineNumber":73,"author":{"gitId":"lohjooh"},"content":"                tasks.handleMark(parsedCommand, next, isFromCommand);","lastModifiedDate":"2023-02-19"},{"lineNumber":74,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":75,"author":{"gitId":"lohjooh"},"content":"            case \"unmark\":","lastModifiedDate":"2023-02-13"},{"lineNumber":76,"author":{"gitId":"lohjooh"},"content":"                tasks.handleUnmark(parsedCommand, next, isFromCommand);","lastModifiedDate":"2023-02-19"},{"lineNumber":77,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":78,"author":{"gitId":"lohjooh"},"content":"            case \"todo\":","lastModifiedDate":"2023-02-13"},{"lineNumber":79,"author":{"gitId":"lohjooh"},"content":"                ToDo todo \u003d tasks.handleTodo(next, isFromCommand);","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"lohjooh"},"content":"                find.addTask(todo, tasks.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":82,"author":{"gitId":"lohjooh"},"content":"            case \"deadline\":","lastModifiedDate":"2023-02-13"},{"lineNumber":83,"author":{"gitId":"lohjooh"},"content":"                Deadline deadline \u003d tasks.handleDeadline(next, isFromCommand);","lastModifiedDate":"2023-02-19"},{"lineNumber":84,"author":{"gitId":"lohjooh"},"content":"                dates.addDeadline(deadline, tasks.getTaskCount());","lastModifiedDate":"2023-02-19"},{"lineNumber":85,"author":{"gitId":"lohjooh"},"content":"                find.addTask(deadline, tasks.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":87,"author":{"gitId":"lohjooh"},"content":"            case \"event\":","lastModifiedDate":"2023-02-13"},{"lineNumber":88,"author":{"gitId":"lohjooh"},"content":"                Event event \u003d tasks.handleEvent(next, isFromCommand);","lastModifiedDate":"2023-02-19"},{"lineNumber":89,"author":{"gitId":"lohjooh"},"content":"                dates.addEvent(event, tasks.getTaskCount());","lastModifiedDate":"2023-02-19"},{"lineNumber":90,"author":{"gitId":"lohjooh"},"content":"                find.addTask(event, tasks.getTaskCount());","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":92,"author":{"gitId":"lohjooh"},"content":"            case \"delete\":","lastModifiedDate":"2023-02-13"},{"lineNumber":93,"author":{"gitId":"lohjooh"},"content":"                tasks.handleDelete(next, isFromCommand);","lastModifiedDate":"2023-02-19"},{"lineNumber":94,"author":{"gitId":"lohjooh"},"content":"                dates.handleDelete(parser.getNum());","lastModifiedDate":"2023-02-19"},{"lineNumber":95,"author":{"gitId":"lohjooh"},"content":"                find.handleDelete(parser.getNum());","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":97,"author":{"gitId":"lohjooh"},"content":"            case \"date\":","lastModifiedDate":"2023-02-19"},{"lineNumber":98,"author":{"gitId":"lohjooh"},"content":"                LocalDate date \u003d parser.processDate(next.trim());","lastModifiedDate":"2023-02-28"},{"lineNumber":99,"author":{"gitId":"lohjooh"},"content":"                LinkedHashSet\u003cInteger\u003e list \u003d dates.findDate(date);","lastModifiedDate":"2023-02-19"},{"lineNumber":100,"author":{"gitId":"lohjooh"},"content":"                tasks.printFromList(list);","lastModifiedDate":"2023-02-19"},{"lineNumber":101,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-13"},{"lineNumber":102,"author":{"gitId":"lohjooh"},"content":"            case \"find\":","lastModifiedDate":"2023-02-20"},{"lineNumber":103,"author":{"gitId":"lohjooh"},"content":"                list \u003d find.findKeyword(next);","lastModifiedDate":"2023-02-20"},{"lineNumber":104,"author":{"gitId":"lohjooh"},"content":"                tasks.printFromList(list);","lastModifiedDate":"2023-02-20"},{"lineNumber":105,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-20"},{"lineNumber":106,"author":{"gitId":"lohjooh"},"content":"            case \"clear\":","lastModifiedDate":"2023-02-28"},{"lineNumber":107,"author":{"gitId":"lohjooh"},"content":"                clearAll();","lastModifiedDate":"2023-02-28"},{"lineNumber":108,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-28"},{"lineNumber":109,"author":{"gitId":"lohjooh"},"content":"            default:","lastModifiedDate":"2023-02-28"},{"lineNumber":110,"author":{"gitId":"lohjooh"},"content":"                ui.printError();","lastModifiedDate":"2023-02-28"},{"lineNumber":111,"author":{"gitId":"lohjooh"},"content":"                break;","lastModifiedDate":"2023-02-28"},{"lineNumber":112,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":113,"author":{"gitId":"lohjooh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":114,"author":{"gitId":"lohjooh"},"content":"            ui.printError();","lastModifiedDate":"2023-02-19"},{"lineNumber":115,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":116,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":117,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":118,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":119,"author":{"gitId":"lohjooh"},"content":"     * Reads the local datafile and writes to all the data types involved.","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":121,"author":{"gitId":"lohjooh"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-28"},{"lineNumber":122,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":123,"author":{"gitId":"lohjooh"},"content":"            FileManager.readFile(path);","lastModifiedDate":"2023-02-13"},{"lineNumber":124,"author":{"gitId":"lohjooh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":125,"author":{"gitId":"lohjooh"},"content":"            ui.printFileNotFoundError();","lastModifiedDate":"2023-02-18"},{"lineNumber":126,"author":{"gitId":"lohjooh"},"content":"            FileManager.createFile(path);","lastModifiedDate":"2023-02-13"},{"lineNumber":127,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":128,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":129,"author":{"gitId":"lohjooh"},"content":"            FileManager.handleFile(this.tasks, this.dates, this.find);","lastModifiedDate":"2023-02-20"},{"lineNumber":130,"author":{"gitId":"lohjooh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":131,"author":{"gitId":"lohjooh"},"content":"            ui.printDiv();","lastModifiedDate":"2023-02-28"},{"lineNumber":132,"author":{"gitId":"lohjooh"},"content":"            ui.printReadFileError();","lastModifiedDate":"2023-02-18"},{"lineNumber":133,"author":{"gitId":"lohjooh"},"content":"            clearAll();","lastModifiedDate":"2023-02-28"},{"lineNumber":134,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":135,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":136,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":137,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":138,"author":{"gitId":"lohjooh"},"content":"     * Prints all starting messages.","lastModifiedDate":"2023-02-20"},{"lineNumber":139,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":140,"author":{"gitId":"lohjooh"},"content":"    public void run() {","lastModifiedDate":"2023-02-18"},{"lineNumber":141,"author":{"gitId":"lohjooh"},"content":"        ui.printDiv();","lastModifiedDate":"2023-02-18"},{"lineNumber":142,"author":{"gitId":"lohjooh"},"content":"        ui.printHi();","lastModifiedDate":"2023-02-18"},{"lineNumber":143,"author":{"gitId":"lohjooh"},"content":"        ui.printQuery();","lastModifiedDate":"2023-02-18"},{"lineNumber":144,"author":{"gitId":"lohjooh"},"content":"        ui.printDiv();","lastModifiedDate":"2023-02-18"},{"lineNumber":145,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":146,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"lohjooh":146}},{"path":"src/main/duke/tasklist/DateData.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.tasklist;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"import java.util.LinkedHashSet;","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":" * Represents all data to enable functions relating to \u003ccode\u003eLocalDate\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"public class DateData {","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"    private final HashMap\u003cLocalDate, LinkedHashSet\u003cInteger\u003e\u003e dateTable;","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"     * Initialize data for \u003ccode\u003eLocalDate\u003c/code\u003e functions.","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":"    public DateData() {","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"        this.dateTable \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"     * Function to add a \u003ccode\u003eDeadline\u003c/code\u003e into this object.","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"     * Checks if user input for \u003ccode\u003e/by\u003c/code\u003e can be converted into \u003ccode\u003eLocalDate\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"     * @param deadline The task object involved.","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"     * @param taskCount The number id for the task object in \u003ccode\u003eTaskData\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"    public void addDeadline (Deadline deadline, int taskCount) {","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"        LocalDate date \u003d deadline.getLocalByDate();","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"        if (dateTable.get(date) \u003d\u003d null) {","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"            LinkedHashSet\u003cInteger\u003e temp \u003d new LinkedHashSet\u003c\u003e();","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"            temp.add(taskCount);","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"            dateTable.put(date, temp);","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"        } else {","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"            dateTable.get(date).add(taskCount);","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"     * Function to add an \u003ccode\u003eEvent\u003c/code\u003e into this object.","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"     * Checks if user input for \u003ccode\u003e/from\u003c/code\u003e and \u003ccode\u003e/to\u003c/code\u003e can be converted into \u003ccode\u003eLocalDate\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"     * @param event The task object involved.","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"     * @param taskCount The number id for the task object in \u003ccode\u003eTaskData\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"    public void addEvent (Event event, int taskCount) {","lastModifiedDate":"2023-02-19"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"        LocalDate byDate \u003d event.getLocalByDate();","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"        LocalDate fromDate \u003d event.getLocalFromDate();","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"        if (dateTable.get(byDate) \u003d\u003d null) {","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"            LinkedHashSet\u003cInteger\u003e temp \u003d new LinkedHashSet\u003c\u003e();","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"            temp.add(taskCount);","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"            dateTable.put(byDate, temp);","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"        } else {","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"            dateTable.get(byDate).add(taskCount);","lastModifiedDate":"2023-02-19"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"        if (dateTable.get(fromDate) \u003d\u003d null) {","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"            LinkedHashSet\u003cInteger\u003e temp \u003d new LinkedHashSet\u003c\u003e();","lastModifiedDate":"2023-02-19"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"            temp.add(taskCount);","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"            dateTable.put(fromDate, temp);","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"        } else {","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"lohjooh"},"content":"            dateTable.get(fromDate).add(taskCount);","lastModifiedDate":"2023-02-19"},{"lineNumber":65,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":66,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":67,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"lohjooh"},"content":"     * Deletes the task object involved when \u003ccode\u003edelete\u003c/code\u003e is called.","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"lohjooh"},"content":"     * Shifts all the entries such that the number id of each task object is in line with their number id inside","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"lohjooh"},"content":"     * \u003ccode\u003eTaskData\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"lohjooh"},"content":"     * @param deletedIndex The number id of the task object deleted.","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"lohjooh"},"content":"    public void handleDelete (int deletedIndex) {","lastModifiedDate":"2023-02-19"},{"lineNumber":76,"author":{"gitId":"lohjooh"},"content":"        for (LocalDate i : dateTable.keySet()) {","lastModifiedDate":"2023-02-19"},{"lineNumber":77,"author":{"gitId":"lohjooh"},"content":"            dateTable.get(i).remove(deletedIndex);","lastModifiedDate":"2023-02-19"},{"lineNumber":78,"author":{"gitId":"lohjooh"},"content":"            for (int j : dateTable.get(i)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":79,"author":{"gitId":"lohjooh"},"content":"                if (j \u003e deletedIndex) {","lastModifiedDate":"2023-02-19"},{"lineNumber":80,"author":{"gitId":"lohjooh"},"content":"                    dateTable.get(i).remove(j);","lastModifiedDate":"2023-02-19"},{"lineNumber":81,"author":{"gitId":"lohjooh"},"content":"                    dateTable.get(i).add(j - 1);","lastModifiedDate":"2023-02-28"},{"lineNumber":82,"author":{"gitId":"lohjooh"},"content":"                }","lastModifiedDate":"2023-02-19"},{"lineNumber":83,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-19"},{"lineNumber":84,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":85,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":86,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":87,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"lohjooh"},"content":"     * Finds all the task objects with the same date as the user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"lohjooh"},"content":"     * @param date The user input date.","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"lohjooh"},"content":"     * @return Returns a \u003ccode\u003eLinkedHashSet\u003c/code\u003e of all the number id of the task objects involved.","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"lohjooh"},"content":"     * Returns an empty \u003ccode\u003eLinkedHashSet\u003c/code\u003e if no matching task objects.","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"lohjooh"},"content":"    public LinkedHashSet\u003cInteger\u003e findDate (LocalDate date) {","lastModifiedDate":"2023-02-19"},{"lineNumber":95,"author":{"gitId":"lohjooh"},"content":"        if (dateTable.get(date) \u003d\u003d null) {","lastModifiedDate":"2023-02-19"},{"lineNumber":96,"author":{"gitId":"lohjooh"},"content":"            return new LinkedHashSet\u003c\u003e();","lastModifiedDate":"2023-02-19"},{"lineNumber":97,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":98,"author":{"gitId":"lohjooh"},"content":"        return dateTable.get(date);","lastModifiedDate":"2023-02-19"},{"lineNumber":99,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":100,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"lohjooh":100}},{"path":"src/main/duke/tasklist/FindData.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.tasklist;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"import java.util.LinkedHashSet;","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":" * Represents all data required for \u003ccode\u003efind\u003c/code\u003e function.","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":"public class FindData {","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"    private final HashMap\u003cString, LinkedHashSet\u003cInteger\u003e\u003e findTable;","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"     * Initializes data for \u003ccode\u003efind\u003c/code\u003e functions.","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"    public FindData() {","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"        this.findTable \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"     * Function to add a task object into this object.","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"     * Adds individual strings separated by whitespace \u003ccode\u003e\" \"\u003c/code\u003e as individual keywords.","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"     * @param task The task object involved.","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"     * @param index The number id of the task object involved.","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"    public void addTask(Task task, int index) {","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"        String[] split \u003d task.getTask().split(\"%\");","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"        String name \u003d split[0];","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"        String[] keywords \u003d name.split(\" \");","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"        String extraKeyWord \u003d \"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"        for (String str : keywords) {","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"            if (findTable.get(str) \u003d\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"                LinkedHashSet\u003cInteger\u003e temp \u003d new LinkedHashSet\u003c\u003e();","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"                temp.add(index);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"                findTable.put(str, temp);","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"            } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"                findTable.get(str).add(index);","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"            extraKeyWord \u003d extraKeyWord.concat(str + \" \");","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"            if (findTable.get(extraKeyWord.trim()) \u003d\u003d null) {","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"                LinkedHashSet\u003cInteger\u003e temp \u003d new LinkedHashSet\u003c\u003e();","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"                temp.add(index);","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"                findTable.put(extraKeyWord.trim(), temp);","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"            } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"                findTable.get(extraKeyWord.trim()).add(index);","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"     * Deletes the task object involved when \u003ccode\u003edelete\u003c/code\u003e is called.","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"     * Shifts all the entries such that the number id of each task object is in line with their number id inside","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"     * \u003ccode\u003eTaskData\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"     * @param deletedIndex The number id of the task object deleted.","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"    public void handleDelete (int deletedIndex) {","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"        for (String str: findTable.keySet()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"            findTable.get(str).remove(deletedIndex);","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"            for (int i : findTable.get(str)) {","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"                if (i \u003e deletedIndex) {","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lohjooh"},"content":"                    findTable.get(str).remove(i);","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lohjooh"},"content":"                    findTable.get(str).add(i - 1);","lastModifiedDate":"2023-02-28"},{"lineNumber":66,"author":{"gitId":"lohjooh"},"content":"                }","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"lohjooh"},"content":"     * Finds all the task objects with the same keyword as the user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"lohjooh"},"content":"     * @param keyword The user input keyword.","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"lohjooh"},"content":"     * @return Returns a \u003ccode\u003eLinkedHashSet\u003c/code\u003e of all the number id of the task objects involved.","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"lohjooh"},"content":"     * Returns an empty \u003ccode\u003eLinkedHashSet\u003c/code\u003e if no matching task objects.","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"lohjooh"},"content":"    public LinkedHashSet\u003cInteger\u003e findKeyword(String keyword) {","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"lohjooh"},"content":"        if (findTable.get(keyword.trim()) \u003d\u003d null) {","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"lohjooh"},"content":"            return new LinkedHashSet\u003c\u003e();","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"lohjooh"},"content":"        } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"lohjooh"},"content":"            return findTable.get(keyword.trim());","lastModifiedDate":"2023-02-20"},{"lineNumber":83,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"lohjooh":85}},{"path":"src/main/duke/tasklist/TaskData.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.tasklist;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"import duke.storage.FileManager;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":"import duke.ui.DukeMessages;","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":"import duke.util.DukeException;","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"import java.util.LinkedHashSet;","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":" * Represents all the data in the application.","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":" * Works with all the functions including \u003ccode\u003efind\u003c/code\u003e and \u003ccode\u003edate\u003c/code\u003e as those functions only calls a","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":" * reference number id which is within this object.","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":" * All tasks have a number id depending on the order of insertion.","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":" * Call messages from text UI depending on function.","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"public class TaskData {","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"    private final HashMap\u003cInteger, Task\u003e tasks;","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"    private final DukeMessages ui;","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"    private final Parser parser;","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"    private final String path;","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"    private int taskCount \u003d 0;","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"     * Initializes data for application.","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"     * Contains parser and text UI used for user interaction.","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"     * @param ui The text UI for the application.","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"     * @param parser Parses user input and returns application readable code.","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"     * @param path Path to datafile which contains the local database for the application.","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"    public TaskData(DukeMessages ui, Parser parser, String path) {","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"        this.tasks \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"        this.parser \u003d parser;","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"        this.path \u003d path;","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"     * For finding the number of task objects contained inside this object.","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"     * Corresponds to the number id of the last inserted task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"     * @return Returns the number of task objects contained in this object.","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"    public int getTaskCount() {","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"        return taskCount;","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"     * Prints all task objects found when function \u003ccode\u003efind\u003c/code\u003e or \u003ccode\u003edate\u003c/code\u003e is called.","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"     * @param list List of number id of task objects to print.","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"    public void printFromList(LinkedHashSet\u003cInteger\u003e list) {","lastModifiedDate":"2023-02-19"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"        if (list.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"lohjooh"},"content":"            ui.printNotFound();","lastModifiedDate":"2023-02-19"},{"lineNumber":65,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":66,"author":{"gitId":"lohjooh"},"content":"        for (int i : list) {","lastModifiedDate":"2023-02-19"},{"lineNumber":67,"author":{"gitId":"lohjooh"},"content":"            System.out.println(i + \".\" + tasks.get(i));","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"lohjooh"},"content":"        ui.printFound(list.size());","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":71,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":72,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"lohjooh"},"content":"     * Prints all task objects.","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"lohjooh"},"content":"     * Prints a message depending on the size of number of task objects in total.","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"lohjooh"},"content":"    public void listOut() {","lastModifiedDate":"2023-02-19"},{"lineNumber":77,"author":{"gitId":"lohjooh"},"content":"        if (taskCount \u003d\u003d 0) {","lastModifiedDate":"2023-02-19"},{"lineNumber":78,"author":{"gitId":"lohjooh"},"content":"            ui.printEmpty();","lastModifiedDate":"2023-02-19"},{"lineNumber":79,"author":{"gitId":"lohjooh"},"content":"            return;","lastModifiedDate":"2023-02-19"},{"lineNumber":80,"author":{"gitId":"lohjooh"},"content":"        } else {","lastModifiedDate":"2023-02-19"},{"lineNumber":81,"author":{"gitId":"lohjooh"},"content":"            ui.printList();","lastModifiedDate":"2023-02-19"},{"lineNumber":82,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":83,"author":{"gitId":"lohjooh"},"content":"        for (int i \u003d 1; i \u003c\u003d taskCount; ++i) {","lastModifiedDate":"2023-02-19"},{"lineNumber":84,"author":{"gitId":"lohjooh"},"content":"            System.out.println(i + \".\" + tasks.get(i));","lastModifiedDate":"2023-02-19"},{"lineNumber":85,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":86,"author":{"gitId":"lohjooh"},"content":"        ui.printListSize(taskCount);","lastModifiedDate":"2023-02-19"},{"lineNumber":87,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":88,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":89,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"lohjooh"},"content":"     * Overwrites the entire datafile with the task objects currently in this object.","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"lohjooh"},"content":"     * @param path Path to the datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"lohjooh"},"content":"    public void rewriteFile(String path) {","lastModifiedDate":"2023-02-19"},{"lineNumber":95,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":96,"author":{"gitId":"lohjooh"},"content":"            FileManager.writeFile(path, tasks);","lastModifiedDate":"2023-02-19"},{"lineNumber":97,"author":{"gitId":"lohjooh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":98,"author":{"gitId":"lohjooh"},"content":"            ui.printWriteFileError();","lastModifiedDate":"2023-02-19"},{"lineNumber":99,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":100,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":101,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":102,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":103,"author":{"gitId":"lohjooh"},"content":"     * Checks if the task object needs change mark/unmark status or not.","lastModifiedDate":"2023-02-20"},{"lineNumber":104,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":105,"author":{"gitId":"lohjooh"},"content":"     * @param index The number id of the concerned object task.","lastModifiedDate":"2023-02-20"},{"lineNumber":106,"author":{"gitId":"lohjooh"},"content":"     * @param changeTo Whether mark/unmark is called.","lastModifiedDate":"2023-02-20"},{"lineNumber":107,"author":{"gitId":"lohjooh"},"content":"     * @param type Mark/Unmark.","lastModifiedDate":"2023-02-20"},{"lineNumber":108,"author":{"gitId":"lohjooh"},"content":"     * @throws DukeException Throws exception when the status of the task involved is already the same as the called","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"lohjooh"},"content":"     * mark/unmark function.","lastModifiedDate":"2023-02-20"},{"lineNumber":110,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"lohjooh"},"content":"    public void checkMarkStatus(int index, boolean changeTo, String type) throws DukeException{","lastModifiedDate":"2023-02-19"},{"lineNumber":112,"author":{"gitId":"lohjooh"},"content":"        if (tasks.get(index).getIsDone() \u003d\u003d changeTo) {","lastModifiedDate":"2023-02-19"},{"lineNumber":113,"author":{"gitId":"lohjooh"},"content":"            ui.printMarkError(type);","lastModifiedDate":"2023-02-19"},{"lineNumber":114,"author":{"gitId":"lohjooh"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":115,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":116,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":117,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":118,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":119,"author":{"gitId":"lohjooh"},"content":"     * Adds task to datafile and prints a message to indicate the task is added.","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":121,"author":{"gitId":"lohjooh"},"content":"    public void echo() {","lastModifiedDate":"2023-02-19"},{"lineNumber":122,"author":{"gitId":"lohjooh"},"content":"        System.out.println(tasks.get(taskCount));","lastModifiedDate":"2023-02-19"},{"lineNumber":123,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":124,"author":{"gitId":"lohjooh"},"content":"            FileManager.writeTask(path, tasks.get(taskCount));","lastModifiedDate":"2023-02-19"},{"lineNumber":125,"author":{"gitId":"lohjooh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":126,"author":{"gitId":"lohjooh"},"content":"            ui.printWriteFileError();","lastModifiedDate":"2023-02-19"},{"lineNumber":127,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":128,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":129,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":130,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":131,"author":{"gitId":"lohjooh"},"content":"     * Function when \u003ccode\u003emark\u003c/code\u003e user input is called for a certain task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":132,"author":{"gitId":"lohjooh"},"content":"     * Change status of task object to mark if the task object is unmarked.","lastModifiedDate":"2023-02-20"},{"lineNumber":133,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":134,"author":{"gitId":"lohjooh"},"content":"     * @param parsedCommand User input command after parsed by parser.","lastModifiedDate":"2023-02-20"},{"lineNumber":135,"author":{"gitId":"lohjooh"},"content":"     * @param next User input line after command after parsed by parser.","lastModifiedDate":"2023-02-20"},{"lineNumber":136,"author":{"gitId":"lohjooh"},"content":"     * @param isFromCommand Check for whether this function is called via user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":137,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":138,"author":{"gitId":"lohjooh"},"content":"    public void handleMark(String parsedCommand, String next, boolean isFromCommand) {","lastModifiedDate":"2023-02-19"},{"lineNumber":139,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":140,"author":{"gitId":"lohjooh"},"content":"            parser.convertString(next.trim(), taskCount);","lastModifiedDate":"2023-02-19"},{"lineNumber":141,"author":{"gitId":"lohjooh"},"content":"            checkMarkStatus(parser.getNum(), true, parsedCommand);","lastModifiedDate":"2023-02-19"},{"lineNumber":142,"author":{"gitId":"lohjooh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":143,"author":{"gitId":"lohjooh"},"content":"            return;","lastModifiedDate":"2023-02-19"},{"lineNumber":144,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":145,"author":{"gitId":"lohjooh"},"content":"        tasks.get(parser.getNum()).setDone(true);","lastModifiedDate":"2023-02-19"},{"lineNumber":146,"author":{"gitId":"lohjooh"},"content":"        if (isFromCommand) {","lastModifiedDate":"2023-02-19"},{"lineNumber":147,"author":{"gitId":"lohjooh"},"content":"            ui.printMark();","lastModifiedDate":"2023-02-19"},{"lineNumber":148,"author":{"gitId":"lohjooh"},"content":"            System.out.println(tasks.get(parser.getNum()));","lastModifiedDate":"2023-02-19"},{"lineNumber":149,"author":{"gitId":"lohjooh"},"content":"            rewriteFile(path);","lastModifiedDate":"2023-02-19"},{"lineNumber":150,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":151,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":152,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":153,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":154,"author":{"gitId":"lohjooh"},"content":"     * Function when \u003ccode\u003eunmark\u003c/code\u003e user input is called for a certain task object.","lastModifiedDate":"2023-02-20"},{"lineNumber":155,"author":{"gitId":"lohjooh"},"content":"     * Change status of task object to unmark if the task object is unmarked.","lastModifiedDate":"2023-02-20"},{"lineNumber":156,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":157,"author":{"gitId":"lohjooh"},"content":"     * @param parsedCommand User input command after parsed by parser.","lastModifiedDate":"2023-02-20"},{"lineNumber":158,"author":{"gitId":"lohjooh"},"content":"     * @param next User input line after command after parsed by parser.","lastModifiedDate":"2023-02-20"},{"lineNumber":159,"author":{"gitId":"lohjooh"},"content":"     * @param isFromCommand Check for whether this function is called via user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":160,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":161,"author":{"gitId":"lohjooh"},"content":"    public void handleUnmark (String parsedCommand, String next, boolean isFromCommand) {","lastModifiedDate":"2023-02-19"},{"lineNumber":162,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":163,"author":{"gitId":"lohjooh"},"content":"            parser.convertString(next.trim(), tasks.size());","lastModifiedDate":"2023-02-19"},{"lineNumber":164,"author":{"gitId":"lohjooh"},"content":"            checkMarkStatus(parser.getNum(), false, parsedCommand);","lastModifiedDate":"2023-02-19"},{"lineNumber":165,"author":{"gitId":"lohjooh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":166,"author":{"gitId":"lohjooh"},"content":"            return;","lastModifiedDate":"2023-02-19"},{"lineNumber":167,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":168,"author":{"gitId":"lohjooh"},"content":"        tasks.get(parser.getNum()).setDone(false);","lastModifiedDate":"2023-02-19"},{"lineNumber":169,"author":{"gitId":"lohjooh"},"content":"        if (isFromCommand) {","lastModifiedDate":"2023-02-19"},{"lineNumber":170,"author":{"gitId":"lohjooh"},"content":"            ui.printUnmark();","lastModifiedDate":"2023-02-19"},{"lineNumber":171,"author":{"gitId":"lohjooh"},"content":"            System.out.println(tasks.get(parser.getNum()));","lastModifiedDate":"2023-02-19"},{"lineNumber":172,"author":{"gitId":"lohjooh"},"content":"            rewriteFile(path);","lastModifiedDate":"2023-02-19"},{"lineNumber":173,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":174,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":175,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":176,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":177,"author":{"gitId":"lohjooh"},"content":"     * Function to add a \u003ccode\u003eToDo\u003c/code\u003e task object to this object.","lastModifiedDate":"2023-02-20"},{"lineNumber":178,"author":{"gitId":"lohjooh"},"content":"     * Updates taskCount after successful add.","lastModifiedDate":"2023-02-20"},{"lineNumber":179,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":180,"author":{"gitId":"lohjooh"},"content":"     * @param next User input line after command after parsed by parser.","lastModifiedDate":"2023-02-20"},{"lineNumber":181,"author":{"gitId":"lohjooh"},"content":"     * @param isFromCommand Check for whether this function is called via user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":182,"author":{"gitId":"lohjooh"},"content":"     * @return Returns the \u003ccode\u003eToDo\u003c/code\u003e task object after it is successfully added.","lastModifiedDate":"2023-02-20"},{"lineNumber":183,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":184,"author":{"gitId":"lohjooh"},"content":"    public ToDo handleTodo(String next, boolean isFromCommand) {","lastModifiedDate":"2023-02-20"},{"lineNumber":185,"author":{"gitId":"lohjooh"},"content":"        ToDo task \u003d new ToDo(next.stripLeading(), false);","lastModifiedDate":"2023-02-20"},{"lineNumber":186,"author":{"gitId":"lohjooh"},"content":"        tasks.put(++taskCount, task);","lastModifiedDate":"2023-02-20"},{"lineNumber":187,"author":{"gitId":"lohjooh"},"content":"        if (isFromCommand) {","lastModifiedDate":"2023-02-19"},{"lineNumber":188,"author":{"gitId":"lohjooh"},"content":"            ui.printTodo();","lastModifiedDate":"2023-02-19"},{"lineNumber":189,"author":{"gitId":"lohjooh"},"content":"            echo();","lastModifiedDate":"2023-02-19"},{"lineNumber":190,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":191,"author":{"gitId":"lohjooh"},"content":"        return task;","lastModifiedDate":"2023-02-20"},{"lineNumber":192,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":193,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":194,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":195,"author":{"gitId":"lohjooh"},"content":"     * Function to add a \u003ccode\u003eDeadline\u003c/code\u003e task object to this object.","lastModifiedDate":"2023-02-20"},{"lineNumber":196,"author":{"gitId":"lohjooh"},"content":"     * Updates taskCount after successful add.","lastModifiedDate":"2023-02-20"},{"lineNumber":197,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":198,"author":{"gitId":"lohjooh"},"content":"     * @param next User input line after command after parsed by parser.","lastModifiedDate":"2023-02-20"},{"lineNumber":199,"author":{"gitId":"lohjooh"},"content":"     * @param isFromCommand Check for whether this function is called via user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":200,"author":{"gitId":"lohjooh"},"content":"     * @return Returns the \u003ccode\u003eDeadline\u003c/code\u003e task object after it is successfully added.","lastModifiedDate":"2023-02-20"},{"lineNumber":201,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":202,"author":{"gitId":"lohjooh"},"content":"    public Deadline handleDeadline(String next, boolean isFromCommand) throws DukeException {","lastModifiedDate":"2023-02-19"},{"lineNumber":203,"author":{"gitId":"lohjooh"},"content":"        String[] deadline \u003d next.split(\"/by\", 2);","lastModifiedDate":"2023-02-19"},{"lineNumber":204,"author":{"gitId":"lohjooh"},"content":"        LocalDate localByDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":205,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":206,"author":{"gitId":"lohjooh"},"content":"            localByDate \u003d parser.processDate(deadline[1].trim());","lastModifiedDate":"2023-02-19"},{"lineNumber":207,"author":{"gitId":"lohjooh"},"content":"            deadline[1] \u003d localByDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-02-19"},{"lineNumber":208,"author":{"gitId":"lohjooh"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":209,"author":{"gitId":"lohjooh"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":210,"author":{"gitId":"lohjooh"},"content":"        } catch (DukeException f) {","lastModifiedDate":"2023-02-19"},{"lineNumber":211,"author":{"gitId":"lohjooh"},"content":"            localByDate \u003d null;","lastModifiedDate":"2023-02-19"},{"lineNumber":212,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":213,"author":{"gitId":"lohjooh"},"content":"        Deadline task \u003d new Deadline(deadline[0].trim(), false, deadline[1].trim(), localByDate);","lastModifiedDate":"2023-02-19"},{"lineNumber":214,"author":{"gitId":"lohjooh"},"content":"        tasks.put(++taskCount ,task);","lastModifiedDate":"2023-02-19"},{"lineNumber":215,"author":{"gitId":"lohjooh"},"content":"        if (isFromCommand) {","lastModifiedDate":"2023-02-19"},{"lineNumber":216,"author":{"gitId":"lohjooh"},"content":"            ui.printDeadline();","lastModifiedDate":"2023-02-19"},{"lineNumber":217,"author":{"gitId":"lohjooh"},"content":"            echo();","lastModifiedDate":"2023-02-19"},{"lineNumber":218,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":219,"author":{"gitId":"lohjooh"},"content":"        return task;","lastModifiedDate":"2023-02-19"},{"lineNumber":220,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":221,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":222,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":223,"author":{"gitId":"lohjooh"},"content":"     * Function to add an \u003ccode\u003eEvent\u003c/code\u003e task object to this object.","lastModifiedDate":"2023-02-20"},{"lineNumber":224,"author":{"gitId":"lohjooh"},"content":"     * Updates taskCount after successful add.","lastModifiedDate":"2023-02-20"},{"lineNumber":225,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":226,"author":{"gitId":"lohjooh"},"content":"     * @param next User input line after command after parsed by parser.","lastModifiedDate":"2023-02-20"},{"lineNumber":227,"author":{"gitId":"lohjooh"},"content":"     * @param isFromCommand Check for whether this function is called via user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":228,"author":{"gitId":"lohjooh"},"content":"     * @return Returns the \u003ccode\u003eEvent\u003c/code\u003e task object after it is successfully added.","lastModifiedDate":"2023-02-20"},{"lineNumber":229,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":230,"author":{"gitId":"lohjooh"},"content":"    public Event handleEvent(String next, boolean isFromCommand) throws DukeException {","lastModifiedDate":"2023-02-19"},{"lineNumber":231,"author":{"gitId":"lohjooh"},"content":"        String[] eventName \u003d next.split(\"/from\", 2);","lastModifiedDate":"2023-02-19"},{"lineNumber":232,"author":{"gitId":"lohjooh"},"content":"        LocalDate localByDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":233,"author":{"gitId":"lohjooh"},"content":"        LocalDate localFromDate;","lastModifiedDate":"2023-02-19"},{"lineNumber":234,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":235,"author":{"gitId":"lohjooh"},"content":"            String[] eventTime \u003d eventName[1].split(\"/to\", 2);","lastModifiedDate":"2023-02-19"},{"lineNumber":236,"author":{"gitId":"lohjooh"},"content":"            try {","lastModifiedDate":"2023-02-19"},{"lineNumber":237,"author":{"gitId":"lohjooh"},"content":"                localFromDate \u003d parser.processDate(eventTime[0].trim());","lastModifiedDate":"2023-02-28"},{"lineNumber":238,"author":{"gitId":"lohjooh"},"content":"                eventTime[0] \u003d localFromDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-02-28"},{"lineNumber":239,"author":{"gitId":"lohjooh"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":240,"author":{"gitId":"lohjooh"},"content":"                localFromDate \u003d null;","lastModifiedDate":"2023-02-28"},{"lineNumber":241,"author":{"gitId":"lohjooh"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":242,"author":{"gitId":"lohjooh"},"content":"                throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":243,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-19"},{"lineNumber":244,"author":{"gitId":"lohjooh"},"content":"            try {","lastModifiedDate":"2023-02-19"},{"lineNumber":245,"author":{"gitId":"lohjooh"},"content":"                localByDate \u003d parser.processDate(eventTime[1].trim());","lastModifiedDate":"2023-02-28"},{"lineNumber":246,"author":{"gitId":"lohjooh"},"content":"                eventTime[1] \u003d localByDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-02-28"},{"lineNumber":247,"author":{"gitId":"lohjooh"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":248,"author":{"gitId":"lohjooh"},"content":"                localByDate \u003d null;","lastModifiedDate":"2023-02-28"},{"lineNumber":249,"author":{"gitId":"lohjooh"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":250,"author":{"gitId":"lohjooh"},"content":"                throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":251,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-19"},{"lineNumber":252,"author":{"gitId":"lohjooh"},"content":"            Event task \u003d new Event(eventName[0].trim(), false, eventTime[0].trim(), eventTime[1].trim()","lastModifiedDate":"2023-02-19"},{"lineNumber":253,"author":{"gitId":"lohjooh"},"content":"                    , localByDate, localFromDate);","lastModifiedDate":"2023-02-19"},{"lineNumber":254,"author":{"gitId":"lohjooh"},"content":"            tasks.put(++taskCount, task);","lastModifiedDate":"2023-02-19"},{"lineNumber":255,"author":{"gitId":"lohjooh"},"content":"            if (isFromCommand) {","lastModifiedDate":"2023-02-19"},{"lineNumber":256,"author":{"gitId":"lohjooh"},"content":"                ui.printEvent();","lastModifiedDate":"2023-02-19"},{"lineNumber":257,"author":{"gitId":"lohjooh"},"content":"                echo();","lastModifiedDate":"2023-02-19"},{"lineNumber":258,"author":{"gitId":"lohjooh"},"content":"            }","lastModifiedDate":"2023-02-19"},{"lineNumber":259,"author":{"gitId":"lohjooh"},"content":"            return task;","lastModifiedDate":"2023-02-19"},{"lineNumber":260,"author":{"gitId":"lohjooh"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":261,"author":{"gitId":"lohjooh"},"content":"            throw new DukeException();","lastModifiedDate":"2023-02-19"},{"lineNumber":262,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":263,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":264,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":265,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":266,"author":{"gitId":"lohjooh"},"content":"     * Function to delete a task object after \u003ccode\u003edelete\u003c/code\u003e is called in user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":267,"author":{"gitId":"lohjooh"},"content":"     * Decrements taskCount to update the number of task objects in this object after deletion.","lastModifiedDate":"2023-02-20"},{"lineNumber":268,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":269,"author":{"gitId":"lohjooh"},"content":"     * @param next User input line after command after parsed by parser.","lastModifiedDate":"2023-02-20"},{"lineNumber":270,"author":{"gitId":"lohjooh"},"content":"     * @param isFromCommand Check for whether this function is called via user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":271,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":272,"author":{"gitId":"lohjooh"},"content":"    public void handleDelete(String next, boolean isFromCommand) {","lastModifiedDate":"2023-02-19"},{"lineNumber":273,"author":{"gitId":"lohjooh"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":274,"author":{"gitId":"lohjooh"},"content":"            parser.convertString(next.trim(), tasks.size());","lastModifiedDate":"2023-02-19"},{"lineNumber":275,"author":{"gitId":"lohjooh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":276,"author":{"gitId":"lohjooh"},"content":"            return;","lastModifiedDate":"2023-02-19"},{"lineNumber":277,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":278,"author":{"gitId":"lohjooh"},"content":"        int num \u003d parser.getNum();","lastModifiedDate":"2023-02-19"},{"lineNumber":279,"author":{"gitId":"lohjooh"},"content":"        Task task \u003d tasks.get(num);","lastModifiedDate":"2023-02-19"},{"lineNumber":280,"author":{"gitId":"lohjooh"},"content":"        if (isFromCommand) {","lastModifiedDate":"2023-02-19"},{"lineNumber":281,"author":{"gitId":"lohjooh"},"content":"            ui.printDeleted(task.toString());","lastModifiedDate":"2023-02-19"},{"lineNumber":282,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":283,"author":{"gitId":"lohjooh"},"content":"        while(tasks.get(num + 1) !\u003d null) {","lastModifiedDate":"2023-02-19"},{"lineNumber":284,"author":{"gitId":"lohjooh"},"content":"            tasks.put(num, tasks.get(num + 1));","lastModifiedDate":"2023-02-19"},{"lineNumber":285,"author":{"gitId":"lohjooh"},"content":"            ++num;","lastModifiedDate":"2023-02-19"},{"lineNumber":286,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":287,"author":{"gitId":"lohjooh"},"content":"        tasks.remove(num);","lastModifiedDate":"2023-02-19"},{"lineNumber":288,"author":{"gitId":"lohjooh"},"content":"        rewriteFile(path);","lastModifiedDate":"2023-02-19"},{"lineNumber":289,"author":{"gitId":"lohjooh"},"content":"        --taskCount;","lastModifiedDate":"2023-02-19"},{"lineNumber":290,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":291,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"lohjooh":291}},{"path":"src/main/duke/ui/DukeMessages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.ui;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":" * Text UI for the application.","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"public class DukeMessages {","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"    private static final String HI \u003d \"\\n\" +","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"lohjooh"},"content":"            \"██████╗░░█████╗░██████╗░\\n\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"lohjooh"},"content":"            \"██╔══██╗██╔══██╗██╔══██╗\\n\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"lohjooh"},"content":"            \"██████╦╝██║░░██║██████╦╝\\n\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"lohjooh"},"content":"            \"██╔══██╗██║░░██║██╔══██╗\\n\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"lohjooh"},"content":"            \"██████╦╝╚█████╔╝██████╦╝\\n\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"lohjooh"},"content":"            \"╚═════╝░░╚════╝░╚═════╝░\" + \"\\n\";","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"lohjooh"},"content":"    private static final String BYE \u003d","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"lohjooh"},"content":"            \"██████╗░░█████╗░██████╗░  ░██████╗░█████╗░██╗░░░██╗░██████╗  ██████╗░██╗░░░██╗███████╗\\n\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"lohjooh"},"content":"            \"██╔══██╗██╔══██╗██╔══██╗  ██╔════╝██╔══██╗╚██╗░██╔╝██╔════╝  ██╔══██╗╚██╗░██╔╝██╔════╝\\n\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"lohjooh"},"content":"            \"██████╦╝██║░░██║██████╦╝  ╚█████╗░███████║░╚████╔╝░╚█████╗░  ██████╦╝░╚████╔╝░█████╗░░\\n\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"lohjooh"},"content":"            \"██╔══██╗██║░░██║██╔══██╗  ░╚═══██╗██╔══██║░░╚██╔╝░░░╚═══██╗  ██╔══██╗░░╚██╔╝░░██╔══╝░░\\n\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"lohjooh"},"content":"            \"██████╦╝╚█████╔╝██████╦╝  ██████╔╝██║░░██║░░░██║░░░██████╔╝  ██████╦╝░░░██║░░░███████╗\\n\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"lohjooh"},"content":"            \"╚═════╝░░╚════╝░╚═════╝░  ╚═════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═════╝░  ╚═════╝░░░░╚═╝░░░╚══════╝\";","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"lohjooh"},"content":"    private static final String DIV \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"lohjooh"},"content":"    private static final String QUERY \u003d \"What do you need from me boss?\";","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"lohjooh"},"content":"    private static final String PROMPT \u003d \"\\nWhat you need: \";","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"lohjooh"},"content":"    private static final String ERROR \u003d \"Wrong command boss! Try again!\";","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"lohjooh"},"content":"    private static final String READ_FILE_ERROR \u003d \"Reading file failed\";","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"lohjooh"},"content":"    private static final String FILE_NOT_FOUND_ERROR \u003d \"File not found\\nCreating file\";","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"lohjooh"},"content":"    private static final String WRITE_FILE_ERROR \u003d \"Unforeseen error occurred! List not saved!\";","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"lohjooh"},"content":"    private static final String EMPTY \u003d \"*Tumbleweed passes by*\\nUh oh! Looks like your list is empty!\";","lastModifiedDate":"2023-02-18"},{"lineNumber":29,"author":{"gitId":"lohjooh"},"content":"    private static final String LIST \u003d \"Here\u0027s your list boss! *Crosses arms and nods* : \";","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"lohjooh"},"content":"    private static final String NOT_NUMBER \u003d \"This is not a number boss! Try again!\";","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"lohjooh"},"content":"    private static final String NOT_IN_LIST \u003d \"This number is not in the list boss! Try again!\";","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"lohjooh"},"content":"    private static final String MARK \u003d \"Bob commends you! *Nods head* \";","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"lohjooh"},"content":"    private static final String UNMARK \u003d \"A mistake! *Shakes head* \";","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"lohjooh"},"content":"    private static final String TODO \u003d \"Understood! *Salutes* Task added!\";","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"lohjooh"},"content":"    private static final String DEADLINE \u003d \"Understood *Salutes* Task with deadline added!\\nRemember to complete it by \"","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"lohjooh"},"content":"            + \"the deadline!\";","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"lohjooh"},"content":"    private static final String EVENT \u003d \"Understood *Salutes* Event added!\\nRemember the starting time! Don\u0027t be late!\";","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"lohjooh"},"content":"    private static final String NOT_FOUND \u003d \" *Rummages around cabinet* Uh oh looks like your whatever you searched for\"","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"lohjooh"},"content":"            + \" does not exist! Check for typos!\";","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"lohjooh"},"content":"    private static final String CLEAR \u003d \" *Tosses cabinet into incinerator* All records dumped boss!\";","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"lohjooh"},"content":"     * Initialization for the text UI.","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"lohjooh"},"content":"    public DukeMessages() {","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"lohjooh"},"content":"     * Prints startup message.","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"lohjooh"},"content":"    public void printHi() {","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"lohjooh"},"content":"        System.out.println(HI);","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"lohjooh"},"content":"     * Prints exit message.","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"lohjooh"},"content":"    public void printBye() {","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"lohjooh"},"content":"        printDiv();","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"lohjooh"},"content":"        System.out.println(\"\\n\" + BYE + \"\\n\");","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"lohjooh"},"content":"        printDiv();","lastModifiedDate":"2023-02-18"},{"lineNumber":61,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"lohjooh"},"content":"     * Prints query portion of startup message.","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"lohjooh"},"content":"    public void printQuery() {","lastModifiedDate":"2023-02-18"},{"lineNumber":67,"author":{"gitId":"lohjooh"},"content":"        System.out.println(QUERY);","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"lohjooh"},"content":"     * Prints a line to separate each block of printed messages.","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"lohjooh"},"content":"    public void printDiv() {","lastModifiedDate":"2023-02-18"},{"lineNumber":74,"author":{"gitId":"lohjooh"},"content":"        System.out.println(DIV);","lastModifiedDate":"2023-02-13"},{"lineNumber":75,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":76,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":77,"author":{"gitId":"lohjooh"},"content":"    public void printPrompt() {","lastModifiedDate":"2023-02-18"},{"lineNumber":78,"author":{"gitId":"lohjooh"},"content":"        System.out.print(PROMPT);","lastModifiedDate":"2023-02-13"},{"lineNumber":79,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":80,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":81,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"lohjooh"},"content":"     * Prints default error message.","lastModifiedDate":"2023-02-20"},{"lineNumber":83,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"lohjooh"},"content":"    public void printError() {","lastModifiedDate":"2023-02-18"},{"lineNumber":85,"author":{"gitId":"lohjooh"},"content":"        System.out.println(ERROR);","lastModifiedDate":"2023-02-13"},{"lineNumber":86,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":87,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":88,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"lohjooh"},"content":"     * Prints error message when failed to read datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"lohjooh"},"content":"    public void printReadFileError() {","lastModifiedDate":"2023-02-18"},{"lineNumber":92,"author":{"gitId":"lohjooh"},"content":"        System.out.println(READ_FILE_ERROR);","lastModifiedDate":"2023-02-13"},{"lineNumber":93,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":94,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":95,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"lohjooh"},"content":"     * Prints error message when \u003ccode\u003epath\u003c/code\u003e does not lead to datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":97,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"lohjooh"},"content":"    public void printFileNotFoundError() {","lastModifiedDate":"2023-02-18"},{"lineNumber":99,"author":{"gitId":"lohjooh"},"content":"        System.out.println(FILE_NOT_FOUND_ERROR);","lastModifiedDate":"2023-02-13"},{"lineNumber":100,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":101,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":102,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":103,"author":{"gitId":"lohjooh"},"content":"     * Prints error message when unable to write to datafile.","lastModifiedDate":"2023-02-20"},{"lineNumber":104,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":105,"author":{"gitId":"lohjooh"},"content":"    public void printWriteFileError() {","lastModifiedDate":"2023-02-18"},{"lineNumber":106,"author":{"gitId":"lohjooh"},"content":"        System.out.println(WRITE_FILE_ERROR);","lastModifiedDate":"2023-02-13"},{"lineNumber":107,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":108,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":109,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":110,"author":{"gitId":"lohjooh"},"content":"     * Prints message when list is empty.","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":112,"author":{"gitId":"lohjooh"},"content":"    public void printEmpty() {","lastModifiedDate":"2023-02-18"},{"lineNumber":113,"author":{"gitId":"lohjooh"},"content":"        System.out.println(EMPTY);","lastModifiedDate":"2023-02-13"},{"lineNumber":114,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":115,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":116,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"lohjooh"},"content":"     * Prints message when list is non-empty.","lastModifiedDate":"2023-02-20"},{"lineNumber":118,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":119,"author":{"gitId":"lohjooh"},"content":"    public void printList() {","lastModifiedDate":"2023-02-18"},{"lineNumber":120,"author":{"gitId":"lohjooh"},"content":"        System.out.println(LIST);","lastModifiedDate":"2023-02-13"},{"lineNumber":121,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":122,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":123,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":124,"author":{"gitId":"lohjooh"},"content":"     * Prints error message if user input is supposed to be a number but a number is not input.","lastModifiedDate":"2023-02-20"},{"lineNumber":125,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":126,"author":{"gitId":"lohjooh"},"content":"    public void printNotNumber() {","lastModifiedDate":"2023-02-18"},{"lineNumber":127,"author":{"gitId":"lohjooh"},"content":"        System.out.println(NOT_NUMBER);","lastModifiedDate":"2023-02-13"},{"lineNumber":128,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":129,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":130,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":131,"author":{"gitId":"lohjooh"},"content":"     * Prints error message if user input for number does not exist in the list.","lastModifiedDate":"2023-02-20"},{"lineNumber":132,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":133,"author":{"gitId":"lohjooh"},"content":"    public void printNotInList() {","lastModifiedDate":"2023-02-18"},{"lineNumber":134,"author":{"gitId":"lohjooh"},"content":"        System.out.println(NOT_IN_LIST);","lastModifiedDate":"2023-02-13"},{"lineNumber":135,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":136,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":137,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":138,"author":{"gitId":"lohjooh"},"content":"     * Prints message for successfully changing task status to marked.","lastModifiedDate":"2023-02-20"},{"lineNumber":139,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":140,"author":{"gitId":"lohjooh"},"content":"    public void printMark() {","lastModifiedDate":"2023-02-18"},{"lineNumber":141,"author":{"gitId":"lohjooh"},"content":"        System.out.println(MARK);","lastModifiedDate":"2023-02-13"},{"lineNumber":142,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":143,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":144,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":145,"author":{"gitId":"lohjooh"},"content":"     * Prints message for successfully changing task status to unmarked.","lastModifiedDate":"2023-02-20"},{"lineNumber":146,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":147,"author":{"gitId":"lohjooh"},"content":"    public void printUnmark() {","lastModifiedDate":"2023-02-18"},{"lineNumber":148,"author":{"gitId":"lohjooh"},"content":"        System.out.println(UNMARK);","lastModifiedDate":"2023-02-13"},{"lineNumber":149,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":150,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":151,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":152,"author":{"gitId":"lohjooh"},"content":"     * Prints message for successfully adding a \u003ccode\u003eToDo\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":153,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":154,"author":{"gitId":"lohjooh"},"content":"    public void printTodo() {","lastModifiedDate":"2023-02-18"},{"lineNumber":155,"author":{"gitId":"lohjooh"},"content":"        System.out.println(TODO);","lastModifiedDate":"2023-02-13"},{"lineNumber":156,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":157,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":158,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":159,"author":{"gitId":"lohjooh"},"content":"     * Prints message for successfully adding a \u003ccode\u003eDeadline\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":160,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":161,"author":{"gitId":"lohjooh"},"content":"    public void printDeadline() {","lastModifiedDate":"2023-02-18"},{"lineNumber":162,"author":{"gitId":"lohjooh"},"content":"        System.out.println(DEADLINE);","lastModifiedDate":"2023-02-13"},{"lineNumber":163,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":164,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":165,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":166,"author":{"gitId":"lohjooh"},"content":"     * Prints message for successfully adding an \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-02-20"},{"lineNumber":167,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":168,"author":{"gitId":"lohjooh"},"content":"    public void printEvent() {","lastModifiedDate":"2023-02-18"},{"lineNumber":169,"author":{"gitId":"lohjooh"},"content":"        System.out.println(EVENT);","lastModifiedDate":"2023-02-13"},{"lineNumber":170,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":171,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":172,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":173,"author":{"gitId":"lohjooh"},"content":"     * Prints message when the user input for \u003ccode\u003efind\u003c/code\u003e or \u003ccode\u003edate\u003c/code\u003e does not find any entries.","lastModifiedDate":"2023-02-20"},{"lineNumber":174,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":175,"author":{"gitId":"lohjooh"},"content":"    public void printNotFound() {","lastModifiedDate":"2023-02-19"},{"lineNumber":176,"author":{"gitId":"lohjooh"},"content":"        System.out.println(NOT_FOUND);","lastModifiedDate":"2023-02-19"},{"lineNumber":177,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":178,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":179,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":180,"author":{"gitId":"lohjooh"},"content":"     * Prints message displaying the size of list.","lastModifiedDate":"2023-02-20"},{"lineNumber":181,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":182,"author":{"gitId":"lohjooh"},"content":"     * @param count number of items in the list.","lastModifiedDate":"2023-02-20"},{"lineNumber":183,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":184,"author":{"gitId":"lohjooh"},"content":"    public void printListSize(int count) {","lastModifiedDate":"2023-02-19"},{"lineNumber":185,"author":{"gitId":"lohjooh"},"content":"        if (count \u003d\u003d 1) {","lastModifiedDate":"2023-02-19"},{"lineNumber":186,"author":{"gitId":"lohjooh"},"content":"            System.out.println(\"Looks like you have \" + 1 + \" thing on your list!\");","lastModifiedDate":"2023-02-19"},{"lineNumber":187,"author":{"gitId":"lohjooh"},"content":"        } else {","lastModifiedDate":"2023-02-19"},{"lineNumber":188,"author":{"gitId":"lohjooh"},"content":"            System.out.println(\"Looks like you have \" + count + \" things on your list!\");","lastModifiedDate":"2023-02-19"},{"lineNumber":189,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":190,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":191,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":192,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":193,"author":{"gitId":"lohjooh"},"content":"     * Prints the number of matching entries when \u003ccode\u003efind\u003c/code\u003e or \u003ccode\u003edate\u003c/code\u003e is called.","lastModifiedDate":"2023-02-20"},{"lineNumber":194,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":195,"author":{"gitId":"lohjooh"},"content":"     * @param count number of entries found.","lastModifiedDate":"2023-02-20"},{"lineNumber":196,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":197,"author":{"gitId":"lohjooh"},"content":"    public  void printFound(int count) {","lastModifiedDate":"2023-02-20"},{"lineNumber":198,"author":{"gitId":"lohjooh"},"content":"        if (count \u003d\u003d 1) {","lastModifiedDate":"2023-02-20"},{"lineNumber":199,"author":{"gitId":"lohjooh"},"content":"            System.out.println(\"Found \" + count + \" matching item! *Holds shining lump up towards the sky!* \");","lastModifiedDate":"2023-02-20"},{"lineNumber":200,"author":{"gitId":"lohjooh"},"content":"        } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":201,"author":{"gitId":"lohjooh"},"content":"            System.out.println(\"Found \" + count + \" matching items! *Tosses items up into the air*\\n *The items \"","lastModifiedDate":"2023-02-20"},{"lineNumber":202,"author":{"gitId":"lohjooh"},"content":"                    + \"arranges themselves neatly on the counter!* \");","lastModifiedDate":"2023-02-20"},{"lineNumber":203,"author":{"gitId":"lohjooh"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":204,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":205,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":206,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":207,"author":{"gitId":"lohjooh"},"content":"     * Prints error message when \u003ccode\u003eTask\u003c/code\u003e is already marked/unmarked.","lastModifiedDate":"2023-02-20"},{"lineNumber":208,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":209,"author":{"gitId":"lohjooh"},"content":"     * @param type Mark/Unmark depending on which is called by user input.","lastModifiedDate":"2023-02-20"},{"lineNumber":210,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":211,"author":{"gitId":"lohjooh"},"content":"    public void printMarkError(String type) {","lastModifiedDate":"2023-02-19"},{"lineNumber":212,"author":{"gitId":"lohjooh"},"content":"        System.out.println(\"It is already \" + type + \"ed! *Shakes head* \");","lastModifiedDate":"2023-02-19"},{"lineNumber":213,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":214,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":215,"author":{"gitId":"lohjooh"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":216,"author":{"gitId":"lohjooh"},"content":"     * Prints message when \u003ccode\u003edelete\u003c/code\u003e is called.","lastModifiedDate":"2023-02-20"},{"lineNumber":217,"author":{"gitId":"lohjooh"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":218,"author":{"gitId":"lohjooh"},"content":"     * @param task The task deleted.","lastModifiedDate":"2023-02-20"},{"lineNumber":219,"author":{"gitId":"lohjooh"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":220,"author":{"gitId":"lohjooh"},"content":"    public void printDeleted(String task) {","lastModifiedDate":"2023-02-19"},{"lineNumber":221,"author":{"gitId":"lohjooh"},"content":"        System.out.println(\"Roger!\" + task + \" removed!\");","lastModifiedDate":"2023-02-19"},{"lineNumber":222,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":223,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":224,"author":{"gitId":"lohjooh"},"content":"    public void printClear() {","lastModifiedDate":"2023-02-28"},{"lineNumber":225,"author":{"gitId":"lohjooh"},"content":"        System.out.println(CLEAR);","lastModifiedDate":"2023-02-28"},{"lineNumber":226,"author":{"gitId":"lohjooh"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":227,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"lohjooh":227}},{"path":"src/main/duke/util/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"package duke.util;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":" * Acts as an exception to check for unexpected outputs.","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"lohjooh"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"lohjooh"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lohjooh"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"lohjooh":7}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lohjooh"},"content":"todo abc","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"lohjooh"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"lohjooh"},"content":"tODo bcd","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"lohjooh"},"content":"list","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"lohjooh":4}}]
