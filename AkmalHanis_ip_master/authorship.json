[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"AkmalHanis"},"content":"# duke.Duke project template","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"AkmalHanis"},"content":"## The User Guide","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"AkmalHanis"},"content":"### Setting up in Intellij","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":18,"author":{"gitId":"AkmalHanis"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"AkmalHanis"},"content":"   ","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"AkmalHanis"},"content":"   #### User commands","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"AkmalHanis"},"content":"   1. Todo: Add a specific task that you want to do into your list. This task will be saved by duke.","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"AkmalHanis"},"content":"   Example: todo Read Book ","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"AkmalHanis"},"content":"   2. Deadline: Add a specific Deadline to a specific task you want to do.","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"AkmalHanis"},"content":"   Example: deadline Read Book /by monday","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"AkmalHanis"},"content":"   3. Event: Add a specific Event that you want to save. The timeline of the event is also saved.","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"AkmalHanis"},"content":"   Example: event Read Book /from monday /to tuesday","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"AkmalHanis"},"content":"   4. Mark/Unmark: Allows user to mark or unmark a specific task for tracking.","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"AkmalHanis"},"content":"   Example: mark 1","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"AkmalHanis"},"content":"   5. Delete: Allows user to delete a particular event from their list.","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"AkmalHanis"},"content":"   Example: delete 1","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"AkmalHanis"},"content":"   6. Find: Allows user to find a particular task based on keyword","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"AkmalHanis"},"content":"   Example: find Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"AkmalHanis"},"content":"   7. List: List out all the tasks already saved into the list","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"AkmalHanis"},"content":"   Example: list ","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"AkmalHanis"},"content":"   1. [X][ ] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"AkmalHanis"},"content":"   2. [ ][ ] Read magazine","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"AkmalHanis"},"content":"   8. Bye: Ends the program.","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"AkmalHanis":24,"-":21}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"AkmalHanis"},"content":"User commands:","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"AkmalHanis"},"content":"1. Todo ","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"AkmalHanis"},"content":"2. Deadline","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"AkmalHanis"},"content":"3. Event","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"AkmalHanis"},"content":"4. Mark","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"AkmalHanis"},"content":"5. Unmark","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"AkmalHanis"},"content":"5. Delete","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"AkmalHanis"},"content":"6. Find","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"AkmalHanis"},"content":"7. List","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"AkmalHanis"},"content":"8. Bye","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":16,"author":{"gitId":"AkmalHanis"},"content":"### Features details","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"AkmalHanis"},"content":"## Usages","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"AkmalHanis"},"content":"1. Todo: Add a specific task that you want to do into your list. This task will be saved by duke.","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":21,"author":{"gitId":"AkmalHanis"},"content":"2. Deadline: Add a specific Deadline to a specific task you want to do.","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"AkmalHanis"},"content":"3. Event: Add a specific Event that you want to save. The timeline of the event is also saved.","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"AkmalHanis"},"content":"4. Mark/Unmark: Allows user to mark or unmark a specific task for tracking.","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"AkmalHanis"},"content":"5. Delete: Allows user to delete a particular event from their list.","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"AkmalHanis"},"content":"6. Find: Allows user to find a particular task based on keyword","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"AkmalHanis"},"content":"7. List: List out all the tasks already saved into the list","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"### `Keyword` - Describe action","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"AkmalHanis"},"content":"## Todo","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"AkmalHanis"},"content":"Example: todo Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Go Home","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"AkmalHanis"},"content":"3. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"AkmalHanis"},"content":"todo Smell Grass ","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Go Home","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"AkmalHanis"},"content":"3. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"AkmalHanis"},"content":"4. [ ][T] Smell Grass ","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"AkmalHanis"},"content":"## Deadline","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"AkmalHanis"},"content":"Example: deadline Read Book /by sunday","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Go Home","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"AkmalHanis"},"content":"3. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"AkmalHanis"},"content":"deadline Read Book /by monday","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Go Home","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"AkmalHanis"},"content":"3. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"AkmalHanis"},"content":"4. [ ][D] Read Book (by: monday) ","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"AkmalHanis"},"content":"## Event","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"AkmalHanis"},"content":"Example: event Read Book /from monday /to tuesday","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Go Home","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"AkmalHanis"},"content":"3. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"AkmalHanis"},"content":"event Read Book /from monday /to tuesday","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Go Home","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"AkmalHanis"},"content":"3. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"AkmalHanis"},"content":"4. [ ][E] Read Book (from: monday to: tuesday) ","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"AkmalHanis"},"content":"## Mark/Unmark","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"AkmalHanis"},"content":"Example: Mark 1 / Unmark 1","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Go Home","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"AkmalHanis"},"content":"3. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"AkmalHanis"},"content":"mark 1","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":94,"author":{"gitId":"AkmalHanis"},"content":"1. [X][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Go Home","lastModifiedDate":"2023-03-03"},{"lineNumber":96,"author":{"gitId":"AkmalHanis"},"content":"3. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":98,"author":{"gitId":"AkmalHanis"},"content":"unamrk 1","lastModifiedDate":"2023-03-03"},{"lineNumber":99,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":100,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":101,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Go Home","lastModifiedDate":"2023-03-03"},{"lineNumber":102,"author":{"gitId":"AkmalHanis"},"content":"3. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":103,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":104,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":105,"author":{"gitId":"AkmalHanis"},"content":"## Delete","lastModifiedDate":"2023-03-03"},{"lineNumber":106,"author":{"gitId":"AkmalHanis"},"content":"Example: Delete 1","lastModifiedDate":"2023-03-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":108,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":109,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":110,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Go Home","lastModifiedDate":"2023-03-03"},{"lineNumber":111,"author":{"gitId":"AkmalHanis"},"content":"3. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":112,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":113,"author":{"gitId":"AkmalHanis"},"content":"delete 2","lastModifiedDate":"2023-03-03"},{"lineNumber":114,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":115,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":116,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][T] Eat Food","lastModifiedDate":"2023-03-03"},{"lineNumber":117,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":118,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":119,"author":{"gitId":"AkmalHanis"},"content":"## Find","lastModifiedDate":"2023-03-03"},{"lineNumber":120,"author":{"gitId":"AkmalHanis"},"content":"Example: Find Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":122,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":123,"author":{"gitId":"AkmalHanis"},"content":"Find Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":124,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":125,"author":{"gitId":"AkmalHanis"},"content":"-------------------------------------------------","lastModifiedDate":"2023-03-03"},{"lineNumber":126,"author":{"gitId":"AkmalHanis"},"content":"Here are the Tasks which matches your word:","lastModifiedDate":"2023-03-03"},{"lineNumber":127,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":128,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":129,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":130,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":131,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":132,"author":{"gitId":"AkmalHanis"},"content":"## List","lastModifiedDate":"2023-03-03"},{"lineNumber":133,"author":{"gitId":"AkmalHanis"},"content":"Example: List","lastModifiedDate":"2023-03-03"},{"lineNumber":134,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":135,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":136,"author":{"gitId":"AkmalHanis"},"content":"1. [ ][T] Read Book","lastModifiedDate":"2023-03-03"},{"lineNumber":137,"author":{"gitId":"AkmalHanis"},"content":"2. [ ][D] Read Magazine (by: Tuesday)","lastModifiedDate":"2023-03-03"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":139,"author":{"gitId":"AkmalHanis"},"content":"```","lastModifiedDate":"2023-03-03"},{"lineNumber":140,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":141,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"AkmalHanis":119,"-":22}},{"path":"src/main/java/data/chicken.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"AkmalHanis"},"content":"read book","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"AkmalHanis"},"content":"read book","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"AkmalHanis"},"content":"read book","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"AkmalHanis":3}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AkmalHanis"},"content":"package duke;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"AkmalHanis"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"AkmalHanis"},"content":"import java.io.File;","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"AkmalHanis"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"AkmalHanis"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"AkmalHanis"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"AkmalHanis"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"AkmalHanis"},"content":"import task.Todo;","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"AkmalHanis"},"content":"import task.Event;","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"AkmalHanis"},"content":"import task.Deadline;","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"AkmalHanis"},"content":"public class Duke {","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"AkmalHanis"},"content":"    private static ArrayList\u003cTodo\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"AkmalHanis"},"content":"    private static ArrayList\u003cString\u003e taskMark \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"AkmalHanis"},"content":"    private static void printFileContents(String filePath) throws FileNotFoundException {","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"AkmalHanis"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"AkmalHanis"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"AkmalHanis"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"AkmalHanis"},"content":"            System.out.println(s.nextLine());","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"AkmalHanis"},"content":"    private static int repeat \u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"AkmalHanis"},"content":"    private static int todoNum \u003d 0;","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"AkmalHanis"},"content":"    private static int eventNum \u003d 0;","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"AkmalHanis"},"content":"    private static int deadlineNum \u003d 0;","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"AkmalHanis"},"content":"    private static void printStart(){","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"Hello! I\u0027m duke\");","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"AkmalHanis"},"content":"    private static void printEnd(){","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"Bye hope to see you soon!\");","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"AkmalHanis"},"content":"    private static void printList() {","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"AkmalHanis"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"AkmalHanis"},"content":"            System.out.println((i + 1) + \". \" + taskMark.get(i) + taskList.get(i));","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"AkmalHanis"},"content":"    private static void printErrors(){","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"Please include the task number you want to mark, unmark or delete!\");","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"AkmalHanis"},"content":"    private static void printTaskNum(){","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(taskList.size() - 1);","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"AkmalHanis"},"content":"    private static void printTodoNum(){","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"You have successfully added a new task to do.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"Total number of task: \" + todoNum);","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"AkmalHanis"},"content":"    private static void printEventNo(){","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"You have successfully added a new event.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"Total number of events: \" + eventNum);","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"AkmalHanis"},"content":"    private static void printDeadlineNo(){","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"You have successfully added a new deadline.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":67,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"Total number of deadlines: \" + deadlineNum);","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"AkmalHanis"},"content":"    private static void printTaskError(){","lastModifiedDate":"2023-03-03"},{"lineNumber":71,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"Please include the task to be added!\");","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"AkmalHanis"},"content":"    private static void printAdded(){","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"_____________________________________________________________________\");","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"I\u0027ve added that task, event or deadline for you!\");","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"_____________________________________________________________________\");","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"AkmalHanis"},"content":"    private static void printMarked(){","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"_____________________________________________________________________\");","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"I\u0027ve marked/unmarked that task, event or deadline for you!\");","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"_____________________________________________________________________\");","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"AkmalHanis"},"content":"    /** runCheck handles the user input and splits the user input","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"AkmalHanis"},"content":"     * into its specific user command and user task.","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"AkmalHanis"},"content":"     * The commands include delete, mark, unmark, todo, event,","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"AkmalHanis"},"content":"     * deadline, find and list.","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"AkmalHanis"},"content":"     * It will operate through the different commands and activate","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"AkmalHanis"},"content":"     * what is necessary to process the data and output the correct","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"AkmalHanis"},"content":"     * response to the command. Task will be stored and kept in","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"AkmalHanis"},"content":"     * an arrayList to ensure the reliability of data when it is called","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"AkmalHanis"},"content":"     *","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"AkmalHanis"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":94,"author":{"gitId":"AkmalHanis"},"content":"    private static void runCheck(String userInput) {","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"AkmalHanis"},"content":"        int task_num \u003d 0;","lastModifiedDate":"2023-03-03"},{"lineNumber":96,"author":{"gitId":"AkmalHanis"},"content":"        int event_num \u003d 0;","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"AkmalHanis"},"content":"        int deadline_num \u003d 0;","lastModifiedDate":"2023-03-03"},{"lineNumber":98,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":99,"author":{"gitId":"AkmalHanis"},"content":"        String[] inputs \u003d userInput.split(\"\\\\s+\", 2);","lastModifiedDate":"2023-03-03"},{"lineNumber":100,"author":{"gitId":"AkmalHanis"},"content":"        String inputCommand \u003d inputs[0];","lastModifiedDate":"2023-03-03"},{"lineNumber":101,"author":{"gitId":"AkmalHanis"},"content":"        for (int i \u003d 0; i \u003c 101; i +\u003d 1){","lastModifiedDate":"2023-03-03"},{"lineNumber":102,"author":{"gitId":"AkmalHanis"},"content":"            taskMark.add(\"[ ]\");","lastModifiedDate":"2023-03-03"},{"lineNumber":103,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":104,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":105,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":106,"author":{"gitId":"AkmalHanis"},"content":"            if (inputCommand.equals(\"bye\")) {","lastModifiedDate":"2023-03-03"},{"lineNumber":107,"author":{"gitId":"AkmalHanis"},"content":"                System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-03-03"},{"lineNumber":108,"author":{"gitId":"AkmalHanis"},"content":"                System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-03-03"},{"lineNumber":109,"author":{"gitId":"AkmalHanis"},"content":"                return;","lastModifiedDate":"2023-03-03"},{"lineNumber":110,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":111,"author":{"gitId":"AkmalHanis"},"content":"            else if (inputCommand.equals(\"list\")) {","lastModifiedDate":"2023-03-03"},{"lineNumber":112,"author":{"gitId":"AkmalHanis"},"content":"                System.out.println(\"Your saved task: \");","lastModifiedDate":"2023-03-03"},{"lineNumber":113,"author":{"gitId":"AkmalHanis"},"content":"                printList();","lastModifiedDate":"2023-03-03"},{"lineNumber":114,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":115,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":116,"author":{"gitId":"AkmalHanis"},"content":"            else if (inputCommand.equals(\"mark\")){","lastModifiedDate":"2023-03-03"},{"lineNumber":117,"author":{"gitId":"AkmalHanis"},"content":"                if (inputs.length \u003c 2){","lastModifiedDate":"2023-03-03"},{"lineNumber":118,"author":{"gitId":"AkmalHanis"},"content":"                    printErrors();","lastModifiedDate":"2023-03-03"},{"lineNumber":119,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":120,"author":{"gitId":"AkmalHanis"},"content":"                else if (Integer.parseInt(inputs[1]) \u003e taskList.size()){","lastModifiedDate":"2023-03-03"},{"lineNumber":121,"author":{"gitId":"AkmalHanis"},"content":"                    System.out.println(\"Unable to mark a non existing task\");","lastModifiedDate":"2023-03-03"},{"lineNumber":122,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":123,"author":{"gitId":"AkmalHanis"},"content":"                else{","lastModifiedDate":"2023-03-03"},{"lineNumber":124,"author":{"gitId":"AkmalHanis"},"content":"                    taskMark.add(Integer.parseInt(inputs[1]) - 1, \"[X]\");","lastModifiedDate":"2023-03-03"},{"lineNumber":125,"author":{"gitId":"AkmalHanis"},"content":"                    printMarked();","lastModifiedDate":"2023-03-03"},{"lineNumber":126,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":127,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":128,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":129,"author":{"gitId":"AkmalHanis"},"content":"            else if (inputCommand.equals(\"unmark\")){","lastModifiedDate":"2023-03-03"},{"lineNumber":130,"author":{"gitId":"AkmalHanis"},"content":"                if (inputs.length \u003c 2){","lastModifiedDate":"2023-03-03"},{"lineNumber":131,"author":{"gitId":"AkmalHanis"},"content":"                    printErrors();","lastModifiedDate":"2023-03-03"},{"lineNumber":132,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":133,"author":{"gitId":"AkmalHanis"},"content":"                else if (Integer.parseInt(inputs[1]) \u003e taskList.size()){","lastModifiedDate":"2023-03-03"},{"lineNumber":134,"author":{"gitId":"AkmalHanis"},"content":"                    System.out.println(\"Unable to unmark a non existing task\");","lastModifiedDate":"2023-03-03"},{"lineNumber":135,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":136,"author":{"gitId":"AkmalHanis"},"content":"                else{","lastModifiedDate":"2023-03-03"},{"lineNumber":137,"author":{"gitId":"AkmalHanis"},"content":"                    taskMark.add(Integer.parseInt(inputs[1]), \"[ ]\");","lastModifiedDate":"2023-03-03"},{"lineNumber":138,"author":{"gitId":"AkmalHanis"},"content":"                    printMarked();","lastModifiedDate":"2023-03-03"},{"lineNumber":139,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":140,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":141,"author":{"gitId":"AkmalHanis"},"content":"            else if (inputCommand.equals(\"delete\")){","lastModifiedDate":"2023-03-03"},{"lineNumber":142,"author":{"gitId":"AkmalHanis"},"content":"                if (inputs.length \u003c 2){","lastModifiedDate":"2023-03-03"},{"lineNumber":143,"author":{"gitId":"AkmalHanis"},"content":"                    printErrors();","lastModifiedDate":"2023-03-03"},{"lineNumber":144,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":145,"author":{"gitId":"AkmalHanis"},"content":"                else if (Integer.parseInt(inputs[1]) \u003e taskList.size()){","lastModifiedDate":"2023-03-03"},{"lineNumber":146,"author":{"gitId":"AkmalHanis"},"content":"                    System.out.println(\"Unable to delete a non existing task\");","lastModifiedDate":"2023-03-03"},{"lineNumber":147,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":148,"author":{"gitId":"AkmalHanis"},"content":"                else{","lastModifiedDate":"2023-03-03"},{"lineNumber":149,"author":{"gitId":"AkmalHanis"},"content":"                    taskList.remove(taskList.indexOf(Integer.parseInt(inputs[1])));","lastModifiedDate":"2023-03-03"},{"lineNumber":150,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":151,"author":{"gitId":"AkmalHanis"},"content":"                    taskMark.remove(taskMark.indexOf(Integer.parseInt(inputs[1])));","lastModifiedDate":"2023-03-03"},{"lineNumber":152,"author":{"gitId":"AkmalHanis"},"content":"                    printTaskNum();","lastModifiedDate":"2023-03-03"},{"lineNumber":153,"author":{"gitId":"AkmalHanis"},"content":"                    System.out.println(\"Now you have \" + taskList.size() + \" numbers of tasks left\");","lastModifiedDate":"2023-03-03"},{"lineNumber":154,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":155,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":156,"author":{"gitId":"AkmalHanis"},"content":"            else if (inputCommand.equals(\"todo\")){","lastModifiedDate":"2023-03-03"},{"lineNumber":157,"author":{"gitId":"AkmalHanis"},"content":"                if (inputs.length \u003c 2 ){","lastModifiedDate":"2023-03-03"},{"lineNumber":158,"author":{"gitId":"AkmalHanis"},"content":"                    printTaskError();","lastModifiedDate":"2023-03-03"},{"lineNumber":159,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":160,"author":{"gitId":"AkmalHanis"},"content":"                else {","lastModifiedDate":"2023-03-03"},{"lineNumber":161,"author":{"gitId":"AkmalHanis"},"content":"                    //process data","lastModifiedDate":"2023-03-03"},{"lineNumber":162,"author":{"gitId":"AkmalHanis"},"content":"                    String todoTask \u003d inputs[1];","lastModifiedDate":"2023-03-03"},{"lineNumber":163,"author":{"gitId":"AkmalHanis"},"content":"                    Todo newTodo \u003d new Todo(todoTask);","lastModifiedDate":"2023-03-03"},{"lineNumber":164,"author":{"gitId":"AkmalHanis"},"content":"                    taskList.add(newTodo);","lastModifiedDate":"2023-03-03"},{"lineNumber":165,"author":{"gitId":"AkmalHanis"},"content":"                    todoNum +\u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":166,"author":{"gitId":"AkmalHanis"},"content":"                    printAdded();","lastModifiedDate":"2023-03-03"},{"lineNumber":167,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":168,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":169,"author":{"gitId":"AkmalHanis"},"content":"            else if (inputCommand.equals(\"deadline\")){","lastModifiedDate":"2023-03-03"},{"lineNumber":170,"author":{"gitId":"AkmalHanis"},"content":"                if (inputs.length \u003c 2){","lastModifiedDate":"2023-03-03"},{"lineNumber":171,"author":{"gitId":"AkmalHanis"},"content":"                    printTaskError();","lastModifiedDate":"2023-03-03"},{"lineNumber":172,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":173,"author":{"gitId":"AkmalHanis"},"content":"                else{","lastModifiedDate":"2023-03-03"},{"lineNumber":174,"author":{"gitId":"AkmalHanis"},"content":"                    String DeadlineDetails \u003d inputs[1];","lastModifiedDate":"2023-03-03"},{"lineNumber":175,"author":{"gitId":"AkmalHanis"},"content":"                    String[] details \u003d DeadlineDetails.split(\"/by\");","lastModifiedDate":"2023-03-03"},{"lineNumber":176,"author":{"gitId":"AkmalHanis"},"content":"                    Todo newTodo \u003d new Deadline(details[0].trim(), details[1].trim());","lastModifiedDate":"2023-03-03"},{"lineNumber":177,"author":{"gitId":"AkmalHanis"},"content":"                    taskList.add(newTodo);","lastModifiedDate":"2023-03-03"},{"lineNumber":178,"author":{"gitId":"AkmalHanis"},"content":"                    deadlineNum +\u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":179,"author":{"gitId":"AkmalHanis"},"content":"                    printAdded();","lastModifiedDate":"2023-03-03"},{"lineNumber":180,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":181,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":182,"author":{"gitId":"AkmalHanis"},"content":"            else if (inputCommand.equals(\"event\")){","lastModifiedDate":"2023-03-03"},{"lineNumber":183,"author":{"gitId":"AkmalHanis"},"content":"                if (inputs.length \u003c 2){","lastModifiedDate":"2023-03-03"},{"lineNumber":184,"author":{"gitId":"AkmalHanis"},"content":"                    printTaskError();","lastModifiedDate":"2023-03-03"},{"lineNumber":185,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":186,"author":{"gitId":"AkmalHanis"},"content":"                else{","lastModifiedDate":"2023-03-03"},{"lineNumber":187,"author":{"gitId":"AkmalHanis"},"content":"                    String EventDetails \u003d inputs[1];","lastModifiedDate":"2023-03-03"},{"lineNumber":188,"author":{"gitId":"AkmalHanis"},"content":"                    String[] details \u003d EventDetails.split(\"/from|/to\");","lastModifiedDate":"2023-03-03"},{"lineNumber":189,"author":{"gitId":"AkmalHanis"},"content":"                    Todo newTodo \u003d new Event(details[0].trim(), details[1].trim(), details[2].trim());","lastModifiedDate":"2023-03-03"},{"lineNumber":190,"author":{"gitId":"AkmalHanis"},"content":"                    taskList.add(newTodo);","lastModifiedDate":"2023-03-03"},{"lineNumber":191,"author":{"gitId":"AkmalHanis"},"content":"                    eventNum +\u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":192,"author":{"gitId":"AkmalHanis"},"content":"                    printAdded();","lastModifiedDate":"2023-03-03"},{"lineNumber":193,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":194,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":195,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":196,"author":{"gitId":"AkmalHanis"},"content":"            else if (inputCommand.equals(\"find\")){","lastModifiedDate":"2023-03-03"},{"lineNumber":197,"author":{"gitId":"AkmalHanis"},"content":"                System.out.println(\"___________________________________________________________\");","lastModifiedDate":"2023-03-03"},{"lineNumber":198,"author":{"gitId":"AkmalHanis"},"content":"                System.out.println(\"Here are the matching tasks found in your list: \");","lastModifiedDate":"2023-03-03"},{"lineNumber":199,"author":{"gitId":"AkmalHanis"},"content":"                String WordCheck \u003d inputs[1];","lastModifiedDate":"2023-03-03"},{"lineNumber":200,"author":{"gitId":"AkmalHanis"},"content":"                int foundCounter \u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":201,"author":{"gitId":"AkmalHanis"},"content":"                boolean foundMatch \u003d false;","lastModifiedDate":"2023-03-03"},{"lineNumber":202,"author":{"gitId":"AkmalHanis"},"content":"                for (int i \u003d 0; i \u003c taskList.size(); i +\u003d 1){","lastModifiedDate":"2023-03-03"},{"lineNumber":203,"author":{"gitId":"AkmalHanis"},"content":"                    String TaskToCheck \u003d taskList.get(i).toString();","lastModifiedDate":"2023-03-03"},{"lineNumber":204,"author":{"gitId":"AkmalHanis"},"content":"                    String[] words \u003d TaskToCheck.split(\" \");","lastModifiedDate":"2023-03-03"},{"lineNumber":205,"author":{"gitId":"AkmalHanis"},"content":"                    for (int j \u003d 0; j \u003c words.length; j +\u003d 1){","lastModifiedDate":"2023-03-03"},{"lineNumber":206,"author":{"gitId":"AkmalHanis"},"content":"                        if (words[j].equals(WordCheck)){","lastModifiedDate":"2023-03-03"},{"lineNumber":207,"author":{"gitId":"AkmalHanis"},"content":"                            foundMatch \u003d true;","lastModifiedDate":"2023-03-03"},{"lineNumber":208,"author":{"gitId":"AkmalHanis"},"content":"                            break;","lastModifiedDate":"2023-03-03"},{"lineNumber":209,"author":{"gitId":"AkmalHanis"},"content":"                        }","lastModifiedDate":"2023-03-03"},{"lineNumber":210,"author":{"gitId":"AkmalHanis"},"content":"                    }","lastModifiedDate":"2023-03-03"},{"lineNumber":211,"author":{"gitId":"AkmalHanis"},"content":"                    if (foundMatch \u003d\u003d true){","lastModifiedDate":"2023-03-03"},{"lineNumber":212,"author":{"gitId":"AkmalHanis"},"content":"                        System.out.println((foundCounter) + \". \" + taskMark.get(i) + taskList.get(i));","lastModifiedDate":"2023-03-03"},{"lineNumber":213,"author":{"gitId":"AkmalHanis"},"content":"                        foundMatch \u003d false;","lastModifiedDate":"2023-03-03"},{"lineNumber":214,"author":{"gitId":"AkmalHanis"},"content":"                        foundCounter +\u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":215,"author":{"gitId":"AkmalHanis"},"content":"                    }","lastModifiedDate":"2023-03-03"},{"lineNumber":216,"author":{"gitId":"AkmalHanis"},"content":"                }","lastModifiedDate":"2023-03-03"},{"lineNumber":217,"author":{"gitId":"AkmalHanis"},"content":"                System.out.println(\"___________________________________________________________\");","lastModifiedDate":"2023-03-03"},{"lineNumber":218,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":219,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":220,"author":{"gitId":"AkmalHanis"},"content":"            else{","lastModifiedDate":"2023-03-03"},{"lineNumber":221,"author":{"gitId":"AkmalHanis"},"content":"                System.out.println(\"I don\u0027t understand that command\");","lastModifiedDate":"2023-03-03"},{"lineNumber":222,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":223,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":224,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":225,"author":{"gitId":"AkmalHanis"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-03-03"},{"lineNumber":226,"author":{"gitId":"AkmalHanis"},"content":"        File f \u003d new File(\"./data/chicken.txt\");","lastModifiedDate":"2023-03-03"},{"lineNumber":227,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"full path: \" + f.getAbsolutePath());","lastModifiedDate":"2023-03-03"},{"lineNumber":228,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"file exists?: \" + f.exists());","lastModifiedDate":"2023-03-03"},{"lineNumber":229,"author":{"gitId":"AkmalHanis"},"content":"        System.out.println(\"is Directory?: \" + f.isDirectory());","lastModifiedDate":"2023-03-03"},{"lineNumber":230,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":231,"author":{"gitId":"AkmalHanis"},"content":"        try {","lastModifiedDate":"2023-03-03"},{"lineNumber":232,"author":{"gitId":"AkmalHanis"},"content":"            printFileContents(\"./data/chicken.txt\");","lastModifiedDate":"2023-03-03"},{"lineNumber":233,"author":{"gitId":"AkmalHanis"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":234,"author":{"gitId":"AkmalHanis"},"content":"            System.out.println(\"File not found\");","lastModifiedDate":"2023-03-03"},{"lineNumber":235,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":236,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":237,"author":{"gitId":"AkmalHanis"},"content":"        printStart();","lastModifiedDate":"2023-03-03"},{"lineNumber":238,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":239,"author":{"gitId":"AkmalHanis"},"content":"        Scanner enter \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-03"},{"lineNumber":240,"author":{"gitId":"AkmalHanis"},"content":"        String file2 \u003d \"./data/chicken.txt\";","lastModifiedDate":"2023-03-03"},{"lineNumber":241,"author":{"gitId":"AkmalHanis"},"content":"        FileWriter fw;","lastModifiedDate":"2023-03-03"},{"lineNumber":242,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":243,"author":{"gitId":"AkmalHanis"},"content":"        while (repeat \u003d\u003d 1){","lastModifiedDate":"2023-03-03"},{"lineNumber":244,"author":{"gitId":"AkmalHanis"},"content":"            String echo \u003d enter.nextLine();","lastModifiedDate":"2023-03-03"},{"lineNumber":245,"author":{"gitId":"AkmalHanis"},"content":"            if (echo.equals(\"bye\")){","lastModifiedDate":"2023-03-03"},{"lineNumber":246,"author":{"gitId":"AkmalHanis"},"content":"                printEnd();","lastModifiedDate":"2023-03-03"},{"lineNumber":247,"author":{"gitId":"AkmalHanis"},"content":"                break;","lastModifiedDate":"2023-03-03"},{"lineNumber":248,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":249,"author":{"gitId":"AkmalHanis"},"content":"            runCheck(echo);","lastModifiedDate":"2023-03-03"},{"lineNumber":250,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":251,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":252,"author":{"gitId":"AkmalHanis"},"content":"        try {","lastModifiedDate":"2023-03-03"},{"lineNumber":253,"author":{"gitId":"AkmalHanis"},"content":"            fw \u003d new FileWriter(\"./data/chicken.txt\");","lastModifiedDate":"2023-03-03"},{"lineNumber":254,"author":{"gitId":"AkmalHanis"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-03"},{"lineNumber":255,"author":{"gitId":"AkmalHanis"},"content":"                fw.write(taskList.get(i) + System.lineSeparator());;","lastModifiedDate":"2023-03-03"},{"lineNumber":256,"author":{"gitId":"AkmalHanis"},"content":"            }","lastModifiedDate":"2023-03-03"},{"lineNumber":257,"author":{"gitId":"AkmalHanis"},"content":"            fw.close();","lastModifiedDate":"2023-03-03"},{"lineNumber":258,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":259,"author":{"gitId":"AkmalHanis"},"content":"        catch (IOException e) {","lastModifiedDate":"2023-03-03"},{"lineNumber":260,"author":{"gitId":"AkmalHanis"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2023-03-03"},{"lineNumber":261,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":262,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":263,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":264,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":265,"author":{"gitId":"AkmalHanis"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"AkmalHanis":265}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AkmalHanis"},"content":"package task;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"AkmalHanis"},"content":"/** Deadline is a class that holds the information of the deadline that user has inputted to","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"AkmalHanis"},"content":" * be done.","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"AkmalHanis"},"content":" * The String DeadlineToDoa and Timeline is to contain the specific","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"AkmalHanis"},"content":" * tasks denoted by the user as well as the due date of the task held by.","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"AkmalHanis"},"content":" * The class contains the method Deadline which allows us to add the specific Task","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"AkmalHanis"},"content":" * into the new Event through inheritance. The class also contains","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"AkmalHanis"},"content":" * the method toString which strings the Deadline together with the specific details","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"AkmalHanis"},"content":" * of the task that is attributed to its marking as a Deadline","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"AkmalHanis"},"content":" *","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"AkmalHanis"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"AkmalHanis"},"content":"public class Deadline extends Todo {","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"AkmalHanis"},"content":"    public String TimeLine;","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"AkmalHanis"},"content":"    public String DeadlineToDo;","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"AkmalHanis"},"content":"    public static int NoOfDeadline;","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"AkmalHanis"},"content":"    public Deadline(String DeadlineToDo, String TimeLine){","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"AkmalHanis"},"content":"        super(DeadlineToDo);","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"AkmalHanis"},"content":"        NoOfDeadline +\u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"AkmalHanis"},"content":"        this.TimeLine \u003d TimeLine;","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"AkmalHanis"},"content":"    public String toString(){","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"AkmalHanis"},"content":"        String updateString \u003d super.toString().replaceFirst(\"T\",\"D\");","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"AkmalHanis"},"content":"        return   updateString + \" (By: \" + TimeLine + \")\";","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"AkmalHanis"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"AkmalHanis":30}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AkmalHanis"},"content":"package task;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"AkmalHanis"},"content":"/** Event is a class that holds the information of the event that user has inputted to","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"AkmalHanis"},"content":" * be done.","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"AkmalHanis"},"content":" * The String EventToDo, EventFrom and EventTo is to contain the specific","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"AkmalHanis"},"content":" * tasks denoted by the user as well as the duration of the task held by","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"AkmalHanis"},"content":" * EventFrom and EventTo. The class contains the method Event which allows us to","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"AkmalHanis"},"content":" * add the specific Task into the new Event through inheritance. The class contains","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"AkmalHanis"},"content":" * the method toString which strings the Event together with the specific details","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"AkmalHanis"},"content":" * of the task that is attributed to its marking as an Event","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"AkmalHanis"},"content":" *","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"AkmalHanis"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"AkmalHanis"},"content":"public class Event extends Todo {","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"AkmalHanis"},"content":"        public String EventToDo;","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"AkmalHanis"},"content":"        public String EventFrom;","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"AkmalHanis"},"content":"        public String EventTo;","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"AkmalHanis"},"content":"        public static int NoOfEvents;","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"AkmalHanis"},"content":"        public Event(String EventToDo, String EventFrom, String EventTo){","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"AkmalHanis"},"content":"            super(EventToDo);","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"AkmalHanis"},"content":"            this.EventFrom \u003d EventFrom;","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"AkmalHanis"},"content":"            NoOfEvents +\u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"AkmalHanis"},"content":"            this.EventTo \u003d EventTo;","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"AkmalHanis"},"content":"        public String toString(){","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"AkmalHanis"},"content":"            String updateString \u003d super.toString().replaceFirst(\"T\",\"E\");","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"AkmalHanis"},"content":"            return updateString + \" (From: \" + EventFrom + \" to: \" + EventTo + \")\";","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"AkmalHanis"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"AkmalHanis":36}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AkmalHanis"},"content":"package task;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"AkmalHanis"},"content":"/** Todo is a class that holds the information of the task that user has inputted to","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"AkmalHanis"},"content":" * be done.","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"AkmalHanis"},"content":" * The String ThingToDo is to contain the specific task denoted by the user.","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"AkmalHanis"},"content":" * The class contains the method Todo which allows us to add the specific","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"AkmalHanis"},"content":" * Task into the new Todo.","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"AkmalHanis"},"content":" * The class contains the method toString which strings the task together","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"AkmalHanis"},"content":" * with the specific details that is attributed to its marking as a task","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"AkmalHanis"},"content":" *","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"AkmalHanis"},"content":" */","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"AkmalHanis"},"content":"public class Todo {","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"AkmalHanis"},"content":"    String ThingToDo;","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"AkmalHanis"},"content":"    public static int taskNum;","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"AkmalHanis"},"content":"    public Todo(String ThingToDo){","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"AkmalHanis"},"content":"        this.ThingToDo \u003d ThingToDo;","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"AkmalHanis"},"content":"        taskNum +\u003d 1;","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"AkmalHanis"},"content":"    public String toString(){","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"AkmalHanis"},"content":"        return \"[T] \" + ThingToDo;","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"AkmalHanis"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"AkmalHanis"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"AkmalHanis"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"AkmalHanis":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"AkmalHanis"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"AkmalHanis":1,"-":20}}]
