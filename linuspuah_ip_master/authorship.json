[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"## What is Limey","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"Limey is a CLI application used to manage any tasks that you may have. It is capable of remembering which task you have done and which you have not yet so you never need to worry about forgetting about important events and deadlines","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"linuspuah"},"content":"### Adding task","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"-Todo, deadline or event","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"linuspuah"},"content":"### Find a task","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"linuspuah"},"content":"### List all tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"linuspuah"},"content":"### Mark a task as done","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"linuspuah"},"content":"  ","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"linuspuah"},"content":"### Un-mark a task","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"linuspuah"},"content":"  ","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"linuspuah"},"content":"### Delete a task","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"linuspuah"},"content":"  ","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"linuspuah"},"content":"### Get help","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"linuspuah"},"content":"### `todo TASKNAME` - adds a task of todo type to your task list","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"linuspuah"},"content":"Example of usage: ","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"linuspuah"},"content":"`todo clean dishes` - adds clean dishes to the task list as a todo type task","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":32,"author":{"gitId":"linuspuah"},"content":"\tadded: clean dishes","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"linuspuah"},"content":"\tTotal number of current tasks: 4","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"linuspuah"},"content":"### `deadline TASKNAME /by YYYY-MM-DDTHH:MM` - adds a task of deadline type to your task list","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"linuspuah"},"content":"`deadline lab assignment /by 2023-02-08T23:59` - adds lab assignment which is due on 8th Feb 2023 at 11:59PM to the task list as a deadline type task","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":43,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":44,"author":{"gitId":"linuspuah"},"content":"\tadded: lab assignment (by: 08 Feb 2023 11:59 PM)","lastModifiedDate":"2023-02-27"},{"lineNumber":45,"author":{"gitId":"linuspuah"},"content":"\tTotal number of current tasks: 2","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"linuspuah"},"content":"### `event TASKNAME /by YYYY-MM-DDTHH:MM` - adds a task of deadline type to your task list","lastModifiedDate":"2023-02-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"linuspuah"},"content":"Example of usage: ","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"linuspuah"},"content":"`event exam /from 2023-02-08T14:00 /to 2023-02-08T15:30` - adds exam which is from 8th Feb 2023 at 2PM to 3:30PM to the task list as a event type task","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":55,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":56,"author":{"gitId":"linuspuah"},"content":"\tadded: exam (from 08 Feb 2023 2:00 PM to 08 Feb 2023 3:30 PM)","lastModifiedDate":"2023-02-27"},{"lineNumber":57,"author":{"gitId":"linuspuah"},"content":"\tTotal number of current tasks: 3","lastModifiedDate":"2023-02-27"},{"lineNumber":58,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"linuspuah"},"content":"### `find SEARCHTERM` - searches through all tasks for searchterm","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"linuspuah"},"content":"Example of usage: ","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"linuspuah"},"content":"`find lab assignment` - prints all tasks with \"lab assignment\" in the name","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":67,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":68,"author":{"gitId":"linuspuah"},"content":"\t1.[D][ ] lab assignment (by: 08 Feb 2023 11:59 PM)","lastModifiedDate":"2023-02-27"},{"lineNumber":69,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":70,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":71,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":72,"author":{"gitId":"linuspuah"},"content":"### `list` - list all tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":73,"author":{"gitId":"linuspuah"},"content":"Example of usage: ","lastModifiedDate":"2023-02-27"},{"lineNumber":74,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":75,"author":{"gitId":"linuspuah"},"content":"`list` - prints all tasks ","lastModifiedDate":"2023-02-27"},{"lineNumber":76,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":77,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":78,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":79,"author":{"gitId":"linuspuah"},"content":"\t1.[T][ ] clean dishes","lastModifiedDate":"2023-02-27"},{"lineNumber":80,"author":{"gitId":"linuspuah"},"content":"\t2.[D][ ] lab assignment (by: 08 Feb 2023 11:59 PM)","lastModifiedDate":"2023-02-27"},{"lineNumber":81,"author":{"gitId":"linuspuah"},"content":"\t3.[E][ ] exam (from 08 Feb 2023 2:00 PM to 08 Feb 2023 3:30 PM)","lastModifiedDate":"2023-02-27"},{"lineNumber":82,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":83,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":85,"author":{"gitId":"linuspuah"},"content":"### `mark LISTNUM` - marks the LISTNUM item in the task list as done","lastModifiedDate":"2023-02-27"},{"lineNumber":86,"author":{"gitId":"linuspuah"},"content":"Example of usage: ","lastModifiedDate":"2023-02-27"},{"lineNumber":87,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":88,"author":{"gitId":"linuspuah"},"content":"`mark 2` - to mark the second item on the list as done","lastModifiedDate":"2023-02-27"},{"lineNumber":89,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":90,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":91,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":92,"author":{"gitId":"linuspuah"},"content":"\tI have just marked this task as done:","lastModifiedDate":"2023-02-27"},{"lineNumber":93,"author":{"gitId":"linuspuah"},"content":"\t[D][X] lab assignment (by: 08 Feb 2023 11:59 PM)","lastModifiedDate":"2023-02-27"},{"lineNumber":94,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":95,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":96,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":97,"author":{"gitId":"linuspuah"},"content":"### `unmark LISTNUM` - marks the LISTNUM item in the task list as not done","lastModifiedDate":"2023-02-27"},{"lineNumber":98,"author":{"gitId":"linuspuah"},"content":"Example of usage: ","lastModifiedDate":"2023-02-27"},{"lineNumber":99,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":100,"author":{"gitId":"linuspuah"},"content":"`unmark 2` - to mark the second item on the list as not done","lastModifiedDate":"2023-02-27"},{"lineNumber":101,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":102,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":103,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":104,"author":{"gitId":"linuspuah"},"content":"\tThis task has been marked as not done yet:","lastModifiedDate":"2023-02-27"},{"lineNumber":105,"author":{"gitId":"linuspuah"},"content":"\t[D][ ] lab assignment (by: 08 Feb 2023 11:59 PM)","lastModifiedDate":"2023-02-27"},{"lineNumber":106,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":108,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":109,"author":{"gitId":"linuspuah"},"content":"### `delete LISTNUM` - deletes the LISTNUM item in the task list","lastModifiedDate":"2023-02-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":112,"author":{"gitId":"linuspuah"},"content":"`delete 2` - to delete the second item on the list as not done","lastModifiedDate":"2023-02-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":114,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":115,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":116,"author":{"gitId":"linuspuah"},"content":"\tThis task has been deleted:","lastModifiedDate":"2023-02-27"},{"lineNumber":117,"author":{"gitId":"linuspuah"},"content":"\t[D][ ] lab assignment (by: 08 Feb 2023 11:59 PM)","lastModifiedDate":"2023-02-27"},{"lineNumber":118,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":120,"author":{"gitId":"linuspuah"},"content":"```","lastModifiedDate":"2023-02-27"},{"lineNumber":121,"author":{"gitId":"linuspuah"},"content":"### `help` - prints all valid commands with useful examples","lastModifiedDate":"2023-02-27"},{"lineNumber":122,"author":{"gitId":"linuspuah"},"content":"Example of usage: ","lastModifiedDate":"2023-02-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":124,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":125,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":126,"author":{"gitId":"linuspuah"},"content":"\tThe following are some helpful commands on how to use Limey.","lastModifiedDate":"2023-02-27"},{"lineNumber":127,"author":{"gitId":"linuspuah"},"content":"\tTo add a task(todo/deadline/event):","lastModifiedDate":"2023-02-27"},{"lineNumber":128,"author":{"gitId":"linuspuah"},"content":"\t\t\"todo math\" OR \"deadline lab assignment /by 2023-02-08T23:59\" OR \"event exam /from 2023-02-08T14:00 /to 2023-02-08T15:30\"","lastModifiedDate":"2023-02-27"},{"lineNumber":129,"author":{"gitId":"linuspuah"},"content":"\tTo find a task:","lastModifiedDate":"2023-02-27"},{"lineNumber":130,"author":{"gitId":"linuspuah"},"content":"\t\t\"find lab assignment\" returns all tasks with \"lab assignment\" in the name","lastModifiedDate":"2023-02-27"},{"lineNumber":131,"author":{"gitId":"linuspuah"},"content":"\tTo list all tasks:","lastModifiedDate":"2023-02-27"},{"lineNumber":132,"author":{"gitId":"linuspuah"},"content":"\t\t\"list\" lists all tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":133,"author":{"gitId":"linuspuah"},"content":"\tTo mark a task:","lastModifiedDate":"2023-02-27"},{"lineNumber":134,"author":{"gitId":"linuspuah"},"content":"\t\t\"mark 2\" to mark the second item on the list","lastModifiedDate":"2023-02-27"},{"lineNumber":135,"author":{"gitId":"linuspuah"},"content":"\tTo un-mark a task:","lastModifiedDate":"2023-02-27"},{"lineNumber":136,"author":{"gitId":"linuspuah"},"content":"\t\t\"unmark 2\" to un-mark the second item on the list","lastModifiedDate":"2023-02-27"},{"lineNumber":137,"author":{"gitId":"linuspuah"},"content":"\tTo delete a task:","lastModifiedDate":"2023-02-27"},{"lineNumber":138,"author":{"gitId":"linuspuah"},"content":"\t\t\"delete 2\" to delete the second item on the list","lastModifiedDate":"2023-02-27"},{"lineNumber":139,"author":{"gitId":"linuspuah"},"content":"\tTo get help from this page again:","lastModifiedDate":"2023-02-27"},{"lineNumber":140,"author":{"gitId":"linuspuah"},"content":"\t\t\"help\" will show all the helpful commands listed above","lastModifiedDate":"2023-02-27"},{"lineNumber":141,"author":{"gitId":"linuspuah"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":143,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"}],"authorContributionMap":{"linuspuah":113,"-":30}},{"path":"src/main/java/limey/Limey.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"import limey.command.Deadline;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"import limey.command.Event;","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"linuspuah"},"content":"import limey.command.Task;","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"linuspuah"},"content":"import limey.command.Todo;","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"import limey.exception.commandNotFoundException;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"linuspuah"},"content":"import limey.exception.invalidDateException;","lastModifiedDate":"2023-02-14"},{"lineNumber":9,"author":{"gitId":"linuspuah"},"content":"import limey.iohandler.Parser;","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"linuspuah"},"content":"import limey.iohandler.Speech;","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"linuspuah"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"linuspuah"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"linuspuah"},"content":"import limey.iohandler.FileHandler;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"linuspuah"},"content":"import java.io.File;","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"linuspuah"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"linuspuah"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"linuspuah"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"linuspuah"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"linuspuah"},"content":"public class Limey {","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"linuspuah"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"linuspuah"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"linuspuah"},"content":"        //initialise variables","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"linuspuah"},"content":"        String filePath \u003d \"C:\\\\Users\\\\sunil\\\\desktop\\\\NUS\\\\CS2113\\\\Indiv_Project\\\\src\\\\main\\\\SavedList\";","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"linuspuah"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"linuspuah"},"content":"        if (f.exists() \u0026\u0026 !f.isDirectory()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"linuspuah"},"content":"            retrieveSavedList(tasks);","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"linuspuah"},"content":"        String inLine;","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"linuspuah"},"content":"        String firstWord;","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"linuspuah"},"content":"        String[] wordList;","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"linuspuah"},"content":"        //start user interface","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"linuspuah"},"content":"        Speech.introMessage();","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"linuspuah"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"linuspuah"},"content":"        inLine \u003d in.nextLine().trim();","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"linuspuah"},"content":"        wordList \u003d Parser.splitInput(inLine);","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"linuspuah"},"content":"        firstWord \u003d Parser.getFirstWord(inLine);","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"linuspuah"},"content":"        initialiseLimey(firstWord, tasks, wordList, inLine, in);","lastModifiedDate":"2023-02-08"},{"lineNumber":46,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":47,"author":{"gitId":"linuspuah"},"content":"        exitLimey(tasks);","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"linuspuah"},"content":"    private static void retrieveSavedList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"linuspuah"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"linuspuah"},"content":"            String filePath \u003d \"C:\\\\Users\\\\sunil\\\\desktop\\\\NUS\\\\CS2113\\\\Indiv_Project\\\\src\\\\main\\\\SavedList\";","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"linuspuah"},"content":"            FileHandler.readFileToTasks(filePath, tasks);","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"linuspuah"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"linuspuah"},"content":"            Speech.invalidMessage(\"File not found\");","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"linuspuah"},"content":"    private static void exitLimey(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"linuspuah"},"content":"        String filePath \u003d \"C:\\\\Users\\\\sunil\\\\desktop\\\\NUS\\\\CS2113\\\\Indiv_Project\\\\src\\\\main\\\\SavedList\";","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"linuspuah"},"content":"        File tempDir \u003d new File(filePath);","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"linuspuah"},"content":"        if (Task.numTasks \u003d\u003d 0 \u0026 tempDir.exists()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":63,"author":{"gitId":"linuspuah"},"content":"            try {","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"linuspuah"},"content":"                FileHandler.clearFile(filePath);","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"linuspuah"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"linuspuah"},"content":"                Speech.invalidMessage(\"File cannot be cleared properly\");","lastModifiedDate":"2023-02-26"},{"lineNumber":67,"author":{"gitId":"linuspuah"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":68,"author":{"gitId":"linuspuah"},"content":"        } else {","lastModifiedDate":"2023-02-26"},{"lineNumber":69,"author":{"gitId":"linuspuah"},"content":"            try {","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"linuspuah"},"content":"                FileHandler.writeToFile(filePath, tasks);","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"linuspuah"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"linuspuah"},"content":"                Speech.invalidMessage(\"File not found\");","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"linuspuah"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":75,"author":{"gitId":"linuspuah"},"content":"        Speech.sayBye();","lastModifiedDate":"2023-02-08"},{"lineNumber":76,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":77,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":78,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":79,"author":{"gitId":"linuspuah"},"content":"     * Creates and adds a new task with the corresponding name","lastModifiedDate":"2023-02-27"},{"lineNumber":80,"author":{"gitId":"linuspuah"},"content":"     * to the current tasks arraylist","lastModifiedDate":"2023-02-27"},{"lineNumber":81,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":82,"author":{"gitId":"linuspuah"},"content":"     * @param tasks the full array list of current tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":83,"author":{"gitId":"linuspuah"},"content":"     * @param inLine input line read from the user input on the command line interface","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":85,"author":{"gitId":"linuspuah"},"content":"    private static void makeNewTask(ArrayList\u003cTask\u003e tasks, String inLine, String firstWord) throws commandNotFoundException {","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"linuspuah"},"content":"        Task taskIn;","lastModifiedDate":"2023-02-08"},{"lineNumber":87,"author":{"gitId":"linuspuah"},"content":"        inLine \u003d inLine.substring(inLine.indexOf(\" \") + 1);","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"linuspuah"},"content":"        switch (firstWord) {","lastModifiedDate":"2023-02-08"},{"lineNumber":89,"author":{"gitId":"linuspuah"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-08"},{"lineNumber":90,"author":{"gitId":"linuspuah"},"content":"            try {","lastModifiedDate":"2023-02-08"},{"lineNumber":91,"author":{"gitId":"linuspuah"},"content":"                taskIn \u003d new Deadline(inLine);","lastModifiedDate":"2023-02-08"},{"lineNumber":92,"author":{"gitId":"linuspuah"},"content":"            } catch (invalidDateException | StringIndexOutOfBoundsException | DateTimeParseException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"linuspuah"},"content":"                Speech.invalidMessage(\"Invalid deadline date, please format date as /by yyyy-mm-ddTHH:MM\\n\\tExample to set assignment deadline on 8th Feb 2023 at 11:59pm input the following \\\"deadline assignment /by 2023-02-08T23:59\\\"\");","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"linuspuah"},"content":"                return;","lastModifiedDate":"2023-02-08"},{"lineNumber":95,"author":{"gitId":"linuspuah"},"content":"            }","lastModifiedDate":"2023-02-08"},{"lineNumber":96,"author":{"gitId":"linuspuah"},"content":"            break;","lastModifiedDate":"2023-02-08"},{"lineNumber":97,"author":{"gitId":"linuspuah"},"content":"        case \"event\":","lastModifiedDate":"2023-02-08"},{"lineNumber":98,"author":{"gitId":"linuspuah"},"content":"            try {","lastModifiedDate":"2023-02-08"},{"lineNumber":99,"author":{"gitId":"linuspuah"},"content":"                taskIn \u003d new Event(inLine);","lastModifiedDate":"2023-02-08"},{"lineNumber":100,"author":{"gitId":"linuspuah"},"content":"            } catch (invalidDateException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":101,"author":{"gitId":"linuspuah"},"content":"                Speech.invalidMessage(\"Invalid event date, please format date as /by yyyy-mm-ddTHH:MM\\n\\tExample to set exam on 8th Feb 2023 2:00-3:30pm, input the following \\\"event exam /from 2023-02-08T14:00 /to 2023-02-08T15:30\\\"\");","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"linuspuah"},"content":"                return;","lastModifiedDate":"2023-02-08"},{"lineNumber":103,"author":{"gitId":"linuspuah"},"content":"            }","lastModifiedDate":"2023-02-08"},{"lineNumber":104,"author":{"gitId":"linuspuah"},"content":"            break;","lastModifiedDate":"2023-02-08"},{"lineNumber":105,"author":{"gitId":"linuspuah"},"content":"        case \"todo\": // currently default create a todo object","lastModifiedDate":"2023-02-08"},{"lineNumber":106,"author":{"gitId":"linuspuah"},"content":"            taskIn \u003d new Todo(inLine);","lastModifiedDate":"2023-02-08"},{"lineNumber":107,"author":{"gitId":"linuspuah"},"content":"            break;","lastModifiedDate":"2023-02-08"},{"lineNumber":108,"author":{"gitId":"linuspuah"},"content":"        default:","lastModifiedDate":"2023-02-08"},{"lineNumber":109,"author":{"gitId":"linuspuah"},"content":"            throw new commandNotFoundException();","lastModifiedDate":"2023-02-08"},{"lineNumber":110,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":111,"author":{"gitId":"linuspuah"},"content":"        tasks.add(taskIn);","lastModifiedDate":"2023-02-15"},{"lineNumber":112,"author":{"gitId":"linuspuah"},"content":"        Task.numTasks++;","lastModifiedDate":"2023-02-08"},{"lineNumber":113,"author":{"gitId":"linuspuah"},"content":"        Speech.printAdded(taskIn, Task.numTasks);","lastModifiedDate":"2023-02-08"},{"lineNumber":114,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":115,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":116,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":117,"author":{"gitId":"linuspuah"},"content":"     * Reads every input line from the command line interface to detect for any","lastModifiedDate":"2023-02-27"},{"lineNumber":118,"author":{"gitId":"linuspuah"},"content":"     * given command (find, list, mark, unmark, delete, help, bye, todo, deadline, event)","lastModifiedDate":"2023-02-27"},{"lineNumber":119,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":120,"author":{"gitId":"linuspuah"},"content":"     * If input command is not \"bye\", the respective function of the command will be done","lastModifiedDate":"2023-02-27"},{"lineNumber":121,"author":{"gitId":"linuspuah"},"content":"     * and it will wait for the next command. If the input command is \"bye\"","lastModifiedDate":"2023-02-27"},{"lineNumber":122,"author":{"gitId":"linuspuah"},"content":"     * the program will terminate","lastModifiedDate":"2023-02-27"},{"lineNumber":123,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":124,"author":{"gitId":"linuspuah"},"content":"     * @param firstWord the command given by the user input","lastModifiedDate":"2023-02-27"},{"lineNumber":125,"author":{"gitId":"linuspuah"},"content":"     * @param tasks the list of current tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":126,"author":{"gitId":"linuspuah"},"content":"     * @param wordList string array of individual words given by the user input","lastModifiedDate":"2023-02-27"},{"lineNumber":127,"author":{"gitId":"linuspuah"},"content":"     * @param inLine input line read from the user input on the command line interface","lastModifiedDate":"2023-02-27"},{"lineNumber":128,"author":{"gitId":"linuspuah"},"content":"     * @param in the scanner to read new input lines from Command Line Interface","lastModifiedDate":"2023-02-27"},{"lineNumber":129,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":130,"author":{"gitId":"linuspuah"},"content":"    private static void initialiseLimey(String firstWord, ArrayList\u003cTask\u003e tasks, String[] wordList, String inLine, Scanner in) {","lastModifiedDate":"2023-02-15"},{"lineNumber":131,"author":{"gitId":"linuspuah"},"content":"        while (!firstWord.equals(\"bye\")) { //loop until input \u0027bye\u0027","lastModifiedDate":"2023-02-15"},{"lineNumber":132,"author":{"gitId":"linuspuah"},"content":"            switch (firstWord) { //switch case to decide what to do","lastModifiedDate":"2023-02-15"},{"lineNumber":133,"author":{"gitId":"linuspuah"},"content":"            case \"find\":","lastModifiedDate":"2023-02-26"},{"lineNumber":134,"author":{"gitId":"linuspuah"},"content":"                    String searchTerm \u003d inLine.trim().substring(4).trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":135,"author":{"gitId":"linuspuah"},"content":"                    ArrayList\u003cTask\u003e listFound \u003d new ArrayList\u003c\u003e(tasks.stream()","lastModifiedDate":"2023-02-26"},{"lineNumber":136,"author":{"gitId":"linuspuah"},"content":"                            .filter(t -\u003e t.getTaskIdentity().contains(searchTerm))","lastModifiedDate":"2023-02-26"},{"lineNumber":137,"author":{"gitId":"linuspuah"},"content":"                            .collect(Collectors.toList()));","lastModifiedDate":"2023-02-26"},{"lineNumber":138,"author":{"gitId":"linuspuah"},"content":"                    if(listFound.isEmpty()){","lastModifiedDate":"2023-02-26"},{"lineNumber":139,"author":{"gitId":"linuspuah"},"content":"                        Speech.printNoFoundTask(searchTerm);","lastModifiedDate":"2023-02-26"},{"lineNumber":140,"author":{"gitId":"linuspuah"},"content":"                        break;","lastModifiedDate":"2023-02-26"},{"lineNumber":141,"author":{"gitId":"linuspuah"},"content":"                    } else if (searchTerm.equals(\"\")) {","lastModifiedDate":"2023-02-26"},{"lineNumber":142,"author":{"gitId":"linuspuah"},"content":"                        Speech.invalidMessage(\"Empty Search term\");","lastModifiedDate":"2023-02-26"},{"lineNumber":143,"author":{"gitId":"linuspuah"},"content":"                        break;","lastModifiedDate":"2023-02-26"},{"lineNumber":144,"author":{"gitId":"linuspuah"},"content":"                    }","lastModifiedDate":"2023-02-26"},{"lineNumber":145,"author":{"gitId":"linuspuah"},"content":"                    Speech.printTaskList(listFound, listFound.size());","lastModifiedDate":"2023-02-26"},{"lineNumber":146,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-02-26"},{"lineNumber":147,"author":{"gitId":"linuspuah"},"content":"            case \"list\":","lastModifiedDate":"2023-01-26"},{"lineNumber":148,"author":{"gitId":"linuspuah"},"content":"                try {","lastModifiedDate":"2023-02-15"},{"lineNumber":149,"author":{"gitId":"linuspuah"},"content":"                    Speech.printTaskList(tasks, Task.numTasks);","lastModifiedDate":"2023-01-31"},{"lineNumber":150,"author":{"gitId":"linuspuah"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":151,"author":{"gitId":"linuspuah"},"content":"                    Speech.invalidMessage(\"Invalid Index\");","lastModifiedDate":"2023-02-15"},{"lineNumber":152,"author":{"gitId":"linuspuah"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":153,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-01-26"},{"lineNumber":154,"author":{"gitId":"linuspuah"},"content":"            case \"mark\":","lastModifiedDate":"2023-01-26"},{"lineNumber":155,"author":{"gitId":"linuspuah"},"content":"                printMarkTask(tasks, wordList);","lastModifiedDate":"2023-02-08"},{"lineNumber":156,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-01-26"},{"lineNumber":157,"author":{"gitId":"linuspuah"},"content":"            case \"unmark\":","lastModifiedDate":"2023-01-26"},{"lineNumber":158,"author":{"gitId":"linuspuah"},"content":"                printUnmarkTask(tasks, wordList);","lastModifiedDate":"2023-02-08"},{"lineNumber":159,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-01-26"},{"lineNumber":160,"author":{"gitId":"linuspuah"},"content":"            case \"delete\":","lastModifiedDate":"2023-02-15"},{"lineNumber":161,"author":{"gitId":"linuspuah"},"content":"                printDeleteTask(tasks, wordList);","lastModifiedDate":"2023-02-15"},{"lineNumber":162,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":163,"author":{"gitId":"linuspuah"},"content":"            case \"help\":","lastModifiedDate":"2023-02-27"},{"lineNumber":164,"author":{"gitId":"linuspuah"},"content":"                Speech.helpMessage();","lastModifiedDate":"2023-02-27"},{"lineNumber":165,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-02-27"},{"lineNumber":166,"author":{"gitId":"linuspuah"},"content":"            default:","lastModifiedDate":"2023-01-26"},{"lineNumber":167,"author":{"gitId":"linuspuah"},"content":"                try {","lastModifiedDate":"2023-02-08"},{"lineNumber":168,"author":{"gitId":"linuspuah"},"content":"                    makeNewTask(tasks, inLine.trim(), firstWord);","lastModifiedDate":"2023-02-15"},{"lineNumber":169,"author":{"gitId":"linuspuah"},"content":"                } catch (commandNotFoundException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":170,"author":{"gitId":"linuspuah"},"content":"                    Speech.invalidMessage(\"Invalid Command\");","lastModifiedDate":"2023-02-08"},{"lineNumber":171,"author":{"gitId":"linuspuah"},"content":"                } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":172,"author":{"gitId":"linuspuah"},"content":"                    Speech.invalidMessage(\"String Index out of bounds\");","lastModifiedDate":"2023-02-15"},{"lineNumber":173,"author":{"gitId":"linuspuah"},"content":"                }","lastModifiedDate":"2023-02-08"},{"lineNumber":174,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-01-26"},{"lineNumber":175,"author":{"gitId":"linuspuah"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":176,"author":{"gitId":"linuspuah"},"content":"            inLine \u003d in.nextLine().trim();","lastModifiedDate":"2023-01-31"},{"lineNumber":177,"author":{"gitId":"linuspuah"},"content":"            wordList \u003d Parser.splitInput(inLine);","lastModifiedDate":"2023-01-31"},{"lineNumber":178,"author":{"gitId":"linuspuah"},"content":"            firstWord \u003d wordList[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":179,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":180,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":181,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":182,"author":{"gitId":"linuspuah"},"content":"     * Attempts to unmark a given task, if it fails, will print the relevant error message","lastModifiedDate":"2023-02-27"},{"lineNumber":183,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":184,"author":{"gitId":"linuspuah"},"content":"     * @param tasks the list of current tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":185,"author":{"gitId":"linuspuah"},"content":"     * @param wordList string array of individual words given by the user input","lastModifiedDate":"2023-02-27"},{"lineNumber":186,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":187,"author":{"gitId":"linuspuah"},"content":"    private static void printUnmarkTask(ArrayList\u003cTask\u003e tasks, String[] wordList) {","lastModifiedDate":"2023-02-15"},{"lineNumber":188,"author":{"gitId":"linuspuah"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":189,"author":{"gitId":"linuspuah"},"content":"            unmarkTask(tasks, wordList);","lastModifiedDate":"2023-02-08"},{"lineNumber":190,"author":{"gitId":"linuspuah"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":191,"author":{"gitId":"linuspuah"},"content":"            Speech.invalidMessage(\"Index out of bounds.\");","lastModifiedDate":"2023-02-08"},{"lineNumber":192,"author":{"gitId":"linuspuah"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":193,"author":{"gitId":"linuspuah"},"content":"            Speech.invalidMessage(\"Index given is not a number.\");","lastModifiedDate":"2023-02-08"},{"lineNumber":194,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":195,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":196,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":197,"author":{"gitId":"linuspuah"},"content":"     * Unmarks a given task","lastModifiedDate":"2023-02-27"},{"lineNumber":198,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":199,"author":{"gitId":"linuspuah"},"content":"     * @param tasks the list of current tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":200,"author":{"gitId":"linuspuah"},"content":"     * @param wordList string array of individual words given by the user input, whereby index 1 item is the list index of the task to unmark","lastModifiedDate":"2023-02-27"},{"lineNumber":201,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":202,"author":{"gitId":"linuspuah"},"content":"    private static void unmarkTask(ArrayList\u003cTask\u003e tasks, String[] wordList) {","lastModifiedDate":"2023-02-15"},{"lineNumber":203,"author":{"gitId":"linuspuah"},"content":"        String inLine;","lastModifiedDate":"2023-02-08"},{"lineNumber":204,"author":{"gitId":"linuspuah"},"content":"        int taskIndex;","lastModifiedDate":"2023-02-08"},{"lineNumber":205,"author":{"gitId":"linuspuah"},"content":"        inLine \u003d wordList[1];","lastModifiedDate":"2023-02-08"},{"lineNumber":206,"author":{"gitId":"linuspuah"},"content":"        taskIndex \u003d Integer.parseInt(inLine) - 1;","lastModifiedDate":"2023-02-08"},{"lineNumber":207,"author":{"gitId":"linuspuah"},"content":"        tasks.get(taskIndex).setDone(false);","lastModifiedDate":"2023-02-15"},{"lineNumber":208,"author":{"gitId":"linuspuah"},"content":"        Speech.printUnmarked(tasks.get(taskIndex));","lastModifiedDate":"2023-02-15"},{"lineNumber":209,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":210,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":211,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":212,"author":{"gitId":"linuspuah"},"content":"     * Attempts to mark a given task, if it fails, will print the relevant error message","lastModifiedDate":"2023-02-27"},{"lineNumber":213,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":214,"author":{"gitId":"linuspuah"},"content":"     * @param tasks the list of current tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":215,"author":{"gitId":"linuspuah"},"content":"     * @param wordList string array of individual words given by the user input","lastModifiedDate":"2023-02-27"},{"lineNumber":216,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":217,"author":{"gitId":"linuspuah"},"content":"    private static void printMarkTask(ArrayList\u003cTask\u003e tasks, String[] wordList) {","lastModifiedDate":"2023-02-15"},{"lineNumber":218,"author":{"gitId":"linuspuah"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":219,"author":{"gitId":"linuspuah"},"content":"            markTask(tasks, wordList);","lastModifiedDate":"2023-02-08"},{"lineNumber":220,"author":{"gitId":"linuspuah"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":221,"author":{"gitId":"linuspuah"},"content":"            Speech.invalidMessage(\"Index out of bounds.\");","lastModifiedDate":"2023-02-08"},{"lineNumber":222,"author":{"gitId":"linuspuah"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":223,"author":{"gitId":"linuspuah"},"content":"            Speech.invalidMessage(\"Index given is not a number.\");","lastModifiedDate":"2023-02-08"},{"lineNumber":224,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":225,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":226,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":227,"author":{"gitId":"linuspuah"},"content":"     * Attempts to delete a given task, if it fails, will print the relevant error message","lastModifiedDate":"2023-02-27"},{"lineNumber":228,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":229,"author":{"gitId":"linuspuah"},"content":"     * @param tasks the list of current tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":230,"author":{"gitId":"linuspuah"},"content":"     * @param wordList string array of individual words given by the user input","lastModifiedDate":"2023-02-27"},{"lineNumber":231,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":232,"author":{"gitId":"linuspuah"},"content":"    private static void printDeleteTask(ArrayList\u003cTask\u003e tasks, String[] wordList) {","lastModifiedDate":"2023-02-15"},{"lineNumber":233,"author":{"gitId":"linuspuah"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":234,"author":{"gitId":"linuspuah"},"content":"            deleteTask(tasks, wordList);","lastModifiedDate":"2023-02-15"},{"lineNumber":235,"author":{"gitId":"linuspuah"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":236,"author":{"gitId":"linuspuah"},"content":"            Speech.invalidMessage(\"Index out of bounds.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":237,"author":{"gitId":"linuspuah"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":238,"author":{"gitId":"linuspuah"},"content":"            Speech.invalidMessage(\"Index given is not a number.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":239,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":240,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":241,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":242,"author":{"gitId":"linuspuah"},"content":"     * Deletes a given task","lastModifiedDate":"2023-02-27"},{"lineNumber":243,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":244,"author":{"gitId":"linuspuah"},"content":"     * @param tasks the list of current tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":245,"author":{"gitId":"linuspuah"},"content":"     * @param wordList string array of individual words given by the user input, whereby index 1 item is the list index of the task to delete","lastModifiedDate":"2023-02-27"},{"lineNumber":246,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":247,"author":{"gitId":"linuspuah"},"content":"    private static void deleteTask(ArrayList\u003cTask\u003e tasks, String[] wordList) {","lastModifiedDate":"2023-02-15"},{"lineNumber":248,"author":{"gitId":"linuspuah"},"content":"        String inLine;","lastModifiedDate":"2023-02-15"},{"lineNumber":249,"author":{"gitId":"linuspuah"},"content":"        int taskIndex;","lastModifiedDate":"2023-02-15"},{"lineNumber":250,"author":{"gitId":"linuspuah"},"content":"        inLine \u003d wordList[1];","lastModifiedDate":"2023-02-15"},{"lineNumber":251,"author":{"gitId":"linuspuah"},"content":"        taskIndex \u003d Integer.parseInt(inLine) - 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":252,"author":{"gitId":"linuspuah"},"content":"        Speech.printDeleteTask(tasks.get(taskIndex));","lastModifiedDate":"2023-02-15"},{"lineNumber":253,"author":{"gitId":"linuspuah"},"content":"        tasks.remove(taskIndex);","lastModifiedDate":"2023-02-15"},{"lineNumber":254,"author":{"gitId":"linuspuah"},"content":"        Task.numTasks--;","lastModifiedDate":"2023-02-15"},{"lineNumber":255,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":256,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":257,"author":{"gitId":"linuspuah"},"content":"     * Marks a given task","lastModifiedDate":"2023-02-27"},{"lineNumber":258,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":259,"author":{"gitId":"linuspuah"},"content":"     * @param tasks the list of current tasks","lastModifiedDate":"2023-02-27"},{"lineNumber":260,"author":{"gitId":"linuspuah"},"content":"     * @param wordList string array of individual words given by the user input, whereby index 1 item is the list index of the task to mark","lastModifiedDate":"2023-02-27"},{"lineNumber":261,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":262,"author":{"gitId":"linuspuah"},"content":"    private static void markTask(ArrayList\u003cTask\u003e tasks, String[] wordList) {","lastModifiedDate":"2023-02-15"},{"lineNumber":263,"author":{"gitId":"linuspuah"},"content":"        int taskIndex;","lastModifiedDate":"2023-02-08"},{"lineNumber":264,"author":{"gitId":"linuspuah"},"content":"        String inLine;","lastModifiedDate":"2023-02-08"},{"lineNumber":265,"author":{"gitId":"linuspuah"},"content":"        inLine \u003d wordList[1];","lastModifiedDate":"2023-02-08"},{"lineNumber":266,"author":{"gitId":"linuspuah"},"content":"        taskIndex \u003d Integer.parseInt(inLine) - 1;","lastModifiedDate":"2023-02-08"},{"lineNumber":267,"author":{"gitId":"linuspuah"},"content":"        tasks.get(taskIndex).setDone(true);","lastModifiedDate":"2023-02-15"},{"lineNumber":268,"author":{"gitId":"linuspuah"},"content":"        Speech.printMarked(tasks.get(taskIndex));","lastModifiedDate":"2023-02-15"},{"lineNumber":269,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":270,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-01-26"},{"lineNumber":271,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"linuspuah":271}},{"path":"src/main/java/limey/command/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey.command;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"import limey.exception.invalidDateException;","lastModifiedDate":"2023-02-14"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"linuspuah"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"linuspuah"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"linuspuah"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"linuspuah"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"linuspuah"},"content":"    private java.time.LocalDateTime dueDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"linuspuah"},"content":"    private String inDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"linuspuah"},"content":"    public String getDueDate() {","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"linuspuah"},"content":"        return dueDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\"));","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"linuspuah"},"content":"    public String getInDate() {","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"linuspuah"},"content":"        return inDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"linuspuah"},"content":"    public void setDueDate(String byDate) throws DateTimeParseException {","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"linuspuah"},"content":"        this.dueDate \u003d LocalDateTime.parse(byDate.trim());","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"linuspuah"},"content":"     * Creates a new deadline object with the proper name and due date if a valid date is given","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"linuspuah"},"content":"     * @param inLine user input without the command term (ie just the deadline name and its due date)","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"linuspuah"},"content":"    public Deadline(String inLine) throws invalidDateException {","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"linuspuah"},"content":"        super(inLine);","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"linuspuah"},"content":"        if (!inLine.contains(\"/by\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":34,"author":{"gitId":"linuspuah"},"content":"            throw new invalidDateException();","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"linuspuah"},"content":"        int indexOfBy \u003d inLine.indexOf(\"/by\");","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"linuspuah"},"content":"        inDate \u003d inLine.substring(indexOfBy + 3);","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"linuspuah"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"linuspuah"},"content":"            setDueDate(inDate);","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"linuspuah"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"linuspuah"},"content":"            throw new invalidDateException();","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"linuspuah"},"content":"        setTaskName(super.getTaskName() + \" (by: \" + getDueDate() + \")\");","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"linuspuah"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"linuspuah"},"content":"    public String getTaskIdentity() {","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"linuspuah"},"content":"        String todoSymbol \u003d \"[D]\";","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"linuspuah"},"content":"        return todoSymbol + super.getTaskIdentity();","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"linuspuah":52}},{"path":"src/main/java/limey/command/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey.command;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"import limey.exception.invalidDateException;","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"linuspuah"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"linuspuah"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"linuspuah"},"content":"public class Event extends Task{","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"linuspuah"},"content":"    private java.time.LocalDateTime fromDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"linuspuah"},"content":"    private java.time.LocalDateTime toDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"linuspuah"},"content":"    private String inFromDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"linuspuah"},"content":"    private String inToDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"linuspuah"},"content":"    public void setFromDate(String fromDate) {","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"linuspuah"},"content":"        this.fromDate\u003d LocalDateTime.parse(fromDate.trim());","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"linuspuah"},"content":"    public void setToDate(String toDate) {","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"linuspuah"},"content":"        this.toDate\u003d LocalDateTime.parse(toDate.trim());","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"linuspuah"},"content":"     * Creates a new Event object with the proper name and from and to dates if valid dates are given","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"linuspuah"},"content":"     * @param inLine user input without the command term (ie just the event name and its from and to dates)","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"linuspuah"},"content":"    public Event(String inLine) throws invalidDateException{","lastModifiedDate":"2023-02-14"},{"lineNumber":26,"author":{"gitId":"linuspuah"},"content":"            super(inLine);","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"linuspuah"},"content":"            if(!inLine.contains(\"/from\") |  !inLine.contains(\"/to\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":28,"author":{"gitId":"linuspuah"},"content":"                throw new invalidDateException();","lastModifiedDate":"2023-02-14"},{"lineNumber":29,"author":{"gitId":"linuspuah"},"content":"            }","lastModifiedDate":"2023-02-14"},{"lineNumber":30,"author":{"gitId":"linuspuah"},"content":"            int indexOfFrom \u003d inLine.indexOf(\"/from\");","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"linuspuah"},"content":"            int indexOfTo \u003d  inLine.indexOf(\"/to\");","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"linuspuah"},"content":"            inFromDate \u003d inLine.substring(indexOfFrom + 5, indexOfTo).trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"linuspuah"},"content":"            inToDate \u003d inLine.substring(indexOfTo + 3).trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"linuspuah"},"content":"            try{","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"linuspuah"},"content":"                setToDate(inToDate);","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"linuspuah"},"content":"                setFromDate(inFromDate);","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"linuspuah"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"linuspuah"},"content":"                throw new invalidDateException();","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"linuspuah"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"linuspuah"},"content":"            setTaskName(getTaskName() + \" (from \" + getFromDate() + \" to \" + getToDate() + \")\");","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"linuspuah"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"linuspuah"},"content":"    public String getTaskIdentity() {","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"linuspuah"},"content":"        String eventSymbol \u003d \"[E]\";","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"linuspuah"},"content":"        return eventSymbol + super.getTaskIdentity();","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"linuspuah"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"linuspuah"},"content":"    public String getInFromDate(){","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"linuspuah"},"content":"        return inFromDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"linuspuah"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"linuspuah"},"content":"    public String getInToDate(){","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"linuspuah"},"content":"        return inToDate;","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"linuspuah"},"content":"    public String getFromDate(){","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"linuspuah"},"content":"        return fromDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\"));","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"linuspuah"},"content":"    public String getToDate(){","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"linuspuah"},"content":"        return toDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\"));","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"linuspuah":61}},{"path":"src/main/java/limey/command/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey.command;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"public class Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"    private String taskName;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"linuspuah"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"linuspuah"},"content":"    public static int numTasks \u003d 0;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"linuspuah"},"content":"    public Task(String inLine) {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"linuspuah"},"content":"        //int firstSpace \u003d inLine.indexOf(\" \");","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"linuspuah"},"content":"        if (inLine.contains(\"/\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"linuspuah"},"content":"            int firstSlash \u003d inLine.indexOf(\"/\");","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"linuspuah"},"content":"            this.taskName \u003d inLine.substring(0, firstSlash).trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"linuspuah"},"content":"        } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"linuspuah"},"content":"            this.taskName \u003d inLine;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"linuspuah"},"content":"    public String getTaskName() {","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"linuspuah"},"content":"        return taskName;","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"linuspuah"},"content":"     * Returns identity of the current task including the following","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"linuspuah"},"content":"     * - [X] or [ ] for marked or unmarked tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"linuspuah"},"content":"     * - task name","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"linuspuah"},"content":"     * @return tasks identity.","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"linuspuah"},"content":"    public String getTaskIdentity() {","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"linuspuah"},"content":"        String taskIdentity;","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"linuspuah"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"linuspuah"},"content":"            taskIdentity \u003d \"[X] \" + taskName;","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"linuspuah"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"linuspuah"},"content":"            taskIdentity \u003d \"[ ] \" + taskName;","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"linuspuah"},"content":"        return taskIdentity;","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"linuspuah"},"content":"     * Sets the task to the given task name","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"linuspuah"},"content":"     * @param taskName the name of the task","lastModifiedDate":"2023-02-27"},{"lineNumber":43,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":44,"author":{"gitId":"linuspuah"},"content":"    public void setTaskName(String taskName) {","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"linuspuah"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":48,"author":{"gitId":"linuspuah"},"content":"     * Sets the isDone boolean of the task to the respective input isDone","lastModifiedDate":"2023-02-27"},{"lineNumber":49,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"linuspuah"},"content":"     * @param isDone updated status of the task","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"linuspuah"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"linuspuah"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"linuspuah"},"content":"    public String getDueDate() {","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"linuspuah"},"content":"        return \"\";","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"linuspuah"},"content":"    public String getFromDate() {","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"linuspuah"},"content":"        return \"\";","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"linuspuah"},"content":"    public String getToDate() {","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"linuspuah"},"content":"        return \"\";","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":68,"author":{"gitId":"linuspuah"},"content":"    public String getInDate() {","lastModifiedDate":"2023-02-26"},{"lineNumber":69,"author":{"gitId":"linuspuah"},"content":"        return \"\";","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"linuspuah"},"content":"    public String getInFromDate() {","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"linuspuah"},"content":"        return \"\";","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"linuspuah"},"content":"    public String getInToDate() {","lastModifiedDate":"2023-02-26"},{"lineNumber":77,"author":{"gitId":"linuspuah"},"content":"        return \"\";","lastModifiedDate":"2023-02-26"},{"lineNumber":78,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":79,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"linuspuah":80}},{"path":"src/main/java/limey/command/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey.command;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"public class Todo extends Task{","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"    public Todo(String taskName){","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"linuspuah"},"content":"        super(taskName);","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"linuspuah"},"content":"    public String getTaskIdentity() {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"linuspuah"},"content":"        String todoSymbol \u003d \"[T]\";","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"linuspuah"},"content":"        return todoSymbol + super.getTaskIdentity();","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"linuspuah":12}},{"path":"src/main/java/limey/exception/commandNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey.exception;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"public class commandNotFoundException extends Exception{","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"linuspuah":4}},{"path":"src/main/java/limey/exception/invalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey.exception;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"public class invalidDateException extends Exception{","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"linuspuah":4}},{"path":"src/main/java/limey/exception/taskListEmpty.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey.exception;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"public class taskListEmpty extends Exception{","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"linuspuah":4}},{"path":"src/main/java/limey/iohandler/FileHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey.iohandler;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"import limey.command.Deadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"import limey.command.Event;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"linuspuah"},"content":"import limey.command.Task;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"linuspuah"},"content":"import limey.command.Todo;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"import limey.exception.invalidDateException;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"linuspuah"},"content":"import java.io.File;","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"linuspuah"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"linuspuah"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"linuspuah"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"linuspuah"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"linuspuah"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"linuspuah"},"content":"public class FileHandler {","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"linuspuah"},"content":"     * Creates an empty text file in the given filePath","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"linuspuah"},"content":"     * @param filePath the path where the empty text file will be saved","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"linuspuah"},"content":"    public static void clearFile(String filePath) throws IOException {","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"linuspuah"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"linuspuah"},"content":"        fw.write(System.lineSeparator());","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"linuspuah"},"content":"        fw.close();","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"linuspuah"},"content":"     * Converts the task list to a text file to be saved in the given filePath and converts it to be saved for future retrieval","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"linuspuah"},"content":"     * @param filePath the path where the text file will be saved","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"linuspuah"},"content":"     * @param tasks task list to convert and save as text file","lastModifiedDate":"2023-02-27"},{"lineNumber":32,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"linuspuah"},"content":"    public static void writeToFile(String filePath, ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"linuspuah"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"linuspuah"},"content":"        for (Integer i \u003d 0; i \u003c Task.numTasks; i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"linuspuah"},"content":"            Character markIcon \u003d tasks.get(i).getTaskIdentity().charAt(4);","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"linuspuah"},"content":"            Character taskType \u003d tasks.get(i).getTaskIdentity().charAt(1);","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"linuspuah"},"content":"            String taskNameWODates;","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"linuspuah"},"content":"            switch(taskType) {","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"linuspuah"},"content":"            case (\u0027D\u0027): //deadline","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"linuspuah"},"content":"                taskNameWODates \u003d tasks.get(i).getTaskName().substring(0,tasks.get(i).getTaskName().indexOf(\"(by:\"));","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"linuspuah"},"content":"                fw.write(taskType.toString() + markIcon.toString() + taskNameWODates);","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"linuspuah"},"content":"                fw.write(\"/by \" + tasks.get(i).getInDate());","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"linuspuah"},"content":"            case (\u0027E\u0027): //Event","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"linuspuah"},"content":"                taskNameWODates \u003d tasks.get(i).getTaskName().substring(0,tasks.get(i).getTaskName().indexOf(\"(from\"));","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"linuspuah"},"content":"                fw.write(taskType.toString() + markIcon.toString() + taskNameWODates);","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"linuspuah"},"content":"                fw.write(\"/from \" + tasks.get(i).getInFromDate());","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"linuspuah"},"content":"                fw.write(\"/to \" + tasks.get(i).getInToDate());","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"linuspuah"},"content":"            default: //todo no additional string required","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"linuspuah"},"content":"                fw.write(taskType.toString() + markIcon.toString() + tasks.get(i).getTaskName());","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"linuspuah"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"linuspuah"},"content":"            fw.write(System.lineSeparator());","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"linuspuah"},"content":"        fw.close();","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"linuspuah"},"content":"     * Reads in text from the file in a given filePath and converts it to array list of Task objects","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"linuspuah"},"content":"     * To retrieve and update the current task list to match the one saved from memory","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"linuspuah"},"content":"     * @param filePath the path from which the previously saved list is to be extracted from","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"linuspuah"},"content":"     * @param tasks task list to be updated to match the one saved in the file","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":66,"author":{"gitId":"linuspuah"},"content":"    public static void readFileToTasks(String filePath, ArrayList\u003cTask\u003e tasks) throws FileNotFoundException {","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"linuspuah"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"linuspuah"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"linuspuah"},"content":"        String listItem;","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"linuspuah"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"linuspuah"},"content":"            listItem \u003d s.nextLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"linuspuah"},"content":"            Character taskType \u003d listItem.charAt(0);","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"linuspuah"},"content":"            String taskName \u003d listItem.substring(2).trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"linuspuah"},"content":"            boolean isTaskDone \u003d listItem.charAt(1) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"linuspuah"},"content":"            Task inTask;","lastModifiedDate":"2023-02-15"},{"lineNumber":76,"author":{"gitId":"linuspuah"},"content":"            switch (taskType) {","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"linuspuah"},"content":"            case \u0027T\u0027:","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"linuspuah"},"content":"                inTask \u003d new Todo(taskName);","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"linuspuah"},"content":"                inTask.setDone(isTaskDone);","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"linuspuah"},"content":"                tasks.add(inTask);","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"linuspuah"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"linuspuah"},"content":"                try {","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"linuspuah"},"content":"                    //taskName \u003d taskName.substring(0,taskName.indexOf(\"(by:\")) + taskName.substring(taskName.lastIndexOf(\")\") + 1);","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"linuspuah"},"content":"                    Deadline inDeadline \u003d new Deadline(taskName);","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"linuspuah"},"content":"                    //tasks[Task.numTasks] \u003d inDeadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"linuspuah"},"content":"                    tasks.add(inDeadline);","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"linuspuah"},"content":"                    tasks.get(Task.numTasks).setDone(isTaskDone);","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"linuspuah"},"content":"                } catch (invalidDateException e){","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"linuspuah"},"content":"                    Speech.invalidMessage(\"Invalid Date\");","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"linuspuah"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":92,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":93,"author":{"gitId":"linuspuah"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2023-02-15"},{"lineNumber":94,"author":{"gitId":"linuspuah"},"content":"                try {","lastModifiedDate":"2023-02-15"},{"lineNumber":95,"author":{"gitId":"linuspuah"},"content":"                    //taskName \u003d taskName.substring(0,taskName.indexOf(\"(from:\")) + taskName.substring(taskName.lastIndexOf(\")\") + 1);","lastModifiedDate":"2023-02-15"},{"lineNumber":96,"author":{"gitId":"linuspuah"},"content":"                    Event inEvent \u003d new Event(taskName);","lastModifiedDate":"2023-02-15"},{"lineNumber":97,"author":{"gitId":"linuspuah"},"content":"                    tasks.add(inEvent);","lastModifiedDate":"2023-02-15"},{"lineNumber":98,"author":{"gitId":"linuspuah"},"content":"                    tasks.get(Task.numTasks).setDone(isTaskDone);","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"linuspuah"},"content":"                } catch (invalidDateException e){","lastModifiedDate":"2023-02-15"},{"lineNumber":100,"author":{"gitId":"linuspuah"},"content":"                    Speech.invalidMessage(\"Invalid Date\");","lastModifiedDate":"2023-02-15"},{"lineNumber":101,"author":{"gitId":"linuspuah"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":102,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":103,"author":{"gitId":"linuspuah"},"content":"            default:","lastModifiedDate":"2023-02-15"},{"lineNumber":104,"author":{"gitId":"linuspuah"},"content":"                //no default because reading from an auto generated file, no errors expected","lastModifiedDate":"2023-02-15"},{"lineNumber":105,"author":{"gitId":"linuspuah"},"content":"                break;","lastModifiedDate":"2023-02-15"},{"lineNumber":106,"author":{"gitId":"linuspuah"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":107,"author":{"gitId":"linuspuah"},"content":"            Task.numTasks++;","lastModifiedDate":"2023-02-15"},{"lineNumber":108,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":109,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":110,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"linuspuah":110}},{"path":"src/main/java/limey/iohandler/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey.iohandler;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"linuspuah"},"content":"public class Parser {","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"     * Returns the first word (space separated) from a given string in lower case","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"linuspuah"},"content":"     * @param line string of which the first word is to be extracted from","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"linuspuah"},"content":"     * @return first word in a given string","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"linuspuah"},"content":"    public static String getFirstWord(String line) {","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"linuspuah"},"content":"        String firstWord;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"linuspuah"},"content":"        int firstSpace \u003d line.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"linuspuah"},"content":"        if (firstSpace !\u003d -1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"linuspuah"},"content":"            firstWord \u003d line.substring(0, firstSpace).toLowerCase();","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"linuspuah"},"content":"        } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"linuspuah"},"content":"            firstWord \u003d line.toLowerCase();","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"linuspuah"},"content":"        return firstWord;","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"linuspuah"},"content":"     * Returns the words (space separated) from a given string","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"linuspuah"},"content":"     * @param inLine string of which the words are to be extracted from","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"linuspuah"},"content":"     * @return string array of space separated words from inLine","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"linuspuah"},"content":"    public static String[] splitInput(String inLine){","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"linuspuah"},"content":"        int nextSpace \u003d inLine.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"linuspuah"},"content":"        int numStrings \u003d 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"linuspuah"},"content":"        String[] wordList \u003d new String[numStrings];","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"linuspuah"},"content":"        wordList[numStrings - 1] \u003d getFirstWord(inLine);","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"linuspuah"},"content":"        while(nextSpace!\u003d -1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"linuspuah"},"content":"            numStrings++;","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"linuspuah"},"content":"            String[] copyWordList \u003d Arrays.copyOf(wordList, numStrings);","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"linuspuah"},"content":"            wordList \u003d copyWordList;","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"linuspuah"},"content":"            inLine \u003d inLine.substring(nextSpace + 1);","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"linuspuah"},"content":"            copyWordList[numStrings - 1] \u003d getFirstWord(inLine);","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"linuspuah"},"content":"            nextSpace \u003d inLine.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"linuspuah"},"content":"        return wordList;","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"linuspuah":44}},{"path":"src/main/java/limey/iohandler/Speech.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"package limey.iohandler;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"import limey.command.Task;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"linuspuah"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"public class Speech {","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"linuspuah"},"content":"     * Prints the closing message for Limey","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"linuspuah"},"content":"    public static void sayBye() {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tBye! Hope to see you again soon. :)\");","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"linuspuah"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"linuspuah"},"content":"    public static void printLine() {","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"linuspuah"},"content":"     * Prints the introduction message for Limey","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"linuspuah"},"content":"    public static void introMessage() {","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"Hi there thanks for choosing to use Limey, your personal CLI task manager!.\");","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"linuspuah"},"content":"        helpMessage();","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"linuspuah"},"content":"     * Prints the valid commands and helpful examples as a guide for how to use Limey","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"linuspuah"},"content":"    public static void helpMessage() {","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tThe following are some helpful commands on how to use Limey.\");","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tTo add a task(todo/deadline/event):\");","lastModifiedDate":"2023-02-27"},{"lineNumber":32,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\\t\\\"todo math\\\" OR \\\"deadline lab assignment /by 2023-02-08T23:59\\\" OR \\\"event exam /from 2023-02-08T14:00 /to 2023-02-08T15:30\\\"\");","lastModifiedDate":"2023-02-27"},{"lineNumber":33,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tTo find a task:\");","lastModifiedDate":"2023-02-27"},{"lineNumber":34,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\\t\\\"find lab assignment\\\" returns all tasks with \\\"lab assignment\\\" in the name\");","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tTo list all tasks:\");","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\\t\\\"list\\\" lists all tasks\");","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tTo mark a task:\");","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\\t\\\"mark 2\\\" to mark the second item on the list\");","lastModifiedDate":"2023-02-27"},{"lineNumber":39,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tTo un-mark a task:\");","lastModifiedDate":"2023-02-27"},{"lineNumber":40,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\\t\\\"unmark 2\\\" to un-mark the second item on the list\");","lastModifiedDate":"2023-02-27"},{"lineNumber":41,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tTo delete a task:\");","lastModifiedDate":"2023-02-27"},{"lineNumber":42,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\\t\\\"delete 2\\\" to delete the second item on the list\");","lastModifiedDate":"2023-02-27"},{"lineNumber":43,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tTo get help from this page again:\");","lastModifiedDate":"2023-02-27"},{"lineNumber":44,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\\t\\\"help\\\" will show all the helpful commands listed above\");","lastModifiedDate":"2023-02-27"},{"lineNumber":45,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-27"},{"lineNumber":47,"author":{"gitId":"linuspuah"},"content":"    public static void printErrorLine() {","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"/////////////////////////////////////////////////////////////\");","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":51,"author":{"gitId":"linuspuah"},"content":"     * Prints that a task has just been added successfully","lastModifiedDate":"2023-02-27"},{"lineNumber":52,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":53,"author":{"gitId":"linuspuah"},"content":"     * @param task the task that has just been added","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":55,"author":{"gitId":"linuspuah"},"content":"    public static void printAdded(Task task, int numTasks) {","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\" + \"added: \" + task.getTaskName());","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tTotal number of current tasks: \" + numTasks);","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"linuspuah"},"content":"     * Prints that a task has just been marked successfully","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"linuspuah"},"content":"     * @param task the task that has just been marked","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":66,"author":{"gitId":"linuspuah"},"content":"    public static void printMarked(Task task) {","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\" + \"I have just marked this task as done:\");","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\" + task.getTaskIdentity());","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":73,"author":{"gitId":"linuspuah"},"content":"     * Prints that there was an error detected and its corresponding error message","lastModifiedDate":"2023-02-27"},{"lineNumber":74,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":75,"author":{"gitId":"linuspuah"},"content":"     * @param errorMessage relevant error message to inform the user of the problem","lastModifiedDate":"2023-02-27"},{"lineNumber":76,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":77,"author":{"gitId":"linuspuah"},"content":"    public static void invalidMessage(String errorMessage) {","lastModifiedDate":"2023-02-08"},{"lineNumber":78,"author":{"gitId":"linuspuah"},"content":"        printErrorLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\tSorry that was an invalid command. Error: \" + errorMessage);","lastModifiedDate":"2023-02-08"},{"lineNumber":80,"author":{"gitId":"linuspuah"},"content":"        printErrorLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":83,"author":{"gitId":"linuspuah"},"content":"     * Prints that a task has just been unmarked successfully","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":85,"author":{"gitId":"linuspuah"},"content":"     * @param task the task that has just been unmarked","lastModifiedDate":"2023-02-27"},{"lineNumber":86,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":87,"author":{"gitId":"linuspuah"},"content":"    public static void printUnmarked(Task task) {","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\" + \"This task has been marked as not done yet:\");","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\" + task.getTaskIdentity());","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":94,"author":{"gitId":"linuspuah"},"content":"     * Prints all tasks in the task list","lastModifiedDate":"2023-02-27"},{"lineNumber":95,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":96,"author":{"gitId":"linuspuah"},"content":"     * @param taskList the array list of tasks to print out","lastModifiedDate":"2023-02-27"},{"lineNumber":97,"author":{"gitId":"linuspuah"},"content":"     * @param numTasks the total number of tasks in the task list","lastModifiedDate":"2023-02-27"},{"lineNumber":98,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":99,"author":{"gitId":"linuspuah"},"content":"    public static void printTaskList(ArrayList\u003cTask\u003e taskList, int numTasks) {","lastModifiedDate":"2023-02-15"},{"lineNumber":100,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"linuspuah"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":102,"author":{"gitId":"linuspuah"},"content":"            System.out.println(\"You currently have 0 tasks.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":103,"author":{"gitId":"linuspuah"},"content":"        } else {","lastModifiedDate":"2023-02-15"},{"lineNumber":104,"author":{"gitId":"linuspuah"},"content":"            for (int listNum \u003d 1; listNum \u003c\u003d numTasks; listNum++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":105,"author":{"gitId":"linuspuah"},"content":"                System.out.println(\"\\t\" + listNum + \".\" + taskList.get(listNum - 1).getTaskIdentity());","lastModifiedDate":"2023-02-15"},{"lineNumber":106,"author":{"gitId":"linuspuah"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":107,"author":{"gitId":"linuspuah"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":108,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":109,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":110,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":111,"author":{"gitId":"linuspuah"},"content":"     * Prints that a task has just been deleted successfully","lastModifiedDate":"2023-02-27"},{"lineNumber":112,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":113,"author":{"gitId":"linuspuah"},"content":"     * @param task the task that has just been deleted","lastModifiedDate":"2023-02-27"},{"lineNumber":114,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":115,"author":{"gitId":"linuspuah"},"content":"    public static void printDeleteTask(Task task) {","lastModifiedDate":"2023-02-15"},{"lineNumber":116,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":117,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\" + \"This task has been deleted:\");","lastModifiedDate":"2023-02-15"},{"lineNumber":118,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\" + task.getTaskIdentity());","lastModifiedDate":"2023-02-15"},{"lineNumber":119,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":120,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"linuspuah"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":122,"author":{"gitId":"linuspuah"},"content":"     * Prints that no task with the given search term has been found","lastModifiedDate":"2023-02-27"},{"lineNumber":123,"author":{"gitId":"linuspuah"},"content":"     *","lastModifiedDate":"2023-02-27"},{"lineNumber":124,"author":{"gitId":"linuspuah"},"content":"     * @param searchTerm the search term to find in a given list","lastModifiedDate":"2023-02-27"},{"lineNumber":125,"author":{"gitId":"linuspuah"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":126,"author":{"gitId":"linuspuah"},"content":"    public static void printNoFoundTask(String searchTerm) {","lastModifiedDate":"2023-02-26"},{"lineNumber":127,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":128,"author":{"gitId":"linuspuah"},"content":"        System.out.println(\"\\t\" + \"No task name found containing \"+ searchTerm);","lastModifiedDate":"2023-02-26"},{"lineNumber":129,"author":{"gitId":"linuspuah"},"content":"        printLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":130,"author":{"gitId":"linuspuah"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":131,"author":{"gitId":"linuspuah"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"linuspuah":131}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"linuspuah"},"content":"todo borrow book","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"linuspuah"},"content":"todo join sports club","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"linuspuah"},"content":"mark 1","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"linuspuah"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"linuspuah"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"linuspuah"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"mark 4","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"linuspuah"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"linuspuah"},"content":"mark 2","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"linuspuah"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"linuspuah"},"content":"unmark 1","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"linuspuah"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"linuspuah"},"content":"bye","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"linuspuah":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"linuspuah"},"content":"del ACTUAL.TXT","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"linuspuah"},"content":"java -classpath ..\\bin Limey \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"linuspuah":2,"-":19}}]
