[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"## Quick Start","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"Steps:","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"1. Check that you have `Java 11` installed on your computer. Type `java --version` in the command prompt to see your","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"   Java version.","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"2. Download the ip.jar file and store it inside a new empty folder in your computer.","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"3. Using the command prompt, change directory to the empty folder you have just created.","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"4. To launch Duke, type the command `java -jar ip.jar` into the command prompt","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"### Support 3 different types of Task","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"Flexible formats for users to input their tasks so that they can differentiate and keep track","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"of their tasks better through the visual aids","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"- todo task represented by [T]","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"    - The most flexible type of task with only a description of the Task","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    - contains: `[DESCRIPTION]`","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"- deadline task represented by [D]","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"    - The type of task where there is a known deadline to be set e.g. a homework","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"    - contains: `[DESCRIPTION] \u0026 [DEADLINE]`","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"- event task represented by [E]","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"    - The type of task where there is a known starting time and ending time e.g. an exam","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"    - contains: `[DESCRIPTION] \u0026 [BEGIN] \u0026 [END]`","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"### Offline Database","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"- No Internet Connection required","lastModifiedDate":"2023-02-22"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"- Allows users to save their tasks to their computer and continue their session another time","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"### `todo` - Adds a todo task","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"Adds a todo task to the TaskList","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"Format:","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"todo [DESCRIPTION] ","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"Example of usage:","lastModifiedDate":"2023-02-22"},{"lineNumber":48,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":49,"author":{"gitId":"SSzeWen"},"content":"`todo homework`","lastModifiedDate":"2023-02-22"},{"lineNumber":50,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":51,"author":{"gitId":"SSzeWen"},"content":"Expected outcome:","lastModifiedDate":"2023-02-22"},{"lineNumber":52,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":53,"author":{"gitId":"SSzeWen"},"content":"- Adds a todo task to the TaskList","lastModifiedDate":"2023-02-22"},{"lineNumber":54,"author":{"gitId":"SSzeWen"},"content":"    - `COMMAND`: todo","lastModifiedDate":"2023-02-22"},{"lineNumber":55,"author":{"gitId":"SSzeWen"},"content":"    - `DESCRIPTION`: homework","lastModifiedDate":"2023-02-22"},{"lineNumber":56,"author":{"gitId":"SSzeWen"},"content":"- Shows a successful message to the user to check if he/she added the correct task","lastModifiedDate":"2023-02-22"},{"lineNumber":57,"author":{"gitId":"SSzeWen"},"content":"- Displays the amount of tasks (all 3 types added together) in the list currently","lastModifiedDate":"2023-02-22"},{"lineNumber":58,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":59,"author":{"gitId":"SSzeWen"},"content":"Description of the outcome.","lastModifiedDate":"2023-02-22"},{"lineNumber":60,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":61,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":62,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":63,"author":{"gitId":"SSzeWen"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-22"},{"lineNumber":64,"author":{"gitId":"SSzeWen"},"content":"  [T][ ] homework","lastModifiedDate":"2023-02-22"},{"lineNumber":65,"author":{"gitId":"SSzeWen"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2023-02-22"},{"lineNumber":66,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":67,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":68,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":69,"author":{"gitId":"SSzeWen"},"content":"****","lastModifiedDate":"2023-02-22"},{"lineNumber":70,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":71,"author":{"gitId":"SSzeWen"},"content":"### `deadline` - Adds a deadline task","lastModifiedDate":"2023-02-22"},{"lineNumber":72,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":73,"author":{"gitId":"SSzeWen"},"content":"Adds a deadline task to the TaskList","lastModifiedDate":"2023-02-22"},{"lineNumber":74,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":75,"author":{"gitId":"SSzeWen"},"content":"Format:","lastModifiedDate":"2023-02-22"},{"lineNumber":76,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":77,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":78,"author":{"gitId":"SSzeWen"},"content":"deadline [DESCRIPTION] /by [DEADLINE]","lastModifiedDate":"2023-02-22"},{"lineNumber":79,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":80,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":81,"author":{"gitId":"SSzeWen"},"content":"**Note: \" /by \" format has to be followed or the program would not recognise the input**","lastModifiedDate":"2023-02-27"},{"lineNumber":82,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":83,"author":{"gitId":"SSzeWen"},"content":"Example of usage:","lastModifiedDate":"2023-02-22"},{"lineNumber":84,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":85,"author":{"gitId":"SSzeWen"},"content":"`deadline Math homework /by 2pm`","lastModifiedDate":"2023-02-22"},{"lineNumber":86,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":87,"author":{"gitId":"SSzeWen"},"content":"Expected outcome:","lastModifiedDate":"2023-02-22"},{"lineNumber":88,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":89,"author":{"gitId":"SSzeWen"},"content":"- Adds a deadline task to the TaskList","lastModifiedDate":"2023-02-22"},{"lineNumber":90,"author":{"gitId":"SSzeWen"},"content":"    - `COMMAND`: deadline","lastModifiedDate":"2023-02-22"},{"lineNumber":91,"author":{"gitId":"SSzeWen"},"content":"    - `DESCRIPTION`: Math homework","lastModifiedDate":"2023-02-22"},{"lineNumber":92,"author":{"gitId":"SSzeWen"},"content":"    - `DEADLINE`: 2pm","lastModifiedDate":"2023-02-22"},{"lineNumber":93,"author":{"gitId":"SSzeWen"},"content":"- Shows a successful message to the user to check if he/she added the correct task","lastModifiedDate":"2023-02-22"},{"lineNumber":94,"author":{"gitId":"SSzeWen"},"content":"- Displays the amount of tasks (all 3 types added together) in the list currently","lastModifiedDate":"2023-02-22"},{"lineNumber":95,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":96,"author":{"gitId":"SSzeWen"},"content":"Description of the outcome.","lastModifiedDate":"2023-02-22"},{"lineNumber":97,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":98,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":99,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":100,"author":{"gitId":"SSzeWen"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-22"},{"lineNumber":101,"author":{"gitId":"SSzeWen"},"content":"  [D][ ] Math homework (by: 2pm)","lastModifiedDate":"2023-02-22"},{"lineNumber":102,"author":{"gitId":"SSzeWen"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2023-02-22"},{"lineNumber":103,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":104,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":105,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":106,"author":{"gitId":"SSzeWen"},"content":"****","lastModifiedDate":"2023-02-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":108,"author":{"gitId":"SSzeWen"},"content":"### `event` - Adds a event task","lastModifiedDate":"2023-02-22"},{"lineNumber":109,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":110,"author":{"gitId":"SSzeWen"},"content":"Adds an event task to the TaskList","lastModifiedDate":"2023-02-22"},{"lineNumber":111,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":112,"author":{"gitId":"SSzeWen"},"content":"Format:","lastModifiedDate":"2023-02-22"},{"lineNumber":113,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":114,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":115,"author":{"gitId":"SSzeWen"},"content":"event [DESCRIPTION] /from [BEGIN] /to [END] ","lastModifiedDate":"2023-02-22"},{"lineNumber":116,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":118,"author":{"gitId":"SSzeWen"},"content":"**Note: \" /from \" and \" /to \" must be exactly in the above order or the program would not recognise the input**","lastModifiedDate":"2023-02-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":122,"author":{"gitId":"SSzeWen"},"content":"`event CS2113 Lecture /from 4pm /to 6pm`","lastModifiedDate":"2023-02-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":126,"author":{"gitId":"SSzeWen"},"content":"- Adds an event task to the TaskList","lastModifiedDate":"2023-02-22"},{"lineNumber":127,"author":{"gitId":"SSzeWen"},"content":"    - `COMMAND`: event","lastModifiedDate":"2023-02-22"},{"lineNumber":128,"author":{"gitId":"SSzeWen"},"content":"    - `DESCRIPTION`: CS2113 Lecture","lastModifiedDate":"2023-02-22"},{"lineNumber":129,"author":{"gitId":"SSzeWen"},"content":"    - `BEGIN`: 4pm","lastModifiedDate":"2023-02-22"},{"lineNumber":130,"author":{"gitId":"SSzeWen"},"content":"    - `END`: 6pm","lastModifiedDate":"2023-02-22"},{"lineNumber":131,"author":{"gitId":"SSzeWen"},"content":"- Shows a successful message to the user to check if he/she added the correct task","lastModifiedDate":"2023-02-22"},{"lineNumber":132,"author":{"gitId":"SSzeWen"},"content":"- Displays the amount of tasks (all 3 types added together) in the list currently","lastModifiedDate":"2023-02-22"},{"lineNumber":133,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"Description of the outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":136,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":137,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":138,"author":{"gitId":"SSzeWen"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-22"},{"lineNumber":139,"author":{"gitId":"SSzeWen"},"content":"  [E][ ] CS2113 Lecture (from: 4pm to: 6pm)","lastModifiedDate":"2023-02-22"},{"lineNumber":140,"author":{"gitId":"SSzeWen"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2023-02-22"},{"lineNumber":141,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":142,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":143,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":144,"author":{"gitId":"SSzeWen"},"content":"****","lastModifiedDate":"2023-02-22"},{"lineNumber":145,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":146,"author":{"gitId":"SSzeWen"},"content":"### `list` - Lists all task","lastModifiedDate":"2023-02-22"},{"lineNumber":147,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":148,"author":{"gitId":"SSzeWen"},"content":"List all the tasks in the current TaskList saved by Duke","lastModifiedDate":"2023-02-22"},{"lineNumber":149,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":150,"author":{"gitId":"SSzeWen"},"content":"Format:","lastModifiedDate":"2023-02-22"},{"lineNumber":151,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":152,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":153,"author":{"gitId":"SSzeWen"},"content":"list","lastModifiedDate":"2023-02-22"},{"lineNumber":154,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":155,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":156,"author":{"gitId":"SSzeWen"},"content":"Example of usage:","lastModifiedDate":"2023-02-22"},{"lineNumber":157,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":158,"author":{"gitId":"SSzeWen"},"content":"`list`","lastModifiedDate":"2023-02-22"},{"lineNumber":159,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":160,"author":{"gitId":"SSzeWen"},"content":"Expected outcome:","lastModifiedDate":"2023-02-22"},{"lineNumber":161,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":162,"author":{"gitId":"SSzeWen"},"content":"- List all the tasks in the format of `[COMMAND][IS_MARKED] [TASK_DETAILS]`","lastModifiedDate":"2023-02-22"},{"lineNumber":163,"author":{"gitId":"SSzeWen"},"content":"- The tasks would be indexed which can be used later for deleting and marking","lastModifiedDate":"2023-02-22"},{"lineNumber":164,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":165,"author":{"gitId":"SSzeWen"},"content":"Description of the outcome (when there are tasks in the TaskList) :","lastModifiedDate":"2023-02-22"},{"lineNumber":166,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":167,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":168,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":169,"author":{"gitId":"SSzeWen"},"content":"1.[E][ ] CS2113 Lecture (from: 4pm to: 6pm)","lastModifiedDate":"2023-02-22"},{"lineNumber":170,"author":{"gitId":"SSzeWen"},"content":"2.[T][ ] homework","lastModifiedDate":"2023-02-22"},{"lineNumber":171,"author":{"gitId":"SSzeWen"},"content":"3.[D][ ] Lab Report (by: Recess Week)","lastModifiedDate":"2023-02-22"},{"lineNumber":172,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":173,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":174,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":175,"author":{"gitId":"SSzeWen"},"content":"****","lastModifiedDate":"2023-02-22"},{"lineNumber":176,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":177,"author":{"gitId":"SSzeWen"},"content":"### `mark` - Marks a task","lastModifiedDate":"2023-02-22"},{"lineNumber":178,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":179,"author":{"gitId":"SSzeWen"},"content":"Marks a task in the TaskList as completed","lastModifiedDate":"2023-02-22"},{"lineNumber":180,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":181,"author":{"gitId":"SSzeWen"},"content":"Format:","lastModifiedDate":"2023-02-22"},{"lineNumber":182,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":183,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":184,"author":{"gitId":"SSzeWen"},"content":"mark [TASK_INDEX] ","lastModifiedDate":"2023-02-22"},{"lineNumber":185,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":186,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":187,"author":{"gitId":"SSzeWen"},"content":"Example of usage:","lastModifiedDate":"2023-02-22"},{"lineNumber":188,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":189,"author":{"gitId":"SSzeWen"},"content":"`mark 1`","lastModifiedDate":"2023-02-22"},{"lineNumber":190,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":191,"author":{"gitId":"SSzeWen"},"content":"Expected outcome :","lastModifiedDate":"2023-02-22"},{"lineNumber":192,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":193,"author":{"gitId":"SSzeWen"},"content":"- Marks a task in the TaskList","lastModifiedDate":"2023-02-22"},{"lineNumber":194,"author":{"gitId":"SSzeWen"},"content":"- Shows a successful message to the user to check if he/she marked the correct task","lastModifiedDate":"2023-02-22"},{"lineNumber":195,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"Description of the outcome.","lastModifiedDate":"2023-02-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":199,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":200,"author":{"gitId":"SSzeWen"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-02-22"},{"lineNumber":201,"author":{"gitId":"SSzeWen"},"content":"  [E][X] CS2113 Lecture (from: 4pm to: 6pm)","lastModifiedDate":"2023-02-22"},{"lineNumber":202,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":203,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":204,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":205,"author":{"gitId":"SSzeWen"},"content":"****","lastModifiedDate":"2023-02-22"},{"lineNumber":206,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":207,"author":{"gitId":"SSzeWen"},"content":"### `unmark` - Unmarks a task","lastModifiedDate":"2023-02-22"},{"lineNumber":208,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":209,"author":{"gitId":"SSzeWen"},"content":"Unmarks a task in the TaskList to show as not completed","lastModifiedDate":"2023-02-22"},{"lineNumber":210,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":211,"author":{"gitId":"SSzeWen"},"content":"Format:","lastModifiedDate":"2023-02-22"},{"lineNumber":212,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":213,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":214,"author":{"gitId":"SSzeWen"},"content":"unmark [TASK_INDEX] ","lastModifiedDate":"2023-02-22"},{"lineNumber":215,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":216,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":217,"author":{"gitId":"SSzeWen"},"content":"Example of usage :","lastModifiedDate":"2023-02-22"},{"lineNumber":218,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":219,"author":{"gitId":"SSzeWen"},"content":"`unmark 1`","lastModifiedDate":"2023-02-22"},{"lineNumber":220,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":221,"author":{"gitId":"SSzeWen"},"content":"Expected outcome:","lastModifiedDate":"2023-02-22"},{"lineNumber":222,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":223,"author":{"gitId":"SSzeWen"},"content":"- Unmarks a task in the TaskList","lastModifiedDate":"2023-02-22"},{"lineNumber":224,"author":{"gitId":"SSzeWen"},"content":"- Shows a successful message to the user to check if he/she unmarked the correct task","lastModifiedDate":"2023-02-22"},{"lineNumber":225,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":226,"author":{"gitId":"SSzeWen"},"content":"Description of the outcome :","lastModifiedDate":"2023-02-22"},{"lineNumber":227,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":228,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":229,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":230,"author":{"gitId":"SSzeWen"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-02-22"},{"lineNumber":231,"author":{"gitId":"SSzeWen"},"content":"  [E][ ] CS2113 Lecture (from: 4pm to: 6pm)","lastModifiedDate":"2023-02-22"},{"lineNumber":232,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":233,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":234,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":235,"author":{"gitId":"SSzeWen"},"content":"****","lastModifiedDate":"2023-02-22"},{"lineNumber":236,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":237,"author":{"gitId":"SSzeWen"},"content":"### `delete` - Deletes a task","lastModifiedDate":"2023-02-22"},{"lineNumber":238,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":239,"author":{"gitId":"SSzeWen"},"content":"Deletes a task in the TaskList completely based on index","lastModifiedDate":"2023-02-22"},{"lineNumber":240,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":241,"author":{"gitId":"SSzeWen"},"content":"Format:","lastModifiedDate":"2023-02-22"},{"lineNumber":242,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":243,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":244,"author":{"gitId":"SSzeWen"},"content":"delete [TASK_INDEX] ","lastModifiedDate":"2023-02-22"},{"lineNumber":245,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":246,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":247,"author":{"gitId":"SSzeWen"},"content":"Example of usage :","lastModifiedDate":"2023-02-22"},{"lineNumber":248,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":249,"author":{"gitId":"SSzeWen"},"content":"`delete 1`","lastModifiedDate":"2023-02-22"},{"lineNumber":250,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":251,"author":{"gitId":"SSzeWen"},"content":"Expected outcome:","lastModifiedDate":"2023-02-22"},{"lineNumber":252,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":253,"author":{"gitId":"SSzeWen"},"content":"- Deletes a task in the TaskList","lastModifiedDate":"2023-02-22"},{"lineNumber":254,"author":{"gitId":"SSzeWen"},"content":"- Shows a successful message to the user to check if he/she deleted the correct task","lastModifiedDate":"2023-02-22"},{"lineNumber":255,"author":{"gitId":"SSzeWen"},"content":"- Displays the remaining amount of tasks (all 3 types added together) in the list","lastModifiedDate":"2023-02-22"},{"lineNumber":256,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":257,"author":{"gitId":"SSzeWen"},"content":"Description of the outcome :","lastModifiedDate":"2023-02-22"},{"lineNumber":258,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":259,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":260,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":261,"author":{"gitId":"SSzeWen"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-02-22"},{"lineNumber":262,"author":{"gitId":"SSzeWen"},"content":"  [E][ ] CS2113 Lecture (from: 4pm to: 6pm)","lastModifiedDate":"2023-02-22"},{"lineNumber":263,"author":{"gitId":"SSzeWen"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2023-02-22"},{"lineNumber":264,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":265,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":266,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":267,"author":{"gitId":"SSzeWen"},"content":"****","lastModifiedDate":"2023-02-22"},{"lineNumber":268,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":269,"author":{"gitId":"SSzeWen"},"content":"### `find` - Find tasks","lastModifiedDate":"2023-02-22"},{"lineNumber":270,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":271,"author":{"gitId":"SSzeWen"},"content":"Find tasks in the TaskList with similar keywords in their `DESCRIPTION`","lastModifiedDate":"2023-02-22"},{"lineNumber":272,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":273,"author":{"gitId":"SSzeWen"},"content":"Format:","lastModifiedDate":"2023-02-22"},{"lineNumber":274,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":275,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":276,"author":{"gitId":"SSzeWen"},"content":"find [KEYWORD] ","lastModifiedDate":"2023-02-22"},{"lineNumber":277,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":278,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":279,"author":{"gitId":"SSzeWen"},"content":"Example of usage :","lastModifiedDate":"2023-02-22"},{"lineNumber":280,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":281,"author":{"gitId":"SSzeWen"},"content":"`find home`","lastModifiedDate":"2023-02-22"},{"lineNumber":282,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":283,"author":{"gitId":"SSzeWen"},"content":"Expected outcome:","lastModifiedDate":"2023-02-22"},{"lineNumber":284,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":285,"author":{"gitId":"SSzeWen"},"content":"- Finds all tasks which description contains the string home","lastModifiedDate":"2023-02-22"},{"lineNumber":286,"author":{"gitId":"SSzeWen"},"content":"- Displays all the tasks in the TaskList that match the keyword with their index in the list","lastModifiedDate":"2023-02-23"},{"lineNumber":287,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":288,"author":{"gitId":"SSzeWen"},"content":"Description of the outcome :","lastModifiedDate":"2023-02-22"},{"lineNumber":289,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":290,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":291,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":292,"author":{"gitId":"SSzeWen"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2023-02-22"},{"lineNumber":293,"author":{"gitId":"SSzeWen"},"content":"1.[T][ ] homework","lastModifiedDate":"2023-02-22"},{"lineNumber":294,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":295,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":296,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":297,"author":{"gitId":"SSzeWen"},"content":"****","lastModifiedDate":"2023-02-22"},{"lineNumber":298,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":299,"author":{"gitId":"SSzeWen"},"content":"### `bye` - Exit","lastModifiedDate":"2023-02-22"},{"lineNumber":300,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":301,"author":{"gitId":"SSzeWen"},"content":"Program says goodbye and exits","lastModifiedDate":"2023-02-22"},{"lineNumber":302,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":303,"author":{"gitId":"SSzeWen"},"content":"Format:","lastModifiedDate":"2023-02-22"},{"lineNumber":304,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":305,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":306,"author":{"gitId":"SSzeWen"},"content":"bye","lastModifiedDate":"2023-02-22"},{"lineNumber":307,"author":{"gitId":"SSzeWen"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":308,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":309,"author":{"gitId":"SSzeWen"},"content":"Example of usage :","lastModifiedDate":"2023-02-22"},{"lineNumber":310,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":311,"author":{"gitId":"SSzeWen"},"content":"`bye`","lastModifiedDate":"2023-02-22"},{"lineNumber":312,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":313,"author":{"gitId":"SSzeWen"},"content":"Expected outcome:","lastModifiedDate":"2023-02-22"},{"lineNumber":314,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":315,"author":{"gitId":"SSzeWen"},"content":"Program outputs a goodbye message to the user and the program terminates","lastModifiedDate":"2023-02-22"},{"lineNumber":316,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":317,"author":{"gitId":"SSzeWen"},"content":"Description of the outcome :","lastModifiedDate":"2023-02-22"},{"lineNumber":318,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":319,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-22"},{"lineNumber":320,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":321,"author":{"gitId":"SSzeWen"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2023-02-22"},{"lineNumber":322,"author":{"gitId":"SSzeWen"},"content":"____________________________________________________________","lastModifiedDate":"2023-02-22"},{"lineNumber":323,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"SSzeWen":294,"-":29}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":" * Duke Object that runs the entire program","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":" * It works with other Objects such as Storage, TaskList, Ui, Parser that handles the different","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":" * commands from the user","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"     * Storage object that deals with loading tasks from the file and saving tasks in the file","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"    private Storage database;","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"     * TaskList object that contains the task list e.g., it has operations to add/delete tasks in the list","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    public TaskList tasks;","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     * Ui object that deals with interactions with the user","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"     * Initialises the objects of the Duke program and gives a greeting","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"    public Duke() {","lastModifiedDate":"2023-02-19"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"        database \u003d new Storage();","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"        tasks \u003d new TaskList(database.tasks);","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"        Ui.greeting();","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"     * Runs the program by reading inputs from user line by line until user types bye to exit","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"    public void run() {","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"        boolean isProgramRunning \u003d true;","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"        while (isProgramRunning) {","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"            String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"            Command currentCommand \u003d Parser.parse(fullCommand, tasks);","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"            if (currentCommand \u003d\u003d null) {","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"                continue;","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"            }","lastModifiedDate":"2023-02-04"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"            currentCommand.execute(tasks, database);","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"            isProgramRunning \u003d !currentCommand.isExit;","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":48,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":49,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":50,"author":{"gitId":"SSzeWen"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"SSzeWen"},"content":"        new Duke().run();","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"SSzeWen":53,"-":2}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"import duke.command.DeleteTaskCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"import duke.command.IllegalCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"import duke.command.MarkAndUnmarkCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"import duke.exception.EmptyCommandException;","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"import duke.exception.IllegalCommandException;","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":" * Parser object that deals with making sense of the user command","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"public class Parser {","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"    public static final int FIRST_WORD_INDEX \u003d 0;","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"     * Returns a Command object that will be used by Duke to run the command","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the full input from the user in one line","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks       the current TaskList to be referenced from","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     * @return the type of command corresponding to the first word of user input, where an illegal command will be","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     * given when it does not match any of the supported commands by Duke","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"    public static Command parse(String fullCommand, TaskList tasks) {","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"        String firstWord \u003d fullCommand.split(\" \")[FIRST_WORD_INDEX];","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"        if (fullCommand.equals(\"bye\")) {","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"        } else if (fullCommand.equals(\"list\")) {","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"            return new ListCommand();","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"        } else if (firstWord.equals(\"mark\") || firstWord.equals(\"unmark\")) {","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"            return markOrUnmarkHandler(fullCommand, tasks);","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"        } else if (firstWord.equals(\"todo\")) {","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"            return todoTaskHandler(fullCommand);","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"        } else if (firstWord.equals(\"deadline\")) {","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"            return deadlineTaskHandler(fullCommand);","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"        } else if (firstWord.equals(\"event\")) {","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"            return eventTaskHandler(fullCommand);","lastModifiedDate":"2023-02-19"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"        } else if (firstWord.equals(\"delete\")) {","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"            return deleteTaskHandler(fullCommand, tasks);","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"        } else if (firstWord.equals(\"find\")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"SSzeWen"},"content":"            return findTaskHandler(fullCommand);","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"SSzeWen"},"content":"        } else {","lastModifiedDate":"2023-02-19"},{"lineNumber":50,"author":{"gitId":"SSzeWen"},"content":"            return new IllegalCommand();","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"SSzeWen"},"content":"     * Returns the Command object for mark and unmark commands","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"SSzeWen"},"content":"     * Returns an illegal command if there is an error in the format","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"SSzeWen"},"content":"     * Handles the mark and unmark type of commands and outputs illegal message if command is illegal","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"SSzeWen"},"content":"     * @param command the user input command line","lastModifiedDate":"2023-02-21"},{"lineNumber":60,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks   the current TaskList to be referenced from","lastModifiedDate":"2023-02-21"},{"lineNumber":61,"author":{"gitId":"SSzeWen"},"content":"     * @return a Command object that is already prepared, ready for use in the execution step","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":63,"author":{"gitId":"SSzeWen"},"content":"    private static Command markOrUnmarkHandler(String command, TaskList tasks) {","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"SSzeWen"},"content":"        Command markingCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":66,"author":{"gitId":"SSzeWen"},"content":"            markingCommand \u003d prepareMarkAndUnmarkTask(command, tasks);","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"SSzeWen"},"content":"        } catch (IllegalCommandException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"SSzeWen"},"content":"            return new IllegalCommand();","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":70,"author":{"gitId":"SSzeWen"},"content":"        return markingCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":71,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":72,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":73,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":74,"author":{"gitId":"SSzeWen"},"content":"     * Returns Command object for mark and unmark commands if successful","lastModifiedDate":"2023-02-21"},{"lineNumber":75,"author":{"gitId":"SSzeWen"},"content":"     * Does input preparation where it separates the key commands from the user input into the mark or unmark Command","lastModifiedDate":"2023-02-21"},{"lineNumber":76,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":77,"author":{"gitId":"SSzeWen"},"content":"     * @param command the user input command line","lastModifiedDate":"2023-02-21"},{"lineNumber":78,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks   the current TaskList to be referenced from","lastModifiedDate":"2023-02-21"},{"lineNumber":79,"author":{"gitId":"SSzeWen"},"content":"     * @return the prepared mark or unmark Command","lastModifiedDate":"2023-02-21"},{"lineNumber":80,"author":{"gitId":"SSzeWen"},"content":"     * @throws IllegalCommandException if format of command is wrong, or when index is out of bounds of the TaskList","lastModifiedDate":"2023-02-21"},{"lineNumber":81,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":82,"author":{"gitId":"SSzeWen"},"content":"    private static Command prepareMarkAndUnmarkTask(String command, TaskList tasks) throws IllegalCommandException {","lastModifiedDate":"2023-02-21"},{"lineNumber":83,"author":{"gitId":"SSzeWen"},"content":"        String[] words \u003d command.split(\" \");","lastModifiedDate":"2023-02-19"},{"lineNumber":84,"author":{"gitId":"SSzeWen"},"content":"        if (words.length !\u003d 2) {","lastModifiedDate":"2023-02-19"},{"lineNumber":85,"author":{"gitId":"SSzeWen"},"content":"            throw new IllegalCommandException();","lastModifiedDate":"2023-02-19"},{"lineNumber":86,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":87,"author":{"gitId":"SSzeWen"},"content":"        int indexOfMarking \u003d getIndex(words[1]);","lastModifiedDate":"2023-02-19"},{"lineNumber":88,"author":{"gitId":"SSzeWen"},"content":"        if (!isValidIndex(indexOfMarking, tasks)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":89,"author":{"gitId":"SSzeWen"},"content":"            throw new IllegalCommandException();","lastModifiedDate":"2023-02-19"},{"lineNumber":90,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":91,"author":{"gitId":"SSzeWen"},"content":"        return new MarkAndUnmarkCommand(command, words, indexOfMarking);","lastModifiedDate":"2023-02-19"},{"lineNumber":92,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":93,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":94,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":95,"author":{"gitId":"SSzeWen"},"content":"     * Returns the Todo type Command that has been already prepared or null if there is an error","lastModifiedDate":"2023-02-21"},{"lineNumber":96,"author":{"gitId":"SSzeWen"},"content":"     * Handles the todo type of command and outputs an empty command message when the description is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":97,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":98,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the user input command line","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"SSzeWen"},"content":"     * @return a todo Command type or null is there is an error","lastModifiedDate":"2023-02-21"},{"lineNumber":100,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":101,"author":{"gitId":"SSzeWen"},"content":"    private static Command todoTaskHandler(String fullCommand) {","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"SSzeWen"},"content":"        Command todoCommand \u003d null;","lastModifiedDate":"2023-02-19"},{"lineNumber":103,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":104,"author":{"gitId":"SSzeWen"},"content":"            todoCommand \u003d prepareTodoTask(fullCommand);","lastModifiedDate":"2023-02-26"},{"lineNumber":105,"author":{"gitId":"SSzeWen"},"content":"        } catch (EmptyCommandException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":106,"author":{"gitId":"SSzeWen"},"content":"            Ui.emptyCommandMessage(\"todo\");","lastModifiedDate":"2023-02-19"},{"lineNumber":107,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":108,"author":{"gitId":"SSzeWen"},"content":"        return todoCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":109,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":110,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":111,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":112,"author":{"gitId":"SSzeWen"},"content":"     * Returns the Todo type Command that has been already prepared","lastModifiedDate":"2023-02-21"},{"lineNumber":113,"author":{"gitId":"SSzeWen"},"content":"     * Does input preparation where it separates the key commands from the user input into the todo Command type","lastModifiedDate":"2023-02-21"},{"lineNumber":114,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":115,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the user input command line","lastModifiedDate":"2023-02-26"},{"lineNumber":116,"author":{"gitId":"SSzeWen"},"content":"     * @return the todo Command if it is successful","lastModifiedDate":"2023-02-21"},{"lineNumber":117,"author":{"gitId":"SSzeWen"},"content":"     * @throws EmptyCommandException whenever the todo task description is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":118,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":119,"author":{"gitId":"SSzeWen"},"content":"    private static Command prepareTodoTask(String fullCommand) throws EmptyCommandException {","lastModifiedDate":"2023-02-26"},{"lineNumber":120,"author":{"gitId":"SSzeWen"},"content":"        String todo \u003d fullCommand.replaceFirst(\"todo\", \"\").trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":121,"author":{"gitId":"SSzeWen"},"content":"        if (todo.isEmpty()) {","lastModifiedDate":"2023-02-19"},{"lineNumber":122,"author":{"gitId":"SSzeWen"},"content":"            throw new EmptyCommandException();","lastModifiedDate":"2023-02-19"},{"lineNumber":123,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":124,"author":{"gitId":"SSzeWen"},"content":"        return new AddTodoCommand(todo);","lastModifiedDate":"2023-02-19"},{"lineNumber":125,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":126,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":127,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":128,"author":{"gitId":"SSzeWen"},"content":"     * Returns the deadline type command that has been already prepared","lastModifiedDate":"2023-02-21"},{"lineNumber":129,"author":{"gitId":"SSzeWen"},"content":"     * Returns an illegal command if there is an error in the format","lastModifiedDate":"2023-02-21"},{"lineNumber":130,"author":{"gitId":"SSzeWen"},"content":"     * Returns null if there is an empty description","lastModifiedDate":"2023-02-21"},{"lineNumber":131,"author":{"gitId":"SSzeWen"},"content":"     * Handles the deadline type of command and outputs an empty command message when the description is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":132,"author":{"gitId":"SSzeWen"},"content":"     * or an illegal command message when the format of the deadline is wrong","lastModifiedDate":"2023-02-21"},{"lineNumber":133,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":134,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the user input command line","lastModifiedDate":"2023-02-26"},{"lineNumber":135,"author":{"gitId":"SSzeWen"},"content":"     * @return a Command object or null if there is an empty description","lastModifiedDate":"2023-02-21"},{"lineNumber":136,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":137,"author":{"gitId":"SSzeWen"},"content":"    private static Command deadlineTaskHandler(String fullCommand) {","lastModifiedDate":"2023-02-26"},{"lineNumber":138,"author":{"gitId":"SSzeWen"},"content":"        Command deadlineCommand \u003d null;","lastModifiedDate":"2023-02-19"},{"lineNumber":139,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":140,"author":{"gitId":"SSzeWen"},"content":"            deadlineCommand \u003d prepareDeadlineTask(fullCommand);","lastModifiedDate":"2023-02-26"},{"lineNumber":141,"author":{"gitId":"SSzeWen"},"content":"        } catch (EmptyCommandException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":142,"author":{"gitId":"SSzeWen"},"content":"            Ui.emptyCommandMessage(\"deadline\");","lastModifiedDate":"2023-02-19"},{"lineNumber":143,"author":{"gitId":"SSzeWen"},"content":"        } catch (IllegalCommandException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":144,"author":{"gitId":"SSzeWen"},"content":"            return new IllegalCommand();","lastModifiedDate":"2023-02-21"},{"lineNumber":145,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":146,"author":{"gitId":"SSzeWen"},"content":"        return deadlineCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":147,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":148,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":149,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":150,"author":{"gitId":"SSzeWen"},"content":"     * Returns the deadline type command that has been already prepared","lastModifiedDate":"2023-02-21"},{"lineNumber":151,"author":{"gitId":"SSzeWen"},"content":"     * Does input preparation where it separates the key commands from the user input into the deadline Command type","lastModifiedDate":"2023-02-21"},{"lineNumber":152,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":153,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the user input command line","lastModifiedDate":"2023-02-26"},{"lineNumber":154,"author":{"gitId":"SSzeWen"},"content":"     * @return the deadline command if successful","lastModifiedDate":"2023-02-21"},{"lineNumber":155,"author":{"gitId":"SSzeWen"},"content":"     * @throws EmptyCommandException   when description of deadline is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":156,"author":{"gitId":"SSzeWen"},"content":"     * @throws IllegalCommandException when the string array length is not 2 after splitting as the format is wrong","lastModifiedDate":"2023-02-21"},{"lineNumber":157,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":158,"author":{"gitId":"SSzeWen"},"content":"    private static Command prepareDeadlineTask(String fullCommand)","lastModifiedDate":"2023-02-26"},{"lineNumber":159,"author":{"gitId":"SSzeWen"},"content":"            throws EmptyCommandException, IllegalCommandException {","lastModifiedDate":"2023-02-26"},{"lineNumber":160,"author":{"gitId":"SSzeWen"},"content":"        fullCommand \u003d fullCommand.replaceFirst(\"deadline\", \"\").trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":161,"author":{"gitId":"SSzeWen"},"content":"        if (fullCommand.isEmpty()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":162,"author":{"gitId":"SSzeWen"},"content":"            throw new EmptyCommandException();","lastModifiedDate":"2023-02-19"},{"lineNumber":163,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":164,"author":{"gitId":"SSzeWen"},"content":"        String[] stringSplit \u003d fullCommand.split(\" /by \");","lastModifiedDate":"2023-02-26"},{"lineNumber":165,"author":{"gitId":"SSzeWen"},"content":"        if (isInvalidString(stringSplit)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":166,"author":{"gitId":"SSzeWen"},"content":"            throw new IllegalCommandException();","lastModifiedDate":"2023-02-19"},{"lineNumber":167,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":168,"author":{"gitId":"SSzeWen"},"content":"        return new AddDeadlineCommand(stringSplit[0], stringSplit[1]);","lastModifiedDate":"2023-02-21"},{"lineNumber":169,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":170,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":171,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":172,"author":{"gitId":"SSzeWen"},"content":"     * Returns the event type command that has been already prepared","lastModifiedDate":"2023-02-21"},{"lineNumber":173,"author":{"gitId":"SSzeWen"},"content":"     * Returns an illegal command if there is an error in the format","lastModifiedDate":"2023-02-21"},{"lineNumber":174,"author":{"gitId":"SSzeWen"},"content":"     * Returns null when the description of the event is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":175,"author":{"gitId":"SSzeWen"},"content":"     * Handles the event type of command and outputs an empty command message when the description is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":176,"author":{"gitId":"SSzeWen"},"content":"     * or an illegal command message when the format is wrong","lastModifiedDate":"2023-02-21"},{"lineNumber":177,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":178,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the user input command line","lastModifiedDate":"2023-02-26"},{"lineNumber":179,"author":{"gitId":"SSzeWen"},"content":"     * @return the a command type or null if description is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":180,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":181,"author":{"gitId":"SSzeWen"},"content":"    private static Command eventTaskHandler(String fullCommand) {","lastModifiedDate":"2023-02-26"},{"lineNumber":182,"author":{"gitId":"SSzeWen"},"content":"        Command eventCommand \u003d null;","lastModifiedDate":"2023-02-19"},{"lineNumber":183,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":184,"author":{"gitId":"SSzeWen"},"content":"            eventCommand \u003d prepareEventTask(fullCommand);","lastModifiedDate":"2023-02-26"},{"lineNumber":185,"author":{"gitId":"SSzeWen"},"content":"        } catch (IllegalCommandException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":186,"author":{"gitId":"SSzeWen"},"content":"            return new IllegalCommand();","lastModifiedDate":"2023-02-21"},{"lineNumber":187,"author":{"gitId":"SSzeWen"},"content":"        } catch (EmptyCommandException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":188,"author":{"gitId":"SSzeWen"},"content":"            Ui.emptyCommandMessage(\"event\");","lastModifiedDate":"2023-02-19"},{"lineNumber":189,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":190,"author":{"gitId":"SSzeWen"},"content":"        return eventCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":191,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":192,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":193,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":194,"author":{"gitId":"SSzeWen"},"content":"     * Returns the event type command that has been already prepared","lastModifiedDate":"2023-02-21"},{"lineNumber":195,"author":{"gitId":"SSzeWen"},"content":"     * Does input preparation where it separates the key commands from the user input into the event Command type","lastModifiedDate":"2023-02-21"},{"lineNumber":196,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":197,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the user input command line","lastModifiedDate":"2023-02-26"},{"lineNumber":198,"author":{"gitId":"SSzeWen"},"content":"     * @return the event command type if successful","lastModifiedDate":"2023-02-21"},{"lineNumber":199,"author":{"gitId":"SSzeWen"},"content":"     * @throws IllegalCommandException whenever there the string array is not of length 2 after splitting","lastModifiedDate":"2023-02-21"},{"lineNumber":200,"author":{"gitId":"SSzeWen"},"content":"     * @throws EmptyCommandException   whenever the description of the event command is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":201,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":202,"author":{"gitId":"SSzeWen"},"content":"    private static Command prepareEventTask(String fullCommand) throws IllegalCommandException, EmptyCommandException {","lastModifiedDate":"2023-02-26"},{"lineNumber":203,"author":{"gitId":"SSzeWen"},"content":"        fullCommand \u003d fullCommand.replaceFirst(\"event\", \"\").trim();","lastModifiedDate":"2023-02-26"},{"lineNumber":204,"author":{"gitId":"SSzeWen"},"content":"        if (fullCommand.isEmpty()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":205,"author":{"gitId":"SSzeWen"},"content":"            throw new EmptyCommandException();","lastModifiedDate":"2023-02-19"},{"lineNumber":206,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":207,"author":{"gitId":"SSzeWen"},"content":"        String[] stringSplit \u003d fullCommand.split(\" /from \");","lastModifiedDate":"2023-02-26"},{"lineNumber":208,"author":{"gitId":"SSzeWen"},"content":"        if (isInvalidString(stringSplit)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":209,"author":{"gitId":"SSzeWen"},"content":"            throw new IllegalCommandException();","lastModifiedDate":"2023-02-19"},{"lineNumber":210,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":211,"author":{"gitId":"SSzeWen"},"content":"        String[] startToEndTime \u003d stringSplit[1].split(\" /to \");","lastModifiedDate":"2023-02-19"},{"lineNumber":212,"author":{"gitId":"SSzeWen"},"content":"        if (isInvalidString(startToEndTime)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":213,"author":{"gitId":"SSzeWen"},"content":"            throw new IllegalCommandException();","lastModifiedDate":"2023-02-19"},{"lineNumber":214,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":215,"author":{"gitId":"SSzeWen"},"content":"        return new AddEventCommand(stringSplit[0], startToEndTime[0], startToEndTime[1]);","lastModifiedDate":"2023-02-19"},{"lineNumber":216,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":217,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":218,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":219,"author":{"gitId":"SSzeWen"},"content":"     * Returns the Delete type command that has been already prepared if successful","lastModifiedDate":"2023-02-21"},{"lineNumber":220,"author":{"gitId":"SSzeWen"},"content":"     * Returns an Illegal type command if there is a incorrect format type","lastModifiedDate":"2023-02-21"},{"lineNumber":221,"author":{"gitId":"SSzeWen"},"content":"     * Handles the event type of command and outputs an illegal command message when there is an exception","lastModifiedDate":"2023-02-22"},{"lineNumber":222,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":223,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the user input command line","lastModifiedDate":"2023-02-26"},{"lineNumber":224,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks       the current TaskList to be referenced from","lastModifiedDate":"2023-02-21"},{"lineNumber":225,"author":{"gitId":"SSzeWen"},"content":"     * @return a type of Command to be executed by Duke","lastModifiedDate":"2023-02-21"},{"lineNumber":226,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":227,"author":{"gitId":"SSzeWen"},"content":"    private static Command deleteTaskHandler(String fullCommand, TaskList tasks) {","lastModifiedDate":"2023-02-26"},{"lineNumber":228,"author":{"gitId":"SSzeWen"},"content":"        Command deleteCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":229,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":230,"author":{"gitId":"SSzeWen"},"content":"            deleteCommand \u003d prepareDeleteTask(fullCommand, tasks);","lastModifiedDate":"2023-02-26"},{"lineNumber":231,"author":{"gitId":"SSzeWen"},"content":"        } catch (IllegalCommandException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":232,"author":{"gitId":"SSzeWen"},"content":"            return new IllegalCommand();","lastModifiedDate":"2023-02-21"},{"lineNumber":233,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":234,"author":{"gitId":"SSzeWen"},"content":"        return deleteCommand;","lastModifiedDate":"2023-02-19"},{"lineNumber":235,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":236,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":237,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":238,"author":{"gitId":"SSzeWen"},"content":"     * Returns the Delete type command that is prepared","lastModifiedDate":"2023-02-21"},{"lineNumber":239,"author":{"gitId":"SSzeWen"},"content":"     * Does input preparation where it separates the key commands from the user input into the delete Command type","lastModifiedDate":"2023-02-21"},{"lineNumber":240,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":241,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the user input command line","lastModifiedDate":"2023-02-26"},{"lineNumber":242,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks       the current TaskList to be referenced from","lastModifiedDate":"2023-02-21"},{"lineNumber":243,"author":{"gitId":"SSzeWen"},"content":"     * @return the Delete command typethe user input command line","lastModifiedDate":"2023-02-22"},{"lineNumber":244,"author":{"gitId":"SSzeWen"},"content":"     * @throws IllegalCommandException when index is out of bounds or when string length is not 2 after splitting","lastModifiedDate":"2023-02-21"},{"lineNumber":245,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":246,"author":{"gitId":"SSzeWen"},"content":"    private static Command prepareDeleteTask(String fullCommand, TaskList tasks) throws IllegalCommandException {","lastModifiedDate":"2023-02-26"},{"lineNumber":247,"author":{"gitId":"SSzeWen"},"content":"        String[] words \u003d fullCommand.trim().split(\" \");","lastModifiedDate":"2023-02-26"},{"lineNumber":248,"author":{"gitId":"SSzeWen"},"content":"        if (isInvalidString(words)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":249,"author":{"gitId":"SSzeWen"},"content":"            throw new IllegalCommandException();","lastModifiedDate":"2023-02-19"},{"lineNumber":250,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":251,"author":{"gitId":"SSzeWen"},"content":"        int deleteIndex \u003d getIndex(words[1]);","lastModifiedDate":"2023-02-19"},{"lineNumber":252,"author":{"gitId":"SSzeWen"},"content":"        if (!isValidIndex(deleteIndex, tasks)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":253,"author":{"gitId":"SSzeWen"},"content":"            throw new IllegalCommandException();","lastModifiedDate":"2023-02-19"},{"lineNumber":254,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":255,"author":{"gitId":"SSzeWen"},"content":"        return new DeleteTaskCommand(deleteIndex);","lastModifiedDate":"2023-02-19"},{"lineNumber":256,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":257,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":258,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":259,"author":{"gitId":"SSzeWen"},"content":"     * Returns the Find type Command if preparation is successful","lastModifiedDate":"2023-02-22"},{"lineNumber":260,"author":{"gitId":"SSzeWen"},"content":"     * Returns an Illegal type command if there is an incorrect format type","lastModifiedDate":"2023-02-22"},{"lineNumber":261,"author":{"gitId":"SSzeWen"},"content":"     * Handles the event type of finding through preparation","lastModifiedDate":"2023-02-22"},{"lineNumber":262,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-22"},{"lineNumber":263,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the user input command line","lastModifiedDate":"2023-02-22"},{"lineNumber":264,"author":{"gitId":"SSzeWen"},"content":"     * @return","lastModifiedDate":"2023-02-22"},{"lineNumber":265,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":266,"author":{"gitId":"SSzeWen"},"content":"    private static Command findTaskHandler(String fullCommand) {","lastModifiedDate":"2023-02-20"},{"lineNumber":267,"author":{"gitId":"SSzeWen"},"content":"        Command findCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":268,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":269,"author":{"gitId":"SSzeWen"},"content":"            findCommand \u003d prepareFindTask(fullCommand);","lastModifiedDate":"2023-02-20"},{"lineNumber":270,"author":{"gitId":"SSzeWen"},"content":"        } catch (IllegalCommandException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":271,"author":{"gitId":"SSzeWen"},"content":"            return new IllegalCommand();","lastModifiedDate":"2023-02-22"},{"lineNumber":272,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":273,"author":{"gitId":"SSzeWen"},"content":"        return findCommand;","lastModifiedDate":"2023-02-20"},{"lineNumber":274,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":275,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":276,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":277,"author":{"gitId":"SSzeWen"},"content":"     * Returns the find type command after prepared with the corresponding keyword (search word)","lastModifiedDate":"2023-02-22"},{"lineNumber":278,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-22"},{"lineNumber":279,"author":{"gitId":"SSzeWen"},"content":"     * @param fullCommand the user input command line","lastModifiedDate":"2023-02-22"},{"lineNumber":280,"author":{"gitId":"SSzeWen"},"content":"     * @return a new FindCommand object if successful","lastModifiedDate":"2023-02-22"},{"lineNumber":281,"author":{"gitId":"SSzeWen"},"content":"     * @throws IllegalCommandException when the keyword is empty","lastModifiedDate":"2023-02-22"},{"lineNumber":282,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":283,"author":{"gitId":"SSzeWen"},"content":"    private static Command prepareFindTask(String fullCommand) throws IllegalCommandException {","lastModifiedDate":"2023-02-20"},{"lineNumber":284,"author":{"gitId":"SSzeWen"},"content":"        String keyword \u003d fullCommand.replaceFirst(\"find\", \"\").trim();","lastModifiedDate":"2023-02-21"},{"lineNumber":285,"author":{"gitId":"SSzeWen"},"content":"        if (keyword.isEmpty()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":286,"author":{"gitId":"SSzeWen"},"content":"            throw new IllegalCommandException();","lastModifiedDate":"2023-02-20"},{"lineNumber":287,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":288,"author":{"gitId":"SSzeWen"},"content":"        return new FindCommand(keyword);","lastModifiedDate":"2023-02-20"},{"lineNumber":289,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":290,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":291,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":292,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":293,"author":{"gitId":"SSzeWen"},"content":"     * Returns true is the 0-indexed marking is within the array boundaries of 0 and size-1, false otherwise","lastModifiedDate":"2023-02-21"},{"lineNumber":294,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":295,"author":{"gitId":"SSzeWen"},"content":"     * @param indexOfMarking the index to be checked if it is within the TaskList length","lastModifiedDate":"2023-02-21"},{"lineNumber":296,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks          the current TaskList\u0027s length to be referenced from","lastModifiedDate":"2023-02-21"},{"lineNumber":297,"author":{"gitId":"SSzeWen"},"content":"     * @return a boolean value to allow the person to know if their index is within array range","lastModifiedDate":"2023-02-21"},{"lineNumber":298,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":299,"author":{"gitId":"SSzeWen"},"content":"    private static boolean isValidIndex(int indexOfMarking, TaskList tasks) {","lastModifiedDate":"2023-02-19"},{"lineNumber":300,"author":{"gitId":"SSzeWen"},"content":"        if (indexOfMarking \u003c 0 || indexOfMarking \u003e (tasks.getTaskCount() - 1)) {","lastModifiedDate":"2023-02-19"},{"lineNumber":301,"author":{"gitId":"SSzeWen"},"content":"            return false;","lastModifiedDate":"2023-02-19"},{"lineNumber":302,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":303,"author":{"gitId":"SSzeWen"},"content":"        return true;","lastModifiedDate":"2023-02-19"},{"lineNumber":304,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":305,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":306,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":307,"author":{"gitId":"SSzeWen"},"content":"     * Returns true if length of the input string array is not equals to 2, false otherwise","lastModifiedDate":"2023-02-21"},{"lineNumber":308,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":309,"author":{"gitId":"SSzeWen"},"content":"     * @param stringSplit a String array to be referenced from which is used after splitting of a string for formatting","lastModifiedDate":"2023-02-21"},{"lineNumber":310,"author":{"gitId":"SSzeWen"},"content":"     * @return a boolean value on whether the string array given is a valid string array","lastModifiedDate":"2023-02-21"},{"lineNumber":311,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":312,"author":{"gitId":"SSzeWen"},"content":"    private static boolean isInvalidString(String[] stringSplit) {","lastModifiedDate":"2023-02-19"},{"lineNumber":313,"author":{"gitId":"SSzeWen"},"content":"        return stringSplit.length !\u003d 2;","lastModifiedDate":"2023-02-19"},{"lineNumber":314,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":315,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":316,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":317,"author":{"gitId":"SSzeWen"},"content":"     * Returns 0-index of parsing Integer","lastModifiedDate":"2023-02-21"},{"lineNumber":318,"author":{"gitId":"SSzeWen"},"content":"     * Returns -1 if string is not a number or empty","lastModifiedDate":"2023-02-21"},{"lineNumber":319,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":320,"author":{"gitId":"SSzeWen"},"content":"     * @param strNum the input String to test if it is a number or not a number","lastModifiedDate":"2023-02-21"},{"lineNumber":321,"author":{"gitId":"SSzeWen"},"content":"     * @return an integer value of either -1 if the string is invalid, or a 0-indexed integer when the string is valid","lastModifiedDate":"2023-02-21"},{"lineNumber":322,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":323,"author":{"gitId":"SSzeWen"},"content":"    private static int getIndex(String strNum) {","lastModifiedDate":"2023-02-19"},{"lineNumber":324,"author":{"gitId":"SSzeWen"},"content":"        // Referenced from https://www.baeldung.com/java-check-string-number","lastModifiedDate":"2023-02-19"},{"lineNumber":325,"author":{"gitId":"SSzeWen"},"content":"        int index \u003d 0;","lastModifiedDate":"2023-02-19"},{"lineNumber":326,"author":{"gitId":"SSzeWen"},"content":"        if (strNum \u003d\u003d null) {","lastModifiedDate":"2023-02-19"},{"lineNumber":327,"author":{"gitId":"SSzeWen"},"content":"            return -1;","lastModifiedDate":"2023-02-19"},{"lineNumber":328,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":329,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":330,"author":{"gitId":"SSzeWen"},"content":"            index \u003d Integer.parseInt(strNum);","lastModifiedDate":"2023-02-19"},{"lineNumber":331,"author":{"gitId":"SSzeWen"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2023-02-19"},{"lineNumber":332,"author":{"gitId":"SSzeWen"},"content":"            return -1;","lastModifiedDate":"2023-02-19"},{"lineNumber":333,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":334,"author":{"gitId":"SSzeWen"},"content":"        index--;","lastModifiedDate":"2023-02-19"},{"lineNumber":335,"author":{"gitId":"SSzeWen"},"content":"        return index;","lastModifiedDate":"2023-02-21"},{"lineNumber":336,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":337,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":338,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":338}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"import java.io.File;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":" * Storage class that deals with loading tasks from the file and saving tasks in the file","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"public class Storage {","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"    public static final int COMMAND_INDEX \u003d 0;","lastModifiedDate":"2023-02-16"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"    public static final int TASK_DESCRIPTION_INDEX \u003d 2;","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"    public static final int TASK_DEADLINE_INDEX \u003d 3;","lastModifiedDate":"2023-02-16"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    public static final int TASK_FROM_INDEX \u003d 3;","lastModifiedDate":"2023-02-16"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"    public static final int TASK_TO_INDEX \u003d 4;","lastModifiedDate":"2023-02-16"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"    public static final int TASK_MARK_INDEX \u003d 1;","lastModifiedDate":"2023-02-16"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"    public static final String DIRECTORY_NAME \u003d \"data\";","lastModifiedDate":"2023-02-16"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"    public static final String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2023-02-16"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     * Arraylist of tasks that stores the loading of tasks from txt file and updates whenever there is","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"     * changes to TaskList","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"    protected ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"     * ArrayList of Strings that stores the database String format of the txt file when loading data","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"    protected ArrayList\u003cString\u003e databaseString;","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"     * Constructor of Storage Class that creates a new ArrayList of tasks and ArrayList of Strings to be loaded","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"     * with data","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"    public Storage() {","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"        this.databaseString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"            initialise();","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"SSzeWen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"SSzeWen"},"content":"            System.out.println(\"failed to initialise database\");","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"SSzeWen"},"content":"     * Saves newly added task to the database txt file","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"SSzeWen"},"content":"     * @param saveTaskString the string of the task that is being saved through a fixed format","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"SSzeWen"},"content":"     * @throws IOException when FileWriter fails to find the file path but writing is done to it","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"SSzeWen"},"content":"    public void saveAddTask(String saveTaskString) throws IOException {","lastModifiedDate":"2023-02-21"},{"lineNumber":60,"author":{"gitId":"SSzeWen"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH, true);","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"SSzeWen"},"content":"        fw.write(writeTask(saveTaskString));","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"SSzeWen"},"content":"        fw.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":63,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":64,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":65,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"SSzeWen"},"content":"     * Does updating of the database whenever a new change such as delete or mark/unmark command is being called","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"SSzeWen"},"content":"     * This updating changes the txt file directly","lastModifiedDate":"2023-02-21"},{"lineNumber":68,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"SSzeWen"},"content":"     * @throws IOException when the file path does not exist even though there is a writing of a new task","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"SSzeWen"},"content":"    public void updateDatabaseTask() throws IOException {","lastModifiedDate":"2023-02-12"},{"lineNumber":72,"author":{"gitId":"SSzeWen"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2023-02-12"},{"lineNumber":73,"author":{"gitId":"SSzeWen"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {","lastModifiedDate":"2023-02-12"},{"lineNumber":74,"author":{"gitId":"SSzeWen"},"content":"            fw.write(writeTask(tasks.get(i).getTaskString()));","lastModifiedDate":"2023-02-12"},{"lineNumber":75,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"SSzeWen"},"content":"        fw.close();","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":79,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":80,"author":{"gitId":"SSzeWen"},"content":"     * Returns a formatted string by adding a line separator to it so that when saved, it will go to the next line","lastModifiedDate":"2023-02-21"},{"lineNumber":81,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":82,"author":{"gitId":"SSzeWen"},"content":"     * @param saveString the string that is to be saved into the database","lastModifiedDate":"2023-02-21"},{"lineNumber":83,"author":{"gitId":"SSzeWen"},"content":"     * @return the original string but with a line separator","lastModifiedDate":"2023-02-21"},{"lineNumber":84,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":85,"author":{"gitId":"SSzeWen"},"content":"    public static String writeTask(String saveString) {","lastModifiedDate":"2023-02-21"},{"lineNumber":86,"author":{"gitId":"SSzeWen"},"content":"        saveString +\u003d System.lineSeparator();","lastModifiedDate":"2023-02-21"},{"lineNumber":87,"author":{"gitId":"SSzeWen"},"content":"        return saveString;","lastModifiedDate":"2023-02-21"},{"lineNumber":88,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":89,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":91,"author":{"gitId":"SSzeWen"},"content":"     * Does initialisation of the entire Database","lastModifiedDate":"2023-02-21"},{"lineNumber":92,"author":{"gitId":"SSzeWen"},"content":"     * It creates a new directory and file being data/duke.txt when there is no file found","lastModifiedDate":"2023-02-21"},{"lineNumber":93,"author":{"gitId":"SSzeWen"},"content":"     * If there is already an existing file, it loads the data into the ArrayList of task and string","lastModifiedDate":"2023-02-21"},{"lineNumber":94,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":95,"author":{"gitId":"SSzeWen"},"content":"     * @throws IOException when the file path does not exist but commands are being given to load from the file path","lastModifiedDate":"2023-02-21"},{"lineNumber":96,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":97,"author":{"gitId":"SSzeWen"},"content":"    private void initialise() throws IOException {","lastModifiedDate":"2023-02-12"},{"lineNumber":98,"author":{"gitId":"SSzeWen"},"content":"        File savedData \u003d new File(FILE_PATH);","lastModifiedDate":"2023-02-12"},{"lineNumber":99,"author":{"gitId":"SSzeWen"},"content":"        if (!savedData.exists()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"SSzeWen"},"content":"            File directory \u003d new File(DIRECTORY_NAME);","lastModifiedDate":"2023-02-20"},{"lineNumber":101,"author":{"gitId":"SSzeWen"},"content":"            directory.mkdirs();","lastModifiedDate":"2023-02-20"},{"lineNumber":102,"author":{"gitId":"SSzeWen"},"content":"            savedData.createNewFile();","lastModifiedDate":"2023-02-20"},{"lineNumber":103,"author":{"gitId":"SSzeWen"},"content":"            return;","lastModifiedDate":"2023-02-20"},{"lineNumber":104,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":105,"author":{"gitId":"SSzeWen"},"content":"        Scanner contents \u003d new Scanner(savedData);","lastModifiedDate":"2023-02-12"},{"lineNumber":106,"author":{"gitId":"SSzeWen"},"content":"        while (contents.hasNext()) {","lastModifiedDate":"2023-02-12"},{"lineNumber":107,"author":{"gitId":"SSzeWen"},"content":"            databaseString.add(contents.nextLine());","lastModifiedDate":"2023-02-12"},{"lineNumber":108,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":109,"author":{"gitId":"SSzeWen"},"content":"        dataConversionFromDatabaseToArrayList();","lastModifiedDate":"2023-02-21"},{"lineNumber":110,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":111,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":112,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":113,"author":{"gitId":"SSzeWen"},"content":"     * Does data conversion of the saved data from the ArrayList of Strings into a ready ArrayList of tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":114,"author":{"gitId":"SSzeWen"},"content":"     * to store data correctly and be used by TaskList in the whole program","lastModifiedDate":"2023-02-21"},{"lineNumber":115,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":116,"author":{"gitId":"SSzeWen"},"content":"    private void dataConversionFromDatabaseToArrayList() {","lastModifiedDate":"2023-02-21"},{"lineNumber":117,"author":{"gitId":"SSzeWen"},"content":"        for (String data : databaseString) {","lastModifiedDate":"2023-02-12"},{"lineNumber":118,"author":{"gitId":"SSzeWen"},"content":"            String[] SplitTaskConstituents \u003d data.split(Task.COMMA_TASK_SEPARATOR);","lastModifiedDate":"2023-02-16"},{"lineNumber":119,"author":{"gitId":"SSzeWen"},"content":"            Task task \u003d null;","lastModifiedDate":"2023-02-12"},{"lineNumber":120,"author":{"gitId":"SSzeWen"},"content":"            boolean isCorrupted \u003d false;","lastModifiedDate":"2023-02-12"},{"lineNumber":121,"author":{"gitId":"SSzeWen"},"content":"            switch (SplitTaskConstituents[COMMAND_INDEX]) {","lastModifiedDate":"2023-02-16"},{"lineNumber":122,"author":{"gitId":"SSzeWen"},"content":"            case \"T\":","lastModifiedDate":"2023-02-12"},{"lineNumber":123,"author":{"gitId":"SSzeWen"},"content":"                task \u003d new Todo(SplitTaskConstituents[TASK_DESCRIPTION_INDEX]);","lastModifiedDate":"2023-02-16"},{"lineNumber":124,"author":{"gitId":"SSzeWen"},"content":"                break;","lastModifiedDate":"2023-02-12"},{"lineNumber":125,"author":{"gitId":"SSzeWen"},"content":"            case \"D\":","lastModifiedDate":"2023-02-12"},{"lineNumber":126,"author":{"gitId":"SSzeWen"},"content":"                task \u003d new Deadline(SplitTaskConstituents[TASK_DESCRIPTION_INDEX],","lastModifiedDate":"2023-02-16"},{"lineNumber":127,"author":{"gitId":"SSzeWen"},"content":"                        SplitTaskConstituents[TASK_DEADLINE_INDEX]);","lastModifiedDate":"2023-02-16"},{"lineNumber":128,"author":{"gitId":"SSzeWen"},"content":"                break;","lastModifiedDate":"2023-02-12"},{"lineNumber":129,"author":{"gitId":"SSzeWen"},"content":"            case \"E\":","lastModifiedDate":"2023-02-12"},{"lineNumber":130,"author":{"gitId":"SSzeWen"},"content":"                task \u003d new Event(SplitTaskConstituents[TASK_DESCRIPTION_INDEX], SplitTaskConstituents[TASK_FROM_INDEX],","lastModifiedDate":"2023-02-16"},{"lineNumber":131,"author":{"gitId":"SSzeWen"},"content":"                        SplitTaskConstituents[TASK_TO_INDEX]);","lastModifiedDate":"2023-02-16"},{"lineNumber":132,"author":{"gitId":"SSzeWen"},"content":"                break;","lastModifiedDate":"2023-02-12"},{"lineNumber":133,"author":{"gitId":"SSzeWen"},"content":"            default:","lastModifiedDate":"2023-02-12"},{"lineNumber":134,"author":{"gitId":"SSzeWen"},"content":"                isCorrupted \u003d true;","lastModifiedDate":"2023-02-12"},{"lineNumber":135,"author":{"gitId":"SSzeWen"},"content":"                break;","lastModifiedDate":"2023-02-16"},{"lineNumber":136,"author":{"gitId":"SSzeWen"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":137,"author":{"gitId":"SSzeWen"},"content":"            updateMarkings(SplitTaskConstituents, task, isCorrupted);","lastModifiedDate":"2023-02-20"},{"lineNumber":138,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":139,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":140,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":141,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":142,"author":{"gitId":"SSzeWen"},"content":"     * While loading the tasks, update whether the tasks have been marked before","lastModifiedDate":"2023-02-21"},{"lineNumber":143,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":144,"author":{"gitId":"SSzeWen"},"content":"     * @param savedData   the String that has been saved previously in the data","lastModifiedDate":"2023-02-21"},{"lineNumber":145,"author":{"gitId":"SSzeWen"},"content":"     * @param task        the task to be updated whether it has been marked before","lastModifiedDate":"2023-02-21"},{"lineNumber":146,"author":{"gitId":"SSzeWen"},"content":"     * @param isCorrupted to be referenced from where only non-corrupted files are updated","lastModifiedDate":"2023-02-21"},{"lineNumber":147,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":148,"author":{"gitId":"SSzeWen"},"content":"    private void updateMarkings(String[] savedData, Task task, boolean isCorrupted) {","lastModifiedDate":"2023-02-21"},{"lineNumber":149,"author":{"gitId":"SSzeWen"},"content":"        if (isCorrupted) {","lastModifiedDate":"2023-02-20"},{"lineNumber":150,"author":{"gitId":"SSzeWen"},"content":"            return;","lastModifiedDate":"2023-02-20"},{"lineNumber":151,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":152,"author":{"gitId":"SSzeWen"},"content":"        if (savedData[TASK_MARK_INDEX].equals(\"true\")) {","lastModifiedDate":"2023-02-21"},{"lineNumber":153,"author":{"gitId":"SSzeWen"},"content":"            task.setDone(\"mark\");","lastModifiedDate":"2023-02-12"},{"lineNumber":154,"author":{"gitId":"SSzeWen"},"content":"        } else if (savedData[TASK_MARK_INDEX].equals(\"false\")) {","lastModifiedDate":"2023-02-21"},{"lineNumber":155,"author":{"gitId":"SSzeWen"},"content":"            task.setDone(\"unmark\");","lastModifiedDate":"2023-02-12"},{"lineNumber":156,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":157,"author":{"gitId":"SSzeWen"},"content":"        tasks.add(task);","lastModifiedDate":"2023-02-12"},{"lineNumber":158,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":159,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"SSzeWen":159}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":" * TaskList class contains the task list e.g., it has operations to add/delete tasks in the list","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"public class TaskList {","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"     * ArrayList of tasks where all the tasks will be stored by Duke","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"    public ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     * Constructor of the TaskList where it connects the ArrayList of tasks to database\u0027s ArrayList of tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"     * that have been loaded beforehand when initialisation occurs","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     * @param database","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    public TaskList(ArrayList\u003cTask\u003e database) {","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"        tasks \u003d database;","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"     * Deletes task from the TaskList","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     * @param deleteIndex the index of the Task to be deleted","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"    public void deleteTaskFromTaskList(int deleteIndex) {","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"        tasks.remove(deleteIndex);","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"     * Adds a new task to the TaskList","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"     * @param task the Task object to be newly added to the back of the TaskList","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"    public void addTaskToTaskList(Task task) {","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"        tasks.add(task);","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"     * Returns the Task from the given index of the TaskList","lastModifiedDate":"2023-02-21"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"     * @param index the index of the TaskList that contains the Task the user wants","lastModifiedDate":"2023-02-21"},{"lineNumber":48,"author":{"gitId":"SSzeWen"},"content":"     * @return the Task object of said index","lastModifiedDate":"2023-02-21"},{"lineNumber":49,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"SSzeWen"},"content":"    public Task getTaskFromIndex(int index) {","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"SSzeWen"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":53,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"SSzeWen"},"content":"     * Returns the total size of the ArrayList of tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"SSzeWen"},"content":"     * @return the total number of tasks stored in the ArrayList","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"SSzeWen"},"content":"    public int getTaskCount() {","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"SSzeWen"},"content":"        return tasks.size();","lastModifiedDate":"2023-02-19"},{"lineNumber":61,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":64,"author":{"gitId":"SSzeWen"},"content":"     * Prints all the tasks that description contains the keyword and their index","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-22"},{"lineNumber":66,"author":{"gitId":"SSzeWen"},"content":"     * @param keyword the search word the user inputs","lastModifiedDate":"2023-02-22"},{"lineNumber":67,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":68,"author":{"gitId":"SSzeWen"},"content":"    public void printTasksByKeyword(String keyword) {","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"SSzeWen"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"SSzeWen"},"content":"            if (tasks.get(i).getDescription().contains(keyword)) {","lastModifiedDate":"2023-02-22"},{"lineNumber":71,"author":{"gitId":"SSzeWen"},"content":"                System.out.println((i + 1) + \".\" + tasks.get(i));","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"SSzeWen"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":76}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"public class Ui {","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"    public static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\\n\";","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"    public static final String GREET_MESSAGE \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"    public static final String MARK_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\";","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"    public static final String UNMARK_MESSAGE \u003d \"OK, I\u0027ve marked this task as not done yet:\";","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"    public static final String FIND_MESSAGE \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"    public static final String LINE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"    public static final String LS \u003d System.lineSeparator();","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"    private Scanner in;","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     * Constructor of the Ui class where it initialises the new Scanner which is in charge of taking user inputs","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"    public Ui() {","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"     * Returns the line of String that has just been entered by the user","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     * @return a String as the command made by the user","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"    public String readCommand() {","lastModifiedDate":"2023-02-19"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"        String command \u003d in.nextLine();","lastModifiedDate":"2023-02-19"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"        return command;","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"     * Outputs the find task command\u0027s opening message","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"    public static void findTaskByKeywordOpeningMessage() {","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"        System.out.println(LINE + FIND_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"     * Outputs a row of underscores representing a line","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"    public static void printLine() {","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"        System.out.print(LINE);","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"SSzeWen"},"content":"     * Outputs a message when a new task is being added corresponding to the task type","lastModifiedDate":"2023-02-21"},{"lineNumber":51,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":52,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks the TaskList to be referenced from after adding a new task","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"SSzeWen"},"content":"    public static void addSpecialTaskMessage(TaskList tasks) {","lastModifiedDate":"2023-02-19"},{"lineNumber":55,"author":{"gitId":"SSzeWen"},"content":"        int lastElement \u003d tasks.getTaskCount() - 1;","lastModifiedDate":"2023-02-19"},{"lineNumber":56,"author":{"gitId":"SSzeWen"},"content":"        System.out.println(LINE + tasks.getTaskFromIndex(lastElement).addTaskMessage() + \"Now you have \" +","lastModifiedDate":"2023-02-19"},{"lineNumber":57,"author":{"gitId":"SSzeWen"},"content":"                (lastElement + 1) + \" tasks in the list.\" + System.lineSeparator() + LINE);","lastModifiedDate":"2023-02-19"},{"lineNumber":58,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":59,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":61,"author":{"gitId":"SSzeWen"},"content":"     * Outputs a message that the description of the task is empty","lastModifiedDate":"2023-02-21"},{"lineNumber":62,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":63,"author":{"gitId":"SSzeWen"},"content":"     * @param taskType the String of corresponding to the task type","lastModifiedDate":"2023-02-21"},{"lineNumber":64,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":65,"author":{"gitId":"SSzeWen"},"content":"    public static void emptyCommandMessage(String taskType) {","lastModifiedDate":"2023-02-21"},{"lineNumber":66,"author":{"gitId":"SSzeWen"},"content":"        System.out.println(LINE + \" ☹ OOPS!!! The description of a \" + taskType + \" cannot be empty.\\n\" + LINE);","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"SSzeWen"},"content":"     * Shows the user that the program does not understand what the user input is","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":72,"author":{"gitId":"SSzeWen"},"content":"    public static void illegalCommandMessage() {","lastModifiedDate":"2023-02-19"},{"lineNumber":73,"author":{"gitId":"SSzeWen"},"content":"        System.out.println(LINE + \" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" + LINE);","lastModifiedDate":"2023-02-19"},{"lineNumber":74,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":75,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":76,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":77,"author":{"gitId":"SSzeWen"},"content":"     * Prints the entire TaskList of tasks to the user","lastModifiedDate":"2023-02-21"},{"lineNumber":78,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":79,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks the TaskList to be printed","lastModifiedDate":"2023-02-21"},{"lineNumber":80,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":81,"author":{"gitId":"SSzeWen"},"content":"    public static void printList(TaskList tasks) {","lastModifiedDate":"2023-02-19"},{"lineNumber":82,"author":{"gitId":"SSzeWen"},"content":"        System.out.print(LINE);","lastModifiedDate":"2023-02-19"},{"lineNumber":83,"author":{"gitId":"SSzeWen"},"content":"        for (int i \u003d 0; i \u003c tasks.getTaskCount(); ++i) {","lastModifiedDate":"2023-02-19"},{"lineNumber":84,"author":{"gitId":"SSzeWen"},"content":"            System.out.println((i + 1) + \".\" + tasks.getTaskFromIndex(i).toString());","lastModifiedDate":"2023-02-19"},{"lineNumber":85,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":86,"author":{"gitId":"SSzeWen"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-19"},{"lineNumber":87,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":88,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":89,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":90,"author":{"gitId":"SSzeWen"},"content":"     * Greets the user when the program starts running","lastModifiedDate":"2023-02-21"},{"lineNumber":91,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":92,"author":{"gitId":"SSzeWen"},"content":"    public static void greeting() {","lastModifiedDate":"2023-02-19"},{"lineNumber":93,"author":{"gitId":"SSzeWen"},"content":"        System.out.println(LINE + GREET_MESSAGE);","lastModifiedDate":"2023-02-19"},{"lineNumber":94,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":95,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":96,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":97,"author":{"gitId":"SSzeWen"},"content":"     * Shows the user a message that the Task has just been deleted","lastModifiedDate":"2023-02-21"},{"lineNumber":98,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":99,"author":{"gitId":"SSzeWen"},"content":"     * @param deleteIndex the index of the task in the TaskList that has been deleted","lastModifiedDate":"2023-02-21"},{"lineNumber":100,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks       the TaskList to be referenced from","lastModifiedDate":"2023-02-21"},{"lineNumber":101,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":102,"author":{"gitId":"SSzeWen"},"content":"    public static void deleteTaskMessage(int deleteIndex, TaskList tasks) {","lastModifiedDate":"2023-02-19"},{"lineNumber":103,"author":{"gitId":"SSzeWen"},"content":"        System.out.println(LINE + tasks.getTaskFromIndex(deleteIndex).deleteTaskMessage() + \"Now you have \"","lastModifiedDate":"2023-02-19"},{"lineNumber":104,"author":{"gitId":"SSzeWen"},"content":"                + (tasks.getTaskCount() - 1) + \" tasks in the list.\" + System.lineSeparator() + LINE);","lastModifiedDate":"2023-02-19"},{"lineNumber":105,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":106,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":107,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":108,"author":{"gitId":"SSzeWen"},"content":"     * The failure message when updating database has failed","lastModifiedDate":"2023-02-21"},{"lineNumber":109,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":110,"author":{"gitId":"SSzeWen"},"content":"    public static void updateDatabaseFailureMessage() {","lastModifiedDate":"2023-02-19"},{"lineNumber":111,"author":{"gitId":"SSzeWen"},"content":"        System.out.println(\"Update database failure\");","lastModifiedDate":"2023-02-19"},{"lineNumber":112,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":113,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":114,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":115,"author":{"gitId":"SSzeWen"},"content":"     * Shows the user goodbye after the user wants to exit the program by typing bye","lastModifiedDate":"2023-02-21"},{"lineNumber":116,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":117,"author":{"gitId":"SSzeWen"},"content":"    public static void goodbyeMessage() {","lastModifiedDate":"2023-02-19"},{"lineNumber":118,"author":{"gitId":"SSzeWen"},"content":"        System.out.print(LINE + EXIT_MESSAGE + LINE);","lastModifiedDate":"2023-02-22"},{"lineNumber":119,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":120,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":121,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":122,"author":{"gitId":"SSzeWen"},"content":"     * Shows the user a message whenever the user marks or unmarks a task","lastModifiedDate":"2023-02-21"},{"lineNumber":123,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":124,"author":{"gitId":"SSzeWen"},"content":"     * @param command        The full command String entered by the user","lastModifiedDate":"2023-02-21"},{"lineNumber":125,"author":{"gitId":"SSzeWen"},"content":"     * @param indexOfMarking the index that the user wants to mark or unmark","lastModifiedDate":"2023-02-21"},{"lineNumber":126,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks          the TaskList to be referenced from for marking or unmarking of Task","lastModifiedDate":"2023-02-21"},{"lineNumber":127,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":128,"author":{"gitId":"SSzeWen"},"content":"    public static void markChangeMessage(String command, int indexOfMarking, TaskList tasks) {","lastModifiedDate":"2023-02-19"},{"lineNumber":129,"author":{"gitId":"SSzeWen"},"content":"        System.out.print(LINE);","lastModifiedDate":"2023-02-19"},{"lineNumber":130,"author":{"gitId":"SSzeWen"},"content":"        if (command.startsWith(\"mark \")) {","lastModifiedDate":"2023-02-19"},{"lineNumber":131,"author":{"gitId":"SSzeWen"},"content":"            System.out.println(MARK_MESSAGE);","lastModifiedDate":"2023-02-19"},{"lineNumber":132,"author":{"gitId":"SSzeWen"},"content":"        } else if (command.startsWith(\"unmark \")) {","lastModifiedDate":"2023-02-26"},{"lineNumber":133,"author":{"gitId":"SSzeWen"},"content":"            System.out.println(UNMARK_MESSAGE);","lastModifiedDate":"2023-02-19"},{"lineNumber":134,"author":{"gitId":"SSzeWen"},"content":"        } else {","lastModifiedDate":"2023-02-26"},{"lineNumber":135,"author":{"gitId":"SSzeWen"},"content":"            System.out.println(\"failed to mark\");","lastModifiedDate":"2023-02-26"},{"lineNumber":136,"author":{"gitId":"SSzeWen"},"content":"            return;","lastModifiedDate":"2023-02-26"},{"lineNumber":137,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":138,"author":{"gitId":"SSzeWen"},"content":"        System.out.println(\"  \" + tasks.getTaskFromIndex(indexOfMarking).toString() + LS + LINE);","lastModifiedDate":"2023-02-19"},{"lineNumber":139,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":140,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":140}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":" * AddCommand class that inherits from the Command class","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":" * Refers to the add task type of Command","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"public abstract class AddCommand extends Command {","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"     * Saves newly added task to database","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"     * @param currTask refers to the Task that is being added","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     * @param database to be used to store the newly added task","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"    public void addTaskToDatabase(Task currTask, Storage database) {","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"            database.saveAddTask(currTask.getTaskString());","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"            Ui.updateDatabaseFailureMessage();","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"     * Adds the new task to the TaskList","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList for the task to be added to","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"     * @param currTask the newly created Task Object","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"    public void addTaskToTaskList(TaskList tasks, Task currTask) {","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"        tasks.addTaskToTaskList(currTask);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"        Ui.addSpecialTaskMessage(tasks);","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"SSzeWen":39}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":" * AddDeadlineCommand class that inherits from the AddCommand class","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":" * Refers to the adding of deadline task type of Command","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"public class AddDeadlineCommand extends AddCommand {","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"     * describes the deadline task that the user is referring to","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"    protected String description;","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     * when the task should be completed by","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"    protected String deadline;","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"     * Constructor to initialise the new AddDeadlineCommand object with a description and deadline","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"     * @param description","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"     * @param deadline","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"    public AddDeadlineCommand(String description, String deadline) {","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"     * Executes the Deadline Command by creating a new Deadline Task and saving it to TaskList and Database","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList the new deadline task is being added to","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage the new deadline task is being saved to","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"    public void execute(TaskList tasks, Storage database) {","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"        Task currTask \u003d new Deadline(description, deadline);","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"        addTaskToTaskList(tasks, currTask);","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"        addTaskToDatabase(currTask, database);","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":46}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":" * AddEventCommand class that inherits from the AddCommand class","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":" * Refers to the adding of event task type of Command","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"public class AddEventCommand extends AddCommand {","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"     * describes the event task that the user is referring to","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"    protected String description;","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"     * when the event starts","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"    protected String from;","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"     * when the event ends","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"    protected String to;","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"     * Constructor to initialise the new AddDeadlineCommand object with a description and event start and end period","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     * @param description describes the event that the user is referring to","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"     * @param from        is referring to when the event starts","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"     * @param to          is referring to when the event ends","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"    public AddEventCommand(String description, String from, String to) {","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"     * Executes the Event Command by creating a new Event Task and saving it to TaskList and Database","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList the new event task is being added to","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage the new event task is being saved to","lastModifiedDate":"2023-02-21"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-19"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"    public void execute(TaskList tasks, Storage database) {","lastModifiedDate":"2023-02-19"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"        Task currTask \u003d new Event(description, from, to);","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"SSzeWen"},"content":"        addTaskToTaskList(tasks, currTask);","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"SSzeWen"},"content":"        addTaskToDatabase(currTask, database);","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":51}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":" * AddTodoCommand class that inherits from the AddCommand class","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":" * Refers to the adding of todo task type of Command","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"public class AddTodoCommand extends AddCommand {","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"     * The task description the user is referring to","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"    protected String todo;","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     * Constructor to initialise the AddTodoCommand object that initialises the command with a todo description","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"     * @param todo the description of the todo task","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"    public AddTodoCommand(String todo) {","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"        this.todo \u003d todo;","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     * Executes the Todo Command by creating a new Todo Task and saving it to TaskList and Database","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList the new Todo task is being added to","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage the new Todo task is being saved to","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"    public void execute(TaskList tasks, Storage database) {","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"        Task currTask \u003d new Todo(todo);","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"        addTaskToTaskList(tasks, currTask);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"        addTaskToDatabase(currTask, database);","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":39}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":" * The Command class which is the superclass of all the other Command classes","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-19"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"     * To check if the Command requires the program to exit","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"    public boolean isExit;","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"     * The Command constructor that first initialises the isExit boolean to false as we do not want to exit immediately","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    public Command() {","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"        isExit \u003d false;","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"     * Executes the Command","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList that is being referred to","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage that is being referred to","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"    public abstract void execute(TaskList tasks, Storage database);","lastModifiedDate":"2023-02-19"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":30}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":" * The DeleteTaskCommand class that inherits from command handles the task deletion command from the user","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2023-02-19"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"     * The index of Task to be deleted from the TaskList","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"    protected int deleteIndex;","lastModifiedDate":"2023-02-19"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     * Constructor of the DeleteTaskCommand that initialises the index to be deleted","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"     * @param deleteIndex","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"    public DeleteTaskCommand(int deleteIndex) {","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"        this.deleteIndex \u003d deleteIndex;","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     * The execution of the DeleteTaskCommand that deletes the targeted task from the TaskList and Storage","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList where the targeted Task is to be deleted from","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage where the targeted Task is to be deleted and database to be updated","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-19"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"    public void execute(TaskList tasks, Storage database) {","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"        Ui.deleteTaskMessage(deleteIndex, tasks);","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"        tasks.deleteTaskFromTaskList(deleteIndex);","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"            database.updateDatabaseTask();","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"            Ui.updateDatabaseFailureMessage();","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":43}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":" * The ExitCommand class that inherits from the Command class that handles the user input of \"bye\"","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"     * Executes the ExitCommand to show a goodbye message and change the boolean isExit to true so that the while loop","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"     * stops and safely exits the program","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList that is being referred to","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage that is being referred to","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"    public void execute(TaskList tasks, Storage database) {","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"        Ui.goodbyeMessage();","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"        isExit \u003d true;","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":25}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-22"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":" * FindCommand class that inherits from Command class that handles the user input of find whereby it searches keywords","lastModifiedDate":"2023-02-22"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":" * inside TaskList to find similar types of tasks that description contains the keywords","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-22"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"     * The keyword to filter by","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"    protected String keyword;","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"     * Constructor of the FindCommand object that initialises the target keyword the user wants to filter by","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     * @param keyword the word the user wants to filter by and search up similarities","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"     * Executes the FindCommand where it prints all the tasks that are compatible with the keyword inputted by user","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList that is being referred to","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage that is being referred to","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"    public void execute(TaskList tasks, Storage database) {","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"        Ui.findTaskByKeywordOpeningMessage();","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"        tasks.printTasksByKeyword(keyword);","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"        Ui.printLine();","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"        System.out.println(); // add one line of separation","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"SSzeWen":40}},{"path":"src/main/java/duke/command/IllegalCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":" * The IllegalCommand Class that inherits from the Command class that handles IllegalCommandExceptions","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":" * where the user inputs are not of the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"public class IllegalCommand extends Command {","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"     * Executes the IllegalCommand where it produces an Illegal Command Message to tell the user the program does not","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"     * understand his/her input","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList that is being referred to","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage that is being referred to","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"    public void execute(TaskList tasks, Storage database) {","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"        Ui.illegalCommandMessage();","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":23}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":" * The ListCommand class that inherits from the Command class which handles the user wanting to list out all the tasks","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":" * in the TaskList","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-19"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"     * Executes the ListCommand where it lists out all the tasks currently in the TaskList and these tasks are indexed","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList that is being referred to","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage that is being referred to","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-19"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"    public void execute(TaskList tasks, Storage database) {","lastModifiedDate":"2023-02-19"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"        Ui.printList(tasks);","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":22}},{"path":"src/main/java/duke/command/MarkAndUnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.command;","lastModifiedDate":"2023-02-19"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-19"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-19"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-19"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-19"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":" * MarkAndUnmarkCommand class that inherits from the Command class that handles both mark inputs and unmark inputs from","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":" * the user","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"public class MarkAndUnmarkCommand extends Command {","lastModifiedDate":"2023-02-19"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"     * The command type that can be either mark or unmark","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"    private String commandType;","lastModifiedDate":"2023-02-19"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     * The user input String that is being split into its constituents","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"    private String[] commandWords;","lastModifiedDate":"2023-02-19"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"     * The index to be marked or unmarked by the user","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"    private int indexOfMarking;","lastModifiedDate":"2023-02-19"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     * Constructor of the MarkAndUnmarkCommand that initialises the commandType, commandWords and indexOfMarking","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"     * @param commandType    The command type that can be either mark or unmark","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"     * @param words          The user input String that is being split into its constituents","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"     * @param indexOfMarking The index to be marked or unmarked by the user","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"    public MarkAndUnmarkCommand(String commandType, String[] words, int indexOfMarking) {","lastModifiedDate":"2023-02-19"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"        super();","lastModifiedDate":"2023-02-19"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2023-02-19"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"        this.commandWords \u003d words;","lastModifiedDate":"2023-02-19"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"        this.indexOfMarking \u003d indexOfMarking;","lastModifiedDate":"2023-02-19"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"     * The execution of the MarkAndUnmarkCommand","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList that is being referred to","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage that is being referred to","lastModifiedDate":"2023-02-21"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-19"},{"lineNumber":48,"author":{"gitId":"SSzeWen"},"content":"    public void execute(TaskList tasks, Storage database) {","lastModifiedDate":"2023-02-19"},{"lineNumber":49,"author":{"gitId":"SSzeWen"},"content":"        createMarkOrUnmark(tasks, database);","lastModifiedDate":"2023-02-19"},{"lineNumber":50,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":51,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":52,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"SSzeWen"},"content":"     * Part of the execution step where it marks/unmarks the index targeted by the user, outputs a message after","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"SSzeWen"},"content":"     * marking/unmarking successfully, and updates the database","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"SSzeWen"},"content":"     * @param tasks    the TaskList that makes use of the indexOfMarking to mark/unmark the correct task","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"SSzeWen"},"content":"     * @param database the Storage that would be updated after the marking/unmarking of task","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"SSzeWen"},"content":"    private void createMarkOrUnmark(TaskList tasks, Storage database) {","lastModifiedDate":"2023-02-19"},{"lineNumber":60,"author":{"gitId":"SSzeWen"},"content":"        tasks.getTaskFromIndex(indexOfMarking).setDone(commandWords[0]);","lastModifiedDate":"2023-02-19"},{"lineNumber":61,"author":{"gitId":"SSzeWen"},"content":"        Ui.markChangeMessage(commandType, indexOfMarking, tasks);","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"SSzeWen"},"content":"        try {","lastModifiedDate":"2023-02-19"},{"lineNumber":63,"author":{"gitId":"SSzeWen"},"content":"            database.updateDatabaseTask();","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"SSzeWen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-19"},{"lineNumber":65,"author":{"gitId":"SSzeWen"},"content":"            Ui.updateDatabaseFailureMessage();","lastModifiedDate":"2023-02-19"},{"lineNumber":66,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":67,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-19"},{"lineNumber":68,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":69,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-19"}],"authorContributionMap":{"SSzeWen":69}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.exception;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":" * The main duke exception class that the other exceptions inherit from that are unique to duke","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"SSzeWen":7}},{"path":"src/main/java/duke/exception/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.exception;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":" * The Exception that is being thrown when the only the task command such as todo, deadline and event is given","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":" * but there are no inputs after that such as the description of the timing","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"public class EmptyCommandException extends DukeException {","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"SSzeWen":8}},{"path":"src/main/java/duke/exception/IllegalCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.exception;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":" * The exception is being thrown whenever the command format is wrong and the program does not understand the input","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"public class IllegalCommandException extends DukeException {","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"SSzeWen":7}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.task;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":" * Deadline class that keeps track of a task description and a task deadline","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"     * the deadline where the description of the task should be completed by","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"    protected String deadline;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"     * The Constructor of the Deadline Object which initialises the description, deadline and the taskString","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"     * @param description describes what the deadline is about","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"     * @param deadline    the timing the task should be completed by","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"        super(description);","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"        this.taskString \u003d saveTaskString();","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"     * Returns the specific Object Deadline task in readable format of a string to the user which contains information","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"     * such as the description, whether it\u0027s marked or not and the deadline","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     * @return the String in a readable format referring to the Deadline task","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"     * Returns the string in the format to be saved in the database","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"     * @return the String in the right format of deadline type of task","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"    public String saveTaskString() {","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"        String saveString \u003d new String();","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"        saveString +\u003d \"D\" + COMMA_TASK_SEPARATOR + isDone + COMMA_TASK_SEPARATOR + description + COMMA_TASK_SEPARATOR","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"                + deadline;","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"        return saveString;","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"SSzeWen":47}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.task;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":" * Event class that keep tracks of the description, when the event starts and when it ends","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"     * When the event starts","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"    protected String eventFrom;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"     * When the event ends","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"    protected String eventTo;","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     * Event Constructor that creates an event object which initialises the description, when the event starts,","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"     * when the event ends and the event string","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     * @param description describes the event that the user is referring to","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"     * @param eventFrom   is when the event starts","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"     * @param eventTo     is when the event ends","lastModifiedDate":"2023-02-21"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"    public Event(String description, String eventFrom, String eventTo) {","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"        super(description);","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"        this.eventFrom \u003d eventFrom;","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"        this.eventTo \u003d eventTo;","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"        this.taskString \u003d saveTaskString();","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"     * Returns the specific Object Event task in readable format of a string to the user which contains information","lastModifiedDate":"2023-02-21"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"     * such as the description, whether it\u0027s marked or not, and when the event starts and ends","lastModifiedDate":"2023-02-21"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"     * @return the String in a readable format referring to the Event task","lastModifiedDate":"2023-02-21"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + eventFrom + \" to: \" + eventTo + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"     * Returns the string in the format that to be saved in the database","lastModifiedDate":"2023-02-21"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"     * @return the String in the right format of event type of task","lastModifiedDate":"2023-02-21"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"SSzeWen"},"content":"    public String saveTaskString() {","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"SSzeWen"},"content":"        String saveString \u003d new String();","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"SSzeWen"},"content":"        saveString +\u003d \"E\" + COMMA_TASK_SEPARATOR + isDone + COMMA_TASK_SEPARATOR + description + COMMA_TASK_SEPARATOR","lastModifiedDate":"2023-02-16"},{"lineNumber":51,"author":{"gitId":"SSzeWen"},"content":"                + eventFrom + COMMA_TASK_SEPARATOR + eventTo;","lastModifiedDate":"2023-02-16"},{"lineNumber":52,"author":{"gitId":"SSzeWen"},"content":"        return saveString;","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"SSzeWen":54}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.task;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":" * The main Task class that the other subclasses todo, deadline and event inherit from","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"     * describes the event that the user is referring to","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"    protected String description;","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"     * Boolean value on whether the task is done or not","lastModifiedDate":"2023-02-21"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"     * The task in the format of a String saved in the database","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"    protected String taskString;","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     * The separation to split the details inside each taskString","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    public static final String COMMA_TASK_SEPARATOR \u003d \" , \";","lastModifiedDate":"2023-02-16"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"     * Constructor of the Task object that creates a new Task which initialises its description, makes it unmarked at","lastModifiedDate":"2023-02-21"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"     * the start and creates its dedicated taskString in the correct format","lastModifiedDate":"2023-02-21"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     * @param description describes what the task is about","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"        this.taskString \u003d saveTaskString();","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"     * Returns the specific Object Task in readable format of a string to the user which contains information","lastModifiedDate":"2023-02-21"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"     * such as the description and whether it\u0027s marked or not","lastModifiedDate":"2023-02-21"},{"lineNumber":39,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":40,"author":{"gitId":"SSzeWen"},"content":"     * @return the String in a readable format referring to the Task","lastModifiedDate":"2023-02-21"},{"lineNumber":41,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":42,"author":{"gitId":"SSzeWen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"SSzeWen"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"SSzeWen"},"content":"            return \"[X] \" + description;","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"SSzeWen"},"content":"        return \"[ ] \" + description;","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":50,"author":{"gitId":"SSzeWen"},"content":"     * Updates the Task Object\u0027s isDone depending on whether the user input of mark or unmark","lastModifiedDate":"2023-02-21"},{"lineNumber":51,"author":{"gitId":"SSzeWen"},"content":"     * When mark is the String of userCommand, make isDone true","lastModifiedDate":"2023-02-21"},{"lineNumber":52,"author":{"gitId":"SSzeWen"},"content":"     * When unmark is the String of userCommand, make isDone false","lastModifiedDate":"2023-02-21"},{"lineNumber":53,"author":{"gitId":"SSzeWen"},"content":"     * Updating to the database is then done","lastModifiedDate":"2023-02-21"},{"lineNumber":54,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":55,"author":{"gitId":"SSzeWen"},"content":"     * @param userCommand the first word of the user input corresponding to the type of command","lastModifiedDate":"2023-02-21"},{"lineNumber":56,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":57,"author":{"gitId":"SSzeWen"},"content":"    public void setDone(String userCommand) {","lastModifiedDate":"2023-02-21"},{"lineNumber":58,"author":{"gitId":"SSzeWen"},"content":"        if (userCommand.equals(\"mark\")) {","lastModifiedDate":"2023-02-21"},{"lineNumber":59,"author":{"gitId":"SSzeWen"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"SSzeWen"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"SSzeWen"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"SSzeWen"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"SSzeWen"},"content":"        this.taskString \u003d saveTaskString();","lastModifiedDate":"2023-02-12"},{"lineNumber":64,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"SSzeWen"},"content":"     * Returns the string in the format to be saved in database","lastModifiedDate":"2023-02-21"},{"lineNumber":68,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":69,"author":{"gitId":"SSzeWen"},"content":"     * @return the string in the correct format to be saved","lastModifiedDate":"2023-02-21"},{"lineNumber":70,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":71,"author":{"gitId":"SSzeWen"},"content":"    public abstract String saveTaskString();","lastModifiedDate":"2023-02-12"},{"lineNumber":72,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":73,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":74,"author":{"gitId":"SSzeWen"},"content":"     * Returns the String to be used by Ui class","lastModifiedDate":"2023-02-21"},{"lineNumber":75,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":76,"author":{"gitId":"SSzeWen"},"content":"     * @return the String that would be shown to the user after adding a new task","lastModifiedDate":"2023-02-21"},{"lineNumber":77,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":78,"author":{"gitId":"SSzeWen"},"content":"    public String addTaskMessage() {","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"SSzeWen"},"content":"        return \"Got it. I\u0027ve added this task:\\n  \" + this.toString() + System.lineSeparator();","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":83,"author":{"gitId":"SSzeWen"},"content":"     * Return the String to be used by Ui class","lastModifiedDate":"2023-02-21"},{"lineNumber":84,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":85,"author":{"gitId":"SSzeWen"},"content":"     * @return the String that would be shown to the user after deleting a task","lastModifiedDate":"2023-02-21"},{"lineNumber":86,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":87,"author":{"gitId":"SSzeWen"},"content":"    public String deleteTaskMessage() {","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"SSzeWen"},"content":"        return \"Noted. I\u0027ve removed this task:\\n  \" + this.toString() + System.lineSeparator();","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":92,"author":{"gitId":"SSzeWen"},"content":"     * Returns the taskString of the current Task object","lastModifiedDate":"2023-02-21"},{"lineNumber":93,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":94,"author":{"gitId":"SSzeWen"},"content":"     * @return the String taskString which is a string formatted for saving in the database","lastModifiedDate":"2023-02-21"},{"lineNumber":95,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":96,"author":{"gitId":"SSzeWen"},"content":"    public String getTaskString() {","lastModifiedDate":"2023-02-12"},{"lineNumber":97,"author":{"gitId":"SSzeWen"},"content":"        return taskString;","lastModifiedDate":"2023-02-12"},{"lineNumber":98,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":99,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":100,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-22"},{"lineNumber":101,"author":{"gitId":"SSzeWen"},"content":"     * Returns the description of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":102,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-22"},{"lineNumber":103,"author":{"gitId":"SSzeWen"},"content":"     * @return the description String of the task","lastModifiedDate":"2023-02-22"},{"lineNumber":104,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-22"},{"lineNumber":105,"author":{"gitId":"SSzeWen"},"content":"    public String getDescription() {","lastModifiedDate":"2023-02-22"},{"lineNumber":106,"author":{"gitId":"SSzeWen"},"content":"        return description;","lastModifiedDate":"2023-02-22"},{"lineNumber":107,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-22"},{"lineNumber":108,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":109,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"SSzeWen":109}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"package duke.task;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"/**","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":" * Todo class that keep tracks of a task description","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":" */","lastModifiedDate":"2023-02-21"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"     * Todo class constructor that creates a new todo object and initialises its description","lastModifiedDate":"2023-02-21"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"     * @param description describes the todo task that the user is referring to","lastModifiedDate":"2023-02-21"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"        super(description);","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"     * Returns the specific Object Task in readable format of a string to the user which contains information","lastModifiedDate":"2023-02-21"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"     * such as the description and whether it\u0027s marked or not","lastModifiedDate":"2023-02-21"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"     * @return the String in a readable format referring to the Todo Task","lastModifiedDate":"2023-02-21"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":22,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"SSzeWen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"SSzeWen"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"SSzeWen"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"SSzeWen"},"content":"    /**","lastModifiedDate":"2023-02-21"},{"lineNumber":28,"author":{"gitId":"SSzeWen"},"content":"     * Returns the string in the format to be saved in database as a todo Task","lastModifiedDate":"2023-02-21"},{"lineNumber":29,"author":{"gitId":"SSzeWen"},"content":"     *","lastModifiedDate":"2023-02-21"},{"lineNumber":30,"author":{"gitId":"SSzeWen"},"content":"     * @return the string in the correct format to be saved","lastModifiedDate":"2023-02-21"},{"lineNumber":31,"author":{"gitId":"SSzeWen"},"content":"     */","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"SSzeWen"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"SSzeWen"},"content":"    public String saveTaskString() {","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"SSzeWen"},"content":"        String saveString \u003d new String();","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"SSzeWen"},"content":"        saveString +\u003d \"T\" + COMMA_TASK_SEPARATOR + isDone + COMMA_TASK_SEPARATOR + description;","lastModifiedDate":"2023-02-16"},{"lineNumber":36,"author":{"gitId":"SSzeWen"},"content":"        return saveString;","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"SSzeWen"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"SSzeWen"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"SSzeWen":38}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"SSzeWen"},"content":"mark i am","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"SSzeWen"},"content":"mark 3","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"SSzeWen"},"content":"todo borrow book","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"SSzeWen"},"content":"list","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"SSzeWen"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"SSzeWen"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"SSzeWen"},"content":"mark 1","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"SSzeWen"},"content":"list","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"SSzeWen"},"content":"mark 2","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"unmark 1","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"SSzeWen"},"content":"list","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"SSzeWen"},"content":"deadline","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"SSzeWen"},"content":"todo","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"SSzeWen"},"content":"event","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"SSzeWen"},"content":"list","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"SSzeWen"},"content":"blah","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"SSzeWen"},"content":"delete 1","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"mark 2","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"SSzeWen"},"content":"unmark 1","lastModifiedDate":"2023-02-16"},{"lineNumber":20,"author":{"gitId":"SSzeWen"},"content":"list","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"SSzeWen"},"content":"bye","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"SSzeWen":21}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"SSzeWen"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\command\\*.java","lastModifiedDate":"2023-02-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"SSzeWen"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"SSzeWen":2,"-":19}}]
