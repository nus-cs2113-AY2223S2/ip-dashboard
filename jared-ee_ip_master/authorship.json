[{"path":"Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"todo more","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"todo even","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"todo hello","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"deadline iuai /by 02:00","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"todo stuff","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"event hugg /from 02:00 /to 07-08-2023","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"jared-ee":9}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"## Duke","lastModifiedDate":"2023-03-04"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"Duke is a program that helps you create your very own to-do list. There are 3 categories of","lastModifiedDate":"2023-03-04"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"classification for each task: todo, event and deadline.","lastModifiedDate":"2023-03-04"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"## Commands","lastModifiedDate":"2023-03-04"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"### todo (task)","lastModifiedDate":"2023-03-04"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"   Use this to add a task to your list without any specified timeframe. The task will be labelled with a","lastModifiedDate":"2023-03-04"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"   \"[T]\" in your list.\\","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"   eg. todo stuff","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"### deadline (task) /by (time)","lastModifiedDate":"2023-03-04"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"   For adding tasks with a specific deadline. The task will be labelled with a \"[D]\" in your list.\\","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"   eg. deadline stuff /by 2023-08-05 14:00","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"### event (task) /from (start time) /to (end time)","lastModifiedDate":"2023-03-04"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"   For adding tasks that last over a certain time period. The task will be labelled with a \"[E]\" in your","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"   list.\\","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"   eg. deadline stuff /from 2023-08-05 14:00 /to 2023-08-05 16:00","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"### mark (i), unmark (i)","lastModifiedDate":"2023-03-04"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"   Marks the ith task in your list as completed or uncompleted. Completed tasks are labelled with \"[X]\"","lastModifiedDate":"2023-03-04"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"   in the list while uncompleted tasks are labelled with \"[ ]\". Newly added tasks are marked as uncompleted","lastModifiedDate":"2023-03-04"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"   by default.\\","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"   eg. mark 1","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"### delete (i)","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"   Deletes the ith task from your list.\\","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"   eg. delete 1","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"### list","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"   Lists out all tasks in your list.","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"### find (string)","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"   Lists out all tasks in your list that contain the given string in their description.\\","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"   eg. find stuff","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"### dated (date/time)","lastModifiedDate":"2023-03-04"},{"lineNumber":33,"author":{"gitId":"jared-ee"},"content":"   Lists out all tasks in your list that coincide with the given date/time. Naturally, this only works","lastModifiedDate":"2023-03-04"},{"lineNumber":34,"author":{"gitId":"jared-ee"},"content":"   on deadline and event tasks.\\","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"jared-ee"},"content":"   eg. find 2023-08-05 14:00","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"jared-ee"},"content":"### bye","lastModifiedDate":"2023-03-04"},{"lineNumber":37,"author":{"gitId":"jared-ee"},"content":"   Closes the program. Don\u0027t worry if you close the window without using this command, Duke will still","lastModifiedDate":"2023-03-04"},{"lineNumber":38,"author":{"gitId":"jared-ee"},"content":"   remember all the tasks in your list prior to closing. You can pull them up again next time you open","lastModifiedDate":"2023-03-04"},{"lineNumber":39,"author":{"gitId":"jared-ee"},"content":"   Duke.","lastModifiedDate":"2023-03-04"},{"lineNumber":40,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"jared-ee"},"content":"## Notes","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"jared-ee"},"content":"   For any command that involves time, any generally accepted date and time format is fine. That is to say:\\","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"jared-ee"},"content":"   YYYY-MM-DD or DD-MM-YYYY or MM-DD-YYYY\\","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"jared-ee"},"content":"   02:00 PM or 14:00, 08:00 AM or 08:00\\","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"jared-ee"},"content":"   are all acceptable, just follow the format given here.","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"jared-ee"},"content":"   ","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"-":2,"jared-ee":44}},{"path":"src/main/java/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":" * DateTime class for dealing with date and time conversions","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"public class DateTime {","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"     * Alters date from whatever input format to YYYY-MM-DD so it can be stored as LocalDate/LocalDateTime","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"     * @param datestr user input date string in any format","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"     * @return datestr2 after conversion to YYYY-MM-DD","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"    public static String Date(String datestr) {","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"        String datestr2 \u003d datestr;","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"        if (datestr.indexOf(\u0027-\u0027) !\u003d 4) {","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"            int month \u003d Integer.parseInt(datestr.substring(3, 5));","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"            if (month \u003e 12) {","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"                datestr2 \u003d datestr.substring(6) + \"-\" + datestr.substring(0, 3) + datestr.substring(3, 5);","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"            } else {","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"                datestr2 \u003d datestr.substring(6) + \"-\" + datestr.substring(3, 6) + datestr.substring(0, 2);","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"        return datestr2;","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"     * Alters time from whatever input format to 24 hour format so it cna be stored as LocalDate/LocalDateTime","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"     * @param timestr user input time string in any format","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"     * @return timestr2 after conversion to 24 hour format","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"jared-ee"},"content":"    public static String Time(String timestr) {","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"jared-ee"},"content":"        String timestr2 \u003d timestr;","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"jared-ee"},"content":"        if (timestr.endsWith(\"PM\") \u0026\u0026 timestr.charAt(0) \u003d\u003d \u00270\u0027) {","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"jared-ee"},"content":"            int hour \u003d Character.getNumericValue(timestr.charAt(1));","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"jared-ee"},"content":"            hour \u003d hour + 12;","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"jared-ee"},"content":"            timestr2 \u003d hour + timestr.substring(2, 5);","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"jared-ee"},"content":"        } else if (timestr.endsWith(\"AM\") \u0026\u0026 timestr.startsWith(\"12\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"jared-ee"},"content":"            timestr2 \u003d \"00:00\";","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"jared-ee"},"content":"        } else {","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"jared-ee"},"content":"            timestr2 \u003d timestr.substring(0, 5);","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"jared-ee"},"content":"        return timestr2;","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"jared-ee"},"content":"     * Converts user input date and time string format to YYYY-MM-DDTHH:mm","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"jared-ee"},"content":"     * @param str user input date and/or time as string","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"jared-ee"},"content":"     * @return datetimestr in the format YYYY-MM-DDTHH:mm","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"jared-ee"},"content":"    public static String DT(String str) {","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"jared-ee"},"content":"        String datestr;","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"jared-ee"},"content":"        String timestr;","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"jared-ee"},"content":"        String datetimestr;","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"jared-ee"},"content":"        if (str.length() \u003d\u003d 10) {","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"jared-ee"},"content":"            datestr \u003d Date(str);","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"jared-ee"},"content":"            timestr \u003d \"00:00\";","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"jared-ee"},"content":"            datetimestr \u003d datestr + \"T\" + timestr;","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"jared-ee"},"content":"        } else if (str.length() \u003c\u003d 8) {","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"jared-ee"},"content":"            datestr \u003d (LocalDate.now()).toString();","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"jared-ee"},"content":"            timestr \u003d Time(str);","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"jared-ee"},"content":"            datetimestr \u003d datestr + \"T\" + timestr;","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"jared-ee"},"content":"        } else {","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"jared-ee"},"content":"            datestr \u003d str.substring(0, 10);","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"jared-ee"},"content":"            datestr \u003d Date(datestr);","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"jared-ee"},"content":"            timestr \u003d str.substring(11);","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"jared-ee"},"content":"            timestr \u003d Time(timestr);","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"jared-ee"},"content":"            datetimestr \u003d datestr + \"T\" + timestr;","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"jared-ee"},"content":"        return datetimestr;","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"jared-ee"},"content":"     * Parses user input date and/or time string in any format to LocalDateTime","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"jared-ee"},"content":"     * @param str user input date and/or time as string","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"jared-ee"},"content":"     * @param formatter for formatting LocalDateTime values to \"yyyy-MM-dd\u0027T\u0027HH:mm\"","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"jared-ee"},"content":"     * @return user inputted string as LocalDateTime","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"jared-ee"},"content":"    public static LocalDateTime toLocalDateTime(String str, DateTimeFormatter formatter) {","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"jared-ee"},"content":"        String datetimestr \u003d DT(str);","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"jared-ee"},"content":"        return LocalDateTime.parse(datetimestr, formatter);","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"jared-ee":85}},{"path":"src/main/java/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"jared-ee":15}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"    @FXML","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"    private Label dialog;","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"    @FXML","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/DialogBox.fxml\"));","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"jared-ee"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"jared-ee"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"jared-ee"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"jared-ee"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"jared-ee"},"content":"    private void flip() {","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"jared-ee"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"jared-ee"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"jared-ee"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"jared-ee"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"jared-ee"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"jared-ee"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"jared-ee"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"jared-ee"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"jared-ee"},"content":"        db.flip();","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"jared-ee"},"content":"        return db;","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"jared-ee":59}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"import java.io.File;","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"import java.lang.String;","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"     * generates a String response to the user input","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"     * @param input user input","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"     * @param filecontents all previous command lines stored in an arraylist to be written to text file","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"     * @param filePath text file to be written to (Duke.txt)","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"     * @param tasks arraylist of tasks","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"     * @param formatter for formatting LocalDateTime values to \"yyyy-MM-dd\u0027T\u0027HH:mm\"","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"     * @param i current index in tasks for Mark, where necessary","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"     * @return output response from Duke","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"    public String getResponse(String input, ArrayList\u003cString\u003e filecontents, String filePath, ArrayList\u003cTask\u003e tasks, DateTimeFormatter formatter, int i) {","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"        if (input.startsWith(\"bye\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"            String toFile \u003d \"\";","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"            for (String filecontent : filecontents) {","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"                toFile \u003d toFile + filecontent + \"\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"            try {","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"jared-ee"},"content":"                Storage.writeToFile(filePath, toFile);","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"jared-ee"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Something went wrong: \" + e.getMessage();","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"jared-ee"},"content":"        if (input.startsWith(\"list\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"jared-ee"},"content":"            output \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"jared-ee"},"content":"            for (int j \u003d 0; j \u003c i; j++) {","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"jared-ee"},"content":"                Task task \u003d tasks.get(j);","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"jared-ee"},"content":"                try {","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + (j + 1) + \".\" + task.getType() + task.getDone() + task.getDescription();","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"jared-ee"},"content":"                    if ((task.getType()).equals(\"[T]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"jared-ee"},"content":"                        output \u003d output + \"\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"jared-ee"},"content":"                    }","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"jared-ee"},"content":"                    if ((task.getType()).equals(\"[D]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"jared-ee"},"content":"                        output \u003d output + \" (by: \" +","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"jared-ee"},"content":"                                    DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"jared-ee"},"content":"                    }","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"jared-ee"},"content":"                    if ((task.getType()).equals(\"[E]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"jared-ee"},"content":"                        output \u003d output + \" (from \" +","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"jared-ee"},"content":"                                DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \" to: \";","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"jared-ee"},"content":"                        output \u003d output + DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime2()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"jared-ee"},"content":"                    }","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"jared-ee"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"jared-ee"},"content":"                    j++;","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"jared-ee"},"content":"        } else if (input.startsWith(\"mark\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"jared-ee"},"content":"            try {","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"jared-ee"},"content":"                Mark.mark(i, input, tasks);","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"jared-ee"},"content":"                int number \u003d Integer.parseInt(input.substring(5));","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"jared-ee"},"content":"                Task task \u003d tasks.get(number - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"  \" + task.getType() + \"[X]\" + task.getDescription() + \" \";","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"jared-ee"},"content":"                if ((task.getType()).equals(\"[T]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"jared-ee"},"content":"                if ((task.getType()).equals(\"[D]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"(by: \" + DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm a\").format(task.getDateTime1()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"jared-ee"},"content":"                if ((task.getType()).equals(\"[E]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"(from \" + DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \" to: \";","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime2()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"jared-ee"},"content":"                try {","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"jared-ee"},"content":"                    Storage.writeToFile(filePath, input);","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"jared-ee"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"jared-ee"},"content":"                    output \u003d \"Something went wrong \" + e.getMessage() + \"\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"jared-ee"},"content":"            } catch (NumberFormatException | IndexOutOfBoundsException | DukeException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Oops! That isn\u0027t a task in your list.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Please input only one integer after \u0027mark\u0027, separated by a single whitespace.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"There are \" + i + \" tasks in your list, so do not input an integer \" +","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"jared-ee"},"content":"                            \"smaller than 1 or larger than \" + i + \".\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"jared-ee"},"content":"        } else if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"jared-ee"},"content":"            try {","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"jared-ee"},"content":"                Mark.unmark(i, input, tasks);","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"jared-ee"},"content":"                int number \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2023-03-01"},{"lineNumber":93,"author":{"gitId":"jared-ee"},"content":"                Task task \u003d tasks.get(number - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Ok, I\u0027ve marked this task as not done yet:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":95,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"  \" + task.getType() + \"[ ]\" + task.getDescription() + \" \";","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"jared-ee"},"content":"                if ((task.getType()).equals(\"[T]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":98,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"jared-ee"},"content":"                if ((task.getType()).equals(\"[D]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"(by: \" + DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":102,"author":{"gitId":"jared-ee"},"content":"                if ((task.getType()).equals(\"[E]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"(from \" + DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \" to: \";","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime2()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":106,"author":{"gitId":"jared-ee"},"content":"                try {","lastModifiedDate":"2023-03-01"},{"lineNumber":107,"author":{"gitId":"jared-ee"},"content":"                    Storage.writeToFile(filePath, input);","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"jared-ee"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":109,"author":{"gitId":"jared-ee"},"content":"                    output \u003d \"Something went wrong: \" + e.getMessage();","lastModifiedDate":"2023-03-01"},{"lineNumber":110,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":111,"author":{"gitId":"jared-ee"},"content":"            } catch (NumberFormatException | IndexOutOfBoundsException | DukeException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Oops! That isn\u0027t a task in your list.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Please input only one integer after \u0027mark\u0027, separated by a single whitespace.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":114,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"There are \" + i + \" tasks in your list, so do not input an integer \" +","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"jared-ee"},"content":"                        \"smaller than 1 or larger than \" + i + \".\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":116,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":117,"author":{"gitId":"jared-ee"},"content":"        } else if (input.startsWith(\"todo\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":118,"author":{"gitId":"jared-ee"},"content":"            try {","lastModifiedDate":"2023-03-01"},{"lineNumber":119,"author":{"gitId":"jared-ee"},"content":"                List.todo(tasks, formatter, input);","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"jared-ee"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":122,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"  \" + task.getType() + \"[ ]\" + task.getDescription() + \"\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Now you have \" + (i + 1) + \" tasks in the list.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":124,"author":{"gitId":"jared-ee"},"content":"                try {","lastModifiedDate":"2023-03-01"},{"lineNumber":125,"author":{"gitId":"jared-ee"},"content":"                    Storage.writeToFile(filePath, input);","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"jared-ee"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":127,"author":{"gitId":"jared-ee"},"content":"                    output \u003d \"Something went wrong: \" + e.getMessage();","lastModifiedDate":"2023-03-01"},{"lineNumber":128,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":129,"author":{"gitId":"jared-ee"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":130,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Oops! The description of a todo cannot be left empty.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":131,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":132,"author":{"gitId":"jared-ee"},"content":"        } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":133,"author":{"gitId":"jared-ee"},"content":"            try {","lastModifiedDate":"2023-03-01"},{"lineNumber":134,"author":{"gitId":"jared-ee"},"content":"                List.deadline(tasks, formatter, input);","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"jared-ee"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":137,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"  \" + task.getType() + \"[ ]\" + task.getDescription() + \" (by: \";","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":139,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Now you have \" + (i + 1) + \" tasks in the list.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":140,"author":{"gitId":"jared-ee"},"content":"                try {","lastModifiedDate":"2023-03-01"},{"lineNumber":141,"author":{"gitId":"jared-ee"},"content":"                    Storage.writeToFile(filePath, input);","lastModifiedDate":"2023-03-15"},{"lineNumber":142,"author":{"gitId":"jared-ee"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":143,"author":{"gitId":"jared-ee"},"content":"                    output \u003d \"Something went wrong: \" + e.getMessage();","lastModifiedDate":"2023-03-01"},{"lineNumber":144,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":145,"author":{"gitId":"jared-ee"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":146,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Invalid format. When specifying deadline, please follow the format below:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":147,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"deadline (task) /by (deadline)\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":148,"author":{"gitId":"jared-ee"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":149,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"You might have left the description empty.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":150,"author":{"gitId":"jared-ee"},"content":"            } catch (DateTimeParseException | NumberFormatException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":151,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Oops! You\u0027ve entered an invalid date/time.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":152,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Date format-\u003e YYYY-MM-DD or DD-MM-YYYY or MM-DD-YYYY\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":153,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Time format-\u003e 18:00 or 06:00 PM\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":154,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Example: 2015-10-23 03:34\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":155,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":156,"author":{"gitId":"jared-ee"},"content":"        } else if (input.startsWith(\"event\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":157,"author":{"gitId":"jared-ee"},"content":"            try {","lastModifiedDate":"2023-03-01"},{"lineNumber":158,"author":{"gitId":"jared-ee"},"content":"                List.event(tasks, formatter, input);","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"jared-ee"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":161,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"  \" + task.getType() + \"[ ]\" + task.getDescription() + \" (from: \";","lastModifiedDate":"2023-03-15"},{"lineNumber":162,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \" to: \";","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime2()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":164,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Now you have \" + (i + 1) + \" tasks in the list.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":165,"author":{"gitId":"jared-ee"},"content":"                try {","lastModifiedDate":"2023-03-01"},{"lineNumber":166,"author":{"gitId":"jared-ee"},"content":"                    Storage.writeToFile(filePath, input);","lastModifiedDate":"2023-03-15"},{"lineNumber":167,"author":{"gitId":"jared-ee"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":168,"author":{"gitId":"jared-ee"},"content":"                    output \u003d \"Something went wrong: \" + e.getMessage();","lastModifiedDate":"2023-03-01"},{"lineNumber":169,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":170,"author":{"gitId":"jared-ee"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":171,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Invalid format. When specifying timeframe, please follow the format below:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":172,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"event (task) /from (starting time) /to (ending time)\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":173,"author":{"gitId":"jared-ee"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":174,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"You might have left the description empty.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":175,"author":{"gitId":"jared-ee"},"content":"            } catch (DateTimeParseException | NumberFormatException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":176,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Oops! You\u0027ve entered an invalid date/time.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":177,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Date format-\u003e YYYY-MM-DD or DD-MM-YYYY or MM-DD-YYYY\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":178,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Time format-\u003e 18:00 or 06:00 PM\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":179,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Example: 2015-10-23 03:34\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":180,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"If time is left out, I\u0027ll assume it to be 00:00.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":181,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"If date is left out, I\u0027ll assume it to be today.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":182,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":183,"author":{"gitId":"jared-ee"},"content":"        } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":184,"author":{"gitId":"jared-ee"},"content":"            try {","lastModifiedDate":"2023-03-01"},{"lineNumber":185,"author":{"gitId":"jared-ee"},"content":"                List.delete(tasks, i, input);","lastModifiedDate":"2023-03-15"},{"lineNumber":186,"author":{"gitId":"jared-ee"},"content":"                int number \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2023-03-01"},{"lineNumber":187,"author":{"gitId":"jared-ee"},"content":"                Task task \u003d tasks.get(number - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":188,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Noted. I\u0027ve removed this task:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":189,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"  \" + task.getType() + task.getDone() + task.getDescription() + \"\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":190,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Now you have \" + (i - 1) + \" tasks in the list.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":191,"author":{"gitId":"jared-ee"},"content":"                try {","lastModifiedDate":"2023-03-01"},{"lineNumber":192,"author":{"gitId":"jared-ee"},"content":"                    Storage.writeToFile(filePath, input);","lastModifiedDate":"2023-03-15"},{"lineNumber":193,"author":{"gitId":"jared-ee"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":194,"author":{"gitId":"jared-ee"},"content":"                    output \u003d \"Something went wrong: \" + e.getMessage();","lastModifiedDate":"2023-03-01"},{"lineNumber":195,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":196,"author":{"gitId":"jared-ee"},"content":"                i--;","lastModifiedDate":"2023-03-01"},{"lineNumber":197,"author":{"gitId":"jared-ee"},"content":"            } catch (NumberFormatException | IndexOutOfBoundsException | DukeException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":198,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Oops! That isn\u0027t a task in your list.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":199,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"Please input only one integer after \u0027delete\u0027, separated by a single whitespace.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":200,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"There are \" + i + \" tasks in your list, so do not input an integer \" +","lastModifiedDate":"2023-03-01"},{"lineNumber":201,"author":{"gitId":"jared-ee"},"content":"                        \"smaller than 1 or larger than \" + i + \".\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":202,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":203,"author":{"gitId":"jared-ee"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":204,"author":{"gitId":"jared-ee"},"content":"            if (input.equals(\"find\") || (input.substring(5)).isBlank()) {","lastModifiedDate":"2023-03-01"},{"lineNumber":205,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Oops! The description cannot be left empty.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":206,"author":{"gitId":"jared-ee"},"content":"            } else {","lastModifiedDate":"2023-03-01"},{"lineNumber":207,"author":{"gitId":"jared-ee"},"content":"                String find \u003d input.substring(5);","lastModifiedDate":"2023-03-01"},{"lineNumber":208,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":209,"author":{"gitId":"jared-ee"},"content":"                int listnumber \u003d 1;","lastModifiedDate":"2023-03-01"},{"lineNumber":210,"author":{"gitId":"jared-ee"},"content":"                for (int j \u003d 0; j \u003c tasks.size(); j++) {","lastModifiedDate":"2023-03-01"},{"lineNumber":211,"author":{"gitId":"jared-ee"},"content":"                    Task task \u003d tasks.get(j);","lastModifiedDate":"2023-03-15"},{"lineNumber":212,"author":{"gitId":"jared-ee"},"content":"                    String description \u003d task.getDescription();","lastModifiedDate":"2023-03-15"},{"lineNumber":213,"author":{"gitId":"jared-ee"},"content":"                    if (description.contains(find)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":214,"author":{"gitId":"jared-ee"},"content":"                        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":215,"author":{"gitId":"jared-ee"},"content":"                            output \u003d output + listnumber + \".\" + task.getType() + task.getDone() + task.getDescription();","lastModifiedDate":"2023-03-15"},{"lineNumber":216,"author":{"gitId":"jared-ee"},"content":"                            if ((task.getType()).equals(\"[T]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":217,"author":{"gitId":"jared-ee"},"content":"                                output \u003d output + \"\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":218,"author":{"gitId":"jared-ee"},"content":"                            }","lastModifiedDate":"2023-03-01"},{"lineNumber":219,"author":{"gitId":"jared-ee"},"content":"                            if ((task.getType()).equals(\"[D]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":220,"author":{"gitId":"jared-ee"},"content":"                                output \u003d output + \" (by: \" +","lastModifiedDate":"2023-03-01"},{"lineNumber":221,"author":{"gitId":"jared-ee"},"content":"                                        DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":222,"author":{"gitId":"jared-ee"},"content":"                            }","lastModifiedDate":"2023-03-01"},{"lineNumber":223,"author":{"gitId":"jared-ee"},"content":"                            if ((task.getType()).equals(\"[E]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":224,"author":{"gitId":"jared-ee"},"content":"                                output \u003d output + \" (from \" +","lastModifiedDate":"2023-03-01"},{"lineNumber":225,"author":{"gitId":"jared-ee"},"content":"                                        DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \" to: \";","lastModifiedDate":"2023-03-15"},{"lineNumber":226,"author":{"gitId":"jared-ee"},"content":"                                output \u003d output +DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime2()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":227,"author":{"gitId":"jared-ee"},"content":"                            }","lastModifiedDate":"2023-03-01"},{"lineNumber":228,"author":{"gitId":"jared-ee"},"content":"                            listnumber++;","lastModifiedDate":"2023-03-01"},{"lineNumber":229,"author":{"gitId":"jared-ee"},"content":"                        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":230,"author":{"gitId":"jared-ee"},"content":"                            j++;","lastModifiedDate":"2023-03-01"},{"lineNumber":231,"author":{"gitId":"jared-ee"},"content":"                        }","lastModifiedDate":"2023-03-01"},{"lineNumber":232,"author":{"gitId":"jared-ee"},"content":"                    }","lastModifiedDate":"2023-03-01"},{"lineNumber":233,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":234,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":235,"author":{"gitId":"jared-ee"},"content":"        } else if (input.startsWith(\"dated\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":236,"author":{"gitId":"jared-ee"},"content":"            if (input.equals(\"dated\") || (input.substring(5)).isBlank()) {","lastModifiedDate":"2023-03-01"},{"lineNumber":237,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Oops! The description cannot be left empty.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":238,"author":{"gitId":"jared-ee"},"content":"            } else {","lastModifiedDate":"2023-03-01"},{"lineNumber":239,"author":{"gitId":"jared-ee"},"content":"                String description \u003d input.substring(6);","lastModifiedDate":"2023-03-01"},{"lineNumber":240,"author":{"gitId":"jared-ee"},"content":"                try {","lastModifiedDate":"2023-03-01"},{"lineNumber":241,"author":{"gitId":"jared-ee"},"content":"                    LocalDateTime datetime \u003d DateTime.toLocalDateTime(description, formatter);","lastModifiedDate":"2023-03-15"},{"lineNumber":242,"author":{"gitId":"jared-ee"},"content":"                    output \u003d \"Tasks during this time period:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":243,"author":{"gitId":"jared-ee"},"content":"                    int it \u003d 1;","lastModifiedDate":"2023-03-15"},{"lineNumber":244,"author":{"gitId":"jared-ee"},"content":"                    for (Task task : tasks) {","lastModifiedDate":"2023-03-15"},{"lineNumber":245,"author":{"gitId":"jared-ee"},"content":"                        LocalDateTime dt1 \u003d task.getDateTime1();","lastModifiedDate":"2023-03-15"},{"lineNumber":246,"author":{"gitId":"jared-ee"},"content":"                        LocalDateTime dt2 \u003d task.getDateTime2();","lastModifiedDate":"2023-03-15"},{"lineNumber":247,"author":{"gitId":"jared-ee"},"content":"                        if (dt1.equals(datetime) || dt2.equals(datetime)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":248,"author":{"gitId":"jared-ee"},"content":"                            output \u003d output + it + \".\" + task.getType() + task.getDone() + task.getDescription();","lastModifiedDate":"2023-03-15"},{"lineNumber":249,"author":{"gitId":"jared-ee"},"content":"                            if ((task.getType()).equals(\"[T]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":250,"author":{"gitId":"jared-ee"},"content":"                                output \u003d output + \"\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":251,"author":{"gitId":"jared-ee"},"content":"                            }","lastModifiedDate":"2023-03-01"},{"lineNumber":252,"author":{"gitId":"jared-ee"},"content":"                            if ((task.getType()).equals(\"[D]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":253,"author":{"gitId":"jared-ee"},"content":"                                output \u003d output + \" (by: \" +","lastModifiedDate":"2023-03-01"},{"lineNumber":254,"author":{"gitId":"jared-ee"},"content":"                                        DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":255,"author":{"gitId":"jared-ee"},"content":"                            }","lastModifiedDate":"2023-03-01"},{"lineNumber":256,"author":{"gitId":"jared-ee"},"content":"                            if ((task.getType()).equals(\"[E]\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":257,"author":{"gitId":"jared-ee"},"content":"                                output \u003d output + \" (from \" +","lastModifiedDate":"2023-03-01"},{"lineNumber":258,"author":{"gitId":"jared-ee"},"content":"                                        DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime1()) + \" to: \";","lastModifiedDate":"2023-03-15"},{"lineNumber":259,"author":{"gitId":"jared-ee"},"content":"                                output \u003d output + DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm a\").format(task.getDateTime2()) + \")\\n\";","lastModifiedDate":"2023-03-15"},{"lineNumber":260,"author":{"gitId":"jared-ee"},"content":"                            }","lastModifiedDate":"2023-03-01"},{"lineNumber":261,"author":{"gitId":"jared-ee"},"content":"                            it++;","lastModifiedDate":"2023-03-15"},{"lineNumber":262,"author":{"gitId":"jared-ee"},"content":"                        }","lastModifiedDate":"2023-03-01"},{"lineNumber":263,"author":{"gitId":"jared-ee"},"content":"                    }","lastModifiedDate":"2023-03-01"},{"lineNumber":264,"author":{"gitId":"jared-ee"},"content":"                } catch (StringIndexOutOfBoundsException | DateTimeParseException | NumberFormatException e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":265,"author":{"gitId":"jared-ee"},"content":"                    output \u003d \"Oops! You\u0027ve entered an invalid date/time.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":266,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"Date format-\u003e YYYY-MM-DD or DD-MM-YYYY or MM-DD-YYYY\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":267,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"Time format-\u003e 18:00 or 06:00 PM\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":268,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"Example: 2015-10-23 03:34\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":269,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"If time is left out, I\u0027ll assume it to be 00:00.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":270,"author":{"gitId":"jared-ee"},"content":"                    output \u003d output + \"If date is left out, I\u0027ll assume it to be today.\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":271,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-03-01"},{"lineNumber":272,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":273,"author":{"gitId":"jared-ee"},"content":"        } else {","lastModifiedDate":"2023-03-01"},{"lineNumber":274,"author":{"gitId":"jared-ee"},"content":"            if (!input.startsWith(\"bye\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":275,"author":{"gitId":"jared-ee"},"content":"                output \u003d \"Oops! I\u0027m sorry, I don\u0027t understand that command. Try one of these instead:\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":276,"author":{"gitId":"jared-ee"},"content":"                output \u003d output + \"list   mark   unmark   todo   deadline   event   find   dated\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":277,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-01"},{"lineNumber":278,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":279,"author":{"gitId":"jared-ee"},"content":"        return output;","lastModifiedDate":"2023-03-01"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":281,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":283,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"jared-ee":280,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"jared-ee":2}},{"path":"src/main/java/Ignore.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"public class Ignore extends Exception {","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"jared-ee":2}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"public class Launcher {","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"jared-ee":10}},{"path":"src/main/java/List.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":" * List class for methods dealing with adding/removing from list","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"public class List {","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"     * Deletes ith task in list","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"     * @param tasks arraylist of tasks","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"     * @param i index of task in list to be deleted","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"     * @param line user input","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"    public static void delete(ArrayList\u003cTask\u003e tasks, int i, String line) throws DukeException {","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"        int number \u003d Integer.parseInt(line.substring(7));","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"        if (number \u003e i || number \u003c 1) {","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"            throw new DukeException();","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"        tasks.remove(number - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"     * Adds a todo task to the list","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"     * @param tasks arraylist of tasks","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"     * @param formatter for formatting LocalDateTime values to \"yyyy-MM-dd\u0027T\u0027HH:mm\"","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"     * @param line user input","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"    public static void todo(ArrayList\u003cTask\u003e tasks, DateTimeFormatter formatter, String line) throws DukeException {","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"        String description \u003d line.substring(4);","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"jared-ee"},"content":"            throw new DukeException();","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"jared-ee"},"content":"        LocalDateTime datetime1 \u003d DateTime.toLocalDateTime(\"2015-10-23T03:34\", formatter);","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"jared-ee"},"content":"        LocalDateTime datetime2 \u003d DateTime.toLocalDateTime(\"2015-10-23T03:34\", formatter);","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"jared-ee"},"content":"        tasks.add(new Task(description, \"[T]\", \"[ ]\", datetime1, datetime2));","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"jared-ee"},"content":"     * Adds a deadline task to the list","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"jared-ee"},"content":"     * @param tasks arraylist of tasks","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"jared-ee"},"content":"     * @param formatter for formatting LocalDateTime values to \"yyyy-MM-dd\u0027T\u0027HH:mm\"","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"jared-ee"},"content":"     * @param line user input","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"jared-ee"},"content":"    public static void deadline(ArrayList\u003cTask\u003e tasks, DateTimeFormatter formatter, String line) throws DukeException {","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"jared-ee"},"content":"        int slash \u003d line.indexOf(\"/\");","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"jared-ee"},"content":"        String description \u003d line.substring(8, slash - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"jared-ee"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"jared-ee"},"content":"            throw new DukeException();","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"jared-ee"},"content":"        String by \u003d line.substring(slash + 4);","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"jared-ee"},"content":"        LocalDateTime datetime1 \u003d DateTime.toLocalDateTime(by, formatter);","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"jared-ee"},"content":"        LocalDateTime datetime2 \u003d DateTime.toLocalDateTime(\"2015-10-23T03:34\", formatter);","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"jared-ee"},"content":"        tasks.add(new Task(description, \"[D]\", \"[ ]\", datetime1, datetime2));","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"jared-ee"},"content":"     * Adds an event task to the list","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"jared-ee"},"content":"     * @param tasks arraylist of tasks","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"jared-ee"},"content":"     * @param formatter for formatting LocalDateTime values to \"yyyy-MM-dd\u0027T\u0027HH:mm\"","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"jared-ee"},"content":"     * @param line user input","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"jared-ee"},"content":"    public static void event(ArrayList\u003cTask\u003e tasks, DateTimeFormatter formatter, String line) throws DukeException {","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"jared-ee"},"content":"        int slash1 \u003d line.indexOf(\"/\");","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"jared-ee"},"content":"        int slash2 \u003d line.indexOf(\"/\", slash1 + 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"jared-ee"},"content":"        String description \u003d line.substring(5, slash1 - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"jared-ee"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"jared-ee"},"content":"            throw new DukeException();","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"jared-ee"},"content":"        String from \u003d line.substring(slash1 + 6, slash2 - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"jared-ee"},"content":"        String to \u003d line.substring(slash2 + 4);","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"jared-ee"},"content":"        LocalDateTime datetime1 \u003d DateTime.toLocalDateTime(from, formatter);","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"jared-ee"},"content":"        LocalDateTime datetime2 \u003d DateTime.toLocalDateTime(to, formatter);","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"jared-ee"},"content":"        tasks.add(new Task(description, \"[E]\", \"[ ]\", datetime1, datetime2));","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"jared-ee":78}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"public class Main extends Application {","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"    @Override","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/MainWindow.fxml\"));","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"            stage.show();","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"            stage.setMinWidth(stage.getWidth());","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"            stage.setMinHeight(stage.getHeight());","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().windowOpened();","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"jared-ee":32}},{"path":"src/main/java/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"jared-ee":19}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"    @FXML","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"    @FXML","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"    @FXML","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"    private TextField userInput;","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"    @FXML","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"    private Button sendButton;","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"    private Duke duke;","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"    String filePath \u003d \"Duke.txt\";","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"    ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"    ArrayList\u003cString\u003e filecontents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\");","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"    int i \u003d 0;","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"jared-ee"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/DaUser.png\"));","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"jared-ee"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/DaDuke.png\"));","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"jared-ee"},"content":"    @FXML","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"jared-ee"},"content":"    public void initialize() {","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"jared-ee"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"jared-ee"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"jared-ee"},"content":"        duke \u003d d;","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"jared-ee"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"jared-ee"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"jared-ee"},"content":"    @FXML","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"jared-ee"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"jared-ee"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"jared-ee"},"content":"        i \u003d tasks.size();","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"jared-ee"},"content":"        String response \u003d duke.getResponse(input, filecontents, filePath, tasks, formatter, i);","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"jared-ee"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"jared-ee"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"jared-ee"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"jared-ee"},"content":"        );","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"jared-ee"},"content":"        if (input.startsWith(\"bye\")) {","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"jared-ee"},"content":"            System.exit(0);","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"jared-ee"},"content":"        userInput.clear();","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-04"},{"lineNumber":65,"author":{"gitId":"jared-ee"},"content":"     * Function that performs task to be done only when the program is first opened","lastModifiedDate":"2023-03-04"},{"lineNumber":66,"author":{"gitId":"jared-ee"},"content":"     * i.e. greeting the user and  readFileContents","lastModifiedDate":"2023-03-04"},{"lineNumber":67,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-04"},{"lineNumber":68,"author":{"gitId":"jared-ee"},"content":"    public void windowOpened() {","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"jared-ee"},"content":"        String text \u003d \" ____          _        \\n\"","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"jared-ee"},"content":"                + \"|  _ \\\\  _  _| |   _____ \\n\"","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"jared-ee"},"content":"                + \"| | | |  | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"jared-ee"},"content":"                + \"| |_| |  |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"jared-ee"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"jared-ee"},"content":"        text \u003d \"Hello from\\n\" + text + \"What can I do for you?\\n\";","lastModifiedDate":"2023-03-01"},{"lineNumber":75,"author":{"gitId":"jared-ee"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-03-01"},{"lineNumber":76,"author":{"gitId":"jared-ee"},"content":"                DialogBox.getDukeDialog(text, dukeImage)","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"jared-ee"},"content":"        );","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"jared-ee"},"content":"        try {","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"jared-ee"},"content":"            Storage.readFileContents(filePath, i, tasks, formatter);","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"jared-ee"},"content":"            i \u003d tasks.size();","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"jared-ee"},"content":"        } catch (FileNotFoundException | DukeException d) {","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"jared-ee"},"content":"            i \u003d 0;","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"jared-ee":86}},{"path":"src/main/java/Mark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"public class Mark {","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"     * Marks ith Task in tasks as done","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"     * @param i index of task to be marked","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"     * @param line user input line","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"     * @param tasks arraylist of tasks","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"    public static void mark(int i, String line, ArrayList\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"        int number \u003d Integer.parseInt(line.substring(5));","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"        if (number \u003e i || number \u003c 1) {","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"            throw new DukeException();","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"        Task task \u003d tasks.get(number - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"        String description \u003d task.getDescription();","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"        String type \u003d task.getType();","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"        LocalDateTime datetime1 \u003d task.getDateTime1();","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"        LocalDateTime datetime2 \u003d task.getDateTime2();","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"        tasks.set(number - 1, new Task(description, type, \"[X]\", datetime1, datetime2));","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"     * Marks ith Task in tasks as undone","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"     * @param i index of task to be unmarked","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"     * @param line user input line","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"     * @param tasks arraylist of tasks","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"    public static void unmark(int i, String line, ArrayList\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"        int number \u003d Integer.parseInt(line.substring(7));","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"jared-ee"},"content":"        if (number \u003e i || number \u003c 1) {","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"jared-ee"},"content":"            throw new DukeException();","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"jared-ee"},"content":"        Task task \u003d tasks.get(number - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"jared-ee"},"content":"        String description \u003d task.getDescription();","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"jared-ee"},"content":"        String type \u003d task.getType();","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"jared-ee"},"content":"        LocalDateTime datetime1 \u003d task.getDateTime1();","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"jared-ee"},"content":"        LocalDateTime datetime2 \u003d task.getDateTime2();","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"jared-ee"},"content":"        tasks.set(number - 1, new Task(description, type, \"[ ]\", datetime1, datetime2));","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"jared-ee":44}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.io.File;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":" * Storage class containing methods that allow reading and writing save data from a text file","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"public class Storage {","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"     * Writes content in command line to Duke.txt, if the command was valid AND altered the list","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"     * @param filePath text file to be written to (Duke.txt)","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"     * @param textToAdd text to be written","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"    public static void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"        fw.write(textToAdd + \"\\n\");","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"        fw.close();","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"     * reads all previous command lines stored in Duke.txt to restore list to its previous state upon","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"     * reopening Duke","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"     * @param filePath text file to be written to (Duke.txt)","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"     * @param i current index in tasks for Mark, where necessary","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"     * @param tasks arraylist of tasks","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"     * @param formatter for formatting LocalDateTime values to \"yyyy-MM-dd\u0027T\u0027HH:mm\"","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"jared-ee"},"content":"    //reads all previous command lines stored in Duke.txt to restore list to its previous state upon","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"jared-ee"},"content":"    //reopening Duke","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"jared-ee"},"content":"    public static void readFileContents(String filePath, int i, ArrayList\u003cTask\u003e tasks, DateTimeFormatter formatter) throws FileNotFoundException, DukeException {","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"jared-ee"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"jared-ee"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"jared-ee"},"content":"        String line;","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"jared-ee"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"jared-ee"},"content":"            line \u003d s.nextLine();","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"jared-ee"},"content":"            if (line.startsWith(\"todo\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"jared-ee"},"content":"                List.todo(tasks, formatter, line);","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"jared-ee"},"content":"                i++;","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"jared-ee"},"content":"            } else if (line.startsWith(\"deadline\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"jared-ee"},"content":"                List.deadline(tasks, formatter, line);","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"jared-ee"},"content":"                i++;","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"jared-ee"},"content":"            } else if (line.startsWith(\"event\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"jared-ee"},"content":"                List.event(tasks, formatter, line);","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"jared-ee"},"content":"                i++;","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"jared-ee"},"content":"            } else if (line.startsWith(\"delete\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"jared-ee"},"content":"                List.delete(tasks, i, line);","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"jared-ee"},"content":"            } else if (line.startsWith(\"mark\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"jared-ee"},"content":"                Mark.mark(i, line, tasks);","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"jared-ee"},"content":"            } else if (line.startsWith(\"unmark\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"jared-ee"},"content":"                Mark.unmark(i, line, tasks);","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"jared-ee":60}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":" * Task class containing the basic elements of a task","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":" * description is a string description of the task itself","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":" * type is a string of either \"[T]\", \"[D]\" or \"[E]\" to denote the category of task (todo/event/deadline)","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":" * done is a string of either \"[X]\" or \"[ ]\" to denote if the task has been completed","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":" * DateTime1 and DateTime2 contain the 2 (or less) dates and times tied to each task","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"public class Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"    protected String description;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"    protected String type;","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"    protected String done;","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"    protected LocalDateTime DateTime1;","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"    protected LocalDateTime DateTime2;","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"     * Default Constructor","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"    public Task(String description, String type, String done, LocalDateTime DateTime1, LocalDateTime DateTime2) {","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"        this.done \u003d done;","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"        this.DateTime1 \u003d DateTime1;","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"        this.DateTime2 \u003d DateTime2;","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"        return description;","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"jared-ee"},"content":"    public String getType() {","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"jared-ee"},"content":"        return type;","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"jared-ee"},"content":"    public String getDone() {","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"jared-ee"},"content":"        return done;","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"jared-ee"},"content":"    public LocalDateTime getDateTime1() {","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"jared-ee"},"content":"        return DateTime1;","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"jared-ee"},"content":"    public LocalDateTime getDateTime2() {","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"jared-ee"},"content":"        return DateTime2;","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"jared-ee":49}},{"path":"src/main/java/level0.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"public class level0 {","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jared-ee":7}},{"path":"src/main/java/level1.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"public class level1 {","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"        String line;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"        while (true) {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"            Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"            line \u003d in.nextLine();","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"            if (line.equals(\"bye\")){","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"                break;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"            System.out.println(line);","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"jared-ee":18}},{"path":"src/main/java/level2.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"public class level2 {","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"    public static void main(String[] args){","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"        String line;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"        String[] lines \u003d new String[100];","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"        boolean[] done \u003d new boolean[100];","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"        int i \u003d 0;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"        while (true) {","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"            Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"            line \u003d in.nextLine();","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"            if (line.equals(\"bye\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"                break;","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"            if (line.equals(\"list\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"                for (int j \u003d 0; j \u003c i; j++) {","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"                    System.out.print(j+1);","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"                    System.out.println(\". \" + lines[j]);","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"            else {","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"                lines[i] \u003d line;","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"                i++;","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"                System.out.println(\"added: \" + line);","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"jared-ee":31}},{"path":"src/main/java/level3.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jared-ee"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"jared-ee"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"jared-ee"},"content":"public class level3 {","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"jared-ee"},"content":"    public static void main(String[] args){","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"jared-ee"},"content":"        String line;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"jared-ee"},"content":"        String[] lines \u003d new String[100];","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"jared-ee"},"content":"        boolean[] done \u003d new boolean[100];","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"jared-ee"},"content":"        int i \u003d 0;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"jared-ee"},"content":"        while (true) {","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jared-ee"},"content":"            Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"jared-ee"},"content":"            line \u003d in.nextLine();","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"jared-ee"},"content":"            if (line.equals(\"bye\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"jared-ee"},"content":"                break;","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"jared-ee"},"content":"            if (line.equals(\"list\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jared-ee"},"content":"                for (int j \u003d 0; j \u003c i; j++) {","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jared-ee"},"content":"                    System.out.println(\"Here are the tasks in your list: \");","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"jared-ee"},"content":"                    System.out.print(j+1);","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"jared-ee"},"content":"                    if (done[j]){","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"jared-ee"},"content":"                        System.out.print(\".[X] \");","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"jared-ee"},"content":"                    }","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"jared-ee"},"content":"                    if (!done[j]){","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"jared-ee"},"content":"                        System.out.print(\".[ ] \");","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"jared-ee"},"content":"                    }","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"jared-ee"},"content":"                    System.out.println(lines[j]);","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"jared-ee"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"jared-ee"},"content":"            else if (line.startsWith(\"mark\")){","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"jared-ee"},"content":"                char numbchar \u003d line.charAt(line.length() - 1);","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"jared-ee"},"content":"                int number \u003d Character.getNumericValue(numbchar) - 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"jared-ee"},"content":"                done[number] \u003d true;","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"jared-ee"},"content":"                System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"jared-ee"},"content":"                System.out.println(\"  [X] \" + lines[number]);","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"jared-ee"},"content":"            else if (line.startsWith(\"unmark\")){","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"jared-ee"},"content":"                char numbchar \u003d line.charAt(line.length() - 1);","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"jared-ee"},"content":"                int number \u003d Character.getNumericValue(numbchar) - 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"jared-ee"},"content":"                done[number] \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"jared-ee"},"content":"                System.out.println(\"Ok, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"jared-ee"},"content":"                System.out.println(\"  [ ] \" + lines[number]);","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"jared-ee"},"content":"            else {","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"jared-ee"},"content":"                lines[i] \u003d line;","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"jared-ee"},"content":"                done[i] \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"jared-ee"},"content":"                i++;","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"jared-ee"},"content":"                System.out.println(\"added: \" + line);","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"jared-ee"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"jared-ee"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"jared-ee"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"jared-ee"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"jared-ee"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"jared-ee":53}}]
